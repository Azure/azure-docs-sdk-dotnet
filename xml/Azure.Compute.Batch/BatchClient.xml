<Type Name="BatchClient" FullName="Azure.Compute.Batch.BatchClient">
  <TypeSignature Language="C#" Value="public class BatchClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BatchClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Compute.Batch.BatchClient" />
  <TypeSignature Language="VB.NET" Value="Public Class BatchClient" />
  <TypeSignature Language="F#" Value="type BatchClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Compute.Batch</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Batch service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BatchClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of BatchClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BatchClient (Uri endpoint, Azure.AzureNamedKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureNamedKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.#ctor(System.Uri,Azure.AzureNamedKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureNamedKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Compute.Batch.BatchClient : Uri * Azure.AzureNamedKeyCredential -&gt; Azure.Compute.Batch.BatchClient" Usage="new Azure.Compute.Batch.BatchClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureNamedKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of BatchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BatchClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Compute.Batch.BatchClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Compute.Batch.BatchClient" Usage="new Azure.Compute.Batch.BatchClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of BatchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BatchClient (Uri endpoint, Azure.AzureNamedKeyCredential credential, Azure.Compute.Batch.BatchClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureNamedKeyCredential credential, class Azure.Compute.Batch.BatchClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.#ctor(System.Uri,Azure.AzureNamedKeyCredential,Azure.Compute.Batch.BatchClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureNamedKeyCredential, options As BatchClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Compute.Batch.BatchClient : Uri * Azure.AzureNamedKeyCredential * Azure.Compute.Batch.BatchClientOptions -&gt; Azure.Compute.Batch.BatchClient" Usage="new Azure.Compute.Batch.BatchClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureNamedKeyCredential" />
        <Parameter Name="options" Type="Azure.Compute.Batch.BatchClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of BatchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BatchClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Compute.Batch.BatchClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Compute.Batch.BatchClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Compute.Batch.BatchClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As BatchClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Compute.Batch.BatchClient : Uri * Azure.Core.TokenCredential * Azure.Compute.Batch.BatchClientOptions -&gt; Azure.Compute.Batch.BatchClient" Usage="new Azure.Compute.Batch.BatchClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Compute.Batch.BatchClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> Batch account endpoint (for example: https://batchaccount.eastus2.batch.azure.com). </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of BatchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CancelCertificateDeletion">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelCertificateDeletion (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelCertificateDeletion(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CancelCertificateDeletion(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelCertificateDeletion (thumbprintAlgorithm As String, thumbprint As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelCertificateDeletion : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelCertificateDeletion : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CancelCertificateDeletion (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancels a failed deletion of a Certificate from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CancelCertificateDeletion.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.CancelCertificateDeletion("sha1", "0123456789abcdef0123456789abcdef01234567");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelCertificateDeletionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelCertificateDeletionAsync (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelCertificateDeletionAsync(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CancelCertificateDeletionAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelCertificateDeletionAsync (thumbprintAlgorithm As String, thumbprint As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelCertificateDeletionAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelCertificateDeletionAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CancelCertificateDeletionAsync (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Cancels a failed deletion of a Certificate from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CancelCertificateDeletionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.CancelCertificateDeletionAsync("sha1", "0123456789abcdef0123456789abcdef01234567");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateCertificate (Azure.Compute.Batch.BatchCertificate certificate, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateCertificate(class Azure.Compute.Batch.BatchCertificate certificate, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateCertificate(Azure.Compute.Batch.BatchCertificate,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCertificate (certificate As BatchCertificate, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateCertificate : Azure.Compute.Batch.BatchCertificate * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CreateCertificate : Azure.Compute.Batch.BatchCertificate * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.CreateCertificate (certificate, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="Azure.Compute.Batch.BatchCertificate" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificate"> The Certificate to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Certificate to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> is null. </exception>
        <example>
This sample shows how to call CreateCertificate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchCertificate certificate = new BatchCertificate("0123456789abcdef0123456789abcdef01234567", "sha1", "#####...")
{
    CertificateFormat = BatchCertificateFormat.Pfx,
    Password = "<ExamplePassword>",
};
Response response = client.CreateCertificate(certificate);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateCertificate (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateCertificate(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateCertificate(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCertificate (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateCertificate : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateCertificate : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreateCertificate (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Certificate to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateCertificate(Azure.Compute.Batch.BatchCertificate,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateCertificate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    thumbprintAlgorithm = "sha1",
    thumbprint = "0123456789abcdef0123456789abcdef01234567",
    data = "#####...",
    certificateFormat = "pfx",
    password = "<ExamplePassword>",
});
Response response = client.CreateCertificate(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateCertificateAsync (Azure.Compute.Batch.BatchCertificate certificate, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateCertificateAsync(class Azure.Compute.Batch.BatchCertificate certificate, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateCertificateAsync(Azure.Compute.Batch.BatchCertificate,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCertificateAsync (certificate As BatchCertificate, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateCertificateAsync : Azure.Compute.Batch.BatchCertificate * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateCertificateAsync : Azure.Compute.Batch.BatchCertificate * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateCertificateAsync (certificate, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="certificate" Type="Azure.Compute.Batch.BatchCertificate" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="certificate"> The Certificate to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Certificate to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="certificate" /> is null. </exception>
        <example>
This sample shows how to call CreateCertificateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchCertificate certificate = new BatchCertificate("0123456789abcdef0123456789abcdef01234567", "sha1", "#####...")
{
    CertificateFormat = BatchCertificateFormat.Pfx,
    Password = "<ExamplePassword>",
};
Response response = await client.CreateCertificateAsync(certificate);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateCertificateAsync (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateCertificateAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateCertificateAsync(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCertificateAsync (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateCertificateAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateCertificateAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateCertificateAsync (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Certificate to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateCertificateAsync(Azure.Compute.Batch.BatchCertificate,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateCertificateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    thumbprintAlgorithm = "sha1",
    thumbprint = "0123456789abcdef0123456789abcdef01234567",
    data = "#####...",
    certificateFormat = "pfx",
    password = "<ExamplePassword>",
});
Response response = await client.CreateCertificateAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateJob (Azure.Compute.Batch.BatchJobCreateContent job, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateJob(class Azure.Compute.Batch.BatchJobCreateContent job, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJob(Azure.Compute.Batch.BatchJobCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJob (job As BatchJobCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateJob : Azure.Compute.Batch.BatchJobCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CreateJob : Azure.Compute.Batch.BatchJobCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.CreateJob (job, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="job" Type="Azure.Compute.Batch.BatchJobCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="job"> The Job to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Job to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>
            The Batch service supports two ways to control the work done as part of a Job.
            In the first approach, the user specifies a Job Manager Task. The Batch service
            launches this Task when it is ready to start the Job. The Job Manager Task
            controls all other Tasks that run under this Job, by using the Task APIs. In
            the second approach, the user directly controls the execution of Tasks under an
            active Job, by using the Task APIs. Also note: when naming Jobs, avoid
            including sensitive information such as user names or secret project names.
            This information may appear in telemetry logs accessible to Microsoft Support
            engineers.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="job" /> is null. </exception>
        <example>
This sample shows how to call CreateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobCreateContent job = new BatchJobCreateContent("jobId", new BatchPoolInfo
{
    PoolId = "poolId",
})
{
    Priority = 0,
};
Response response = client.CreateJob(job);
]]></code>
This sample shows how to call CreateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobCreateContent job = new BatchJobCreateContent("jobId", new BatchPoolInfo
{
    AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.Job)
    {
        AutoPoolIdPrefix = "mypool",
        Pool = new BatchPoolSpecification("STANDARD_D2S_V3")
        {
            VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
            {
                Publisher = "MicrosoftWindowsServer",
                Offer = "WindowsServer",
                Sku = "2016-datacenter-smalldisk",
                Version = "latest",
            }, "batch.node.windows amd64")
            {
                WindowsConfiguration = new WindowsConfiguration
                {
                    EnableAutomaticUpdates = false,
                },
                NodePlacementConfiguration = new BatchNodePlacementConfiguration
                {
                    Policy = BatchNodePlacementPolicyType.Zonal,
                },
            },
            TaskSlotsPerNode = 2,
            TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
            ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
            TargetDedicatedNodes = 3,
            TargetLowPriorityNodes = 0,
            EnableAutoScale = false,
            EnableInterNodeCommunication = true,
            StartTask = new BatchStartTask("myprogram2.exe")
            {
                ResourceFiles = {new ResourceFile
                {
                    HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                    FilePath = "myprogram2.exe",
                }},
                EnvironmentSettings = {new EnvironmentSetting("myvariable")
                {
                    Value = "myvalue",
                }},
                UserIdentity = new UserIdentity
                {
                    AutoUser = new AutoUserSpecification
                    {
                        Scope = AutoUserScope.Task,
                        ElevationLevel = ElevationLevel.Admin,
                    },
                },
                MaxTaskRetryCount = 2,
                WaitForSuccess = true,
            },
            CertificateReferences = {new BatchCertificateReference("0123456789abcdef0123456789abcdef01234567", "sha1")
            {
                StoreLocation = BatchCertificateStoreLocation.LocalMachine,
                StoreName = "Root",
                Visibility = {BatchCertificateVisibility.Task},
            }},
            Metadata = { new MetadataItem("myproperty", "myvalue") },
            TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
        },
    },
})
{
    Priority = 100,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = -1,
    },
    JobManagerTask = new BatchJobManagerTask("taskId", "myprogram.exe")
    {
        ResourceFiles = {new ResourceFile
        {
            HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
            FilePath = "myprogram.exe",
        }, new ResourceFile
        {
            StorageContainerUrl = "http://mystorage1.blob.core.windows.net/data?sas",
            FilePath = "datafolder",
        }},
        EnvironmentSettings = {new EnvironmentSetting("myvariable")
        {
            Value = "myvalue",
        }},
        Constraints = new BatchTaskConstraints
        {
            MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
            RetentionTime = XmlConvert.ToTimeSpan("PT1H"),
            MaxTaskRetryCount = 0,
        },
        RequiredSlots = 2,
        KillJobOnCompletion = false,
        UserIdentity = new UserIdentity
        {
            AutoUser = new AutoUserSpecification
            {
                Scope = AutoUserScope.Task,
                ElevationLevel = ElevationLevel.Admin,
            },
        },
        RunExclusive = true,
    },
    Metadata = { new MetadataItem("myproperty", "myvalue") },
};
Response response = client.CreateJob(job);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateJob (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateJob(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJob(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJob (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateJob : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateJob : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreateJob (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Job to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateJob(Azure.Compute.Batch.BatchJobCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobId",
    priority = 0,
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = client.CreateJob(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobId",
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    jobManagerTask = new
    {
        id = "taskId",
        commandLine = "myprogram.exe",
        resourceFiles = new object[]
        {
            new
            {
                httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
                filePath = "myprogram.exe",
            },
            new
            {
                storageContainerUrl = "http://mystorage1.blob.core.windows.net/data?sas",
                filePath = "datafolder",
            }
        },
        environmentSettings = new object[]
        {
            new
            {
                name = "myvariable",
                value = "myvalue",
            }
        },
        constraints = new
        {
            maxWallClockTime = "PT1H",
            maxTaskRetryCount = 0,
            retentionTime = "PT1H",
        },
        requiredSlots = 2,
        killJobOnCompletion = false,
        userIdentity = new
        {
            autoUser = new
            {
                scope = "task",
                elevationLevel = "admin",
            },
        },
        runExclusive = true,
    },
    poolInfo = new
    {
        autoPoolSpecification = new
        {
            autoPoolIdPrefix = "mypool",
            poolLifetimeOption = "job",
            pool = new
            {
                vmSize = "STANDARD_D2S_V3",
                virtualMachineConfiguration = new
                {
                    imageReference = new
                    {
                        publisher = "MicrosoftWindowsServer",
                        offer = "WindowsServer",
                        sku = "2016-datacenter-smalldisk",
                        version = "latest",
                    },
                    nodeAgentSKUId = "batch.node.windows amd64",
                    windowsConfiguration = new
                    {
                        enableAutomaticUpdates = false,
                    },
                    nodePlacementConfiguration = new
                    {
                        policy = "zonal",
                    },
                },
                resizeTimeout = "PT15M",
                targetDedicatedNodes = 3,
                targetLowPriorityNodes = 0,
                taskSlotsPerNode = 2,
                taskSchedulingPolicy = new
                {
                    nodeFillType = "spread",
                },
                enableAutoScale = false,
                enableInterNodeCommunication = true,
                startTask = new
                {
                    commandLine = "myprogram2.exe",
                    resourceFiles = new object[]
                    {
                        new
                        {
                            httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                            filePath = "myprogram2.exe",
                        }
                    },
                    environmentSettings = new object[]
                    {
                        new
                        {
                            name = "myvariable",
                            value = "myvalue",
                        }
                    },
                    userIdentity = new
                    {
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "admin",
                        },
                    },
                    maxTaskRetryCount = 2,
                    waitForSuccess = true,
                },
                certificateReferences = new object[]
                {
                    new
                    {
                        thumbprint = "0123456789abcdef0123456789abcdef01234567",
                        thumbprintAlgorithm = "sha1",
                        storeLocation = "localmachine",
                        storeName = "Root",
                        visibility = new object[]
                        {
                            "task"
                        },
                    }
                },
                metadata = new object[]
                {
                    new
                    {
                        name = "myproperty",
                        value = "myvalue",
                    }
                },
                targetNodeCommunicationMode = "default",
            },
        },
    },
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
});
Response response = client.CreateJob(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateJobAsync (Azure.Compute.Batch.BatchJobCreateContent job, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateJobAsync(class Azure.Compute.Batch.BatchJobCreateContent job, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJobAsync(Azure.Compute.Batch.BatchJobCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobAsync (job As BatchJobCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateJobAsync : Azure.Compute.Batch.BatchJobCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateJobAsync : Azure.Compute.Batch.BatchJobCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateJobAsync (job, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="job" Type="Azure.Compute.Batch.BatchJobCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="job"> The Job to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Job to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>
            The Batch service supports two ways to control the work done as part of a Job.
            In the first approach, the user specifies a Job Manager Task. The Batch service
            launches this Task when it is ready to start the Job. The Job Manager Task
            controls all other Tasks that run under this Job, by using the Task APIs. In
            the second approach, the user directly controls the execution of Tasks under an
            active Job, by using the Task APIs. Also note: when naming Jobs, avoid
            including sensitive information such as user names or secret project names.
            This information may appear in telemetry logs accessible to Microsoft Support
            engineers.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="job" /> is null. </exception>
        <example>
This sample shows how to call CreateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobCreateContent job = new BatchJobCreateContent("jobId", new BatchPoolInfo
{
    PoolId = "poolId",
})
{
    Priority = 0,
};
Response response = await client.CreateJobAsync(job);
]]></code>
This sample shows how to call CreateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobCreateContent job = new BatchJobCreateContent("jobId", new BatchPoolInfo
{
    AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.Job)
    {
        AutoPoolIdPrefix = "mypool",
        Pool = new BatchPoolSpecification("STANDARD_D2S_V3")
        {
            VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
            {
                Publisher = "MicrosoftWindowsServer",
                Offer = "WindowsServer",
                Sku = "2016-datacenter-smalldisk",
                Version = "latest",
            }, "batch.node.windows amd64")
            {
                WindowsConfiguration = new WindowsConfiguration
                {
                    EnableAutomaticUpdates = false,
                },
                NodePlacementConfiguration = new BatchNodePlacementConfiguration
                {
                    Policy = BatchNodePlacementPolicyType.Zonal,
                },
            },
            TaskSlotsPerNode = 2,
            TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
            ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
            TargetDedicatedNodes = 3,
            TargetLowPriorityNodes = 0,
            EnableAutoScale = false,
            EnableInterNodeCommunication = true,
            StartTask = new BatchStartTask("myprogram2.exe")
            {
                ResourceFiles = {new ResourceFile
                {
                    HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                    FilePath = "myprogram2.exe",
                }},
                EnvironmentSettings = {new EnvironmentSetting("myvariable")
                {
                    Value = "myvalue",
                }},
                UserIdentity = new UserIdentity
                {
                    AutoUser = new AutoUserSpecification
                    {
                        Scope = AutoUserScope.Task,
                        ElevationLevel = ElevationLevel.Admin,
                    },
                },
                MaxTaskRetryCount = 2,
                WaitForSuccess = true,
            },
            CertificateReferences = {new BatchCertificateReference("0123456789abcdef0123456789abcdef01234567", "sha1")
            {
                StoreLocation = BatchCertificateStoreLocation.LocalMachine,
                StoreName = "Root",
                Visibility = {BatchCertificateVisibility.Task},
            }},
            Metadata = { new MetadataItem("myproperty", "myvalue") },
            TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
        },
    },
})
{
    Priority = 100,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = -1,
    },
    JobManagerTask = new BatchJobManagerTask("taskId", "myprogram.exe")
    {
        ResourceFiles = {new ResourceFile
        {
            HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
            FilePath = "myprogram.exe",
        }, new ResourceFile
        {
            StorageContainerUrl = "http://mystorage1.blob.core.windows.net/data?sas",
            FilePath = "datafolder",
        }},
        EnvironmentSettings = {new EnvironmentSetting("myvariable")
        {
            Value = "myvalue",
        }},
        Constraints = new BatchTaskConstraints
        {
            MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
            RetentionTime = XmlConvert.ToTimeSpan("PT1H"),
            MaxTaskRetryCount = 0,
        },
        RequiredSlots = 2,
        KillJobOnCompletion = false,
        UserIdentity = new UserIdentity
        {
            AutoUser = new AutoUserSpecification
            {
                Scope = AutoUserScope.Task,
                ElevationLevel = ElevationLevel.Admin,
            },
        },
        RunExclusive = true,
    },
    Metadata = { new MetadataItem("myproperty", "myvalue") },
};
Response response = await client.CreateJobAsync(job);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateJobAsync (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateJobAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJobAsync(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobAsync (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateJobAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateJobAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateJobAsync (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Job to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateJobAsync(Azure.Compute.Batch.BatchJobCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobId",
    priority = 0,
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = await client.CreateJobAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobId",
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    jobManagerTask = new
    {
        id = "taskId",
        commandLine = "myprogram.exe",
        resourceFiles = new object[]
        {
            new
            {
                httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
                filePath = "myprogram.exe",
            },
            new
            {
                storageContainerUrl = "http://mystorage1.blob.core.windows.net/data?sas",
                filePath = "datafolder",
            }
        },
        environmentSettings = new object[]
        {
            new
            {
                name = "myvariable",
                value = "myvalue",
            }
        },
        constraints = new
        {
            maxWallClockTime = "PT1H",
            maxTaskRetryCount = 0,
            retentionTime = "PT1H",
        },
        requiredSlots = 2,
        killJobOnCompletion = false,
        userIdentity = new
        {
            autoUser = new
            {
                scope = "task",
                elevationLevel = "admin",
            },
        },
        runExclusive = true,
    },
    poolInfo = new
    {
        autoPoolSpecification = new
        {
            autoPoolIdPrefix = "mypool",
            poolLifetimeOption = "job",
            pool = new
            {
                vmSize = "STANDARD_D2S_V3",
                virtualMachineConfiguration = new
                {
                    imageReference = new
                    {
                        publisher = "MicrosoftWindowsServer",
                        offer = "WindowsServer",
                        sku = "2016-datacenter-smalldisk",
                        version = "latest",
                    },
                    nodeAgentSKUId = "batch.node.windows amd64",
                    windowsConfiguration = new
                    {
                        enableAutomaticUpdates = false,
                    },
                    nodePlacementConfiguration = new
                    {
                        policy = "zonal",
                    },
                },
                resizeTimeout = "PT15M",
                targetDedicatedNodes = 3,
                targetLowPriorityNodes = 0,
                taskSlotsPerNode = 2,
                taskSchedulingPolicy = new
                {
                    nodeFillType = "spread",
                },
                enableAutoScale = false,
                enableInterNodeCommunication = true,
                startTask = new
                {
                    commandLine = "myprogram2.exe",
                    resourceFiles = new object[]
                    {
                        new
                        {
                            httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                            filePath = "myprogram2.exe",
                        }
                    },
                    environmentSettings = new object[]
                    {
                        new
                        {
                            name = "myvariable",
                            value = "myvalue",
                        }
                    },
                    userIdentity = new
                    {
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "admin",
                        },
                    },
                    maxTaskRetryCount = 2,
                    waitForSuccess = true,
                },
                certificateReferences = new object[]
                {
                    new
                    {
                        thumbprint = "0123456789abcdef0123456789abcdef01234567",
                        thumbprintAlgorithm = "sha1",
                        storeLocation = "localmachine",
                        storeName = "Root",
                        visibility = new object[]
                        {
                            "task"
                        },
                    }
                },
                metadata = new object[]
                {
                    new
                    {
                        name = "myproperty",
                        value = "myvalue",
                    }
                },
                targetNodeCommunicationMode = "default",
            },
        },
    },
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
});
Response response = await client.CreateJobAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateJobSchedule (Azure.Compute.Batch.BatchJobScheduleCreateContent jobSchedule, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateJobSchedule(class Azure.Compute.Batch.BatchJobScheduleCreateContent jobSchedule, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJobSchedule(Azure.Compute.Batch.BatchJobScheduleCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobSchedule (jobSchedule As BatchJobScheduleCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateJobSchedule : Azure.Compute.Batch.BatchJobScheduleCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CreateJobSchedule : Azure.Compute.Batch.BatchJobScheduleCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.CreateJobSchedule (jobSchedule, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobSchedule" Type="Azure.Compute.Batch.BatchJobScheduleCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobSchedule"> The Job Schedule to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Job Schedule to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobSchedule" /> is null. </exception>
        <example>
This sample shows how to call CreateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("jobScheduleId", new BatchJobScheduleConfiguration
{
    RecurrenceInterval = XmlConvert.ToTimeSpan("PT5M"),
}, new BatchJobSpecification(new BatchPoolInfo
{
    PoolId = "poolId",
}));
Response response = client.CreateJobSchedule(jobSchedule);
]]></code>
This sample shows how to call CreateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("jobScheduleId", new BatchJobScheduleConfiguration
{
    DoNotRunUntil = DateTimeOffset.Parse("2014-09-10T02:30:00.000Z"),
    DoNotRunAfter = DateTimeOffset.Parse("2014-09-10T06:30:00.000Z"),
    StartWindow = XmlConvert.ToTimeSpan("PT1M"),
    RecurrenceInterval = XmlConvert.ToTimeSpan("PT5M"),
}, new BatchJobSpecification(new BatchPoolInfo
{
    AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
    {
        AutoPoolIdPrefix = "mypool",
        Pool = new BatchPoolSpecification("STANDARD_D2S_V3")
        {
            VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
            {
                Publisher = "MicrosoftWindowsServer",
                Offer = "WindowsServer",
                Sku = "2016-datacenter-smalldisk",
                Version = "latest",
            }, "batch.node.windows amd64")
            {
                WindowsConfiguration = new WindowsConfiguration
                {
                    EnableAutomaticUpdates = false,
                },
                NodePlacementConfiguration = new BatchNodePlacementConfiguration
                {
                    Policy = BatchNodePlacementPolicyType.Zonal,
                },
            },
            TaskSlotsPerNode = 2,
            TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
            ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
            TargetDedicatedNodes = 3,
            TargetLowPriorityNodes = 0,
            EnableAutoScale = false,
            EnableInterNodeCommunication = true,
            StartTask = new BatchStartTask("myprogram2.exe")
            {
                ResourceFiles = {new ResourceFile
                {
                    HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                    FilePath = "myprogram2.exe",
                }},
                EnvironmentSettings = {new EnvironmentSetting("myvariable")
                {
                    Value = "myvalue",
                }},
                UserIdentity = new UserIdentity
                {
                    AutoUser = new AutoUserSpecification
                    {
                        Scope = AutoUserScope.Task,
                        ElevationLevel = ElevationLevel.Admin,
                    },
                },
                MaxTaskRetryCount = 2,
                WaitForSuccess = true,
            },
            CertificateReferences = {new BatchCertificateReference("0123456789abcdef0123456789abcdef01234567", "sha1")
            {
                StoreLocation = BatchCertificateStoreLocation.LocalMachine,
                StoreName = "Root",
                Visibility = {BatchCertificateVisibility.Task},
            }},
            Metadata = { new MetadataItem("myproperty", "myvalue") },
            TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
        },
    },
})
{
    Priority = 100,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = -1,
    },
    JobManagerTask = new BatchJobManagerTask("mytask1", "myprogram.exe")
    {
        ResourceFiles = {new ResourceFile
        {
            HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
            FilePath = "myprogram.exe",
        }, new ResourceFile
        {
            HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/test.txt?sas",
            FilePath = "test.txt",
        }},
        EnvironmentSettings = {new EnvironmentSetting("myvariable")
        {
            Value = "myvalue",
        }},
        Constraints = new BatchTaskConstraints
        {
            MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
            RetentionTime = XmlConvert.ToTimeSpan("PT1H"),
            MaxTaskRetryCount = 0,
        },
        RequiredSlots = 2,
        KillJobOnCompletion = true,
        UserIdentity = new UserIdentity
        {
            AutoUser = new AutoUserSpecification
            {
                Scope = AutoUserScope.Task,
                ElevationLevel = ElevationLevel.NonAdmin,
            },
        },
        RunExclusive = true,
    },
})
{
    Metadata = { new MetadataItem("myproperty", "myvalue") },
};
Response response = client.CreateJobSchedule(jobSchedule);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateJobSchedule (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateJobSchedule(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJobSchedule(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobSchedule (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateJobSchedule : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateJobSchedule : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreateJobSchedule (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Job Schedule to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateJobSchedule(Azure.Compute.Batch.BatchJobScheduleCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobScheduleId",
    schedule = new
    {
        recurrenceInterval = "PT5M",
    },
    jobSpecification = new
    {
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = client.CreateJobSchedule(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobScheduleId",
    schedule = new
    {
        doNotRunUntil = "2014-09-10T02:30:00.000Z",
        doNotRunAfter = "2014-09-10T06:30:00.000Z",
        startWindow = "PT1M",
        recurrenceInterval = "PT5M",
    },
    jobSpecification = new
    {
        priority = 100,
        constraints = new
        {
            maxWallClockTime = "PT1H",
            maxTaskRetryCount = -1,
        },
        jobManagerTask = new
        {
            id = "mytask1",
            commandLine = "myprogram.exe",
            resourceFiles = new object[]
            {
                new
                {
                    httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
                    filePath = "myprogram.exe",
                },
                new
                {
                    httpUrl = "http://mystorage1.blob.core.windows.net/scripts/test.txt?sas",
                    filePath = "test.txt",
                }
            },
            environmentSettings = new object[]
            {
                new
                {
                    name = "myvariable",
                    value = "myvalue",
                }
            },
            constraints = new
            {
                maxWallClockTime = "PT1H",
                maxTaskRetryCount = 0,
                retentionTime = "PT1H",
            },
            requiredSlots = 2,
            killJobOnCompletion = true,
            userIdentity = new
            {
                autoUser = new
                {
                    scope = "task",
                    elevationLevel = "nonadmin",
                },
            },
            runExclusive = true,
        },
        poolInfo = new
        {
            autoPoolSpecification = new
            {
                autoPoolIdPrefix = "mypool",
                poolLifetimeOption = "jobschedule",
                pool = new
                {
                    vmSize = "STANDARD_D2S_V3",
                    virtualMachineConfiguration = new
                    {
                        imageReference = new
                        {
                            publisher = "MicrosoftWindowsServer",
                            offer = "WindowsServer",
                            sku = "2016-datacenter-smalldisk",
                            version = "latest",
                        },
                        nodeAgentSKUId = "batch.node.windows amd64",
                        windowsConfiguration = new
                        {
                            enableAutomaticUpdates = false,
                        },
                        nodePlacementConfiguration = new
                        {
                            policy = "zonal",
                        },
                    },
                    resizeTimeout = "PT15M",
                    targetDedicatedNodes = 3,
                    targetLowPriorityNodes = 0,
                    taskSlotsPerNode = 2,
                    taskSchedulingPolicy = new
                    {
                        nodeFillType = "spread",
                    },
                    enableAutoScale = false,
                    enableInterNodeCommunication = true,
                    startTask = new
                    {
                        commandLine = "myprogram2.exe",
                        resourceFiles = new object[]
                        {
                            new
                            {
                                httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                                filePath = "myprogram2.exe",
                            }
                        },
                        environmentSettings = new object[]
                        {
                            new
                            {
                                name = "myvariable",
                                value = "myvalue",
                            }
                        },
                        userIdentity = new
                        {
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "admin",
                            },
                        },
                        maxTaskRetryCount = 2,
                        waitForSuccess = true,
                    },
                    certificateReferences = new object[]
                    {
                        new
                        {
                            thumbprint = "0123456789abcdef0123456789abcdef01234567",
                            thumbprintAlgorithm = "sha1",
                            storeLocation = "localmachine",
                            storeName = "Root",
                            visibility = new object[]
                            {
                                "task"
                            },
                        }
                    },
                    metadata = new object[]
                    {
                        new
                        {
                            name = "myproperty",
                            value = "myvalue",
                        }
                    },
                    targetNodeCommunicationMode = "default",
                },
            },
        },
    },
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
});
Response response = client.CreateJobSchedule(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateJobScheduleAsync (Azure.Compute.Batch.BatchJobScheduleCreateContent jobSchedule, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateJobScheduleAsync(class Azure.Compute.Batch.BatchJobScheduleCreateContent jobSchedule, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJobScheduleAsync(Azure.Compute.Batch.BatchJobScheduleCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobScheduleAsync (jobSchedule As BatchJobScheduleCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateJobScheduleAsync : Azure.Compute.Batch.BatchJobScheduleCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateJobScheduleAsync : Azure.Compute.Batch.BatchJobScheduleCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateJobScheduleAsync (jobSchedule, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobSchedule" Type="Azure.Compute.Batch.BatchJobScheduleCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobSchedule"> The Job Schedule to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Job Schedule to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobSchedule" /> is null. </exception>
        <example>
This sample shows how to call CreateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("jobScheduleId", new BatchJobScheduleConfiguration
{
    RecurrenceInterval = XmlConvert.ToTimeSpan("PT5M"),
}, new BatchJobSpecification(new BatchPoolInfo
{
    PoolId = "poolId",
}));
Response response = await client.CreateJobScheduleAsync(jobSchedule);
]]></code>
This sample shows how to call CreateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("jobScheduleId", new BatchJobScheduleConfiguration
{
    DoNotRunUntil = DateTimeOffset.Parse("2014-09-10T02:30:00.000Z"),
    DoNotRunAfter = DateTimeOffset.Parse("2014-09-10T06:30:00.000Z"),
    StartWindow = XmlConvert.ToTimeSpan("PT1M"),
    RecurrenceInterval = XmlConvert.ToTimeSpan("PT5M"),
}, new BatchJobSpecification(new BatchPoolInfo
{
    AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
    {
        AutoPoolIdPrefix = "mypool",
        Pool = new BatchPoolSpecification("STANDARD_D2S_V3")
        {
            VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
            {
                Publisher = "MicrosoftWindowsServer",
                Offer = "WindowsServer",
                Sku = "2016-datacenter-smalldisk",
                Version = "latest",
            }, "batch.node.windows amd64")
            {
                WindowsConfiguration = new WindowsConfiguration
                {
                    EnableAutomaticUpdates = false,
                },
                NodePlacementConfiguration = new BatchNodePlacementConfiguration
                {
                    Policy = BatchNodePlacementPolicyType.Zonal,
                },
            },
            TaskSlotsPerNode = 2,
            TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
            ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
            TargetDedicatedNodes = 3,
            TargetLowPriorityNodes = 0,
            EnableAutoScale = false,
            EnableInterNodeCommunication = true,
            StartTask = new BatchStartTask("myprogram2.exe")
            {
                ResourceFiles = {new ResourceFile
                {
                    HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                    FilePath = "myprogram2.exe",
                }},
                EnvironmentSettings = {new EnvironmentSetting("myvariable")
                {
                    Value = "myvalue",
                }},
                UserIdentity = new UserIdentity
                {
                    AutoUser = new AutoUserSpecification
                    {
                        Scope = AutoUserScope.Task,
                        ElevationLevel = ElevationLevel.Admin,
                    },
                },
                MaxTaskRetryCount = 2,
                WaitForSuccess = true,
            },
            CertificateReferences = {new BatchCertificateReference("0123456789abcdef0123456789abcdef01234567", "sha1")
            {
                StoreLocation = BatchCertificateStoreLocation.LocalMachine,
                StoreName = "Root",
                Visibility = {BatchCertificateVisibility.Task},
            }},
            Metadata = { new MetadataItem("myproperty", "myvalue") },
            TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
        },
    },
})
{
    Priority = 100,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = -1,
    },
    JobManagerTask = new BatchJobManagerTask("mytask1", "myprogram.exe")
    {
        ResourceFiles = {new ResourceFile
        {
            HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
            FilePath = "myprogram.exe",
        }, new ResourceFile
        {
            HttpUrl = "http://mystorage1.blob.core.windows.net/scripts/test.txt?sas",
            FilePath = "test.txt",
        }},
        EnvironmentSettings = {new EnvironmentSetting("myvariable")
        {
            Value = "myvalue",
        }},
        Constraints = new BatchTaskConstraints
        {
            MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
            RetentionTime = XmlConvert.ToTimeSpan("PT1H"),
            MaxTaskRetryCount = 0,
        },
        RequiredSlots = 2,
        KillJobOnCompletion = true,
        UserIdentity = new UserIdentity
        {
            AutoUser = new AutoUserSpecification
            {
                Scope = AutoUserScope.Task,
                ElevationLevel = ElevationLevel.NonAdmin,
            },
        },
        RunExclusive = true,
    },
})
{
    Metadata = { new MetadataItem("myproperty", "myvalue") },
};
Response response = await client.CreateJobScheduleAsync(jobSchedule);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateJobScheduleAsync (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateJobScheduleAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateJobScheduleAsync(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobScheduleAsync (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateJobScheduleAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateJobScheduleAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateJobScheduleAsync (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Job Schedule to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateJobScheduleAsync(Azure.Compute.Batch.BatchJobScheduleCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobScheduleId",
    schedule = new
    {
        recurrenceInterval = "PT5M",
    },
    jobSpecification = new
    {
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = await client.CreateJobScheduleAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "jobScheduleId",
    schedule = new
    {
        doNotRunUntil = "2014-09-10T02:30:00.000Z",
        doNotRunAfter = "2014-09-10T06:30:00.000Z",
        startWindow = "PT1M",
        recurrenceInterval = "PT5M",
    },
    jobSpecification = new
    {
        priority = 100,
        constraints = new
        {
            maxWallClockTime = "PT1H",
            maxTaskRetryCount = -1,
        },
        jobManagerTask = new
        {
            id = "mytask1",
            commandLine = "myprogram.exe",
            resourceFiles = new object[]
            {
                new
                {
                    httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram.exe?sas",
                    filePath = "myprogram.exe",
                },
                new
                {
                    httpUrl = "http://mystorage1.blob.core.windows.net/scripts/test.txt?sas",
                    filePath = "test.txt",
                }
            },
            environmentSettings = new object[]
            {
                new
                {
                    name = "myvariable",
                    value = "myvalue",
                }
            },
            constraints = new
            {
                maxWallClockTime = "PT1H",
                maxTaskRetryCount = 0,
                retentionTime = "PT1H",
            },
            requiredSlots = 2,
            killJobOnCompletion = true,
            userIdentity = new
            {
                autoUser = new
                {
                    scope = "task",
                    elevationLevel = "nonadmin",
                },
            },
            runExclusive = true,
        },
        poolInfo = new
        {
            autoPoolSpecification = new
            {
                autoPoolIdPrefix = "mypool",
                poolLifetimeOption = "jobschedule",
                pool = new
                {
                    vmSize = "STANDARD_D2S_V3",
                    virtualMachineConfiguration = new
                    {
                        imageReference = new
                        {
                            publisher = "MicrosoftWindowsServer",
                            offer = "WindowsServer",
                            sku = "2016-datacenter-smalldisk",
                            version = "latest",
                        },
                        nodeAgentSKUId = "batch.node.windows amd64",
                        windowsConfiguration = new
                        {
                            enableAutomaticUpdates = false,
                        },
                        nodePlacementConfiguration = new
                        {
                            policy = "zonal",
                        },
                    },
                    resizeTimeout = "PT15M",
                    targetDedicatedNodes = 3,
                    targetLowPriorityNodes = 0,
                    taskSlotsPerNode = 2,
                    taskSchedulingPolicy = new
                    {
                        nodeFillType = "spread",
                    },
                    enableAutoScale = false,
                    enableInterNodeCommunication = true,
                    startTask = new
                    {
                        commandLine = "myprogram2.exe",
                        resourceFiles = new object[]
                        {
                            new
                            {
                                httpUrl = "http://mystorage1.blob.core.windows.net/scripts/myprogram2.exe?sas",
                                filePath = "myprogram2.exe",
                            }
                        },
                        environmentSettings = new object[]
                        {
                            new
                            {
                                name = "myvariable",
                                value = "myvalue",
                            }
                        },
                        userIdentity = new
                        {
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "admin",
                            },
                        },
                        maxTaskRetryCount = 2,
                        waitForSuccess = true,
                    },
                    certificateReferences = new object[]
                    {
                        new
                        {
                            thumbprint = "0123456789abcdef0123456789abcdef01234567",
                            thumbprintAlgorithm = "sha1",
                            storeLocation = "localmachine",
                            storeName = "Root",
                            visibility = new object[]
                            {
                                "task"
                            },
                        }
                    },
                    metadata = new object[]
                    {
                        new
                        {
                            name = "myproperty",
                            value = "myvalue",
                        }
                    },
                    targetNodeCommunicationMode = "default",
                },
            },
        },
    },
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
});
Response response = await client.CreateJobScheduleAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateNodeUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateNodeUser (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeUserCreateContent user, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateNodeUser(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeUserCreateContent user, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateNodeUser(System.String,System.String,Azure.Compute.Batch.BatchNodeUserCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNodeUser (poolId As String, nodeId As String, user As BatchNodeUserCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateNodeUser : string * string * Azure.Compute.Batch.BatchNodeUserCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CreateNodeUser : string * string * Azure.Compute.Batch.BatchNodeUserCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.CreateNodeUser (poolId, nodeId, user, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="user" Type="Azure.Compute.Batch.BatchNodeUserCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        <param name="user"> The options to use for creating the user. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Adds a user Account to the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can add a user Account to a Compute Node only when it is in the idle or
            running state.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="user" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CreateNodeUser.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchNodeUserCreateContent user = new BatchNodeUserCreateContent("userName")
{
    IsAdmin = false,
    ExpiryTime = DateTimeOffset.Parse("2017-08-01T00:00:00Z"),
    Password = "Password",
};
Response response = client.CreateNodeUser("poolId", "tvm-1695681911_1-20161121t182739z", user);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateNodeUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateNodeUser (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateNodeUser(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateNodeUser(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNodeUser (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateNodeUser : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateNodeUser : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreateNodeUser (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Adds a user Account to the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateNodeUser(System.String,System.String,Azure.Compute.Batch.BatchNodeUserCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateNodeUser.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "userName",
    isAdmin = false,
    expiryTime = "2017-08-01T00:00:00Z",
    password = "Password",
});
Response response = client.CreateNodeUser("poolId", "tvm-1695681911_1-20161121t182739z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateNodeUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateNodeUserAsync (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeUserCreateContent user, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateNodeUserAsync(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeUserCreateContent user, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateNodeUserAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeUserCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNodeUserAsync (poolId As String, nodeId As String, user As BatchNodeUserCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateNodeUserAsync : string * string * Azure.Compute.Batch.BatchNodeUserCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateNodeUserAsync : string * string * Azure.Compute.Batch.BatchNodeUserCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateNodeUserAsync (poolId, nodeId, user, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="user" Type="Azure.Compute.Batch.BatchNodeUserCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        <param name="user"> The options to use for creating the user. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Adds a user Account to the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can add a user Account to a Compute Node only when it is in the idle or
            running state.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="user" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CreateNodeUserAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchNodeUserCreateContent user = new BatchNodeUserCreateContent("userName")
{
    IsAdmin = false,
    ExpiryTime = DateTimeOffset.Parse("2017-08-01T00:00:00Z"),
    Password = "Password",
};
Response response = await client.CreateNodeUserAsync("poolId", "tvm-1695681911_1-20161121t182739z", user);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateNodeUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateNodeUserAsync (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateNodeUserAsync(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateNodeUserAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNodeUserAsync (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateNodeUserAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateNodeUserAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateNodeUserAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Adds a user Account to the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateNodeUserAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeUserCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateNodeUserAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    name = "userName",
    isAdmin = false,
    expiryTime = "2017-08-01T00:00:00Z",
    password = "Password",
});
Response response = await client.CreateNodeUserAsync("poolId", "tvm-1695681911_1-20161121t182739z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreatePool (Azure.Compute.Batch.BatchPoolCreateContent pool, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreatePool(class Azure.Compute.Batch.BatchPoolCreateContent pool, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreatePool(Azure.Compute.Batch.BatchPoolCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePool (pool As BatchPoolCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreatePool : Azure.Compute.Batch.BatchPoolCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CreatePool : Azure.Compute.Batch.BatchPoolCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.CreatePool (pool, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pool" Type="Azure.Compute.Batch.BatchPoolCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pool"> The Pool to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Pool to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>
            When naming Pools, avoid including sensitive information such as user names or
            secret project names. This information may appear in telemetry logs accessible
            to Microsoft Support engineers.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pool" /> is null. </exception>
        <example>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool01", "Standard_D1_v2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "MicrosoftWindowsServer",
        Offer = "WindowsServer",
        Sku = "2016-datacenter-smalldisk",
        Version = "latest",
    }, "batch.node.windows amd64"),
    TargetDedicatedNodes = 2,
    NetworkConfiguration = new NetworkConfiguration
    {
        EnableAcceleratedNetworking = true,
    },
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "UbuntuServer",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04"),
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
    MountConfiguration = {new MountConfiguration
    {
        AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("accountName", "blobContainerName", "bfusepath")
        {
            AccountKey = "accountKey",
        },
    }, new MountConfiguration
    {
        AzureFileShareConfiguration = new AzureFileShareConfiguration("accountName", "https://myaccount.file.core.windows.net/fileshare", "accountKey", "filesharepath")
        {
            MountOptions = "mount options ver=1.0",
        },
    }, new MountConfiguration
    {
        NfsMountConfiguration = new NfsMountConfiguration("somesource nfs url", "mountpath")
        {
            MountOptions = "mount options ver=1.0",
        },
    }, new MountConfiguration
    {
        CifsMountConfiguration = new CifsMountConfiguration("accountName", "//myaccount.file.core.windows.net/file", "mountpath", "password")
        {
            MountOptions = "mount options ver=1.0",
        },
    }},
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool001", "standard_d2s_v3")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04")
    {
        OsDisk = new OSDisk
        {
            EphemeralOSDiskSettings = new DiffDiskSettings
            {
                Placement = DiffDiskPlacement.CacheDisk,
            },
            Caching = CachingType.ReadWrite,
            DiskSizeGB = 100,
            ManagedDisk = new ManagedDisk
            {
                StorageAccountType = StorageAccountType.StandardSSDLRS,
            },
        },
    },
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 1,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    TaskSlotsPerNode = 1,
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool001", "STANDARD_DC2s_V2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "UbuntuServer",
        Sku = "18_04-lts-gen2",
        Version = "latest",
    }, "batch.node.ubuntu 18.04"),
    ResourceTags =
    {
        ["TagName1"] = "TagValue1",
        ["TagName2"] = "TagValue2"
    },
    TargetDedicatedNodes = 1,
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool001", "STANDARD_DC2s_V2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "UbuntuServer",
        Sku = "18_04-lts-gen2",
        Version = "latest",
    }, "batch.node.ubuntu 18.04")
    {
        SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
        {
            SecureBootEnabled = false,
        }),
    },
    TargetDedicatedNodes = 1,
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04"),
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    EnableInterNodeCommunication = true,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
    Metadata = { new MetadataItem("myproperty", "myvalue") },
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "120_04-lts",
    }, "batch.node.ubuntu 20.04")
    {
        ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
        {
            ContainerImageNames = { "busybox" },
        },
    },
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04")
    {
        Extensions = {new VMExtension("batchextension1", "Microsoft.Azure.KeyVault", "KeyVaultForLinux")
        {
            TypeHandlerVersion = "2.0",
            AutoUpgradeMinorVersion = true,
            EnableAutomaticUpgrade = true,
            Settings =
            {
                ["secretsManagementSettingsKey"] = "secretsManagementSettingsValue",
                ["authenticationSettingsKey"] = "authenticationSettingsValue"
            },
        }},
    },
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    EnableInterNodeCommunication = true,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
    Metadata = { new MetadataItem("myproperty", "myvalue") },
    TargetNodeCommunicationMode = BatchNodeCommunicationMode.Simplified,
};
Response response = client.CreatePool(pool);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool002", "Standard_A1_v2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "MicrosoftWindowsServer",
        Offer = "WindowsServer",
        Sku = "2016-datacenter-smalldisk",
        Version = "latest",
    }, "batch.node.windows amd64")
    {
        WindowsConfiguration = new WindowsConfiguration
        {
            EnableAutomaticUpdates = false,
        },
        ServiceArtifactReference = new ServiceArtifactReference("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/vmArtifactsProfile"),
    },
    TargetDedicatedNodes = 2,
};
Response response = client.CreatePool(pool);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreatePool (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreatePool(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreatePool(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePool (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreatePool : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreatePool : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreatePool (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Pool to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreatePool(Azure.Compute.Batch.BatchPoolCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool01",
    vmSize = "Standard_D1_v2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "MicrosoftWindowsServer",
            offer = "WindowsServer",
            sku = "2016-datacenter-smalldisk",
            version = "latest",
        },
        nodeAgentSKUId = "batch.node.windows amd64",
    },
    targetDedicatedNodes = 2,
    networkConfiguration = new
    {
        enableAcceleratedNetworking = true,
    },
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "UbuntuServer",
            sku = "20_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
    },
    mountConfiguration = new object[]
    {
        new
        {
            azureBlobFileSystemConfiguration = new
            {
                accountName = "accountName",
                containerName = "blobContainerName",
                accountKey = "accountKey",
                relativeMountPath = "bfusepath",
            },
        },
        new
        {
            azureFileShareConfiguration = new
            {
                accountName = "accountName",
                azureFileUrl = "https://myaccount.file.core.windows.net/fileshare",
                accountKey = "accountKey",
                relativeMountPath = "filesharepath",
                mountOptions = "mount options ver=1.0",
            },
        },
        new
        {
            nfsMountConfiguration = new
            {
                source = "somesource nfs url",
                relativeMountPath = "mountpath",
                mountOptions = "mount options ver=1.0",
            },
        },
        new
        {
            cifsMountConfiguration = new
            {
                username = "accountName",
                password = "password",
                source = "//myaccount.file.core.windows.net/file",
                relativeMountPath = "mountpath",
                mountOptions = "mount options ver=1.0",
            },
        }
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool001",
    vmSize = "standard_d2s_v3",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "20_04-lts",
        },
        osDisk = new
        {
            diskSizeGB = 100,
            managedDisk = new
            {
                storageAccountType = "standardssd_lrs",
            },
            caching = "readwrite",
            ephemeralOSDiskSettings = new
            {
                placement = "cachedisk",
            },
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 1,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 1,
    enableAutoScale = false,
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool001",
    vmSize = "STANDARD_DC2s_V2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "UbuntuServer",
            sku = "18_04-lts-gen2",
            version = "latest",
        },
        nodeAgentSKUId = "batch.node.ubuntu 18.04",
    },
    targetDedicatedNodes = 1,
    resourceTags = new
    {
        TagName1 = "TagValue1",
        TagName2 = "TagValue2",
    },
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool001",
    vmSize = "STANDARD_DC2s_V2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "UbuntuServer",
            sku = "18_04-lts-gen2",
            version = "latest",
        },
        nodeAgentSKUId = "batch.node.ubuntu 18.04",
        securityProfile = new
        {
            securityType = "trustedLaunch",
            encryptionAtHost = true,
            uefiSettings = new
            {
                secureBootEnabled = false,
            },
        },
    },
    targetDedicatedNodes = 1,
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "20_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
    enableInterNodeCommunication = true,
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "120_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
        containerConfiguration = new
        {
            type = "dockerCompatible",
            containerImageNames = new object[]
            {
                "busybox"
            },
        },
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "20_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
        extensions = new object[]
        {
            new
            {
                name = "batchextension1",
                type = "KeyVaultForLinux",
                publisher = "Microsoft.Azure.KeyVault",
                typeHandlerVersion = "2.0",
                autoUpgradeMinorVersion = true,
                enableAutomaticUpgrade = true,
                settings = new
                {
                    secretsManagementSettingsKey = "secretsManagementSettingsValue",
                    authenticationSettingsKey = "authenticationSettingsValue",
                },
            }
        },
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
    enableInterNodeCommunication = true,
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
    targetNodeCommunicationMode = "simplified",
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool002",
    vmSize = "Standard_A1_v2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "MicrosoftWindowsServer",
            offer = "WindowsServer",
            sku = "2016-datacenter-smalldisk",
            version = "latest",
        },
        windowsConfiguration = new
        {
            enableAutomaticUpdates = false,
        },
        serviceArtifactReference = new
        {
            id = "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/vmArtifactsProfile",
        },
        nodeAgentSKUId = "batch.node.windows amd64",
    },
    targetDedicatedNodes = 2,
});
Response response = client.CreatePool(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreatePoolAsync (Azure.Compute.Batch.BatchPoolCreateContent pool, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreatePoolAsync(class Azure.Compute.Batch.BatchPoolCreateContent pool, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreatePoolAsync(Azure.Compute.Batch.BatchPoolCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePoolAsync (pool As BatchPoolCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreatePoolAsync : Azure.Compute.Batch.BatchPoolCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreatePoolAsync : Azure.Compute.Batch.BatchPoolCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreatePoolAsync (pool, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pool" Type="Azure.Compute.Batch.BatchPoolCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pool"> The Pool to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Pool to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>
            When naming Pools, avoid including sensitive information such as user names or
            secret project names. This information may appear in telemetry logs accessible
            to Microsoft Support engineers.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pool" /> is null. </exception>
        <example>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool01", "Standard_D1_v2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "MicrosoftWindowsServer",
        Offer = "WindowsServer",
        Sku = "2016-datacenter-smalldisk",
        Version = "latest",
    }, "batch.node.windows amd64"),
    TargetDedicatedNodes = 2,
    NetworkConfiguration = new NetworkConfiguration
    {
        EnableAcceleratedNetworking = true,
    },
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "UbuntuServer",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04"),
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
    MountConfiguration = {new MountConfiguration
    {
        AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("accountName", "blobContainerName", "bfusepath")
        {
            AccountKey = "accountKey",
        },
    }, new MountConfiguration
    {
        AzureFileShareConfiguration = new AzureFileShareConfiguration("accountName", "https://myaccount.file.core.windows.net/fileshare", "accountKey", "filesharepath")
        {
            MountOptions = "mount options ver=1.0",
        },
    }, new MountConfiguration
    {
        NfsMountConfiguration = new NfsMountConfiguration("somesource nfs url", "mountpath")
        {
            MountOptions = "mount options ver=1.0",
        },
    }, new MountConfiguration
    {
        CifsMountConfiguration = new CifsMountConfiguration("accountName", "//myaccount.file.core.windows.net/file", "mountpath", "password")
        {
            MountOptions = "mount options ver=1.0",
        },
    }},
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool001", "standard_d2s_v3")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04")
    {
        OsDisk = new OSDisk
        {
            EphemeralOSDiskSettings = new DiffDiskSettings
            {
                Placement = DiffDiskPlacement.CacheDisk,
            },
            Caching = CachingType.ReadWrite,
            DiskSizeGB = 100,
            ManagedDisk = new ManagedDisk
            {
                StorageAccountType = StorageAccountType.StandardSSDLRS,
            },
        },
    },
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 1,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    TaskSlotsPerNode = 1,
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool001", "STANDARD_DC2s_V2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "UbuntuServer",
        Sku = "18_04-lts-gen2",
        Version = "latest",
    }, "batch.node.ubuntu 18.04"),
    ResourceTags =
    {
        ["TagName1"] = "TagValue1",
        ["TagName2"] = "TagValue2"
    },
    TargetDedicatedNodes = 1,
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool001", "STANDARD_DC2s_V2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "UbuntuServer",
        Sku = "18_04-lts-gen2",
        Version = "latest",
    }, "batch.node.ubuntu 18.04")
    {
        SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
        {
            SecureBootEnabled = false,
        }),
    },
    TargetDedicatedNodes = 1,
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04"),
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    EnableInterNodeCommunication = true,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
    Metadata = { new MetadataItem("myproperty", "myvalue") },
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "120_04-lts",
    }, "batch.node.ubuntu 20.04")
    {
        ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
        {
            ContainerImageNames = { "busybox" },
        },
    },
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("pool2", "standard_a1")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "Canonical",
        Offer = "0001-com-ubuntu-server-focal",
        Sku = "20_04-lts",
    }, "batch.node.ubuntu 20.04")
    {
        Extensions = {new VMExtension("batchextension1", "Microsoft.Azure.KeyVault", "KeyVaultForLinux")
        {
            TypeHandlerVersion = "2.0",
            AutoUpgradeMinorVersion = true,
            EnableAutomaticUpgrade = true,
            Settings =
            {
                ["secretsManagementSettingsKey"] = "secretsManagementSettingsValue",
                ["authenticationSettingsKey"] = "authenticationSettingsValue"
            },
        }},
    },
    ResizeTimeout = XmlConvert.ToTimeSpan("PT15M"),
    TargetDedicatedNodes = 5,
    TargetLowPriorityNodes = 0,
    EnableAutoScale = false,
    EnableInterNodeCommunication = true,
    TaskSlotsPerNode = 3,
    TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
    Metadata = { new MetadataItem("myproperty", "myvalue") },
    TargetNodeCommunicationMode = BatchNodeCommunicationMode.Simplified,
};
Response response = await client.CreatePoolAsync(pool);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolCreateContent pool = new BatchPoolCreateContent("mypool002", "Standard_A1_v2")
{
    VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
    {
        Publisher = "MicrosoftWindowsServer",
        Offer = "WindowsServer",
        Sku = "2016-datacenter-smalldisk",
        Version = "latest",
    }, "batch.node.windows amd64")
    {
        WindowsConfiguration = new WindowsConfiguration
        {
            EnableAutomaticUpdates = false,
        },
        ServiceArtifactReference = new ServiceArtifactReference("/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/vmArtifactsProfile"),
    },
    TargetDedicatedNodes = 2,
};
Response response = await client.CreatePoolAsync(pool);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreatePoolAsync (Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreatePoolAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreatePoolAsync(Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePoolAsync (content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreatePoolAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreatePoolAsync : Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreatePoolAsync (content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Pool to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreatePoolAsync(Azure.Compute.Batch.BatchPoolCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool01",
    vmSize = "Standard_D1_v2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "MicrosoftWindowsServer",
            offer = "WindowsServer",
            sku = "2016-datacenter-smalldisk",
            version = "latest",
        },
        nodeAgentSKUId = "batch.node.windows amd64",
    },
    targetDedicatedNodes = 2,
    networkConfiguration = new
    {
        enableAcceleratedNetworking = true,
    },
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "UbuntuServer",
            sku = "20_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
    },
    mountConfiguration = new object[]
    {
        new
        {
            azureBlobFileSystemConfiguration = new
            {
                accountName = "accountName",
                containerName = "blobContainerName",
                accountKey = "accountKey",
                relativeMountPath = "bfusepath",
            },
        },
        new
        {
            azureFileShareConfiguration = new
            {
                accountName = "accountName",
                azureFileUrl = "https://myaccount.file.core.windows.net/fileshare",
                accountKey = "accountKey",
                relativeMountPath = "filesharepath",
                mountOptions = "mount options ver=1.0",
            },
        },
        new
        {
            nfsMountConfiguration = new
            {
                source = "somesource nfs url",
                relativeMountPath = "mountpath",
                mountOptions = "mount options ver=1.0",
            },
        },
        new
        {
            cifsMountConfiguration = new
            {
                username = "accountName",
                password = "password",
                source = "//myaccount.file.core.windows.net/file",
                relativeMountPath = "mountpath",
                mountOptions = "mount options ver=1.0",
            },
        }
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool001",
    vmSize = "standard_d2s_v3",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "20_04-lts",
        },
        osDisk = new
        {
            diskSizeGB = 100,
            managedDisk = new
            {
                storageAccountType = "standardssd_lrs",
            },
            caching = "readwrite",
            ephemeralOSDiskSettings = new
            {
                placement = "cachedisk",
            },
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 1,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 1,
    enableAutoScale = false,
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool001",
    vmSize = "STANDARD_DC2s_V2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "UbuntuServer",
            sku = "18_04-lts-gen2",
            version = "latest",
        },
        nodeAgentSKUId = "batch.node.ubuntu 18.04",
    },
    targetDedicatedNodes = 1,
    resourceTags = new
    {
        TagName1 = "TagValue1",
        TagName2 = "TagValue2",
    },
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool001",
    vmSize = "STANDARD_DC2s_V2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "UbuntuServer",
            sku = "18_04-lts-gen2",
            version = "latest",
        },
        nodeAgentSKUId = "batch.node.ubuntu 18.04",
        securityProfile = new
        {
            securityType = "trustedLaunch",
            encryptionAtHost = true,
            uefiSettings = new
            {
                secureBootEnabled = false,
            },
        },
    },
    targetDedicatedNodes = 1,
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "20_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
    enableInterNodeCommunication = true,
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "120_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
        containerConfiguration = new
        {
            type = "dockerCompatible",
            containerImageNames = new object[]
            {
                "busybox"
            },
        },
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "pool2",
    vmSize = "standard_a1",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "Canonical",
            offer = "0001-com-ubuntu-server-focal",
            sku = "20_04-lts",
        },
        nodeAgentSKUId = "batch.node.ubuntu 20.04",
        extensions = new object[]
        {
            new
            {
                name = "batchextension1",
                type = "KeyVaultForLinux",
                publisher = "Microsoft.Azure.KeyVault",
                typeHandlerVersion = "2.0",
                autoUpgradeMinorVersion = true,
                enableAutomaticUpgrade = true,
                settings = new
                {
                    secretsManagementSettingsKey = "secretsManagementSettingsValue",
                    authenticationSettingsKey = "authenticationSettingsValue",
                },
            }
        },
    },
    resizeTimeout = "PT15M",
    targetDedicatedNodes = 5,
    targetLowPriorityNodes = 0,
    taskSlotsPerNode = 3,
    taskSchedulingPolicy = new
    {
        nodeFillType = "spread",
    },
    enableAutoScale = false,
    enableInterNodeCommunication = true,
    metadata = new object[]
    {
        new
        {
            name = "myproperty",
            value = "myvalue",
        }
    },
    targetNodeCommunicationMode = "simplified",
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "mypool002",
    vmSize = "Standard_A1_v2",
    virtualMachineConfiguration = new
    {
        imageReference = new
        {
            publisher = "MicrosoftWindowsServer",
            offer = "WindowsServer",
            sku = "2016-datacenter-smalldisk",
            version = "latest",
        },
        windowsConfiguration = new
        {
            enableAutomaticUpdates = false,
        },
        serviceArtifactReference = new
        {
            id = "/subscriptions/subid/resourceGroups/default-azurebatch-japaneast/providers/Microsoft.Compute/galleries/myGallery/serviceArtifacts/myServiceArtifact/vmArtifactsProfiles/vmArtifactsProfile",
        },
        nodeAgentSKUId = "batch.node.windows amd64",
    },
    targetDedicatedNodes = 2,
});
Response response = await client.CreatePoolAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTask (string jobId, Azure.Compute.Batch.BatchTaskCreateContent task, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTask(string jobId, class Azure.Compute.Batch.BatchTaskCreateContent task, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTask(System.String,Azure.Compute.Batch.BatchTaskCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTask (jobId As String, task As BatchTaskCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTask : string * Azure.Compute.Batch.BatchTaskCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CreateTask : string * Azure.Compute.Batch.BatchTaskCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.CreateTask (jobId, task, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="task" Type="Azure.Compute.Batch.BatchTaskCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        <param name="task"> The Task to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Task to the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            The maximum lifetime of a Task from addition to completion is 180 days. If a
            Task has not completed within 180 days of being added it will be terminated by
            the Batch service and left in whatever state it was in at that time.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="task" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("task1", "cmd /c echo task1");
Response response = client.CreateTask("jobId", task);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "bash -c 'echo hello'")
{
    ContainerSettings = new BatchTaskContainerSettings("ubuntu")
    {
        ContainerRunOptions = "--rm",
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = client.CreateTask("jobId", task);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "bash -c 'echo hello'")
{
    ContainerSettings = new BatchTaskContainerSettings("ubuntu")
    {
        ContainerHostBatchBindMounts = {new ContainerHostBatchBindMountEntry
        {
            Source = ContainerHostDataPath.Task,
            IsReadOnly = true,
        }},
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = client.CreateTask("jobId", task);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "bash -c 'echo hello'")
{
    ContainerSettings = new BatchTaskContainerSettings("ubuntu")
    {
        ContainerHostBatchBindMounts = {new ContainerHostBatchBindMountEntry
        {
            Source = ContainerHostDataPath.Task,
            IsReadOnly = true,
        }, new ContainerHostBatchBindMountEntry
        {
            Source = ContainerHostDataPath.Task,
            IsReadOnly = true,
        }},
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = client.CreateTask("jobId", task);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "cmd /c exit 3")
{
    ExitConditions = new ExitConditions
    {
        ExitCodeRanges = {new ExitCodeRangeMapping(2, 4, new ExitOptions
        {
            JobAction = BatchJobAction.Terminate,
        })},
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = client.CreateTask("jobId", task);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("task1", "cmd /c echo task1")
{
    RequiredSlots = 2,
};
Response response = client.CreateTask("jobId", task);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTask (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTask(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTask(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTask (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTask : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateTask : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreateTask (jobId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Task to the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateTask(System.String,Azure.Compute.Batch.BatchTaskCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "task1",
    commandLine = "cmd /c echo task1",
});
Response response = client.CreateTask("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "bash -c 'echo hello'",
    containerSettings = new
    {
        imageName = "ubuntu",
        containerRunOptions = "--rm",
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = client.CreateTask("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "bash -c 'echo hello'",
    containerSettings = new
    {
        imageName = "ubuntu",
        containerHostBatchBindMounts = new object[]
        {
            new
            {
                source = "Task",
                isReadOnly = true,
            }
        },
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = client.CreateTask("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "bash -c 'echo hello'",
    containerSettings = new
    {
        imageName = "ubuntu",
        containerHostBatchBindMounts = new object[]
        {
            new
            {
                source = "Task",
                isReadOnly = true,
            },
            new
            {
                source = "Task",
                isReadOnly = true,
            }
        },
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = client.CreateTask("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "cmd /c exit 3",
    exitConditions = new
    {
        exitCodeRanges = new object[]
        {
            new
            {
                start = 2,
                end = 4,
                exitOptions = new
                {
                    jobAction = "terminate",
                },
            }
        },
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = client.CreateTask("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "task1",
    requiredSlots = 2,
    commandLine = "cmd /c echo task1",
});
Response response = client.CreateTask("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTaskAsync (string jobId, Azure.Compute.Batch.BatchTaskCreateContent task, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTaskAsync(string jobId, class Azure.Compute.Batch.BatchTaskCreateContent task, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTaskAsync(System.String,Azure.Compute.Batch.BatchTaskCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTaskAsync (jobId As String, task As BatchTaskCreateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskAsync : string * Azure.Compute.Batch.BatchTaskCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTaskAsync : string * Azure.Compute.Batch.BatchTaskCreateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateTaskAsync (jobId, task, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="task" Type="Azure.Compute.Batch.BatchTaskCreateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        <param name="task"> The Task to be created. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a Task to the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            The maximum lifetime of a Task from addition to completion is 180 days. If a
            Task has not completed within 180 days of being added it will be terminated by
            the Batch service and left in whatever state it was in at that time.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="task" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("task1", "cmd /c echo task1");
Response response = await client.CreateTaskAsync("jobId", task);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "bash -c 'echo hello'")
{
    ContainerSettings = new BatchTaskContainerSettings("ubuntu")
    {
        ContainerRunOptions = "--rm",
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = await client.CreateTaskAsync("jobId", task);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "bash -c 'echo hello'")
{
    ContainerSettings = new BatchTaskContainerSettings("ubuntu")
    {
        ContainerHostBatchBindMounts = {new ContainerHostBatchBindMountEntry
        {
            Source = ContainerHostDataPath.Task,
            IsReadOnly = true,
        }},
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = await client.CreateTaskAsync("jobId", task);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "bash -c 'echo hello'")
{
    ContainerSettings = new BatchTaskContainerSettings("ubuntu")
    {
        ContainerHostBatchBindMounts = {new ContainerHostBatchBindMountEntry
        {
            Source = ContainerHostDataPath.Task,
            IsReadOnly = true,
        }, new ContainerHostBatchBindMountEntry
        {
            Source = ContainerHostDataPath.Task,
            IsReadOnly = true,
        }},
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = await client.CreateTaskAsync("jobId", task);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("taskId", "cmd /c exit 3")
{
    ExitConditions = new ExitConditions
    {
        ExitCodeRanges = {new ExitCodeRangeMapping(2, 4, new ExitOptions
        {
            JobAction = BatchJobAction.Terminate,
        })},
    },
    UserIdentity = new UserIdentity
    {
        AutoUser = new AutoUserSpecification
        {
            Scope = AutoUserScope.Task,
            ElevationLevel = ElevationLevel.NonAdmin,
        },
    },
};
Response response = await client.CreateTaskAsync("jobId", task);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskCreateContent task = new BatchTaskCreateContent("task1", "cmd /c echo task1")
{
    RequiredSlots = 2,
};
Response response = await client.CreateTaskAsync("jobId", task);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTaskAsync (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTaskAsync(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTaskAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTaskAsync (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTaskAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateTaskAsync (jobId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Creates a Task to the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateTaskAsync(System.String,Azure.Compute.Batch.BatchTaskCreateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "task1",
    commandLine = "cmd /c echo task1",
});
Response response = await client.CreateTaskAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "bash -c 'echo hello'",
    containerSettings = new
    {
        imageName = "ubuntu",
        containerRunOptions = "--rm",
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = await client.CreateTaskAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "bash -c 'echo hello'",
    containerSettings = new
    {
        imageName = "ubuntu",
        containerHostBatchBindMounts = new object[]
        {
            new
            {
                source = "Task",
                isReadOnly = true,
            }
        },
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = await client.CreateTaskAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "bash -c 'echo hello'",
    containerSettings = new
    {
        imageName = "ubuntu",
        containerHostBatchBindMounts = new object[]
        {
            new
            {
                source = "Task",
                isReadOnly = true,
            },
            new
            {
                source = "Task",
                isReadOnly = true,
            }
        },
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = await client.CreateTaskAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "taskId",
    commandLine = "cmd /c exit 3",
    exitConditions = new
    {
        exitCodeRanges = new object[]
        {
            new
            {
                start = 2,
                end = 4,
                exitOptions = new
                {
                    jobAction = "terminate",
                },
            }
        },
    },
    userIdentity = new
    {
        autoUser = new
        {
            scope = "task",
            elevationLevel = "nonadmin",
        },
    },
});
Response response = await client.CreateTaskAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CreateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    id = "task1",
    requiredSlots = 2,
    commandLine = "cmd /c echo task1",
});
Response response = await client.CreateTaskAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTaskCollection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt; CreateTaskCollection (string jobId, Azure.Compute.Batch.BatchTaskGroup taskCollection, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchTaskAddCollectionResult&gt; CreateTaskCollection(string jobId, class Azure.Compute.Batch.BatchTaskGroup taskCollection, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTaskCollection(System.String,Azure.Compute.Batch.BatchTaskGroup,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTaskCollection (jobId As String, taskCollection As BatchTaskGroup, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchTaskAddCollectionResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskCollection : string * Azure.Compute.Batch.BatchTaskGroup * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;&#xA;override this.CreateTaskCollection : string * Azure.Compute.Batch.BatchTaskGroup * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;" Usage="batchClient.CreateTaskCollection (jobId, taskCollection, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskCollection" Type="Azure.Compute.Batch.BatchTaskGroup" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        <param name="taskCollection"> The Tasks to be added. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Adds a collection of Tasks to the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Note that each Task must have a unique ID. The Batch service may not return the
            results for each Task in the same order the Tasks were submitted in this
            request. If the server times out or the connection is closed during the
            request, the request may have been partially or fully processed, or not at all.
            In such cases, the user should re-issue the request. Note that it is up to the
            user to correctly handle failures when re-issuing a request. For example, you
            should use the same Task IDs during a retry so that if the prior operation
            succeeded, the retry will not create extra Tasks unexpectedly. If the response
            contains any Tasks which failed to add, a client can retry the request. In a
            retry, it is most efficient to resubmit only Tasks that failed to add, and to
            omit Tasks that were successfully added on the first attempt. The maximum
            lifetime of a Task from addition to completion is 180 days. If a Task has not
            completed within 180 days of being added it will be terminated by the Batch
            service and left in whatever state it was in at that time.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskCollection" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CreateTaskCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
{
    new BatchTaskCreateContent("simple1", "cmd /c dir /s"),
    new BatchTaskCreateContent("simple2", "cmd /c dir /s")
});
Response<BatchTaskAddCollectionResult> response = client.CreateTaskCollection("jobId", taskCollection);
]]></code>
This sample shows how to call CreateTaskCollection.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
{
    new BatchTaskCreateContent("complex1", "cmd /c dir /s")
    {
        ResourceFiles = {new ResourceFile
        {
            AutoStorageContainerName = "containerName",
            FilePath = "data",
        }},
        EnvironmentSettings = {new EnvironmentSetting("env1")
        {
            Value = "value1",
        }, new EnvironmentSetting("env2")
        {
            Value = "value2",
        }},
        AffinityInfo = new AffinityInfo("affinityId"),
        Constraints = new BatchTaskConstraints
        {
            MaxWallClockTime = XmlConvert.ToTimeSpan("P1D"),
            RetentionTime = XmlConvert.ToTimeSpan("P2D"),
            MaxTaskRetryCount = 5,
        },
        RequiredSlots = 2,
        MultiInstanceSettings = new MultiInstanceSettings("cmd /c echo coordinating")
        {
            NumberOfInstances = 3,
            CommonResourceFiles = {new ResourceFile
            {
                HttpUrl = "https://common.blob.core.windows.net/",
                FilePath = "common.exe",
            }},
        },
    },
    new BatchTaskCreateContent("simple3", "cmd /c dir /s")
});
Response<BatchTaskAddCollectionResult> response = client.CreateTaskCollection("jobId", taskCollection);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTaskCollection">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTaskCollection (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTaskCollection(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTaskCollection(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTaskCollection (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskCollection : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateTaskCollection : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.CreateTaskCollection (jobId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Adds a collection of Tasks to the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateTaskCollection(System.String,Azure.Compute.Batch.BatchTaskGroup,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTaskCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    value = new object[]
    {
        new
        {
            id = "simple1",
            commandLine = "cmd /c dir /s",
        },
        new
        {
            id = "simple2",
            commandLine = "cmd /c dir /s",
        }
    },
});
Response response = client.CreateTaskCollection("jobId", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateTaskCollection and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    value = new object[]
    {
        new
        {
            id = "complex1",
            commandLine = "cmd /c dir /s",
            resourceFiles = new object[]
            {
                new
                {
                    autoStorageContainerName = "containerName",
                    filePath = "data",
                }
            },
            environmentSettings = new object[]
            {
                new
                {
                    name = "env1",
                    value = "value1",
                },
                new
                {
                    name = "env2",
                    value = "value2",
                }
            },
            affinityInfo = new
            {
                affinityId = "affinityId",
            },
            constraints = new
            {
                maxWallClockTime = "P1D",
                retentionTime = "P2D",
                maxTaskRetryCount = 5,
            },
            requiredSlots = 2,
            multiInstanceSettings = new
            {
                numberOfInstances = 3,
                coordinationCommandLine = "cmd /c echo coordinating",
                commonResourceFiles = new object[]
                {
                    new
                    {
                        httpUrl = "https://common.blob.core.windows.net/",
                        filePath = "common.exe",
                    }
                },
            },
        },
        new
        {
            id = "simple3",
            commandLine = "cmd /c dir /s",
        }
    },
});
Response response = client.CreateTaskCollection("jobId", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTaskCollectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;&gt; CreateTaskCollectionAsync (string jobId, Azure.Compute.Batch.BatchTaskGroup taskCollection, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;&gt; CreateTaskCollectionAsync(string jobId, class Azure.Compute.Batch.BatchTaskGroup taskCollection, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTaskCollectionAsync(System.String,Azure.Compute.Batch.BatchTaskGroup,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTaskCollectionAsync (jobId As String, taskCollection As BatchTaskGroup, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchTaskAddCollectionResult))" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskCollectionAsync : string * Azure.Compute.Batch.BatchTaskGroup * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;&gt;&#xA;override this.CreateTaskCollectionAsync : string * Azure.Compute.Batch.BatchTaskGroup * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;&gt;" Usage="batchClient.CreateTaskCollectionAsync (jobId, taskCollection, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskAddCollectionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskCollection" Type="Azure.Compute.Batch.BatchTaskGroup" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        <param name="taskCollection"> The Tasks to be added. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Adds a collection of Tasks to the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Note that each Task must have a unique ID. The Batch service may not return the
            results for each Task in the same order the Tasks were submitted in this
            request. If the server times out or the connection is closed during the
            request, the request may have been partially or fully processed, or not at all.
            In such cases, the user should re-issue the request. Note that it is up to the
            user to correctly handle failures when re-issuing a request. For example, you
            should use the same Task IDs during a retry so that if the prior operation
            succeeded, the retry will not create extra Tasks unexpectedly. If the response
            contains any Tasks which failed to add, a client can retry the request. In a
            retry, it is most efficient to resubmit only Tasks that failed to add, and to
            omit Tasks that were successfully added on the first attempt. The maximum
            lifetime of a Task from addition to completion is 180 days. If a Task has not
            completed within 180 days of being added it will be terminated by the Batch
            service and left in whatever state it was in at that time.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskCollection" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CreateTaskCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
{
    new BatchTaskCreateContent("simple1", "cmd /c dir /s"),
    new BatchTaskCreateContent("simple2", "cmd /c dir /s")
});
Response<BatchTaskAddCollectionResult> response = await client.CreateTaskCollectionAsync("jobId", taskCollection);
]]></code>
This sample shows how to call CreateTaskCollectionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
{
    new BatchTaskCreateContent("complex1", "cmd /c dir /s")
    {
        ResourceFiles = {new ResourceFile
        {
            AutoStorageContainerName = "containerName",
            FilePath = "data",
        }},
        EnvironmentSettings = {new EnvironmentSetting("env1")
        {
            Value = "value1",
        }, new EnvironmentSetting("env2")
        {
            Value = "value2",
        }},
        AffinityInfo = new AffinityInfo("affinityId"),
        Constraints = new BatchTaskConstraints
        {
            MaxWallClockTime = XmlConvert.ToTimeSpan("P1D"),
            RetentionTime = XmlConvert.ToTimeSpan("P2D"),
            MaxTaskRetryCount = 5,
        },
        RequiredSlots = 2,
        MultiInstanceSettings = new MultiInstanceSettings("cmd /c echo coordinating")
        {
            NumberOfInstances = 3,
            CommonResourceFiles = {new ResourceFile
            {
                HttpUrl = "https://common.blob.core.windows.net/",
                FilePath = "common.exe",
            }},
        },
    },
    new BatchTaskCreateContent("simple3", "cmd /c dir /s")
});
Response<BatchTaskAddCollectionResult> response = await client.CreateTaskCollectionAsync("jobId", taskCollection);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTaskCollectionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTaskCollectionAsync (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTaskCollectionAsync(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTaskCollectionAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTaskCollectionAsync (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskCollectionAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTaskCollectionAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.CreateTaskCollectionAsync (jobId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Adds a collection of Tasks to the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.CreateTaskCollectionAsync(System.String,Azure.Compute.Batch.BatchTaskGroup,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTaskCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    value = new object[]
    {
        new
        {
            id = "simple1",
            commandLine = "cmd /c dir /s",
        },
        new
        {
            id = "simple2",
            commandLine = "cmd /c dir /s",
        }
    },
});
Response response = await client.CreateTaskCollectionAsync("jobId", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateTaskCollectionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    value = new object[]
    {
        new
        {
            id = "complex1",
            commandLine = "cmd /c dir /s",
            resourceFiles = new object[]
            {
                new
                {
                    autoStorageContainerName = "containerName",
                    filePath = "data",
                }
            },
            environmentSettings = new object[]
            {
                new
                {
                    name = "env1",
                    value = "value1",
                },
                new
                {
                    name = "env2",
                    value = "value2",
                }
            },
            affinityInfo = new
            {
                affinityId = "affinityId",
            },
            constraints = new
            {
                maxWallClockTime = "P1D",
                retentionTime = "P2D",
                maxTaskRetryCount = 5,
            },
            requiredSlots = 2,
            multiInstanceSettings = new
            {
                numberOfInstances = 3,
                coordinationCommandLine = "cmd /c echo coordinating",
                commonResourceFiles = new object[]
                {
                    new
                    {
                        httpUrl = "https://common.blob.core.windows.net/",
                        filePath = "common.exe",
                    }
                },
            },
        },
        new
        {
            id = "simple3",
            commandLine = "cmd /c dir /s",
        }
    },
});
Response response = await client.CreateTaskCollectionAsync("jobId", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.Compute.Batch.CreateTasksResult CreateTasks (string jobId, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt; tasksToAdd, Azure.Compute.Batch.CreateTasksOptions createTasksOptions = default, TimeSpan? timeOutInSeconds = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Compute.Batch.CreateTasksResult CreateTasks(string jobId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchTaskCreateContent&gt; tasksToAdd, class Azure.Compute.Batch.CreateTasksOptions createTasksOptions, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; timeOutInSeconds, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTasks(System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchTaskCreateContent},Azure.Compute.Batch.CreateTasksOptions,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTasks (jobId As String, tasksToAdd As IEnumerable(Of BatchTaskCreateContent), Optional createTasksOptions As CreateTasksOptions = Nothing, Optional timeOutInSeconds As Nullable(Of TimeSpan) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As CreateTasksResult" />
      <MemberSignature Language="F#" Value="abstract member CreateTasks : string * seq&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt; * Azure.Compute.Batch.CreateTasksOptions * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; Azure.Compute.Batch.CreateTasksResult&#xA;override this.CreateTasks : string * seq&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt; * Azure.Compute.Batch.CreateTasksOptions * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; Azure.Compute.Batch.CreateTasksResult" Usage="batchClient.CreateTasks (jobId, tasksToAdd, createTasksOptions, timeOutInSeconds, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Compute.Batch.CreateTasksResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="tasksToAdd" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt;" />
        <Parameter Name="createTasksOptions" Type="Azure.Compute.Batch.CreateTasksOptions" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        <param name="tasksToAdd"> A collection of Tasks to be created </param>
        <param name="createTasksOptions">The parallel options associated with this operation.  If this is null, the default is used.</param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Utility method that can take in a large number of tasks to Creates to the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            The maximum lifetime of a Task from addition to completion is 180 days. If a
            Task has not completed within 180 days of being added it will be terminated by
            the Batch service and left in whatever state it was in at that time.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="tasksToAdd" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTasksAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Compute.Batch.CreateTasksResult&gt; CreateTasksAsync (string jobId, System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt; tasksToAdd, Azure.Compute.Batch.CreateTasksOptions createTasksOptions = default, TimeSpan? timeOutInSeconds = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Compute.Batch.CreateTasksResult&gt; CreateTasksAsync(string jobId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Compute.Batch.BatchTaskCreateContent&gt; tasksToAdd, class Azure.Compute.Batch.CreateTasksOptions createTasksOptions, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; timeOutInSeconds, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.CreateTasksAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Compute.Batch.BatchTaskCreateContent},Azure.Compute.Batch.CreateTasksOptions,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTasksAsync (jobId As String, tasksToAdd As IEnumerable(Of BatchTaskCreateContent), Optional createTasksOptions As CreateTasksOptions = Nothing, Optional timeOutInSeconds As Nullable(Of TimeSpan) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of CreateTasksResult)" />
      <MemberSignature Language="F#" Value="abstract member CreateTasksAsync : string * seq&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt; * Azure.Compute.Batch.CreateTasksOptions * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Compute.Batch.CreateTasksResult&gt;&#xA;override this.CreateTasksAsync : string * seq&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt; * Azure.Compute.Batch.CreateTasksOptions * Nullable&lt;TimeSpan&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Compute.Batch.CreateTasksResult&gt;" Usage="batchClient.CreateTasksAsync (jobId, tasksToAdd, createTasksOptions, timeOutInSeconds, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Compute.Batch.CreateTasksResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="tasksToAdd" Type="System.Collections.Generic.IEnumerable&lt;Azure.Compute.Batch.BatchTaskCreateContent&gt;" />
        <Parameter Name="createTasksOptions" Type="Azure.Compute.Batch.CreateTasksOptions" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        <param name="tasksToAdd"> A collection of Tasks to be created. </param>
        <param name="createTasksOptions">The parallel options associated with this operation.  If this is null, the default is used.</param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Utility method that can take in a large number of tasks to Creates to the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            The maximum lifetime of a Task from addition to completion is 180 days. If a
            Task has not completed within 180 days of being added it will be terminated by
            the Batch service and left in whatever state it was in at that time.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="tasksToAdd" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeallocateNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeallocateNode (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeDeallocateContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeallocateNode(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeDeallocateContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeallocateNode(System.String,System.String,Azure.Compute.Batch.BatchNodeDeallocateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeallocateNode (poolId As String, nodeId As String, Optional parameters As BatchNodeDeallocateContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeallocateNode : string * string * Azure.Compute.Batch.BatchNodeDeallocateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeallocateNode : string * string * Azure.Compute.Batch.BatchNodeDeallocateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.DeallocateNode (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeDeallocateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="parameters"> The options to use for deallocating the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deallocates the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks> You can deallocate a Compute Node only if it is in an idle or running state. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DeallocateNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeallocateNode("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeallocateNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeallocateNode (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeallocateNode(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeallocateNode(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeallocateNode (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeallocateNode : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeallocateNode : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeallocateNode (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deallocates the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.DeallocateNode(System.String,System.String,Azure.Compute.Batch.BatchNodeDeallocateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeallocateNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = client.DeallocateNode("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeallocateNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeallocateNodeAsync (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeDeallocateContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeallocateNodeAsync(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeDeallocateContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeallocateNodeAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeDeallocateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeallocateNodeAsync (poolId As String, nodeId As String, Optional parameters As BatchNodeDeallocateContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeallocateNodeAsync : string * string * Azure.Compute.Batch.BatchNodeDeallocateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeallocateNodeAsync : string * string * Azure.Compute.Batch.BatchNodeDeallocateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeallocateNodeAsync (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeDeallocateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="parameters"> The options to use for deallocating the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Deallocates the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks> You can deallocate a Compute Node only if it is in an idle or running state. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DeallocateNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeallocateNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeallocateNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeallocateNodeAsync (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeallocateNodeAsync(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeallocateNodeAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeallocateNodeAsync (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeallocateNodeAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeallocateNodeAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeallocateNodeAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deallocates the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.DeallocateNodeAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeDeallocateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeallocateNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = await client.DeallocateNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteCertificate (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteCertificate(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteCertificate(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteCertificate (thumbprintAlgorithm As String, thumbprint As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteCertificate : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteCertificate : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteCertificate (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Certificate from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteCertificate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteCertificate("sha1", "0123456789abcdef0123456789abcdef01234567");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteCertificateAsync (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteCertificateAsync(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteCertificateAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteCertificateAsync (thumbprintAlgorithm As String, thumbprint As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCertificateAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteCertificateAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteCertificateAsync (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Certificate from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteCertificateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteCertificateAsync("sha1", "0123456789abcdef0123456789abcdef01234567");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteJob (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteJob(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteJob(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteJob (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteJob (jobId, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteJob("jobId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteJobAsync (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteJobAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteJobAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteJobAsync (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteJobAsync (jobId, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteJobAsync("jobId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteJobSchedule (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteJobSchedule(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteJobSchedule (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteJobSchedule (jobScheduleId, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Job Schedule from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteJobSchedule("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteJobScheduleAsync (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteJobScheduleAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteJobScheduleAsync (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteJobScheduleAsync (jobScheduleId, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Job Schedule from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteJobScheduleAsync("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteNodeFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteNodeFile (string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? recursive = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteNodeFile(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteNodeFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteNodeFile (poolId As String, nodeId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteNodeFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteNodeFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteNodeFile (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="recursive">
            Whether to delete children of a directory. If the filePath parameter represents
            a directory instead of a file, you can set recursive to true to delete the
            directory and all of the files and subdirectories in it. If recursive is false
            then the directory must be empty or deletion will fail.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes the specified file from the Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteNodeFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteNodeFile("poolId", "tvm-1695681911_1-20161122t193202z", "workitems\\jobId\\job-1\\task1\\wd\\testFile.txt");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteNodeFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteNodeFileAsync (string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? recursive = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteNodeFileAsync(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteNodeFileAsync (poolId As String, nodeId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteNodeFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteNodeFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteNodeFileAsync (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="recursive">
            Whether to delete children of a directory. If the filePath parameter represents
            a directory instead of a file, you can set recursive to true to delete the
            directory and all of the files and subdirectories in it. If recursive is false
            then the directory must be empty or deletion will fail.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes the specified file from the Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteNodeFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteNodeFileAsync("poolId", "tvm-1695681911_1-20161122t193202z", "workitems\\jobId\\job-1\\task1\\wd\\testFile.txt");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteNodeUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteNodeUser (string poolId, string nodeId, string userName, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteNodeUser(string poolId, string nodeId, string userName, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteNodeUser(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteNodeUser (poolId As String, nodeId As String, userName As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteNodeUser : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteNodeUser : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteNodeUser (poolId, nodeId, userName, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        <param name="userName"> The name of the user Account to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a user Account from the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteNodeUser.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteNodeUser("poolId", "tvm-1695681911_1-20161121t182739z", "userName");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteNodeUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteNodeUserAsync (string poolId, string nodeId, string userName, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteNodeUserAsync(string poolId, string nodeId, string userName, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteNodeUserAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteNodeUserAsync (poolId As String, nodeId As String, userName As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteNodeUserAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteNodeUserAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteNodeUserAsync (poolId, nodeId, userName, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        <param name="userName"> The name of the user Account to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a user Account from the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteNodeUserAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteNodeUserAsync("poolId", "tvm-1695681911_1-20161121t182739z", "userName");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeletePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeletePool (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeletePool(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeletePool(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeletePool (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeletePool : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeletePool : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeletePool (poolId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Pool from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeletePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeletePool("poolId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeletePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeletePoolAsync (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeletePoolAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeletePoolAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeletePoolAsync (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeletePoolAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeletePoolAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeletePoolAsync (poolId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Pool from the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeletePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeletePoolAsync("poolId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTask (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTask(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteTask(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTask (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteTask (jobId, taskId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        <param name="taskId"> The ID of the Task to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Task from the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteTask("jobId", "taskId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTaskAsync (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTaskAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteTaskAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTaskAsync (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteTaskAsync (jobId, taskId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        <param name="taskId"> The ID of the Task to delete. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a Task from the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteTaskAsync("jobId", "taskId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTaskFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTaskFile (string jobId, string taskId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? recursive = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTaskFile(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteTaskFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTaskFile (jobId As String, taskId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTaskFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTaskFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DeleteTaskFile (jobId, taskId, filePath, timeOutInSeconds, ocpdate, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="recursive">
            Whether to delete children of a directory. If the filePath parameter represents
            a directory instead of a file, you can set recursive to true to delete the
            directory and all of the files and subdirectories in it. If recursive is false
            then the directory must be empty or deletion will fail.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes the specified Task file from the Compute Node where the Task ran.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTaskFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DeleteTaskFile("jobId", "task1", "wd\\testFile.txt");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTaskFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTaskFileAsync (string jobId, string taskId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? recursive = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTaskFileAsync(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DeleteTaskFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTaskFileAsync (jobId As String, taskId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTaskFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTaskFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DeleteTaskFileAsync (jobId, taskId, filePath, timeOutInSeconds, ocpdate, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="recursive">
            Whether to delete children of a directory. If the filePath parameter represents
            a directory instead of a file, you can set recursive to true to delete the
            directory and all of the files and subdirectories in it. If recursive is false
            then the directory must be empty or deletion will fail.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes the specified Task file from the Compute Node where the Task ran.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTaskFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DeleteTaskFileAsync("jobId", "task1", "wd\\testFile.txt");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DisableJob (string jobId, Azure.Compute.Batch.BatchJobDisableContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DisableJob(string jobId, class Azure.Compute.Batch.BatchJobDisableContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableJob(System.String,Azure.Compute.Batch.BatchJobDisableContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableJob (jobId As String, content As BatchJobDisableContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DisableJob : string * Azure.Compute.Batch.BatchJobDisableContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DisableJob : string * Azure.Compute.Batch.BatchJobDisableContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.DisableJob (jobId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchJobDisableContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to disable. </param>
        <param name="content"> The options to use for disabling the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Disables the specified Job, preventing new Tasks from running. </summary>
        <returns>To be added.</returns>
        <remarks>
            The Batch Service immediately moves the Job to the disabling state. Batch then
            uses the disableTasks parameter to determine what to do with the currently
            running Tasks of the Job. The Job remains in the disabling state until the
            disable operation is completed and all Tasks have been dealt with according to
            the disableTasks option; the Job then moves to the disabled state. No new Tasks
            are started under the Job until it moves back to active state. If you try to
            disable a Job that is in any state other than active, disabling, or disabled,
            the request fails with status code 409.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DisableJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobDisableContent content = new BatchJobDisableContent(DisableBatchJobOption.Terminate);
Response response = client.DisableJob("jobId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DisableJob (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DisableJob(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableJob(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableJob (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DisableJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DisableJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DisableJob (jobId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to disable. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables the specified Job, preventing new Tasks from running.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.DisableJob(System.String,Azure.Compute.Batch.BatchJobDisableContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisableJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    disableTasks = "terminate",
});
Response response = client.DisableJob("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DisableJobAsync (string jobId, Azure.Compute.Batch.BatchJobDisableContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DisableJobAsync(string jobId, class Azure.Compute.Batch.BatchJobDisableContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableJobAsync(System.String,Azure.Compute.Batch.BatchJobDisableContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableJobAsync (jobId As String, content As BatchJobDisableContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DisableJobAsync : string * Azure.Compute.Batch.BatchJobDisableContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DisableJobAsync : string * Azure.Compute.Batch.BatchJobDisableContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DisableJobAsync (jobId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchJobDisableContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to disable. </param>
        <param name="content"> The options to use for disabling the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Disables the specified Job, preventing new Tasks from running. </summary>
        <returns>To be added.</returns>
        <remarks>
            The Batch Service immediately moves the Job to the disabling state. Batch then
            uses the disableTasks parameter to determine what to do with the currently
            running Tasks of the Job. The Job remains in the disabling state until the
            disable operation is completed and all Tasks have been dealt with according to
            the disableTasks option; the Job then moves to the disabled state. No new Tasks
            are started under the Job until it moves back to active state. If you try to
            disable a Job that is in any state other than active, disabling, or disabled,
            the request fails with status code 409.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DisableJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobDisableContent content = new BatchJobDisableContent(DisableBatchJobOption.Terminate);
Response response = await client.DisableJobAsync("jobId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DisableJobAsync (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DisableJobAsync(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableJobAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableJobAsync (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DisableJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DisableJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DisableJobAsync (jobId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to disable. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables the specified Job, preventing new Tasks from running.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.DisableJobAsync(System.String,Azure.Compute.Batch.BatchJobDisableContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisableJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    disableTasks = "terminate",
});
Response response = await client.DisableJobAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DisableJobSchedule (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DisableJobSchedule(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableJobSchedule (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DisableJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DisableJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DisableJobSchedule (jobScheduleId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables a Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisableJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DisableJobSchedule("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DisableJobScheduleAsync (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DisableJobScheduleAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableJobScheduleAsync (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DisableJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DisableJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DisableJobScheduleAsync (jobScheduleId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables a Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisableJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DisableJobScheduleAsync("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableNodeScheduling">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DisableNodeScheduling (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeDisableSchedulingContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DisableNodeScheduling(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeDisableSchedulingContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableNodeScheduling(System.String,System.String,Azure.Compute.Batch.BatchNodeDisableSchedulingContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableNodeScheduling (poolId As String, nodeId As String, Optional parameters As BatchNodeDisableSchedulingContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DisableNodeScheduling : string * string * Azure.Compute.Batch.BatchNodeDisableSchedulingContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DisableNodeScheduling : string * string * Azure.Compute.Batch.BatchNodeDisableSchedulingContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.DisableNodeScheduling (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeDisableSchedulingContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        <param name="parameters"> The options to use for disabling scheduling on the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Disables Task scheduling on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can disable Task scheduling on a Compute Node only if its current
            scheduling state is enabled.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DisableNodeScheduling.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DisableNodeScheduling("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableNodeScheduling">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DisableNodeScheduling (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DisableNodeScheduling(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableNodeScheduling(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableNodeScheduling (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DisableNodeScheduling : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DisableNodeScheduling : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DisableNodeScheduling (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables Task scheduling on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.DisableNodeScheduling(System.String,System.String,Azure.Compute.Batch.BatchNodeDisableSchedulingContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisableNodeScheduling.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = client.DisableNodeScheduling("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableNodeSchedulingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DisableNodeSchedulingAsync (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeDisableSchedulingContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DisableNodeSchedulingAsync(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeDisableSchedulingContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableNodeSchedulingAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeDisableSchedulingContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableNodeSchedulingAsync (poolId As String, nodeId As String, Optional parameters As BatchNodeDisableSchedulingContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DisableNodeSchedulingAsync : string * string * Azure.Compute.Batch.BatchNodeDisableSchedulingContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DisableNodeSchedulingAsync : string * string * Azure.Compute.Batch.BatchNodeDisableSchedulingContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DisableNodeSchedulingAsync (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeDisableSchedulingContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        <param name="parameters"> The options to use for disabling scheduling on the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Disables Task scheduling on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can disable Task scheduling on a Compute Node only if its current
            scheduling state is enabled.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DisableNodeSchedulingAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DisableNodeSchedulingAsync("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisableNodeSchedulingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DisableNodeSchedulingAsync (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DisableNodeSchedulingAsync(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisableNodeSchedulingAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisableNodeSchedulingAsync (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DisableNodeSchedulingAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DisableNodeSchedulingAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DisableNodeSchedulingAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables Task scheduling on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.DisableNodeSchedulingAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeDisableSchedulingContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisableNodeSchedulingAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = await client.DisableNodeSchedulingAsync("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisablePoolAutoScale">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DisablePoolAutoScale (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DisablePoolAutoScale(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisablePoolAutoScale(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisablePoolAutoScale (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DisablePoolAutoScale : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DisablePoolAutoScale : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.DisablePoolAutoScale (poolId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables automatic scaling for a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisablePoolAutoScale.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.DisablePoolAutoScale("poolId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DisablePoolAutoScaleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DisablePoolAutoScaleAsync (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DisablePoolAutoScaleAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.DisablePoolAutoScaleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisablePoolAutoScaleAsync (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DisablePoolAutoScaleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DisablePoolAutoScaleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.DisablePoolAutoScaleAsync (poolId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Disables automatic scaling for a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DisablePoolAutoScaleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.DisablePoolAutoScaleAsync("poolId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnableJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response EnableJob (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response EnableJob(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnableJob(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableJob (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member EnableJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.EnableJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.EnableJob (jobId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to enable. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables the specified Job, allowing new Tasks to run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnableJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.EnableJob("jobId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnableJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; EnableJobAsync (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; EnableJobAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnableJobAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableJobAsync (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member EnableJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.EnableJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.EnableJobAsync (jobId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to enable. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables the specified Job, allowing new Tasks to run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnableJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.EnableJobAsync("jobId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnableJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response EnableJobSchedule (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response EnableJobSchedule(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnableJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableJobSchedule (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member EnableJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.EnableJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.EnableJobSchedule (jobScheduleId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables a Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnableJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.EnableJobSchedule("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnableJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; EnableJobScheduleAsync (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; EnableJobScheduleAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnableJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableJobScheduleAsync (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member EnableJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.EnableJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.EnableJobScheduleAsync (jobScheduleId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables a Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnableJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.EnableJobScheduleAsync("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnableNodeScheduling">
      <MemberSignature Language="C#" Value="public virtual Azure.Response EnableNodeScheduling (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response EnableNodeScheduling(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnableNodeScheduling(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableNodeScheduling (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member EnableNodeScheduling : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.EnableNodeScheduling : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.EnableNodeScheduling (poolId, nodeId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables Task scheduling on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnableNodeScheduling.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.EnableNodeScheduling("poolId", "tvm-1695681911_1-20161122t193202z");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnableNodeSchedulingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; EnableNodeSchedulingAsync (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; EnableNodeSchedulingAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnableNodeSchedulingAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnableNodeSchedulingAsync (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member EnableNodeSchedulingAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.EnableNodeSchedulingAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.EnableNodeSchedulingAsync (poolId, nodeId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables Task scheduling on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnableNodeSchedulingAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.EnableNodeSchedulingAsync("poolId", "tvm-1695681911_1-20161122t193202z");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnablePoolAutoScale">
      <MemberSignature Language="C#" Value="public virtual Azure.Response EnablePoolAutoScale (string poolId, Azure.Compute.Batch.BatchPoolEnableAutoScaleContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response EnablePoolAutoScale(string poolId, class Azure.Compute.Batch.BatchPoolEnableAutoScaleContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnablePoolAutoScale(System.String,Azure.Compute.Batch.BatchPoolEnableAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnablePoolAutoScale (poolId As String, content As BatchPoolEnableAutoScaleContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member EnablePoolAutoScale : string * Azure.Compute.Batch.BatchPoolEnableAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.EnablePoolAutoScale : string * Azure.Compute.Batch.BatchPoolEnableAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.EnablePoolAutoScale (poolId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchPoolEnableAutoScaleContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The options to use for enabling automatic scaling. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Enables automatic scaling for a Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            You cannot enable automatic scaling on a Pool if a resize operation is in
            progress on the Pool. If automatic scaling of the Pool is currently disabled,
            you must specify a valid autoscale formula as part of the request. If automatic
            scaling of the Pool is already enabled, you may specify a new autoscale formula
            and/or a new evaluation interval. You cannot call this API for the same Pool
            more than once every 30 seconds.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call EnablePoolAutoScale.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolEnableAutoScaleContent content = new BatchPoolEnableAutoScaleContent
{
    AutoScaleFormula = "$TargetDedicated=0",
    AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT8M"),
};
Response response = client.EnablePoolAutoScale("poolId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnablePoolAutoScale">
      <MemberSignature Language="C#" Value="public virtual Azure.Response EnablePoolAutoScale (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response EnablePoolAutoScale(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnablePoolAutoScale(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnablePoolAutoScale (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member EnablePoolAutoScale : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.EnablePoolAutoScale : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.EnablePoolAutoScale (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables automatic scaling for a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.EnablePoolAutoScale(System.String,Azure.Compute.Batch.BatchPoolEnableAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnablePoolAutoScale.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    autoScaleFormula = "$TargetDedicated=0",
    autoScaleEvaluationInterval = "PT8M",
});
Response response = client.EnablePoolAutoScale("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnablePoolAutoScaleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; EnablePoolAutoScaleAsync (string poolId, Azure.Compute.Batch.BatchPoolEnableAutoScaleContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; EnablePoolAutoScaleAsync(string poolId, class Azure.Compute.Batch.BatchPoolEnableAutoScaleContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnablePoolAutoScaleAsync(System.String,Azure.Compute.Batch.BatchPoolEnableAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnablePoolAutoScaleAsync (poolId As String, content As BatchPoolEnableAutoScaleContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member EnablePoolAutoScaleAsync : string * Azure.Compute.Batch.BatchPoolEnableAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.EnablePoolAutoScaleAsync : string * Azure.Compute.Batch.BatchPoolEnableAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.EnablePoolAutoScaleAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchPoolEnableAutoScaleContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The options to use for enabling automatic scaling. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Enables automatic scaling for a Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            You cannot enable automatic scaling on a Pool if a resize operation is in
            progress on the Pool. If automatic scaling of the Pool is currently disabled,
            you must specify a valid autoscale formula as part of the request. If automatic
            scaling of the Pool is already enabled, you may specify a new autoscale formula
            and/or a new evaluation interval. You cannot call this API for the same Pool
            more than once every 30 seconds.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call EnablePoolAutoScaleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolEnableAutoScaleContent content = new BatchPoolEnableAutoScaleContent
{
    AutoScaleFormula = "$TargetDedicated=0",
    AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT8M"),
};
Response response = await client.EnablePoolAutoScaleAsync("poolId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnablePoolAutoScaleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; EnablePoolAutoScaleAsync (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; EnablePoolAutoScaleAsync(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EnablePoolAutoScaleAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EnablePoolAutoScaleAsync (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member EnablePoolAutoScaleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.EnablePoolAutoScaleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.EnablePoolAutoScaleAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Enables automatic scaling for a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.EnablePoolAutoScaleAsync(System.String,Azure.Compute.Batch.BatchPoolEnableAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EnablePoolAutoScaleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    autoScaleFormula = "$TargetDedicated=0",
    autoScaleEvaluationInterval = "PT8M",
});
Response response = await client.EnablePoolAutoScaleAsync("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EvaluatePoolAutoScale">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt; EvaluatePoolAutoScale (string poolId, Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.AutoScaleRun&gt; EvaluatePoolAutoScale(string poolId, class Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EvaluatePoolAutoScale(System.String,Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluatePoolAutoScale (poolId As String, content As BatchPoolEvaluateAutoScaleContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AutoScaleRun)" />
      <MemberSignature Language="F#" Value="abstract member EvaluatePoolAutoScale : string * Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;&#xA;override this.EvaluatePoolAutoScale : string * Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;" Usage="batchClient.EvaluatePoolAutoScale (poolId, content, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        <param name="content"> The options to use for evaluating the automatic scaling formula. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the result of evaluating an automatic scaling formula on the Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            This API is primarily for validating an autoscale formula, as it simply returns
            the result without applying the formula to the Pool. The Pool must have auto
            scaling enabled in order to evaluate a formula.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call EvaluatePoolAutoScale.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolEvaluateAutoScaleContent content = new BatchPoolEvaluateAutoScaleContent("$TargetDedicated=1");
Response<AutoScaleRun> response = client.EvaluatePoolAutoScale("poolId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EvaluatePoolAutoScale">
      <MemberSignature Language="C#" Value="public virtual Azure.Response EvaluatePoolAutoScale (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response EvaluatePoolAutoScale(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EvaluatePoolAutoScale(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluatePoolAutoScale (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member EvaluatePoolAutoScale : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.EvaluatePoolAutoScale : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.EvaluatePoolAutoScale (poolId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the result of evaluating an automatic scaling formula on the Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.EvaluatePoolAutoScale(System.String,Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EvaluatePoolAutoScale and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    autoScaleFormula = "$TargetDedicated=1",
});
Response response = client.EvaluatePoolAutoScale("poolId", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("timestamp").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EvaluatePoolAutoScaleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;&gt; EvaluatePoolAutoScaleAsync (string poolId, Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.AutoScaleRun&gt;&gt; EvaluatePoolAutoScaleAsync(string poolId, class Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EvaluatePoolAutoScaleAsync(System.String,Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluatePoolAutoScaleAsync (poolId As String, content As BatchPoolEvaluateAutoScaleContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AutoScaleRun))" />
      <MemberSignature Language="F#" Value="abstract member EvaluatePoolAutoScaleAsync : string * Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;&gt;&#xA;override this.EvaluatePoolAutoScaleAsync : string * Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;&gt;" Usage="batchClient.EvaluatePoolAutoScaleAsync (poolId, content, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.AutoScaleRun&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        <param name="content"> The options to use for evaluating the automatic scaling formula. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the result of evaluating an automatic scaling formula on the Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            This API is primarily for validating an autoscale formula, as it simply returns
            the result without applying the formula to the Pool. The Pool must have auto
            scaling enabled in order to evaluate a formula.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call EvaluatePoolAutoScaleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolEvaluateAutoScaleContent content = new BatchPoolEvaluateAutoScaleContent("$TargetDedicated=1");
Response<AutoScaleRun> response = await client.EvaluatePoolAutoScaleAsync("poolId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EvaluatePoolAutoScaleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; EvaluatePoolAutoScaleAsync (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; EvaluatePoolAutoScaleAsync(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.EvaluatePoolAutoScaleAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluatePoolAutoScaleAsync (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member EvaluatePoolAutoScaleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.EvaluatePoolAutoScaleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.EvaluatePoolAutoScaleAsync (poolId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the result of evaluating an automatic scaling formula on the Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.EvaluatePoolAutoScaleAsync(System.String,Azure.Compute.Batch.BatchPoolEvaluateAutoScaleContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call EvaluatePoolAutoScaleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    autoScaleFormula = "$TargetDedicated=1",
});
Response response = await client.EvaluatePoolAutoScaleAsync("poolId", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("timestamp").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplication">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetApplication (string applicationId, int? timeOutInSeconds, DateTimeOffset? ocpdate, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetApplication(string applicationId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplication(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplication (applicationId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetApplication : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetApplication : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetApplication (applicationId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="applicationId"> The ID of the Application. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Application.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetApplication(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="applicationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="applicationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetApplication and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetApplication("my_application_id", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("versions")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplication">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt; GetApplication (string applicationId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchApplication&gt; GetApplication(string applicationId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplication(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplication (applicationId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchApplication)" />
      <MemberSignature Language="F#" Value="abstract member GetApplication : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;&#xA;override this.GetApplication : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;" Usage="batchClient.GetApplication (applicationId, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationId"> The ID of the Application. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Application. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation returns only Applications and versions that are available for
            use on Compute Nodes; that is, that can be used in an Package reference. For
            administrator information about Applications and versions that are not yet
            available to Compute Nodes, use the Azure portal or the Azure Resource Manager
            API.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="applicationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="applicationId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetApplication.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchApplication> response = client.GetApplication("my_application_id");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetApplicationAsync (string applicationId, int? timeOutInSeconds, DateTimeOffset? ocpdate, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetApplicationAsync(string applicationId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplicationAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplicationAsync (applicationId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetApplicationAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetApplicationAsync (applicationId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="applicationId"> The ID of the Application. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Application.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetApplicationAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="applicationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="applicationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetApplicationAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetApplicationAsync("my_application_id", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("displayName").ToString());
Console.WriteLine(result.GetProperty("versions")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;&gt; GetApplicationAsync (string applicationId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchApplication&gt;&gt; GetApplicationAsync(string applicationId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplicationAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplicationAsync (applicationId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchApplication))" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;&gt;&#xA;override this.GetApplicationAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;&gt;" Usage="batchClient.GetApplicationAsync (applicationId, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchApplication&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="applicationId"> The ID of the Application. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Application. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation returns only Applications and versions that are available for
            use on Compute Nodes; that is, that can be used in an Package reference. For
            administrator information about Applications and versions that are not yet
            available to Compute Nodes, use the Azure portal or the Azure Resource Manager
            API.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="applicationId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="applicationId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetApplicationAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchApplication> response = await client.GetApplicationAsync("my_application_id");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplications">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetApplications (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetApplications(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplications(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplications (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetApplications : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetApplications : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetApplications (timeOutInSeconds, ocpdate, maxresults, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the applications available in the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetApplications(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetApplications and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetApplications(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("versions")[0].ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplications">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchApplication&gt; GetApplications (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchApplication&gt; GetApplications(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplications(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplications (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchApplication)" />
      <MemberSignature Language="F#" Value="abstract member GetApplications : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchApplication&gt;&#xA;override this.GetApplications : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchApplication&gt;" Usage="batchClient.GetApplications (timeOutInSeconds, ocpdate, maxresults, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchApplication&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the applications available in the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation returns only Applications and versions that are available for
            use on Compute Nodes; that is, that can be used in an Package reference. For
            administrator information about applications and versions that are not yet
            available to Compute Nodes, use the Azure portal or the Azure Resource Manager
            API.
            </remarks>
        <example>
This sample shows how to call GetApplications.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchApplication item in client.GetApplications())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetApplicationsAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetApplicationsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplicationsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplicationsAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetApplicationsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetApplicationsAsync (timeOutInSeconds, ocpdate, maxresults, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the applications available in the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetApplicationsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetApplicationsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetApplicationsAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("displayName").ToString());
    Console.WriteLine(result.GetProperty("versions")[0].ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchApplication&gt; GetApplicationsAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchApplication&gt; GetApplicationsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetApplicationsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApplicationsAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchApplication)" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchApplication&gt;&#xA;override this.GetApplicationsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchApplication&gt;" Usage="batchClient.GetApplicationsAsync (timeOutInSeconds, ocpdate, maxresults, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchApplication&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the applications available in the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation returns only Applications and versions that are available for
            use on Compute Nodes; that is, that can be used in an Package reference. For
            administrator information about applications and versions that are not yet
            available to Compute Nodes, use the Azure portal or the Azure Resource Manager
            API.
            </remarks>
        <example>
This sample shows how to call GetApplicationsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchApplication item in client.GetApplicationsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCertificate (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCertificate(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificate(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificate (thumbprintAlgorithm As String, thumbprint As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCertificate : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCertificate : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetCertificate (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Certificate.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetCertificate(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCertificate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetCertificate("sha1", "0123456789abcdef0123456789abcdef01234567", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("thumbprint").ToString());
Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt; GetCertificate (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.GetCertificateResponse&gt; GetCertificate(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificate(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificate (thumbprintAlgorithm As String, thumbprint As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GetCertificateResponse)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificate : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;&#xA;override this.GetCertificate : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;" Usage="batchClient.GetCertificate (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Certificate. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCertificate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<GetCertificateResponse> response = client.GetCertificate("sha1", "0123456789abcdef0123456789abcdef01234567");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCertificateAsync (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCertificateAsync(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificateAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificateAsync (thumbprintAlgorithm As String, thumbprint As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCertificateAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetCertificateAsync (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Certificate.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetCertificateAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCertificateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetCertificateAsync("sha1", "0123456789abcdef0123456789abcdef01234567", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("thumbprint").ToString());
Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;&gt; GetCertificateAsync (string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.GetCertificateResponse&gt;&gt; GetCertificateAsync(string thumbprintAlgorithm, string thumbprint, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificateAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificateAsync (thumbprintAlgorithm As String, thumbprint As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GetCertificateResponse))" />
      <MemberSignature Language="F#" Value="abstract member GetCertificateAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;&gt;&#xA;override this.GetCertificateAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;&gt;" Usage="batchClient.GetCertificateAsync (thumbprintAlgorithm, thumbprint, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.GetCertificateResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thumbprintAlgorithm" Type="System.String" />
        <Parameter Name="thumbprint" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Certificate. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="thumbprintAlgorithm" /> or <paramref name="thumbprint" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCertificateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<GetCertificateResponse> response = await client.GetCertificateAsync("sha1", "0123456789abcdef0123456789abcdef01234567");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificates">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetCertificates (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetCertificates(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificates(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificates (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificates : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetCertificates : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetCertificates (timeOutInSeconds, ocpdate, maxresults, filter, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Certificates that have been added to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetCertificates(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCertificates and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetCertificates(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("thumbprint").ToString());
    Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
    Console.WriteLine(result.GetProperty("data").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificates">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchCertificate&gt; GetCertificates (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchCertificate&gt; GetCertificates(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificates(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificates (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchCertificate)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificates : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchCertificate&gt;&#xA;override this.GetCertificates : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchCertificate&gt;" Usage="batchClient.GetCertificates (timeOutInSeconds, ocpdate, maxresults, filter, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchCertificate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Certificates that have been added to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetCertificates.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchCertificate item in client.GetCertificates())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificatesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetCertificatesAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetCertificatesAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificatesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificatesAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificatesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetCertificatesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetCertificatesAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Certificates that have been added to the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetCertificatesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCertificatesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetCertificatesAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("thumbprint").ToString());
    Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
    Console.WriteLine(result.GetProperty("data").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCertificatesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchCertificate&gt; GetCertificatesAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchCertificate&gt; GetCertificatesAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetCertificatesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCertificatesAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchCertificate)" />
      <MemberSignature Language="F#" Value="abstract member GetCertificatesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchCertificate&gt;&#xA;override this.GetCertificatesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchCertificate&gt;" Usage="batchClient.GetCertificatesAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchCertificate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Certificates that have been added to the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetCertificatesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchCertificate item in client.GetCertificatesAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetJob (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetJob(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJob(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJob (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetJob (jobId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJob(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetJob("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolInfo").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt; GetJob (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchJob&gt; GetJob(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJob(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJob (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;&#xA;override this.GetJob : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;" Usage="batchClient.GetJob (jobId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchJob> response = client.GetJob("jobId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetJobAsync (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetJobAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobAsync (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetJobAsync (jobId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetJobAsync("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("poolInfo").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;&gt; GetJobAsync (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchJob&gt;&gt; GetJobAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobAsync (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchJob))" />
      <MemberSignature Language="F#" Value="abstract member GetJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;&gt;&#xA;override this.GetJobAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;&gt;" Usage="batchClient.GetJobAsync (jobId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJob&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchJob> response = await client.GetJobAsync("jobId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobPreparationAndReleaseTaskStatuses">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetJobPreparationAndReleaseTaskStatuses (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetJobPreparationAndReleaseTaskStatuses(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobPreparationAndReleaseTaskStatuses(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobPreparationAndReleaseTaskStatuses (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobPreparationAndReleaseTaskStatuses : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetJobPreparationAndReleaseTaskStatuses : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetJobPreparationAndReleaseTaskStatuses (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the execution status of the Job Preparation and Job Release Task for the
            specified Job across the Compute Nodes where the Job has run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobPreparationAndReleaseTaskStatuses(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobPreparationAndReleaseTaskStatuses and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetJobPreparationAndReleaseTaskStatuses("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobPreparationAndReleaseTaskStatuses">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt; GetJobPreparationAndReleaseTaskStatuses (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt; GetJobPreparationAndReleaseTaskStatuses(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobPreparationAndReleaseTaskStatuses(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobPreparationAndReleaseTaskStatuses (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchJobPreparationAndReleaseTaskStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetJobPreparationAndReleaseTaskStatuses : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt;&#xA;override this.GetJobPreparationAndReleaseTaskStatuses : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt;" Usage="batchClient.GetJobPreparationAndReleaseTaskStatuses (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the execution status of the Job Preparation and Job Release Task for the
            specified Job across the Compute Nodes where the Job has run.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This API returns the Job Preparation and Job Release Task status on all Compute
            Nodes that have run the Job Preparation or Job Release Task. This includes
            Compute Nodes which have since been removed from the Pool. If this API is
            invoked on a Job which has no Job Preparation or Job Release Task, the Batch
            service returns HTTP status code 409 (Conflict) with an error code of
            JobPreparationTaskNotSpecified.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobPreparationAndReleaseTaskStatuses.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchJobPreparationAndReleaseTaskStatus item in client.GetJobPreparationAndReleaseTaskStatuses("jobId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobPreparationAndReleaseTaskStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetJobPreparationAndReleaseTaskStatusesAsync (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetJobPreparationAndReleaseTaskStatusesAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobPreparationAndReleaseTaskStatusesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobPreparationAndReleaseTaskStatusesAsync (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobPreparationAndReleaseTaskStatusesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetJobPreparationAndReleaseTaskStatusesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetJobPreparationAndReleaseTaskStatusesAsync (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the execution status of the Job Preparation and Job Release Task for the
            specified Job across the Compute Nodes where the Job has run.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobPreparationAndReleaseTaskStatusesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobPreparationAndReleaseTaskStatusesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetJobPreparationAndReleaseTaskStatusesAsync("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobPreparationAndReleaseTaskStatusesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt; GetJobPreparationAndReleaseTaskStatusesAsync (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt; GetJobPreparationAndReleaseTaskStatusesAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobPreparationAndReleaseTaskStatusesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobPreparationAndReleaseTaskStatusesAsync (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchJobPreparationAndReleaseTaskStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetJobPreparationAndReleaseTaskStatusesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt;&#xA;override this.GetJobPreparationAndReleaseTaskStatusesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt;" Usage="batchClient.GetJobPreparationAndReleaseTaskStatusesAsync (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobPreparationAndReleaseTaskStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the execution status of the Job Preparation and Job Release Task for the
            specified Job across the Compute Nodes where the Job has run.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This API returns the Job Preparation and Job Release Task status on all Compute
            Nodes that have run the Job Preparation or Job Release Task. This includes
            Compute Nodes which have since been removed from the Pool. If this API is
            invoked on a Job which has no Job Preparation or Job Release Task, the Batch
            service returns HTTP status code 409 (Conflict) with an error code of
            JobPreparationTaskNotSpecified.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobPreparationAndReleaseTaskStatusesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchJobPreparationAndReleaseTaskStatus item in client.GetJobPreparationAndReleaseTaskStatusesAsync("jobId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetJobs (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetJobs(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobs(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobs (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobs : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetJobs : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetJobs (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Jobs in the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobs(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobs and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetJobs(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolInfo").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt; GetJobs (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchJob&gt; GetJobs(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobs(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobs (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJobs : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt;&#xA;override this.GetJobs : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt;" Usage="batchClient.GetJobs (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Jobs in the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetJobs.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchJob item in client.GetJobs())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetJobsAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetJobsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetJobsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetJobsAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Jobs in the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetJobsAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolInfo").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt; GetJobsAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchJob&gt; GetJobsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt;&#xA;override this.GetJobsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt;" Usage="batchClient.GetJobsAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Jobs in the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetJobsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchJob item in client.GetJobsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetJobSchedule (string jobScheduleId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetJobSchedule(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobSchedule (jobScheduleId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetJobSchedule (jobScheduleId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobSchedule and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetJobSchedule("jobScheduleId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt; GetJobSchedule (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchJobSchedule&gt; GetJobSchedule(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobSchedule (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchJobSchedule)" />
      <MemberSignature Language="F#" Value="abstract member GetJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&#xA;override this.GetJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;" Usage="batchClient.GetJobSchedule (jobScheduleId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Job Schedule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchJobSchedule> response = client.GetJobSchedule("jobScheduleId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetJobScheduleAsync (string jobScheduleId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetJobScheduleAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobScheduleAsync (jobScheduleId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetJobScheduleAsync (jobScheduleId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobScheduleAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetJobScheduleAsync("jobScheduleId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&gt; GetJobScheduleAsync (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchJobSchedule&gt;&gt; GetJobScheduleAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobScheduleAsync (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchJobSchedule))" />
      <MemberSignature Language="F#" Value="abstract member GetJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&gt;&#xA;override this.GetJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&gt;" Usage="batchClient.GetJobScheduleAsync (jobScheduleId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Job Schedule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchJobSchedule> response = await client.GetJobScheduleAsync("jobScheduleId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetJobSchedules (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetJobSchedules(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobSchedules(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobSchedules (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobSchedules : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetJobSchedules : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetJobSchedules (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Job Schedules in the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobSchedules(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobSchedules and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetJobSchedules(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt; GetJobSchedules (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchJobSchedule&gt; GetJobSchedules(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobSchedules(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobSchedules (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchJobSchedule)" />
      <MemberSignature Language="F#" Value="abstract member GetJobSchedules : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&#xA;override this.GetJobSchedules : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt;" Usage="batchClient.GetJobSchedules (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Job Schedules in the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetJobSchedules.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchJobSchedule item in client.GetJobSchedules())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobSchedulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetJobSchedulesAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetJobSchedulesAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobSchedulesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobSchedulesAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobSchedulesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetJobSchedulesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetJobSchedulesAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Job Schedules in the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobSchedulesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobSchedulesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetJobSchedulesAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobSchedulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt; GetJobSchedulesAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchJobSchedule&gt; GetJobSchedulesAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobSchedulesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobSchedulesAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchJobSchedule)" />
      <MemberSignature Language="F#" Value="abstract member GetJobSchedulesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt;&#xA;override this.GetJobSchedulesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt;" Usage="batchClient.GetJobSchedulesAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJobSchedule&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Job Schedules in the specified Account. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetJobSchedulesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchJobSchedule item in client.GetJobSchedulesAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsFromSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetJobsFromSchedules (string jobScheduleId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetJobsFromSchedules(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobsFromSchedules(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsFromSchedules (jobScheduleId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsFromSchedules : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetJobsFromSchedules : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetJobsFromSchedules (jobScheduleId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the Jobs that have been created under the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobsFromSchedules(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobsFromSchedules and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetJobsFromSchedules("jobScheduleId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolInfo").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsFromSchedules">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt; GetJobsFromSchedules (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchJob&gt; GetJobsFromSchedules(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobsFromSchedules(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsFromSchedules (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsFromSchedules : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt;&#xA;override this.GetJobsFromSchedules : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt;" Usage="batchClient.GetJobsFromSchedules (jobScheduleId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobsFromSchedules.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchJob item in client.GetJobsFromSchedules("jobScheduleId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsFromSchedulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetJobsFromSchedulesAsync (string jobScheduleId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetJobsFromSchedulesAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobsFromSchedulesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsFromSchedulesAsync (jobScheduleId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsFromSchedulesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetJobsFromSchedulesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetJobsFromSchedulesAsync (jobScheduleId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the Jobs that have been created under the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobsFromSchedulesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobsFromSchedulesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetJobsFromSchedulesAsync("jobScheduleId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolInfo").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsFromSchedulesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt; GetJobsFromSchedulesAsync (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchJob&gt; GetJobsFromSchedulesAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobsFromSchedulesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsFromSchedulesAsync (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsFromSchedulesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt;&#xA;override this.GetJobsFromSchedulesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt;" Usage="batchClient.GetJobsFromSchedulesAsync (jobScheduleId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobsFromSchedulesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchJob item in client.GetJobsFromSchedulesAsync("jobScheduleId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobTaskCounts">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetJobTaskCounts (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetJobTaskCounts(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobTaskCounts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobTaskCounts (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetJobTaskCounts : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetJobTaskCounts : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetJobTaskCounts (jobId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the Task counts for the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobTaskCounts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobTaskCounts and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetJobTaskCounts("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("active").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("running").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("succeeded").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("active").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("running").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("succeeded").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("failed").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobTaskCounts">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt; GetJobTaskCounts (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchTaskCountsResult&gt; GetJobTaskCounts(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobTaskCounts(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobTaskCounts (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchTaskCountsResult)" />
      <MemberSignature Language="F#" Value="abstract member GetJobTaskCounts : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;&#xA;override this.GetJobTaskCounts : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;" Usage="batchClient.GetJobTaskCounts (jobId, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the Task counts for the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Task counts provide a count of the Tasks by active, running or completed Task
            state, and a count of Tasks which succeeded or failed. Tasks in the preparing
            state are counted as running. Note that the numbers returned may not always be
            up to date. If you need exact task counts, use a list query.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobTaskCounts.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchTaskCountsResult> response = client.GetJobTaskCounts("jobId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobTaskCountsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetJobTaskCountsAsync (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetJobTaskCountsAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobTaskCountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobTaskCountsAsync (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetJobTaskCountsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetJobTaskCountsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetJobTaskCountsAsync (jobId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the Task counts for the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetJobTaskCountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobTaskCountsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetJobTaskCountsAsync("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("active").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("running").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("succeeded").ToString());
Console.WriteLine(result.GetProperty("taskCounts").GetProperty("failed").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("active").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("running").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("completed").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("succeeded").ToString());
Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("failed").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobTaskCountsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;&gt; GetJobTaskCountsAsync (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchTaskCountsResult&gt;&gt; GetJobTaskCountsAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetJobTaskCountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobTaskCountsAsync (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchTaskCountsResult))" />
      <MemberSignature Language="F#" Value="abstract member GetJobTaskCountsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;&gt;&#xA;override this.GetJobTaskCountsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;&gt;" Usage="batchClient.GetJobTaskCountsAsync (jobId, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTaskCountsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the Task counts for the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            Task counts provide a count of the Tasks by active, running or completed Task
            state, and a count of Tasks which succeeded or failed. Tasks in the preparing
            state are counted as running. Note that the numbers returned may not always be
            up to date. If you need exact task counts, use a list query.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobTaskCountsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchTaskCountsResult> response = await client.GetJobTaskCountsAsync("jobId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetNode (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetNode(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNode(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNode (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetNode : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetNode : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetNode (poolId, nodeId, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNode(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNode and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetNode("poolId", "tvm-1695681911_2-20161122t193202z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt; GetNode (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchNode&gt; GetNode(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNode(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNode (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchNode)" />
      <MemberSignature Language="F#" Value="abstract member GetNode : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;&#xA;override this.GetNode : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;" Usage="batchClient.GetNode (poolId, nodeId, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchNode> response = client.GetNode("poolId", "tvm-1695681911_2-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetNodeAsync (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetNodeAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeAsync (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetNodeAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetNodeAsync (poolId, nodeId, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetNodeAsync("poolId", "tvm-1695681911_2-20161122t193202z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;&gt; GetNodeAsync (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchNode&gt;&gt; GetNodeAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeAsync (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchNode))" />
      <MemberSignature Language="F#" Value="abstract member GetNodeAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;&gt;&#xA;override this.GetNodeAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;&gt;" Usage="batchClient.GetNodeAsync (poolId, nodeId, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNode&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchNode> response = await client.GetNodeAsync("poolId", "tvm-1695681911_2-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtension">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetNodeExtension (string poolId, string nodeId, string extensionName, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetNodeExtension(string poolId, string nodeId, string extensionName, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtension(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtension (poolId As String, nodeId As String, extensionName As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtension : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetNodeExtension : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetNodeExtension (poolId, nodeId, extensionName, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="extensionName" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Compute Node Extension.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeExtension(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeExtension and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetNodeExtension("poolId", "tvm-1695681911_2-20161122t193202z", "batchNodeExtension", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtension">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt; GetNodeExtension (string poolId, string nodeId, string extensionName, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchNodeVMExtension&gt; GetNodeExtension(string poolId, string nodeId, string extensionName, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtension(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtension (poolId As String, nodeId As String, extensionName As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchNodeVMExtension)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtension : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&#xA;override this.GetNodeExtension : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;" Usage="batchClient.GetNodeExtension (poolId, nodeId, extensionName, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="extensionName" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Compute Node Extension. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeExtension.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchNodeVMExtension> response = client.GetNodeExtension("poolId", "tvm-1695681911_2-20161122t193202z", "batchNodeExtension");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtensionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetNodeExtensionAsync (string poolId, string nodeId, string extensionName, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetNodeExtensionAsync(string poolId, string nodeId, string extensionName, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtensionAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtensionAsync (poolId As String, nodeId As String, extensionName As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtensionAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetNodeExtensionAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetNodeExtensionAsync (poolId, nodeId, extensionName, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="extensionName" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Compute Node Extension.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeExtensionAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeExtensionAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetNodeExtensionAsync("poolId", "tvm-1695681911_2-20161122t193202z", "batchNodeExtension", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtensionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&gt; GetNodeExtensionAsync (string poolId, string nodeId, string extensionName, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchNodeVMExtension&gt;&gt; GetNodeExtensionAsync(string poolId, string nodeId, string extensionName, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtensionAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtensionAsync (poolId As String, nodeId As String, extensionName As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchNodeVMExtension))" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtensionAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&gt;&#xA;override this.GetNodeExtensionAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&gt;" Usage="batchClient.GetNodeExtensionAsync (poolId, nodeId, extensionName, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="extensionName" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Compute Node Extension. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="extensionName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeExtensionAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchNodeVMExtension> response = await client.GetNodeExtensionAsync("poolId", "tvm-1695681911_2-20161122t193202z", "batchNodeExtension");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtensions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetNodeExtensions (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetNodeExtensions(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtensions(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtensions (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), select As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtensions : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetNodeExtensions : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetNodeExtensions (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the Compute Nodes Extensions in the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeExtensions(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeExtensions and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetNodeExtensions("poolId", "tvm-1695681911_2-20161122t193202z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtensions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt; GetNodeExtensions (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchNodeVMExtension&gt; GetNodeExtensions(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtensions(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtensions (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchNodeVMExtension)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtensions : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&#xA;override this.GetNodeExtensions : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;" Usage="batchClient.GetNodeExtensions (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeExtensions.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchNodeVMExtension item in client.GetNodeExtensions("poolId", "tvm-1695681911_2-20161122t193202z"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtensionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetNodeExtensionsAsync (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetNodeExtensionsAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtensionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtensionsAsync (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), select As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtensionsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetNodeExtensionsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetNodeExtensionsAsync (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the Compute Nodes Extensions in the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeExtensionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeExtensionsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetNodeExtensionsAsync("poolId", "tvm-1695681911_2-20161122t193202z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeExtensionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt; GetNodeExtensionsAsync (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchNodeVMExtension&gt; GetNodeExtensionsAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeExtensionsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeExtensionsAsync (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchNodeVMExtension)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeExtensionsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;&#xA;override this.GetNodeExtensionsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;" Usage="batchClient.GetNodeExtensionsAsync (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeVMExtension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeExtensionsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchNodeVMExtension item in client.GetNodeExtensionsAsync("poolId", "tvm-1695681911_2-20161122t193202z"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetNodeFile (string poolId, string nodeId, string filePath, int? timeOutInSeconds, DateTimeOffset? ocpdate, string ocpRange, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetNodeFile(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFile (poolId As String, nodeId As String, filePath As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), ocpRange As String, requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetNodeFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetNodeFile (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns the content of the specified Compute Node file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetNodeFile("poolId", "nodeId", "workitems\\jobId\\job-1\\task1\\wd\\testFile.txt", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;BinaryData&gt; GetNodeFile (string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, string ocpRange = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.BinaryData&gt; GetNodeFile(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFile (poolId As String, nodeId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional ocpRange As String = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;&#xA;override this.GetNodeFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;" Usage="batchClient.GetNodeFile (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns the content of the specified Compute Node file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BinaryData> response = client.GetNodeFile("poolId", "nodeId", "workitems\\jobId\\job-1\\task1\\wd\\testFile.txt");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetNodeFileAsync (string poolId, string nodeId, string filePath, int? timeOutInSeconds, DateTimeOffset? ocpdate, string ocpRange, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetNodeFileAsync(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFileAsync (poolId As String, nodeId As String, filePath As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), ocpRange As String, requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetNodeFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetNodeFileAsync (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns the content of the specified Compute Node file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetNodeFileAsync("poolId", "nodeId", "workitems\\jobId\\job-1\\task1\\wd\\testFile.txt", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt; GetNodeFileAsync (string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, string ocpRange = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.BinaryData&gt;&gt; GetNodeFileAsync(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFileAsync (poolId As String, nodeId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional ocpRange As String = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;&#xA;override this.GetNodeFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;" Usage="batchClient.GetNodeFileAsync (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns the content of the specified Compute Node file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BinaryData> response = await client.GetNodeFileAsync("poolId", "nodeId", "workitems\\jobId\\job-1\\task1\\wd\\testFile.txt");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFileProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt; GetNodeFileProperties (string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchFileProperties&gt; GetNodeFileProperties(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFileProperties(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFileProperties (poolId As String, nodeId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchFileProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFileProperties : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&#xA;override this.GetNodeFileProperties : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;" Usage="batchClient.GetNodeFileProperties (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Gets the properties of the specified Compute Node file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFilePropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt; GetNodeFilePropertiesAsync (string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchFileProperties&gt;&gt; GetNodeFilePropertiesAsync(string poolId, string nodeId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFilePropertiesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFilePropertiesAsync (poolId As String, nodeId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchFileProperties))" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFilePropertiesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt;&#xA;override this.GetNodeFilePropertiesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt;" Usage="batchClient.GetNodeFilePropertiesAsync (poolId, nodeId, filePath, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node. </param>
        <param name="filePath"> The path to the file or directory. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Gets the properties of the specified Compute Node file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetNodeFiles (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetNodeFiles(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFiles (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, recursive As Nullable(Of Boolean), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetNodeFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetNodeFiles (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
            </param>
        <param name="recursive"> Whether to list children of a directory. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the files in Task directories on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetNodeFiles("poolId", "tvm-1695681911_1-20161122t193202z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, false, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt; GetNodeFiles (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchNodeFile&gt; GetNodeFiles(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFiles (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchNodeFile)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;&#xA;override this.GetNodeFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;" Usage="batchClient.GetNodeFiles (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
            </param>
        <param name="recursive"> Whether to list children of a directory. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the files in Task directories on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchNodeFile item in client.GetNodeFiles("poolId", "tvm-1695681911_1-20161122t193202z"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetNodeFilesAsync (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetNodeFilesAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFilesAsync (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, recursive As Nullable(Of Boolean), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetNodeFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetNodeFilesAsync (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
            </param>
        <param name="recursive"> Whether to list children of a directory. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the files in Task directories on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetNodeFilesAsync("poolId", "tvm-1695681911_1-20161122t193202z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, false, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt; GetNodeFilesAsync (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchNodeFile&gt; GetNodeFilesAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeFilesAsync (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchNodeFile)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;&#xA;override this.GetNodeFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;" Usage="batchClient.GetNodeFilesAsync (poolId, nodeId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
            </param>
        <param name="recursive"> Whether to list children of a directory. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the files in Task directories on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchNodeFile item in client.GetNodeFilesAsync("poolId", "tvm-1695681911_1-20161122t193202z"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeRemoteLoginSettings">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetNodeRemoteLoginSettings (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetNodeRemoteLoginSettings(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeRemoteLoginSettings(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeRemoteLoginSettings (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetNodeRemoteLoginSettings : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetNodeRemoteLoginSettings : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetNodeRemoteLoginSettings (poolId, nodeId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the settings required for remote login to a Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeRemoteLoginSettings(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeRemoteLoginSettings and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetNodeRemoteLoginSettings("poolId", "tvm-1695681911_1-20161121t182739z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("remoteLoginIPAddress").ToString());
Console.WriteLine(result.GetProperty("remoteLoginPort").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeRemoteLoginSettings">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt; GetNodeRemoteLoginSettings (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt; GetNodeRemoteLoginSettings(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeRemoteLoginSettings(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeRemoteLoginSettings (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchNodeRemoteLoginSettings)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeRemoteLoginSettings : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;&#xA;override this.GetNodeRemoteLoginSettings : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;" Usage="batchClient.GetNodeRemoteLoginSettings (poolId, nodeId, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the settings required for remote login to a Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            Before you can remotely login to a Compute Node using the remote login settings,
            you must create a user Account on the Compute Node.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeRemoteLoginSettings.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchNodeRemoteLoginSettings> response = client.GetNodeRemoteLoginSettings("poolId", "tvm-1695681911_1-20161121t182739z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeRemoteLoginSettingsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetNodeRemoteLoginSettingsAsync (string poolId, string nodeId, int? timeOutInSeconds, DateTimeOffset? ocpdate, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetNodeRemoteLoginSettingsAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeRemoteLoginSettingsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeRemoteLoginSettingsAsync (poolId As String, nodeId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetNodeRemoteLoginSettingsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetNodeRemoteLoginSettingsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetNodeRemoteLoginSettingsAsync (poolId, nodeId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the settings required for remote login to a Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodeRemoteLoginSettingsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodeRemoteLoginSettingsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetNodeRemoteLoginSettingsAsync("poolId", "tvm-1695681911_1-20161121t182739z", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("remoteLoginIPAddress").ToString());
Console.WriteLine(result.GetProperty("remoteLoginPort").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodeRemoteLoginSettingsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;&gt; GetNodeRemoteLoginSettingsAsync (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;&gt; GetNodeRemoteLoginSettingsAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodeRemoteLoginSettingsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodeRemoteLoginSettingsAsync (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchNodeRemoteLoginSettings))" />
      <MemberSignature Language="F#" Value="abstract member GetNodeRemoteLoginSettingsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;&gt;&#xA;override this.GetNodeRemoteLoginSettingsAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;&gt;" Usage="batchClient.GetNodeRemoteLoginSettingsAsync (poolId, nodeId, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchNodeRemoteLoginSettings&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets the settings required for remote login to a Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            Before you can remotely login to a Compute Node using the remote login settings,
            you must create a user Account on the Compute Node.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodeRemoteLoginSettingsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchNodeRemoteLoginSettings> response = await client.GetNodeRemoteLoginSettingsAsync("poolId", "tvm-1695681911_1-20161121t182739z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetNodes (string poolId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetNodes(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodes(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodes (poolId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodes : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetNodes : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetNodes (poolId, timeOutInSeconds, ocpdate, maxresults, filter, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the Compute Nodes in the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodes(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodes and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetNodes("poolId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchNode&gt; GetNodes (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchNode&gt; GetNodes(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodes(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodes (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchNode)" />
      <MemberSignature Language="F#" Value="abstract member GetNodes : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNode&gt;&#xA;override this.GetNodes : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNode&gt;" Usage="batchClient.GetNodes (poolId, timeOutInSeconds, ocpdate, maxresults, filter, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the Compute Nodes in the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodes.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchNode item in client.GetNodes("poolId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetNodesAsync (string poolId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetNodesAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodesAsync (poolId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetNodesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetNodesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetNodesAsync (poolId, timeOutInSeconds, ocpdate, maxresults, filter, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the Compute Nodes in the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetNodesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetNodesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetNodesAsync("poolId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetNodesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNode&gt; GetNodesAsync (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchNode&gt; GetNodesAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetNodesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNodesAsync (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchNode)" />
      <MemberSignature Language="F#" Value="abstract member GetNodesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNode&gt;&#xA;override this.GetNodesAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNode&gt;" Usage="batchClient.GetNodesAsync (poolId, timeOutInSeconds, ocpdate, maxresults, filter, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNode&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the Compute Nodes in the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetNodesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchNode item in client.GetNodesAsync("poolId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetPool (string poolId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetPool(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPool(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPool (poolId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetPool : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetPool : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetPool (poolId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPool(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetPool("pool", null, DateTimeOffset.Parse("Fri, 28 Apr 2023 02:43:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetPool("pool", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetPool("mypool001", null, DateTimeOffset.Parse("Wed, 14 Jun 2023 06:39:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetPool("pool", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetPool("mypool001", null, DateTimeOffset.Parse("Wed, 23 Aug 2023 08:42:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPool and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetPool("pool", null, DateTimeOffset.Parse("Thu, 11 May 2023 08:08:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt; GetPool (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchPool&gt; GetPool(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPool(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPool (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchPool)" />
      <MemberSignature Language="F#" Value="abstract member GetPool : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;&#xA;override this.GetPool : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;" Usage="batchClient.GetPool (poolId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = client.GetPool("pool");
]]></code>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = client.GetPool("pool");
]]></code>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = client.GetPool("mypool001");
]]></code>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = client.GetPool("pool");
]]></code>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = client.GetPool("mypool001");
]]></code>
This sample shows how to call GetPool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = client.GetPool("pool");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetPoolAsync (string poolId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetPoolAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolAsync (poolId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetPoolAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetPoolAsync (poolId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPoolAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetPoolAsync("pool", null, DateTimeOffset.Parse("Fri, 28 Apr 2023 02:43:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetPoolAsync("pool", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetPoolAsync("mypool001", null, DateTimeOffset.Parse("Wed, 14 Jun 2023 06:39:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetPoolAsync("pool", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetPoolAsync("mypool001", null, DateTimeOffset.Parse("Wed, 23 Aug 2023 08:42:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetPoolAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetPoolAsync("pool", null, DateTimeOffset.Parse("Thu, 11 May 2023 08:08:01 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;&gt; GetPoolAsync (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchPool&gt;&gt; GetPoolAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolAsync (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchPool))" />
      <MemberSignature Language="F#" Value="abstract member GetPoolAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;&gt;&#xA;override this.GetPoolAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;&gt;" Usage="batchClient.GetPoolAsync (poolId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchPool&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = await client.GetPoolAsync("pool");
]]></code>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = await client.GetPoolAsync("pool");
]]></code>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = await client.GetPoolAsync("mypool001");
]]></code>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = await client.GetPoolAsync("pool");
]]></code>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = await client.GetPoolAsync("mypool001");
]]></code>
This sample shows how to call GetPoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchPool> response = await client.GetPoolAsync("pool");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolNodeCounts">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetPoolNodeCounts (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetPoolNodeCounts(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolNodeCounts(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolNodeCounts (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolNodeCounts : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetPoolNodeCounts : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetPoolNodeCounts (timeOutInSeconds, ocpdate, maxresults, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
            numbers returned may not always be up to date. If you need exact node counts,
            use a list query.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPoolNodeCounts(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolNodeCounts and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetPoolNodeCounts(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolId").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolNodeCounts">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt; GetPoolNodeCounts (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchPoolNodeCounts&gt; GetPoolNodeCounts(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolNodeCounts(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolNodeCounts (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchPoolNodeCounts)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolNodeCounts : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt;&#xA;override this.GetPoolNodeCounts : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt;" Usage="batchClient.GetPoolNodeCounts (timeOutInSeconds, ocpdate, maxresults, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
            numbers returned may not always be up to date. If you need exact node counts,
            use a list query.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetPoolNodeCounts.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchPoolNodeCounts item in client.GetPoolNodeCounts())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolNodeCountsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetPoolNodeCountsAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetPoolNodeCountsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolNodeCountsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolNodeCountsAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolNodeCountsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetPoolNodeCountsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetPoolNodeCountsAsync (timeOutInSeconds, ocpdate, maxresults, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
            numbers returned may not always be up to date. If you need exact node counts,
            use a list query.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPoolNodeCountsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolNodeCountsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetPoolNodeCountsAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolId").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolNodeCountsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt; GetPoolNodeCountsAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchPoolNodeCounts&gt; GetPoolNodeCountsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolNodeCountsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolNodeCountsAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchPoolNodeCounts)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolNodeCountsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt;&#xA;override this.GetPoolNodeCountsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt;" Usage="batchClient.GetPoolNodeCountsAsync (timeOutInSeconds, ocpdate, maxresults, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolNodeCounts&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
            numbers returned may not always be up to date. If you need exact node counts,
            use a list query.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetPoolNodeCountsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchPoolNodeCounts item in client.GetPoolNodeCountsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPools">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetPools (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetPools(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPools(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPools (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPools : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetPools : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetPools (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Pools which be mounted.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPools(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPools and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetPools(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPools">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchPool&gt; GetPools (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchPool&gt; GetPools(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPools(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPools (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchPool)" />
      <MemberSignature Language="F#" Value="abstract member GetPools : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchPool&gt;&#xA;override this.GetPools : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchPool&gt;" Usage="batchClient.GetPools (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchPool&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Pools which be mounted. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetPools.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchPool item in client.GetPools())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetPoolsAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetPoolsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolsAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetPoolsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetPoolsAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Pools which be mounted.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPoolsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetPoolsAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPool&gt; GetPoolsAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchPool&gt; GetPoolsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolsAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchPool)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPool&gt;&#xA;override this.GetPoolsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPool&gt;" Usage="batchClient.GetPoolsAsync (timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPool&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Pools which be mounted. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetPoolsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchPool item in client.GetPoolsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolUsageMetrics">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetPoolUsageMetrics (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, DateTimeOffset? starttime, DateTimeOffset? endtime, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetPoolUsageMetrics(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; starttime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endtime, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolUsageMetrics(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolUsageMetrics (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), starttime As Nullable(Of DateTimeOffset), endtime As Nullable(Of DateTimeOffset), filter As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolUsageMetrics : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetPoolUsageMetrics : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetPoolUsageMetrics (timeOutInSeconds, ocpdate, maxresults, starttime, endtime, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="starttime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endtime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="starttime">
            The earliest time from which to include metrics. This must be at least two and
            a half hours before the current time. If not specified this defaults to the
            start time of the last aggregation interval currently available.
            </param>
        <param name="endtime">
            The latest time from which to include metrics. This must be at least two hours
            before the current time. If not specified this defaults to the end time of the
            last aggregation interval currently available.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the usage metrics, aggregated by Pool across individual time intervals,
            for the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPoolUsageMetrics(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolUsageMetrics and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetPoolUsageMetrics(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("vmSize").ToString());
    Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolUsageMetrics">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt; GetPoolUsageMetrics (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, DateTimeOffset? starttime = default, DateTimeOffset? endtime = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchPoolUsageMetrics&gt; GetPoolUsageMetrics(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; starttime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endtime, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolUsageMetrics(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolUsageMetrics (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional starttime As Nullable(Of DateTimeOffset) = Nothing, Optional endtime As Nullable(Of DateTimeOffset) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchPoolUsageMetrics)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolUsageMetrics : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt;&#xA;override this.GetPoolUsageMetrics : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt;" Usage="batchClient.GetPoolUsageMetrics (timeOutInSeconds, ocpdate, maxresults, starttime, endtime, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="starttime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endtime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="starttime">
            The earliest time from which to include metrics. This must be at least two and
            a half hours before the current time. If not specified this defaults to the
            start time of the last aggregation interval currently available.
            </param>
        <param name="endtime">
            The latest time from which to include metrics. This must be at least two hours
            before the current time. If not specified this defaults to the end time of the
            last aggregation interval currently available.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the usage metrics, aggregated by Pool across individual time intervals,
            for the specified Account.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If you do not specify a $filter clause including a poolId, the response
            includes all Pools that existed in the Account in the time range of the
            returned aggregation intervals. If you do not specify a $filter clause
            including a startTime or endTime these filters default to the start and end
            times of the last aggregation interval currently available; that is, only the
            last aggregation interval is returned.
            </remarks>
        <example>
This sample shows how to call GetPoolUsageMetrics.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchPoolUsageMetrics item in client.GetPoolUsageMetrics())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolUsageMetricsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetPoolUsageMetricsAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, DateTimeOffset? starttime, DateTimeOffset? endtime, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetPoolUsageMetricsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; starttime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endtime, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolUsageMetricsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolUsageMetricsAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), starttime As Nullable(Of DateTimeOffset), endtime As Nullable(Of DateTimeOffset), filter As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolUsageMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetPoolUsageMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetPoolUsageMetricsAsync (timeOutInSeconds, ocpdate, maxresults, starttime, endtime, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="starttime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endtime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="starttime">
            The earliest time from which to include metrics. This must be at least two and
            a half hours before the current time. If not specified this defaults to the
            start time of the last aggregation interval currently available.
            </param>
        <param name="endtime">
            The latest time from which to include metrics. This must be at least two hours
            before the current time. If not specified this defaults to the end time of the
            last aggregation interval currently available.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the usage metrics, aggregated by Pool across individual time intervals,
            for the specified Account.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetPoolUsageMetricsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPoolUsageMetricsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetPoolUsageMetricsAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("poolId").ToString());
    Console.WriteLine(result.GetProperty("startTime").ToString());
    Console.WriteLine(result.GetProperty("endTime").ToString());
    Console.WriteLine(result.GetProperty("vmSize").ToString());
    Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPoolUsageMetricsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt; GetPoolUsageMetricsAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, DateTimeOffset? starttime = default, DateTimeOffset? endtime = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchPoolUsageMetrics&gt; GetPoolUsageMetricsAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; starttime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endtime, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetPoolUsageMetricsAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPoolUsageMetricsAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional starttime As Nullable(Of DateTimeOffset) = Nothing, Optional endtime As Nullable(Of DateTimeOffset) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchPoolUsageMetrics)" />
      <MemberSignature Language="F#" Value="abstract member GetPoolUsageMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt;&#xA;override this.GetPoolUsageMetricsAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt;" Usage="batchClient.GetPoolUsageMetricsAsync (timeOutInSeconds, ocpdate, maxresults, starttime, endtime, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchPoolUsageMetrics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="starttime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endtime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="starttime">
            The earliest time from which to include metrics. This must be at least two and
            a half hours before the current time. If not specified this defaults to the
            start time of the last aggregation interval currently available.
            </param>
        <param name="endtime">
            The latest time from which to include metrics. This must be at least two hours
            before the current time. If not specified this defaults to the end time of the
            last aggregation interval currently available.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the usage metrics, aggregated by Pool across individual time intervals,
            for the specified Account.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            If you do not specify a $filter clause including a poolId, the response
            includes all Pools that existed in the Account in the time range of the
            returned aggregation intervals. If you do not specify a $filter clause
            including a startTime or endTime these filters default to the start and end
            times of the last aggregation interval currently available; that is, only the
            last aggregation interval is returned.
            </remarks>
        <example>
This sample shows how to call GetPoolUsageMetricsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchPoolUsageMetrics item in client.GetPoolUsageMetricsAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSubTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSubTasks (string jobId, string taskId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSubTasks(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSubTasks(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubTasks (jobId As String, taskId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSubTasks : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSubTasks : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetSubTasks (jobId, taskId, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="taskId"> The ID of the Task. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the subtasks that are associated with the specified multi-instance
            Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetSubTasks(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSubTasks and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetSubTasks("jobId", "taskId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSubTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchSubtask&gt; GetSubTasks (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchSubtask&gt; GetSubTasks(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSubTasks(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubTasks (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchSubtask)" />
      <MemberSignature Language="F#" Value="abstract member GetSubTasks : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchSubtask&gt;&#xA;override this.GetSubTasks : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchSubtask&gt;" Usage="batchClient.GetSubTasks (jobId, taskId, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchSubtask&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="taskId"> The ID of the Task. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all of the subtasks that are associated with the specified multi-instance
            Task.
            </summary>
        <returns>To be added.</returns>
        <remarks> If the Task is not a multi-instance Task then this returns an empty collection. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetSubTasks.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchSubtask item in client.GetSubTasks("jobId", "taskId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSubTasksAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSubTasksAsync (string jobId, string taskId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSubTasksAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSubTasksAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubTasksAsync (jobId As String, taskId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSubTasksAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSubTasksAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetSubTasksAsync (jobId, taskId, timeOutInSeconds, ocpdate, select, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="taskId"> The ID of the Task. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the subtasks that are associated with the specified multi-instance
            Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetSubTasksAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSubTasksAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetSubTasksAsync("jobId", "taskId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSubTasksAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSubtask&gt; GetSubTasksAsync (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchSubtask&gt; GetSubTasksAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSubTasksAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubTasksAsync (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchSubtask)" />
      <MemberSignature Language="F#" Value="abstract member GetSubTasksAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSubtask&gt;&#xA;override this.GetSubTasksAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSubtask&gt;" Usage="batchClient.GetSubTasksAsync (jobId, taskId, timeOutInSeconds, ocpdate, select, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSubtask&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="taskId"> The ID of the Task. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all of the subtasks that are associated with the specified multi-instance
            Task.
            </summary>
        <returns>To be added.</returns>
        <remarks> If the Task is not a multi-instance Task then this returns an empty collection. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetSubTasksAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchSubtask item in client.GetSubTasksAsync("jobId", "taskId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedImages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSupportedImages (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSupportedImages(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSupportedImages(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedImages (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedImages : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSupportedImages : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetSupportedImages (timeOutInSeconds, ocpdate, maxresults, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all Virtual Machine Images supported by the Azure Batch service.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetSupportedImages(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSupportedImages and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetSupportedImages(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("nodeAgentSKUId").ToString());
    Console.WriteLine(result.GetProperty("imageReference").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("verificationType").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedImages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt; GetSupportedImages (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchSupportedImage&gt; GetSupportedImages(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSupportedImages(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedImages (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchSupportedImage)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedImages : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt;&#xA;override this.GetSupportedImages : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt;" Usage="batchClient.GetSupportedImages (timeOutInSeconds, ocpdate, maxresults, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetSupportedImages.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchSupportedImage item in client.GetSupportedImages())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedImagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSupportedImagesAsync (int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSupportedImagesAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSupportedImagesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedImagesAsync (timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedImagesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSupportedImagesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetSupportedImagesAsync (timeOutInSeconds, ocpdate, maxresults, filter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all Virtual Machine Images supported by the Azure Batch service.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetSupportedImagesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSupportedImagesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetSupportedImagesAsync(null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("nodeAgentSKUId").ToString());
    Console.WriteLine(result.GetProperty("imageReference").ToString());
    Console.WriteLine(result.GetProperty("osType").ToString());
    Console.WriteLine(result.GetProperty("verificationType").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedImagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt; GetSupportedImagesAsync (int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchSupportedImage&gt; GetSupportedImagesAsync(valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetSupportedImagesAsync(System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSupportedImagesAsync (Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchSupportedImage)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedImagesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt;&#xA;override this.GetSupportedImagesAsync : Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt;" Usage="batchClient.GetSupportedImagesAsync (timeOutInSeconds, ocpdate, maxresults, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchSupportedImage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetSupportedImagesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchSupportedImage item in client.GetSupportedImagesAsync())
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTask (string jobId, string taskId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTask(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTask(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTask (jobId As String, taskId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetTask (jobId, taskId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTask(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTask and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetTask("jobId", "taskId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt; GetTask (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchTask&gt; GetTask(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTask(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTask (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchTask)" />
      <MemberSignature Language="F#" Value="abstract member GetTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;&#xA;override this.GetTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;" Usage="batchClient.GetTask (jobId, taskId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Task. </summary>
        <returns>To be added.</returns>
        <remarks>
            For multi-instance Tasks, information such as affinityId, executionInfo and
            nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
            information about subtasks.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchTask> response = client.GetTask("jobId", "taskId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTaskAsync (string jobId, string taskId, int? timeOutInSeconds, DateTimeOffset? ocpdate, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTaskAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskAsync (jobId As String, taskId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), select As IEnumerable(Of String), expand As IEnumerable(Of String), requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetTaskAsync (jobId, taskId, timeOutInSeconds, ocpdate, select, expand, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets information about the specified Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTaskAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTaskAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetTaskAsync("jobId", "taskId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;&gt; GetTaskAsync (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchTask&gt;&gt; GetTaskAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskAsync (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchTask))" />
      <MemberSignature Language="F#" Value="abstract member GetTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;&gt;&#xA;override this.GetTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;&gt;" Usage="batchClient.GetTaskAsync (jobId, taskId, timeOutInSeconds, ocpdate, select, expand, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchTask&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task to get information about. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets information about the specified Task. </summary>
        <returns>To be added.</returns>
        <remarks>
            For multi-instance Tasks, information such as affinityId, executionInfo and
            nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
            information about subtasks.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BatchTask> response = await client.GetTaskAsync("jobId", "taskId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTaskFile (string jobId, string taskId, string filePath, int? timeOutInSeconds, DateTimeOffset? ocpdate, string ocpRange, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTaskFile(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFile (jobId As String, taskId As String, filePath As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), ocpRange As String, requestConditions As RequestConditions, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTaskFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.GetTaskFile (jobId, taskId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns the content of the specified Task file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTaskFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTaskFile and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.GetTaskFile("jobId", "task1", "wd\\testFile.txt", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;BinaryData&gt; GetTaskFile (string jobId, string taskId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, string ocpRange = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.BinaryData&gt; GetTaskFile(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFile(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFile (jobId As String, taskId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional ocpRange As String = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;&#xA;override this.GetTaskFile : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;" Usage="batchClient.GetTaskFile (jobId, taskId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns the content of the specified Task file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTaskFile.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BinaryData> response = client.GetTaskFile("jobId", "task1", "wd\\testFile.txt");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTaskFileAsync (string jobId, string taskId, string filePath, int? timeOutInSeconds, DateTimeOffset? ocpdate, string ocpRange, Azure.RequestConditions requestConditions, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTaskFileAsync(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFileAsync (jobId As String, taskId As String, filePath As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), ocpRange As String, requestConditions As RequestConditions, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTaskFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.GetTaskFileAsync (jobId, taskId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns the content of the specified Task file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTaskFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTaskFileAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.GetTaskFileAsync("jobId", "task1", "wd\\testFile.txt", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt; GetTaskFileAsync (string jobId, string taskId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, string ocpRange = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.BinaryData&gt;&gt; GetTaskFileAsync(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, string ocpRange, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFileAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.String,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFileAsync (jobId As String, taskId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional ocpRange As String = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;&#xA;override this.GetTaskFileAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * string * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;" Usage="batchClient.GetTaskFileAsync (jobId, taskId, filePath, timeOutInSeconds, ocpdate, ocpRange, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="ocpRange" Type="System.String" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="ocpRange">
            The byte range to be retrieved. The default is to retrieve the entire file. The
            format is bytes=startRange-endRange.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Returns the content of the specified Task file. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTaskFileAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response<BinaryData> response = await client.GetTaskFileAsync("jobId", "task1", "wd\\testFile.txt");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFileProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt; GetTaskFileProperties (string jobId, string taskId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.BatchFileProperties&gt; GetTaskFileProperties(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFileProperties(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFileProperties (jobId As String, taskId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BatchFileProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFileProperties : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&#xA;override this.GetTaskFileProperties : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;" Usage="batchClient.GetTaskFileProperties (jobId, taskId, filePath, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Gets the properties of the specified Task file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="../Generated/Docs/BatchClient.xml" path="doc/members/member[@name='GetTaskFilePropertiesInternal(string,string,string,int?,DateTimeOffset?,RequestConditions,RequestContext)']/*" />
      </Docs>
    </Member>
    <Member MemberName="GetTaskFilePropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt; GetTaskFilePropertiesAsync (string jobId, string taskId, string filePath, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.BatchFileProperties&gt;&gt; GetTaskFilePropertiesAsync(string jobId, string taskId, string filePath, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFilePropertiesAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFilePropertiesAsync (jobId As String, taskId As String, filePath As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BatchFileProperties))" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFilePropertiesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt;&#xA;override this.GetTaskFilePropertiesAsync : string * string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt;" Usage="batchClient.GetTaskFilePropertiesAsync (jobId, taskId, filePath, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.BatchFileProperties&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="filePath" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Gets the properties of the specified Task file.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="filePath" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="../Generated/Docs/BatchClient.xml" path="doc/members/member[@name='GetTaskFilePropertiesAsync(string,string,string,int?,DateTimeOffset?,RequestConditions,RequestContext)']/*" />
      </Docs>
    </Member>
    <Member MemberName="GetTaskFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetTaskFiles (string jobId, string taskId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetTaskFiles(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFiles (jobId As String, taskId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, recursive As Nullable(Of Boolean), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetTaskFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetTaskFiles (jobId, taskId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
            </param>
        <param name="recursive">
            Whether to list children of the Task directory. This parameter can be used in
            combination with the filter parameter to list specific type of files.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the files in a Task's directory on its Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTaskFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTaskFiles and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetTaskFiles("jobId", "taskId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, false, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFiles">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt; GetTaskFiles (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchNodeFile&gt; GetTaskFiles(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFiles(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFiles (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchNodeFile)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;&#xA;override this.GetTaskFiles : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;" Usage="batchClient.GetTaskFiles (jobId, taskId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
            </param>
        <param name="recursive">
            Whether to list children of the Task directory. This parameter can be used in
            combination with the filter parameter to list specific type of files.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the files in a Task's directory on its Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTaskFiles.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchNodeFile item in client.GetTaskFiles("jobId", "taskId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetTaskFilesAsync (string jobId, string taskId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetTaskFilesAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFilesAsync (jobId As String, taskId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, recursive As Nullable(Of Boolean), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetTaskFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetTaskFilesAsync (jobId, taskId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
            </param>
        <param name="recursive">
            Whether to list children of the Task directory. This parameter can be used in
            combination with the filter parameter to list specific type of files.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists the files in a Task's directory on its Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTaskFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTaskFilesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetTaskFilesAsync("jobId", "taskId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, false, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTaskFilesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt; GetTaskFilesAsync (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchNodeFile&gt; GetTaskFilesAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, valuetype System.Nullable`1&lt;bool&gt; recursive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTaskFilesAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTaskFilesAsync (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional recursive As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchNodeFile)" />
      <MemberSignature Language="F#" Value="abstract member GetTaskFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;&#xA;override this.GetTaskFilesAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;" Usage="batchClient.GetTaskFilesAsync (jobId, taskId, timeOutInSeconds, ocpdate, maxresults, filter, recursive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchNodeFile&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="recursive" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job that contains the Task. </param>
        <param name="taskId"> The ID of the Task whose files you want to list. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
            </param>
        <param name="recursive">
            Whether to list children of the Task directory. This parameter can be used in
            combination with the filter parameter to list specific type of files.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists the files in a Task's directory on its Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTaskFilesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchNodeFile item in client.GetTaskFilesAsync("jobId", "taskId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetTasks (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetTasks(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTasks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTasks (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTasks : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetTasks : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="batchClient.GetTasks (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Tasks that are associated with the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTasks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTasks and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BinaryData item in client.GetTasks("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTasks">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Compute.Batch.BatchTask&gt; GetTasks (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Compute.Batch.BatchTask&gt; GetTasks(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTasks(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTasks (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BatchTask)" />
      <MemberSignature Language="F#" Value="abstract member GetTasks : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchTask&gt;&#xA;override this.GetTasks : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Compute.Batch.BatchTask&gt;" Usage="batchClient.GetTasks (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Compute.Batch.BatchTask&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Tasks that are associated with the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            For multi-instance Tasks, information such as affinityId, executionInfo and
            nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
            information about subtasks.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTasks.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

foreach (BatchTask item in client.GetTasks("jobId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTasksAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetTasksAsync (string jobId, int? timeOutInSeconds, DateTimeOffset? ocpdate, int? maxresults, string filter, System.Collections.Generic.IEnumerable&lt;string&gt; select, System.Collections.Generic.IEnumerable&lt;string&gt; expand, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetTasksAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTasksAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTasksAsync (jobId As String, timeOutInSeconds As Nullable(Of Integer), ocpdate As Nullable(Of DateTimeOffset), maxresults As Nullable(Of Integer), filter As String, select As IEnumerable(Of String), expand As IEnumerable(Of String), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetTasksAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetTasksAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="batchClient.GetTasksAsync (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Lists all of the Tasks that are associated with the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.GetTasksAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTasksAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BinaryData item in client.GetTasksAsync("jobId", null, DateTimeOffset.Parse("Fri, 17 Feb 2017 00:00:00 GMT"), null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTasksAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchTask&gt; GetTasksAsync (string jobId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, System.Collections.Generic.IEnumerable&lt;string&gt; select = default, System.Collections.Generic.IEnumerable&lt;string&gt; expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Compute.Batch.BatchTask&gt; GetTasksAsync(string jobId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;int32&gt; maxresults, string filter, class System.Collections.Generic.IEnumerable`1&lt;string&gt; select, class System.Collections.Generic.IEnumerable`1&lt;string&gt; expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.GetTasksAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTasksAsync (jobId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional maxresults As Nullable(Of Integer) = Nothing, Optional filter As String = Nothing, Optional select As IEnumerable(Of String) = Nothing, Optional expand As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BatchTask)" />
      <MemberSignature Language="F#" Value="abstract member GetTasksAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchTask&gt;&#xA;override this.GetTasksAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchTask&gt;" Usage="batchClient.GetTasksAsync (jobId, timeOutInSeconds, ocpdate, maxresults, filter, select, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Compute.Batch.BatchTask&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxresults" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="select" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="expand" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="maxresults">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="filter">
            An OData $filter clause. For more information on constructing this filter, see
            https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
            </param>
        <param name="select"> An OData $select clause. </param>
        <param name="expand"> An OData $expand clause. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Lists all of the Tasks that are associated with the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            For multi-instance Tasks, information such as affinityId, executionInfo and
            nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
            information about subtasks.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTasksAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

await foreach (BatchTask item in client.GetTasksAsync("jobId"))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="JobScheduleExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; JobScheduleExists (string jobScheduleId, int? timeOut = default, DateTimeOffset? ocpDate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; JobScheduleExists(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOut, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpDate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.JobScheduleExists(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function JobScheduleExists (jobScheduleId As String, Optional timeOut As Nullable(Of Integer) = Nothing, Optional ocpDate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member JobScheduleExists : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&lt;bool&gt;&#xA;override this.JobScheduleExists : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&lt;bool&gt;" Usage="batchClient.JobScheduleExists (jobScheduleId, timeOut, ocpDate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOut" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        <param name="timeOut">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="ocpDate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Checks the specified Job Schedule exists.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="../Generated/Docs/BatchClient.xml" path="doc/members/member[@name='JobScheduleExists(string,int?,DateTimeOffset?,RequestConditions,RequestContext)']/*" />
      </Docs>
    </Member>
    <Member MemberName="JobScheduleExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; JobScheduleExistsAsync (string jobScheduleId, int? timeOut = default, DateTimeOffset? ocpDate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; JobScheduleExistsAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOut, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpDate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.JobScheduleExistsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function JobScheduleExistsAsync (jobScheduleId As String, Optional timeOut As Nullable(Of Integer) = Nothing, Optional ocpDate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member JobScheduleExistsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.JobScheduleExistsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="batchClient.JobScheduleExistsAsync (jobScheduleId, timeOut, ocpDate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOut" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpDate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        <param name="timeOut">
            The maximum number of items to return in the response. A maximum of 1000
            applications can be returned.
            </param>
        <param name="ocpDate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Checks the specified Job Schedule exists.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="../Generated/Docs/BatchClient.xml" path="doc/members/member[@name='JobScheduleExistsAsync(string,int?,DateTimeOffset?,RequestConditions,RequestContext)']/*" />
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Compute.Batch.BatchClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Compute.Batch.BatchClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PoolExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; PoolExists (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; PoolExists(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.PoolExists(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PoolExists (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member PoolExists : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&lt;bool&gt;&#xA;override this.PoolExists : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&lt;bool&gt;" Usage="batchClient.PoolExists (poolId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets basic properties of a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="../Generated/Docs/BatchClient.xml" path="doc/members/member[@name='PoolExists(string,int?,DateTimeOffset?,RequestConditions,RequestContext)']/*" />
      </Docs>
    </Member>
    <Member MemberName="PoolExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; PoolExistsAsync (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; PoolExistsAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.PoolExistsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PoolExistsAsync (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member PoolExistsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.PoolExistsAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="batchClient.PoolExistsAsync (poolId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets basic properties of a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <!-- No matching elements were found for the following include tag -->
        <include file="../Generated/Docs/BatchClient.xml" path="doc/members/member[@name='PoolExistsAsync(string,int?,DateTimeOffset?,RequestConditions,RequestContext)']/*" />
      </Docs>
    </Member>
    <Member MemberName="ReactivateTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReactivateTask (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReactivateTask(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReactivateTask(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReactivateTask (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReactivateTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReactivateTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReactivateTask (jobId, taskId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to reactivate. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reactivates a Task, allowing it to run again even if its retry count has been
            exhausted.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReactivateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.ReactivateTask("jobId", "taskId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReactivateTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReactivateTaskAsync (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReactivateTaskAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReactivateTaskAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReactivateTaskAsync (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReactivateTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReactivateTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReactivateTaskAsync (jobId, taskId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to reactivate. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reactivates a Task, allowing it to run again even if its retry count has been
            exhausted.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReactivateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.ReactivateTaskAsync("jobId", "taskId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RebootNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RebootNode (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeRebootContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RebootNode(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeRebootContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RebootNode(System.String,System.String,Azure.Compute.Batch.BatchNodeRebootContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RebootNode (poolId As String, nodeId As String, Optional parameters As BatchNodeRebootContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RebootNode : string * string * Azure.Compute.Batch.BatchNodeRebootContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.RebootNode : string * string * Azure.Compute.Batch.BatchNodeRebootContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.RebootNode (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeRebootContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="parameters"> The options to use for rebooting the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Restarts the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks> You can restart a Compute Node only if it is in an idle or running state. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call RebootNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.RebootNode("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RebootNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RebootNode (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RebootNode(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RebootNode(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RebootNode (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RebootNode : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RebootNode : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.RebootNode (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Restarts the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.RebootNode(System.String,System.String,Azure.Compute.Batch.BatchNodeRebootContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RebootNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = client.RebootNode("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RebootNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RebootNodeAsync (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeRebootContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RebootNodeAsync(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeRebootContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RebootNodeAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeRebootContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RebootNodeAsync (poolId As String, nodeId As String, Optional parameters As BatchNodeRebootContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RebootNodeAsync : string * string * Azure.Compute.Batch.BatchNodeRebootContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RebootNodeAsync : string * string * Azure.Compute.Batch.BatchNodeRebootContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.RebootNodeAsync (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeRebootContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="parameters"> The options to use for rebooting the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Restarts the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks> You can restart a Compute Node only if it is in an idle or running state. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call RebootNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.RebootNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RebootNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RebootNodeAsync (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RebootNodeAsync(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RebootNodeAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RebootNodeAsync (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RebootNodeAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RebootNodeAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.RebootNodeAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Restarts the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.RebootNodeAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeRebootContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RebootNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = await client.RebootNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReimageNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReimageNode (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeReimageContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReimageNode(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeReimageContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReimageNode(System.String,System.String,Azure.Compute.Batch.BatchNodeReimageContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReimageNode (poolId As String, nodeId As String, Optional parameters As BatchNodeReimageContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReimageNode : string * string * Azure.Compute.Batch.BatchNodeReimageContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReimageNode : string * string * Azure.Compute.Batch.BatchNodeReimageContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ReimageNode (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeReimageContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="parameters"> The options to use for reimaging the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Reinstalls the operating system on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can reinstall the operating system on a Compute Node only if it is in an
            idle or running state. This API can be invoked only on Pools created with the
            cloud service configuration property.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReimageNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.ReimageNode("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReimageNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReimageNode (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReimageNode(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReimageNode(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReimageNode (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReimageNode : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReimageNode : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReimageNode (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reinstalls the operating system on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReimageNode(System.String,System.String,Azure.Compute.Batch.BatchNodeReimageContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReimageNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = client.ReimageNode("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReimageNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReimageNodeAsync (string poolId, string nodeId, Azure.Compute.Batch.BatchNodeReimageContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReimageNodeAsync(string poolId, string nodeId, class Azure.Compute.Batch.BatchNodeReimageContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReimageNodeAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeReimageContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReimageNodeAsync (poolId As String, nodeId As String, Optional parameters As BatchNodeReimageContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReimageNodeAsync : string * string * Azure.Compute.Batch.BatchNodeReimageContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReimageNodeAsync : string * string * Azure.Compute.Batch.BatchNodeReimageContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReimageNodeAsync (poolId, nodeId, parameters, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchNodeReimageContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="parameters"> The options to use for reimaging the Compute Node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Reinstalls the operating system on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can reinstall the operating system on a Compute Node only if it is in an
            idle or running state. This API can be invoked only on Pools created with the
            cloud service configuration property.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReimageNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.ReimageNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReimageNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReimageNodeAsync (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReimageNodeAsync(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReimageNodeAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReimageNodeAsync (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReimageNodeAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReimageNodeAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReimageNodeAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Reinstalls the operating system on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReimageNodeAsync(System.String,System.String,Azure.Compute.Batch.BatchNodeReimageContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReimageNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = await client.ReimageNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RemoveNodes (string poolId, Azure.Compute.Batch.BatchNodeRemoveContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RemoveNodes(string poolId, class Azure.Compute.Batch.BatchNodeRemoveContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RemoveNodes(System.String,Azure.Compute.Batch.BatchNodeRemoveContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNodes (poolId As String, content As BatchNodeRemoveContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RemoveNodes : string * Azure.Compute.Batch.BatchNodeRemoveContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.RemoveNodes : string * Azure.Compute.Batch.BatchNodeRemoveContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.RemoveNodes (poolId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchNodeRemoveContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The options to use for removing the node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Removes Compute Nodes from the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation can only run when the allocation state of the Pool is steady.
            When this operation runs, the allocation state changes from steady to resizing.
            Each request may remove up to 100 nodes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call RemoveNodes.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchNodeRemoveContent content = new BatchNodeRemoveContent(new string[] { "tvm-1695681911_1-20161122t224741z", "tvm-1695681911_2-20161122t224741z" });
Response response = client.RemoveNodes("poolId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodes">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RemoveNodes (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RemoveNodes(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RemoveNodes(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNodes (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RemoveNodes : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RemoveNodes : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.RemoveNodes (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Removes Compute Nodes from the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.RemoveNodes(System.String,Azure.Compute.Batch.BatchNodeRemoveContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RemoveNodes.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    nodeList = new object[]
    {
        "tvm-1695681911_1-20161122t224741z",
        "tvm-1695681911_2-20161122t224741z"
    },
});
Response response = client.RemoveNodes("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RemoveNodesAsync (string poolId, Azure.Compute.Batch.BatchNodeRemoveContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RemoveNodesAsync(string poolId, class Azure.Compute.Batch.BatchNodeRemoveContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RemoveNodesAsync(System.String,Azure.Compute.Batch.BatchNodeRemoveContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNodesAsync (poolId As String, content As BatchNodeRemoveContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RemoveNodesAsync : string * Azure.Compute.Batch.BatchNodeRemoveContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RemoveNodesAsync : string * Azure.Compute.Batch.BatchNodeRemoveContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.RemoveNodesAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchNodeRemoveContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The options to use for removing the node. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Removes Compute Nodes from the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation can only run when the allocation state of the Pool is steady.
            When this operation runs, the allocation state changes from steady to resizing.
            Each request may remove up to 100 nodes.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call RemoveNodesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchNodeRemoveContent content = new BatchNodeRemoveContent(new string[] { "tvm-1695681911_1-20161122t224741z", "tvm-1695681911_2-20161122t224741z" });
Response response = await client.RemoveNodesAsync("poolId", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RemoveNodesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RemoveNodesAsync (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RemoveNodesAsync(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.RemoveNodesAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveNodesAsync (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RemoveNodesAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RemoveNodesAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.RemoveNodesAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Removes Compute Nodes from the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.RemoveNodesAsync(System.String,Azure.Compute.Batch.BatchNodeRemoveContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RemoveNodesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    nodeList = new object[]
    {
        "tvm-1695681911_1-20161122t224741z",
        "tvm-1695681911_2-20161122t224741z"
    },
});
Response response = await client.RemoveNodesAsync("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceJob (string jobId, Azure.Compute.Batch.BatchJob job, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceJob(string jobId, class Azure.Compute.Batch.BatchJob job, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJob(System.String,Azure.Compute.Batch.BatchJob,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJob (jobId As String, job As BatchJob, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJob : string * Azure.Compute.Batch.BatchJob * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReplaceJob : string * Azure.Compute.Batch.BatchJob * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ReplaceJob (jobId, job, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="job" Type="Azure.Compute.Batch.BatchJob" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="job"> A job with updated properties. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            This fully replaces all the updatable properties of the Job. For example, if
            the Job has constraints associated with it and if constraints is not specified
            with this request, then the Batch service will remove the existing constraints.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="job" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJob job = new BatchJob(new BatchPoolInfo
{
    PoolId = "poolId",
})
{
    Priority = 100,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = -1,
    },
};
Response response = client.ReplaceJob("jobId", job);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceJob (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceJob(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJob(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJob (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReplaceJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReplaceJob (jobId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceJob(System.String,Azure.Compute.Batch.BatchJob,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = client.ReplaceJob("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceJobAsync (string jobId, Azure.Compute.Batch.BatchJob job, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceJobAsync(string jobId, class Azure.Compute.Batch.BatchJob job, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJobAsync(System.String,Azure.Compute.Batch.BatchJob,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJobAsync (jobId As String, job As BatchJob, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJobAsync : string * Azure.Compute.Batch.BatchJob * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceJobAsync : string * Azure.Compute.Batch.BatchJob * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceJobAsync (jobId, job, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="job" Type="Azure.Compute.Batch.BatchJob" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="job"> A job with updated properties. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Job. </summary>
        <returns>To be added.</returns>
        <remarks>
            This fully replaces all the updatable properties of the Job. For example, if
            the Job has constraints associated with it and if constraints is not specified
            with this request, then the Batch service will remove the existing constraints.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="job" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJob job = new BatchJob(new BatchPoolInfo
{
    PoolId = "poolId",
})
{
    Priority = 100,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = -1,
    },
};
Response response = await client.ReplaceJobAsync("jobId", job);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceJobAsync (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceJobAsync(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJobAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJobAsync (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceJobAsync (jobId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceJobAsync(System.String,Azure.Compute.Batch.BatchJob,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = await client.ReplaceJobAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceJobSchedule (string jobScheduleId, Azure.Compute.Batch.BatchJobSchedule jobSchedule, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceJobSchedule(string jobScheduleId, class Azure.Compute.Batch.BatchJobSchedule jobSchedule, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJobSchedule(System.String,Azure.Compute.Batch.BatchJobSchedule,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJobSchedule (jobScheduleId As String, jobSchedule As BatchJobSchedule, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJobSchedule : string * Azure.Compute.Batch.BatchJobSchedule * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReplaceJobSchedule : string * Azure.Compute.Batch.BatchJobSchedule * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ReplaceJobSchedule (jobScheduleId, jobSchedule, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="jobSchedule" Type="Azure.Compute.Batch.BatchJobSchedule" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="jobSchedule"> A Job Schedule with updated properties. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Job Schedule. </summary>
        <returns>To be added.</returns>
        <remarks>
            This fully replaces all the updatable properties of the Job Schedule. For
            example, if the schedule property is not specified with this request, then the
            Batch service will remove the existing schedule. Changes to a Job Schedule only
            impact Jobs created by the schedule after the update has taken place; currently
            running Jobs are unaffected.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="jobSchedule" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobSchedule jobSchedule = new BatchJobSchedule(new BatchJobSpecification(new BatchPoolInfo
{
    PoolId = "poolId",
})
{
    Priority = 0,
    UsesTaskDependencies = false,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("P10675199DT2H48M5.4775807S"),
        MaxTaskRetryCount = 0,
    },
})
{
    Schedule = new BatchJobScheduleConfiguration
    {
        DoNotRunUntil = DateTimeOffset.Parse("2025-01-01T12:30:00Z"),
    },
};
Response response = client.ReplaceJobSchedule("jobScheduleId", jobSchedule);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceJobSchedule (string jobScheduleId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceJobSchedule(string jobScheduleId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJobSchedule(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJobSchedule (jobScheduleId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJobSchedule : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReplaceJobSchedule : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReplaceJobSchedule (jobScheduleId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceJobSchedule(System.String,Azure.Compute.Batch.BatchJobSchedule,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    schedule = new
    {
        doNotRunUntil = "2025-01-01T12:30:00Z",
    },
    jobSpecification = new
    {
        priority = 0,
        usesTaskDependencies = false,
        constraints = new
        {
            maxWallClockTime = "P10675199DT2H48M5.4775807S",
            maxTaskRetryCount = 0,
        },
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = client.ReplaceJobSchedule("jobScheduleId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceJobScheduleAsync (string jobScheduleId, Azure.Compute.Batch.BatchJobSchedule jobSchedule, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceJobScheduleAsync(string jobScheduleId, class Azure.Compute.Batch.BatchJobSchedule jobSchedule, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJobScheduleAsync(System.String,Azure.Compute.Batch.BatchJobSchedule,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJobScheduleAsync (jobScheduleId As String, jobSchedule As BatchJobSchedule, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJobScheduleAsync : string * Azure.Compute.Batch.BatchJobSchedule * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceJobScheduleAsync : string * Azure.Compute.Batch.BatchJobSchedule * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceJobScheduleAsync (jobScheduleId, jobSchedule, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="jobSchedule" Type="Azure.Compute.Batch.BatchJobSchedule" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="jobSchedule"> A Job Schedule with updated properties. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Job Schedule. </summary>
        <returns>To be added.</returns>
        <remarks>
            This fully replaces all the updatable properties of the Job Schedule. For
            example, if the schedule property is not specified with this request, then the
            Batch service will remove the existing schedule. Changes to a Job Schedule only
            impact Jobs created by the schedule after the update has taken place; currently
            running Jobs are unaffected.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="jobSchedule" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchJobSchedule jobSchedule = new BatchJobSchedule(new BatchJobSpecification(new BatchPoolInfo
{
    PoolId = "poolId",
})
{
    Priority = 0,
    UsesTaskDependencies = false,
    Constraints = new BatchJobConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("P10675199DT2H48M5.4775807S"),
        MaxTaskRetryCount = 0,
    },
})
{
    Schedule = new BatchJobScheduleConfiguration
    {
        DoNotRunUntil = DateTimeOffset.Parse("2025-01-01T12:30:00Z"),
    },
};
Response response = await client.ReplaceJobScheduleAsync("jobScheduleId", jobSchedule);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceJobScheduleAsync (string jobScheduleId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceJobScheduleAsync(string jobScheduleId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceJobScheduleAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceJobScheduleAsync (jobScheduleId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceJobScheduleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceJobScheduleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceJobScheduleAsync (jobScheduleId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceJobScheduleAsync(System.String,Azure.Compute.Batch.BatchJobSchedule,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    schedule = new
    {
        doNotRunUntil = "2025-01-01T12:30:00Z",
    },
    jobSpecification = new
    {
        priority = 0,
        usesTaskDependencies = false,
        constraints = new
        {
            maxWallClockTime = "P10675199DT2H48M5.4775807S",
            maxTaskRetryCount = 0,
        },
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = await client.ReplaceJobScheduleAsync("jobScheduleId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodeUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceNodeUser (string poolId, string nodeId, string userName, Azure.Compute.Batch.BatchNodeUserUpdateContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceNodeUser(string poolId, string nodeId, string userName, class Azure.Compute.Batch.BatchNodeUserUpdateContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceNodeUser(System.String,System.String,System.String,Azure.Compute.Batch.BatchNodeUserUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceNodeUser (poolId As String, nodeId As String, userName As String, content As BatchNodeUserUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceNodeUser : string * string * string * Azure.Compute.Batch.BatchNodeUserUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReplaceNodeUser : string * string * string * Azure.Compute.Batch.BatchNodeUserUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ReplaceNodeUser (poolId, nodeId, userName, content, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchNodeUserUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        <param name="userName"> The name of the user Account to update. </param>
        <param name="content"> The options to use for updating the user. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the password and expiration time of a user Account on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation replaces of all the updatable properties of the Account. For
            example, if the expiryTime element is not specified, the current value is
            replaced with the default value, not left unmodified. You can update a user
            Account on a Compute Node only when it is in the idle or running state.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" />, <paramref name="userName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceNodeUser.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchNodeUserUpdateContent content = new BatchNodeUserUpdateContent
{
    Password = "12345",
    ExpiryTime = DateTimeOffset.Parse("2016-11-27T00:45:48.7320857Z"),
};
Response response = client.ReplaceNodeUser("poolId", "tvm-1695681911_1-20161121t182739z", "userName", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodeUser">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceNodeUser (string poolId, string nodeId, string userName, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceNodeUser(string poolId, string nodeId, string userName, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceNodeUser(System.String,System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceNodeUser (poolId As String, nodeId As String, userName As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceNodeUser : string * string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReplaceNodeUser : string * string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReplaceNodeUser (poolId, nodeId, userName, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        <param name="userName"> The name of the user Account to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the password and expiration time of a user Account on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceNodeUser(System.String,System.String,System.String,Azure.Compute.Batch.BatchNodeUserUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" />, <paramref name="userName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceNodeUser.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    password = "12345",
    expiryTime = "2016-11-27T00:45:48.7320857Z",
});
Response response = client.ReplaceNodeUser("poolId", "tvm-1695681911_1-20161121t182739z", "userName", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodeUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceNodeUserAsync (string poolId, string nodeId, string userName, Azure.Compute.Batch.BatchNodeUserUpdateContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceNodeUserAsync(string poolId, string nodeId, string userName, class Azure.Compute.Batch.BatchNodeUserUpdateContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceNodeUserAsync(System.String,System.String,System.String,Azure.Compute.Batch.BatchNodeUserUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceNodeUserAsync (poolId As String, nodeId As String, userName As String, content As BatchNodeUserUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceNodeUserAsync : string * string * string * Azure.Compute.Batch.BatchNodeUserUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceNodeUserAsync : string * string * string * Azure.Compute.Batch.BatchNodeUserUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceNodeUserAsync (poolId, nodeId, userName, content, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchNodeUserUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        <param name="userName"> The name of the user Account to update. </param>
        <param name="content"> The options to use for updating the user. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the password and expiration time of a user Account on the specified Compute Node. </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation replaces of all the updatable properties of the Account. For
            example, if the expiryTime element is not specified, the current value is
            replaced with the default value, not left unmodified. You can update a user
            Account on a Compute Node only when it is in the idle or running state.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" />, <paramref name="userName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceNodeUserAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchNodeUserUpdateContent content = new BatchNodeUserUpdateContent
{
    Password = "12345",
    ExpiryTime = DateTimeOffset.Parse("2016-11-27T00:45:48.7320857Z"),
};
Response response = await client.ReplaceNodeUserAsync("poolId", "tvm-1695681911_1-20161121t182739z", "userName", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceNodeUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceNodeUserAsync (string poolId, string nodeId, string userName, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceNodeUserAsync(string poolId, string nodeId, string userName, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceNodeUserAsync(System.String,System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceNodeUserAsync (poolId As String, nodeId As String, userName As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceNodeUserAsync : string * string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceNodeUserAsync : string * string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceNodeUserAsync (poolId, nodeId, userName, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        <param name="userName"> The name of the user Account to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the password and expiration time of a user Account on the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceNodeUserAsync(System.String,System.String,System.String,Azure.Compute.Batch.BatchNodeUserUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" />, <paramref name="userName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="userName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceNodeUserAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    password = "12345",
    expiryTime = "2016-11-27T00:45:48.7320857Z",
});
Response response = await client.ReplaceNodeUserAsync("poolId", "tvm-1695681911_1-20161121t182739z", "userName", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplacePoolProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplacePoolProperties (string poolId, Azure.Compute.Batch.BatchPoolReplaceContent pool, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplacePoolProperties(string poolId, class Azure.Compute.Batch.BatchPoolReplaceContent pool, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplacePoolProperties(System.String,Azure.Compute.Batch.BatchPoolReplaceContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplacePoolProperties (poolId As String, pool As BatchPoolReplaceContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplacePoolProperties : string * Azure.Compute.Batch.BatchPoolReplaceContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReplacePoolProperties : string * Azure.Compute.Batch.BatchPoolReplaceContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ReplacePoolProperties (poolId, pool, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="pool" Type="Azure.Compute.Batch.BatchPoolReplaceContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to update. </param>
        <param name="pool"> The options to use for replacing properties on the pool. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            This fully replaces all the updatable properties of the Pool. For example, if
            the Pool has a StartTask associated with it and if StartTask is not specified
            with this request, then the Batch service will remove the existing StartTask.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="pool" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplacePoolProperties.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolReplaceContent pool = new BatchPoolReplaceContent(Array.Empty<BatchCertificateReference>(), Array.Empty<BatchApplicationPackageReference>(), Array.Empty<MetadataItem>())
{
    StartTask = new BatchStartTask("/bin/bash -c 'echo start task'"),
};
Response response = client.ReplacePoolProperties("poolId", pool);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplacePoolProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplacePoolProperties (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplacePoolProperties(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplacePoolProperties(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplacePoolProperties (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplacePoolProperties : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReplacePoolProperties : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReplacePoolProperties (poolId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplacePoolProperties(System.String,Azure.Compute.Batch.BatchPoolReplaceContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplacePoolProperties.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    startTask = new
    {
        commandLine = "/bin/bash -c 'echo start task'",
    },
    certificateReferences = Array.Empty<object>(),
    applicationPackageReferences = Array.Empty<object>(),
    metadata = Array.Empty<object>(),
});
Response response = client.ReplacePoolProperties("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplacePoolPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplacePoolPropertiesAsync (string poolId, Azure.Compute.Batch.BatchPoolReplaceContent pool, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplacePoolPropertiesAsync(string poolId, class Azure.Compute.Batch.BatchPoolReplaceContent pool, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplacePoolPropertiesAsync(System.String,Azure.Compute.Batch.BatchPoolReplaceContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplacePoolPropertiesAsync (poolId As String, pool As BatchPoolReplaceContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplacePoolPropertiesAsync : string * Azure.Compute.Batch.BatchPoolReplaceContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplacePoolPropertiesAsync : string * Azure.Compute.Batch.BatchPoolReplaceContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplacePoolPropertiesAsync (poolId, pool, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="pool" Type="Azure.Compute.Batch.BatchPoolReplaceContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to update. </param>
        <param name="pool"> The options to use for replacing properties on the pool. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            This fully replaces all the updatable properties of the Pool. For example, if
            the Pool has a StartTask associated with it and if StartTask is not specified
            with this request, then the Batch service will remove the existing StartTask.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="pool" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplacePoolPropertiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolReplaceContent pool = new BatchPoolReplaceContent(Array.Empty<BatchCertificateReference>(), Array.Empty<BatchApplicationPackageReference>(), Array.Empty<MetadataItem>())
{
    StartTask = new BatchStartTask("/bin/bash -c 'echo start task'"),
};
Response response = await client.ReplacePoolPropertiesAsync("poolId", pool);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplacePoolPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplacePoolPropertiesAsync (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplacePoolPropertiesAsync(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplacePoolPropertiesAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplacePoolPropertiesAsync (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplacePoolPropertiesAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplacePoolPropertiesAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplacePoolPropertiesAsync (poolId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplacePoolPropertiesAsync(System.String,Azure.Compute.Batch.BatchPoolReplaceContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplacePoolPropertiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    startTask = new
    {
        commandLine = "/bin/bash -c 'echo start task'",
    },
    certificateReferences = Array.Empty<object>(),
    applicationPackageReferences = Array.Empty<object>(),
    metadata = Array.Empty<object>(),
});
Response response = await client.ReplacePoolPropertiesAsync("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceTask (string jobId, string taskId, Azure.Compute.Batch.BatchTask task, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceTask(string jobId, string taskId, class Azure.Compute.Batch.BatchTask task, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceTask(System.String,System.String,Azure.Compute.Batch.BatchTask,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceTask (jobId As String, taskId As String, task As BatchTask, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceTask : string * string * Azure.Compute.Batch.BatchTask * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReplaceTask : string * string * Azure.Compute.Batch.BatchTask * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ReplaceTask (jobId, taskId, task, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="task" Type="Azure.Compute.Batch.BatchTask" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to update. </param>
        <param name="task"> The Task to update. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Task. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="task" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTask task = new BatchTask
{
    Constraints = new BatchTaskConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        RetentionTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = 3,
    },
};
Response response = client.ReplaceTask("jobId", "taskId", task);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReplaceTask (string jobId, string taskId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReplaceTask(string jobId, string taskId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceTask(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceTask (jobId As String, taskId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReplaceTask : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ReplaceTask : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ReplaceTask (jobId, taskId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceTask(System.String,System.String,Azure.Compute.Batch.BatchTask,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = 3,
        retentionTime = "PT1H",
    },
});
Response response = client.ReplaceTask("jobId", "taskId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceTaskAsync (string jobId, string taskId, Azure.Compute.Batch.BatchTask task, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceTaskAsync(string jobId, string taskId, class Azure.Compute.Batch.BatchTask task, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceTaskAsync(System.String,System.String,Azure.Compute.Batch.BatchTask,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceTaskAsync (jobId As String, taskId As String, task As BatchTask, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceTaskAsync : string * string * Azure.Compute.Batch.BatchTask * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceTaskAsync : string * string * Azure.Compute.Batch.BatchTask * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceTaskAsync (jobId, taskId, task, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="task" Type="Azure.Compute.Batch.BatchTask" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to update. </param>
        <param name="task"> The Task to update. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates the properties of the specified Task. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="task" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ReplaceTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchTask task = new BatchTask
{
    Constraints = new BatchTaskConstraints
    {
        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H"),
        RetentionTime = XmlConvert.ToTimeSpan("PT1H"),
        MaxTaskRetryCount = 3,
    },
};
Response response = await client.ReplaceTaskAsync("jobId", "taskId", task);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReplaceTaskAsync (string jobId, string taskId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReplaceTaskAsync(string jobId, string taskId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ReplaceTaskAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceTaskAsync (jobId As String, taskId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceTaskAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReplaceTaskAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ReplaceTaskAsync (jobId, taskId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ReplaceTaskAsync(System.String,System.String,Azure.Compute.Batch.BatchTask,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />, <paramref name="taskId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ReplaceTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = 3,
        retentionTime = "PT1H",
    },
});
Response response = await client.ReplaceTaskAsync("jobId", "taskId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ResizePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ResizePool (string poolId, Azure.Compute.Batch.BatchPoolResizeContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ResizePool(string poolId, class Azure.Compute.Batch.BatchPoolResizeContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ResizePool(System.String,Azure.Compute.Batch.BatchPoolResizeContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResizePool (poolId As String, content As BatchPoolResizeContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ResizePool : string * Azure.Compute.Batch.BatchPoolResizeContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ResizePool : string * Azure.Compute.Batch.BatchPoolResizeContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.ResizePool (poolId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchPoolResizeContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The options to use for resizing the pool. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Changes the number of Compute Nodes that are assigned to a Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can only resize a Pool when its allocation state is steady. If the Pool is
            already resizing, the request fails with status code 409. When you resize a
            Pool, the Pool's allocation state changes from steady to resizing. You cannot
            resize Pools which are configured for automatic scaling. If you try to do this,
            the Batch service returns an error 409. If you resize a Pool downwards, the
            Batch service chooses which Compute Nodes to remove. To remove specific Compute
            Nodes, use the Pool remove Compute Nodes API instead.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ResizePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolResizeContent content = new BatchPoolResizeContent
{
    TargetDedicatedNodes = 1,
    TargetLowPriorityNodes = 0,
};
Response response = client.ResizePool("resizePool", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ResizePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ResizePool (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ResizePool(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ResizePool(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResizePool (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ResizePool : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.ResizePool : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.ResizePool (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Changes the number of Compute Nodes that are assigned to a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ResizePool(System.String,Azure.Compute.Batch.BatchPoolResizeContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ResizePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    targetDedicatedNodes = 1,
    targetLowPriorityNodes = 0,
});
Response response = client.ResizePool("resizePool", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ResizePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ResizePoolAsync (string poolId, Azure.Compute.Batch.BatchPoolResizeContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ResizePoolAsync(string poolId, class Azure.Compute.Batch.BatchPoolResizeContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ResizePoolAsync(System.String,Azure.Compute.Batch.BatchPoolResizeContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResizePoolAsync (poolId As String, content As BatchPoolResizeContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ResizePoolAsync : string * Azure.Compute.Batch.BatchPoolResizeContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ResizePoolAsync : string * Azure.Compute.Batch.BatchPoolResizeContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ResizePoolAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.BatchPoolResizeContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The options to use for resizing the pool. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Changes the number of Compute Nodes that are assigned to a Pool. </summary>
        <returns>To be added.</returns>
        <remarks>
            You can only resize a Pool when its allocation state is steady. If the Pool is
            already resizing, the request fails with status code 409. When you resize a
            Pool, the Pool's allocation state changes from steady to resizing. You cannot
            resize Pools which are configured for automatic scaling. If you try to do this,
            the Batch service returns an error 409. If you resize a Pool downwards, the
            Batch service chooses which Compute Nodes to remove. To remove specific Compute
            Nodes, use the Pool remove Compute Nodes API instead.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call ResizePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

BatchPoolResizeContent content = new BatchPoolResizeContent
{
    TargetDedicatedNodes = 1,
    TargetLowPriorityNodes = 0,
};
Response response = await client.ResizePoolAsync("resizePool", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ResizePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ResizePoolAsync (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ResizePoolAsync(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.ResizePoolAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResizePoolAsync (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ResizePoolAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ResizePoolAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.ResizePoolAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Changes the number of Compute Nodes that are assigned to a Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.ResizePoolAsync(System.String,Azure.Compute.Batch.BatchPoolResizeContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call ResizePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    targetDedicatedNodes = 1,
    targetLowPriorityNodes = 0,
});
Response response = await client.ResizePoolAsync("resizePool", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StartNode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response StartNode (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response StartNode(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.StartNode(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartNode (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member StartNode : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.StartNode : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.StartNode (poolId, nodeId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Starts the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StartNode.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.StartNode("poolId", "tvm-1695681911_1-20161122t193202z");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StartNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; StartNodeAsync (string poolId, string nodeId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; StartNodeAsync(string poolId, string nodeId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.StartNodeAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartNodeAsync (poolId As String, nodeId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member StartNodeAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.StartNodeAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.StartNodeAsync (poolId, nodeId, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Starts the specified Compute Node.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StartNodeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.StartNodeAsync("poolId", "tvm-1695681911_1-20161122t193202z");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopPoolResize">
      <MemberSignature Language="C#" Value="public virtual Azure.Response StopPoolResize (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response StopPoolResize(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.StopPoolResize(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopPoolResize (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member StopPoolResize : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.StopPoolResize : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.StopPoolResize (poolId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Stops an ongoing resize operation on the Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopPoolResize.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.StopPoolResize("poolId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="StopPoolResizeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; StopPoolResizeAsync (string poolId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; StopPoolResizeAsync(string poolId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.StopPoolResizeAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopPoolResizeAsync (poolId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member StopPoolResizeAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.StopPoolResizeAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.StopPoolResizeAsync (poolId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Stops an ongoing resize operation on the Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call StopPoolResizeAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.StopPoolResizeAsync("poolId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response TerminateJob (string jobId, Azure.Compute.Batch.BatchJobTerminateContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response TerminateJob(string jobId, class Azure.Compute.Batch.BatchJobTerminateContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateJob(System.String,Azure.Compute.Batch.BatchJobTerminateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateJob (jobId As String, Optional parameters As BatchJobTerminateContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member TerminateJob : string * Azure.Compute.Batch.BatchJobTerminateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.TerminateJob : string * Azure.Compute.Batch.BatchJobTerminateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.TerminateJob (jobId, parameters, timeOutInSeconds, ocpdate, force, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchJobTerminateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to terminate. </param>
        <param name="parameters"> The options to use for terminating the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Terminates the specified Job, marking it as completed. </summary>
        <returns>To be added.</returns>
        <remarks>
            When a Terminate Job request is received, the Batch service sets the Job to the
            terminating state. The Batch service then terminates any running Tasks
            associated with the Job and runs any required Job release Tasks. Then the Job
            moves into the completed state. If there are any Tasks in the Job in the active
            state, they will remain in the active state. Once a Job is terminated, new
            Tasks cannot be added and any remaining active Tasks will not be scheduled.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call TerminateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.TerminateJob("jobId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response TerminateJob (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response TerminateJob(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateJob(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateJob (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member TerminateJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.TerminateJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.TerminateJob (jobId, content, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to terminate. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Terminates the specified Job, marking it as completed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.TerminateJob(System.String,Azure.Compute.Batch.BatchJobTerminateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TerminateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = client.TerminateJob("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; TerminateJobAsync (string jobId, Azure.Compute.Batch.BatchJobTerminateContent parameters = default, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; TerminateJobAsync(string jobId, class Azure.Compute.Batch.BatchJobTerminateContent parameters, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateJobAsync(System.String,Azure.Compute.Batch.BatchJobTerminateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateJobAsync (jobId As String, Optional parameters As BatchJobTerminateContent = Nothing, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member TerminateJobAsync : string * Azure.Compute.Batch.BatchJobTerminateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.TerminateJobAsync : string * Azure.Compute.Batch.BatchJobTerminateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.TerminateJobAsync (jobId, parameters, timeOutInSeconds, ocpdate, force, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="parameters" Type="Azure.Compute.Batch.BatchJobTerminateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to terminate. </param>
        <param name="parameters"> The options to use for terminating the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Terminates the specified Job, marking it as completed. </summary>
        <returns>To be added.</returns>
        <remarks>
            When a Terminate Job request is received, the Batch service sets the Job to the
            terminating state. The Batch service then terminates any running Tasks
            associated with the Job and runs any required Job release Tasks. Then the Job
            moves into the completed state. If there are any Tasks in the Job in the active
            state, they will remain in the active state. Once a Job is terminated, new
            Tasks cannot be added and any remaining active Tasks will not be scheduled.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call TerminateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.TerminateJobAsync("jobId");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; TerminateJobAsync (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; TerminateJobAsync(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateJobAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateJobAsync (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member TerminateJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.TerminateJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.TerminateJobAsync (jobId, content, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job to terminate. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Terminates the specified Job, marking it as completed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.TerminateJobAsync(System.String,Azure.Compute.Batch.BatchJobTerminateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TerminateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = null;
Response response = await client.TerminateJobAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response TerminateJobSchedule (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response TerminateJobSchedule(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateJobSchedule(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateJobSchedule (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member TerminateJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.TerminateJobSchedule : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.TerminateJobSchedule (jobScheduleId, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Terminates a Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TerminateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.TerminateJobSchedule("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; TerminateJobScheduleAsync (string jobScheduleId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, bool? force = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; TerminateJobScheduleAsync(string jobScheduleId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Nullable`1&lt;bool&gt; force, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateJobScheduleAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateJobScheduleAsync (jobScheduleId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional force As Nullable(Of Boolean) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member TerminateJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.TerminateJobScheduleAsync : string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.TerminateJobScheduleAsync (jobScheduleId, timeOutInSeconds, ocpdate, force, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="force" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="force"> If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Terminates a Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TerminateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.TerminateJobScheduleAsync("jobScheduleId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateTask">
      <MemberSignature Language="C#" Value="public virtual Azure.Response TerminateTask (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response TerminateTask(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateTask(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateTask (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member TerminateTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.TerminateTask : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.TerminateTask (jobId, taskId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to terminate. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Terminates the specified Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TerminateTask.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = client.TerminateTask("jobId", "taskId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TerminateTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; TerminateTaskAsync (string jobId, string taskId, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; TerminateTaskAsync(string jobId, string taskId, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.TerminateTaskAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TerminateTaskAsync (jobId As String, taskId As String, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member TerminateTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.TerminateTaskAsync : string * string * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.TerminateTaskAsync (jobId, taskId, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="taskId" Type="System.String" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job containing the Task. </param>
        <param name="taskId"> The ID of the Task to terminate. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Terminates the specified Task.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="taskId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TerminateTaskAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

Response response = await client.TerminateTaskAsync("jobId", "taskId");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateJob (string jobId, Azure.Compute.Batch.BatchJobUpdateContent job, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateJob(string jobId, class Azure.Compute.Batch.BatchJobUpdateContent job, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJob(System.String,Azure.Compute.Batch.BatchJobUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJob (jobId As String, job As BatchJobUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateJob : string * Azure.Compute.Batch.BatchJobUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdateJob : string * Azure.Compute.Batch.BatchJobUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.UpdateJob (jobId, job, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="job" Type="Azure.Compute.Batch.BatchJobUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="job"> The options to use for updating the Job. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="job" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = client.UpdateJob("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateJob (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateJob(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJob(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJob (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateJob : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.UpdateJob (jobId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJob.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = client.UpdateJob("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateJobAsync (string jobId, Azure.Compute.Batch.BatchJobUpdateContent job, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateJobAsync(string jobId, class Azure.Compute.Batch.BatchJobUpdateContent job, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJobAsync(System.String,Azure.Compute.Batch.BatchJobUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobAsync (jobId As String, job As BatchJobUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobAsync : string * Azure.Compute.Batch.BatchJobUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateJobAsync : string * Azure.Compute.Batch.BatchJobUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UpdateJobAsync (jobId, job, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="job" Type="Azure.Compute.Batch.BatchJobUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="job"> The options to use for updating the Job.. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="job" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = await client.UpdateJobAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateJobAsync (string jobId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateJobAsync(string jobId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJobAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobAsync (jobId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateJobAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UpdateJobAsync (jobId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJobAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    priority = 100,
    constraints = new
    {
        maxWallClockTime = "PT1H",
        maxTaskRetryCount = -1,
    },
    poolInfo = new
    {
        poolId = "poolId",
    },
});
Response response = await client.UpdateJobAsync("jobId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateJobSchedule (string jobScheduleId, Azure.Compute.Batch.BatchJobScheduleUpdateContent jobSchedule, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateJobSchedule(string jobScheduleId, class Azure.Compute.Batch.BatchJobScheduleUpdateContent jobSchedule, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJobSchedule(System.String,Azure.Compute.Batch.BatchJobScheduleUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobSchedule (jobScheduleId As String, jobSchedule As BatchJobScheduleUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobSchedule : string * Azure.Compute.Batch.BatchJobScheduleUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdateJobSchedule : string * Azure.Compute.Batch.BatchJobScheduleUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.UpdateJobSchedule (jobScheduleId, jobSchedule, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="jobSchedule" Type="Azure.Compute.Batch.BatchJobScheduleUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="jobSchedule"> The options to use for updating the Job Schedule. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="jobSchedule" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    schedule = new
    {
        doNotRunUntil = "2025-01-01T12:30:00Z",
    },
    jobSpecification = new
    {
        priority = 0,
        usesTaskDependencies = false,
        constraints = new
        {
            maxWallClockTime = "P10675199DT2H48M5.4775807S",
            maxTaskRetryCount = 0,
        },
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = client.UpdateJobSchedule("jobScheduleId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobSchedule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateJobSchedule (string jobScheduleId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateJobSchedule(string jobScheduleId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJobSchedule(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobSchedule (jobScheduleId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobSchedule : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateJobSchedule : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.UpdateJobSchedule (jobScheduleId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJobSchedule.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    schedule = new
    {
        doNotRunUntil = "2025-01-01T12:30:00Z",
    },
    jobSpecification = new
    {
        priority = 0,
        usesTaskDependencies = false,
        constraints = new
        {
            maxWallClockTime = "P10675199DT2H48M5.4775807S",
            maxTaskRetryCount = 0,
        },
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = client.UpdateJobSchedule("jobScheduleId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateJobScheduleAsync (string jobScheduleId, Azure.Compute.Batch.BatchJobScheduleUpdateContent jobSchedule, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateJobScheduleAsync(string jobScheduleId, class Azure.Compute.Batch.BatchJobScheduleUpdateContent jobSchedule, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJobScheduleAsync(System.String,Azure.Compute.Batch.BatchJobScheduleUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobScheduleAsync (jobScheduleId As String, jobSchedule As BatchJobScheduleUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobScheduleAsync : string * Azure.Compute.Batch.BatchJobScheduleUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateJobScheduleAsync : string * Azure.Compute.Batch.BatchJobScheduleUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UpdateJobScheduleAsync (jobScheduleId, jobSchedule, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="jobSchedule" Type="Azure.Compute.Batch.BatchJobScheduleUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="jobSchedule"> The options to use for updating the Job Schedule. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="jobSchedule" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    schedule = new
    {
        doNotRunUntil = "2025-01-01T12:30:00Z",
    },
    jobSpecification = new
    {
        priority = 0,
        usesTaskDependencies = false,
        constraints = new
        {
            maxWallClockTime = "P10675199DT2H48M5.4775807S",
            maxTaskRetryCount = 0,
        },
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = await client.UpdateJobScheduleAsync("jobScheduleId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobScheduleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateJobScheduleAsync (string jobScheduleId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateJobScheduleAsync(string jobScheduleId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdateJobScheduleAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobScheduleAsync (jobScheduleId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobScheduleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateJobScheduleAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UpdateJobScheduleAsync (jobScheduleId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobScheduleId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Job Schedule.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobScheduleId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobScheduleId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateJobScheduleAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    schedule = new
    {
        doNotRunUntil = "2025-01-01T12:30:00Z",
    },
    jobSpecification = new
    {
        priority = 0,
        usesTaskDependencies = false,
        constraints = new
        {
            maxWallClockTime = "P10675199DT2H48M5.4775807S",
            maxTaskRetryCount = 0,
        },
        poolInfo = new
        {
            poolId = "poolId",
        },
    },
});
Response response = await client.UpdateJobScheduleAsync("jobScheduleId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdatePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdatePool (string poolId, Azure.Compute.Batch.BatchPoolUpdateContent pool, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdatePool(string poolId, class Azure.Compute.Batch.BatchPoolUpdateContent pool, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdatePool(System.String,Azure.Compute.Batch.BatchPoolUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdatePool (poolId As String, pool As BatchPoolUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdatePool : string * Azure.Compute.Batch.BatchPoolUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdatePool : string * Azure.Compute.Batch.BatchPoolUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="batchClient.UpdatePool (poolId, pool, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="pool" Type="Azure.Compute.Batch.BatchPoolUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="pool"> The pool properties to update. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="pool" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    startTask = new
    {
        commandLine = "/bin/bash -c 'echo start task'",
    },
});
Response response = client.UpdatePool("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdatePool">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdatePool (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdatePool(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdatePool(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdatePool (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdatePool : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdatePool : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.UpdatePool (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdatePool.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    startTask = new
    {
        commandLine = "/bin/bash -c 'echo start task'",
    },
});
Response response = client.UpdatePool("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdatePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdatePoolAsync (string poolId, Azure.Compute.Batch.BatchPoolUpdateContent pool, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdatePoolAsync(string poolId, class Azure.Compute.Batch.BatchPoolUpdateContent pool, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdatePoolAsync(System.String,Azure.Compute.Batch.BatchPoolUpdateContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdatePoolAsync (poolId As String, pool As BatchPoolUpdateContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePoolAsync : string * Azure.Compute.Batch.BatchPoolUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdatePoolAsync : string * Azure.Compute.Batch.BatchPoolUpdateContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UpdatePoolAsync (poolId, pool, timeOutInSeconds, ocpdate, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="pool" Type="Azure.Compute.Batch.BatchPoolUpdateContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="pool"> The pool properties to update. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="pool" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    startTask = new
    {
        commandLine = "/bin/bash -c 'echo start task'",
    },
});
Response response = await client.UpdatePoolAsync("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdatePoolAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdatePoolAsync (string poolId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdatePoolAsync(string poolId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UpdatePoolAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdatePoolAsync (poolId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePoolAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdatePoolAsync : string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UpdatePoolAsync (poolId, content, timeOutInSeconds, ocpdate, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool to get. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates the properties of the specified Pool.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdatePoolAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    startTask = new
    {
        commandLine = "/bin/bash -c 'echo start task'",
    },
});
Response response = await client.UpdatePoolAsync("poolId", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UploadNodeLogs">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt; UploadNodeLogs (string poolId, string nodeId, Azure.Compute.Batch.UploadBatchServiceLogsContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Compute.Batch.UploadBatchServiceLogsResult&gt; UploadNodeLogs(string poolId, string nodeId, class Azure.Compute.Batch.UploadBatchServiceLogsContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UploadNodeLogs(System.String,System.String,Azure.Compute.Batch.UploadBatchServiceLogsContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadNodeLogs (poolId As String, nodeId As String, content As UploadBatchServiceLogsContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of UploadBatchServiceLogsResult)" />
      <MemberSignature Language="F#" Value="abstract member UploadNodeLogs : string * string * Azure.Compute.Batch.UploadBatchServiceLogsContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;&#xA;override this.UploadNodeLogs : string * string * Azure.Compute.Batch.UploadBatchServiceLogsContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;" Usage="batchClient.UploadNodeLogs (poolId, nodeId, content, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.UploadBatchServiceLogsContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId">
            The ID of the Compute Node for which you want to get the Remote Desktop
            Protocol file.
            </param>
        <param name="content"> The Azure Batch service log files upload options. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upload Azure Batch service log files from the specified Compute Node to Azure
            Blob Storage.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This is for gathering Azure Batch service log files in an automated fashion
            from Compute Nodes if you are experiencing an error and wish to escalate to
            Azure support. The Azure Batch service log files should be shared with Azure
            support to aid in debugging issues with the Batch service.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UploadNodeLogs.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

UploadBatchServiceLogsContent content = new UploadBatchServiceLogsContent("https://somestorageacct.blob.core.windows.net/batch-compute-node-logs?se=2017-12-09T18%3A51%3A00Z&sp=w&sv=2016-05-31&sr=c&sig", DateTimeOffset.Parse("2017-11-27T00:00:00Z"));
Response<UploadBatchServiceLogsResult> response = client.UploadNodeLogs("poolId", "tvm-1695681911_1-20161121t182739z", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UploadNodeLogs">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UploadNodeLogs (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UploadNodeLogs(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UploadNodeLogs(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadNodeLogs (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UploadNodeLogs : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UploadNodeLogs : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="batchClient.UploadNodeLogs (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId">
            The ID of the Compute Node for which you want to get the Remote Desktop
            Protocol file.
            </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Upload Azure Batch service log files from the specified Compute Node to Azure
            Blob Storage.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.UploadNodeLogs(System.String,System.String,Azure.Compute.Batch.UploadBatchServiceLogsContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UploadNodeLogs and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    containerUrl = "https://somestorageacct.blob.core.windows.net/batch-compute-node-logs?se=2017-12-09T18%3A51%3A00Z&sp=w&sv=2016-05-31&sr=c&sig",
    startTime = "2017-11-27T00:00:00Z",
});
Response response = client.UploadNodeLogs("poolId", "tvm-1695681911_1-20161121t182739z", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("virtualDirectoryName").ToString());
Console.WriteLine(result.GetProperty("numberOfFilesUploaded").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UploadNodeLogsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;&gt; UploadNodeLogsAsync (string poolId, string nodeId, Azure.Compute.Batch.UploadBatchServiceLogsContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;&gt; UploadNodeLogsAsync(string poolId, string nodeId, class Azure.Compute.Batch.UploadBatchServiceLogsContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UploadNodeLogsAsync(System.String,System.String,Azure.Compute.Batch.UploadBatchServiceLogsContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadNodeLogsAsync (poolId As String, nodeId As String, content As UploadBatchServiceLogsContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of UploadBatchServiceLogsResult))" />
      <MemberSignature Language="F#" Value="abstract member UploadNodeLogsAsync : string * string * Azure.Compute.Batch.UploadBatchServiceLogsContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;&gt;&#xA;override this.UploadNodeLogsAsync : string * string * Azure.Compute.Batch.UploadBatchServiceLogsContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;&gt;" Usage="batchClient.UploadNodeLogsAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Compute.Batch.UploadBatchServiceLogsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Compute.Batch.UploadBatchServiceLogsContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId">
            The ID of the Compute Node for which you want to get the Remote Desktop
            Protocol file.
            </param>
        <param name="content"> The Azure Batch service log files upload options. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Upload Azure Batch service log files from the specified Compute Node to Azure
            Blob Storage.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This is for gathering Azure Batch service log files in an automated fashion
            from Compute Nodes if you are experiencing an error and wish to escalate to
            Azure support. The Azure Batch service log files should be shared with Azure
            support to aid in debugging issues with the Batch service.
            </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UploadNodeLogsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

UploadBatchServiceLogsContent content = new UploadBatchServiceLogsContent("https://somestorageacct.blob.core.windows.net/batch-compute-node-logs?se=2017-12-09T18%3A51%3A00Z&sp=w&sv=2016-05-31&sr=c&sig", DateTimeOffset.Parse("2017-11-27T00:00:00Z"));
Response<UploadBatchServiceLogsResult> response = await client.UploadNodeLogsAsync("poolId", "tvm-1695681911_1-20161121t182739z", content);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UploadNodeLogsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UploadNodeLogsAsync (string poolId, string nodeId, Azure.Core.RequestContent content, int? timeOutInSeconds = default, DateTimeOffset? ocpdate = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UploadNodeLogsAsync(string poolId, string nodeId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;int32&gt; timeOutInSeconds, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; ocpdate, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Compute.Batch.BatchClient.UploadNodeLogsAsync(System.String,System.String,Azure.Core.RequestContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadNodeLogsAsync (poolId As String, nodeId As String, content As RequestContent, Optional timeOutInSeconds As Nullable(Of Integer) = Nothing, Optional ocpdate As Nullable(Of DateTimeOffset) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UploadNodeLogsAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UploadNodeLogsAsync : string * string * Azure.Core.RequestContent * Nullable&lt;int&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="batchClient.UploadNodeLogsAsync (poolId, nodeId, content, timeOutInSeconds, ocpdate, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Compute.Batch</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="poolId" Type="System.String" />
        <Parameter Name="nodeId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="timeOutInSeconds" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="ocpdate" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        <param name="nodeId">
            The ID of the Compute Node for which you want to get the Remote Desktop
            Protocol file.
            </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        <param name="ocpdate">
            The time the request was issued. Client libraries typically set this to the
            current system clock time; set it explicitly if you are calling the REST API
            directly.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Upload Azure Batch service log files from the specified Compute Node to Azure
            Blob Storage.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Compute.Batch.BatchClient.UploadNodeLogsAsync(System.String,System.String,Azure.Compute.Batch.UploadBatchServiceLogsContent,System.Nullable{System.Int32},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="poolId" />, <paramref name="nodeId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="poolId" /> or <paramref name="nodeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UploadNodeLogsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
BatchClient client = new BatchClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    containerUrl = "https://somestorageacct.blob.core.windows.net/batch-compute-node-logs?se=2017-12-09T18%3A51%3A00Z&sp=w&sv=2016-05-31&sr=c&sig",
    startTime = "2017-11-27T00:00:00Z",
});
Response response = await client.UploadNodeLogsAsync("poolId", "tvm-1695681911_1-20161121t182739z", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("virtualDirectoryName").ToString());
Console.WriteLine(result.GetProperty("numberOfFilesUploaded").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
