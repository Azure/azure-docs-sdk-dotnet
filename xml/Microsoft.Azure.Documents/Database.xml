<Type Name="Database" FullName="Microsoft.Azure.Documents.Database">
  <TypeSignature Language="C#" Value="public class Database : Microsoft.Azure.Documents.Resource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Database extends Microsoft.Azure.Documents.Resource" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Documents.Database" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
    <AssemblyVersion>1.14.0.0</AssemblyVersion>
    <AssemblyVersion>1.16.0.0</AssemblyVersion>
    <AssemblyVersion>1.17.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.Documents.Resource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents a database in the Azure DocumentDB account.
            </summary>
    <remarks>
            Each Azure DocumentDB database account can have zero or more databases. A database in Azure DocumentDB is a logical container for 
            document collections and users.
            Refer to <see>http://azure.microsoft.com/documentation/articles/documentdb-resources/#databases</see> for more details on databases.
            </remarks>
    <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#"><![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
    <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#"><![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]></code></example>
    <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#"><![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]></code></example>
    <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#"><![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]></code></example>
    <altmember cref="T:Microsoft.Azure.Documents.DocumentCollection" />
    <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#"><![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
    <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#"><![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]></code></example>
    <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#"><![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]></code></example>
    <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#"><![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]></code></example>
    <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#"><![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
    <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#"><![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]></code></example>
    <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#"><![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]></code></example>
    <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#"><![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]></code></example>
    <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#"><![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
    <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#"><![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]></code></example>
    <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#"><![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]></code></example>
    <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#"><![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]></code></example>
    <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#"><![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
    <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#"><![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]></code></example>
    <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#"><![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]></code></example>
    <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#"><![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]></code></example>
    <example>
            The example below creates a new Database with an Id property of 'MyDatabase'.
            <code language="c#"><![CDATA[ 
            using (DocumentClient client = new DocumentClient(new Uri("service endpoint"), "auth key"))
            {
                Database db = await client.CreateDatabaseAsync(new Database { Id = "MyDatabase" });
            }
            ]]></code></example>
    <example> 
            The example below creates a collection within this database with OfferThroughput set to 10000.
            <code language="c#"><![CDATA[
            DocumentCollection coll = await client.CreateDocumentCollectionAsync(db.SelfLink,
                new DocumentCollection { Id = "MyCollection" }, 
                new RequestOptions { OfferThroughput = 10000} );
            ]]></code></example>
    <example>
            The example below queries for a Database by Id to retrieve the SelfLink.
            <code language="c#"><![CDATA[
            using Microsoft.Azure.Documents.Linq;
            Database database = client.CreateDatabaseQuery().Where(d => d.Id == "MyDatabase").AsEnumerable().FirstOrDefault();
            string databaseLink = database.SelfLink;
            ]]></code></example>
    <example>
            The example below deletes the database using its SelfLink property.
            <code language="c#"><![CDATA[
            await client.DeleteDatabaseAsync(db.SelfLink);
            ]]></code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Database ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Documents.Database.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Azure.Documents.Database" /> class for the Azure DocumentDB database service.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionsLink">
      <MemberSignature Language="C#" Value="public string CollectionsLink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CollectionsLink" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Database.CollectionsLink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="_colls")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the self-link for collections from the Azure DocumentDB database service.
            </summary>
        <value>
            The self-link for collections in the database.
            </value>
        <remarks>
            Every Azure DocumentDB resource has a static, immutable, addressable URI. 
            For collections, this takes the form of;
            /dbs/db_rid/colls/ where db_rid represents the value of the database's resource id.
            A resource id is not the id given to a database on creation, but an internally generated immutable id.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsersLink">
      <MemberSignature Language="C#" Value="public string UsersLink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UsersLink" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Documents.Database.UsersLink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Documents.Client</AssemblyName>
        <AssemblyVersion>1.14.0.0</AssemblyVersion>
        <AssemblyVersion>1.16.0.0</AssemblyVersion>
        <AssemblyVersion>1.17.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.DocumentDB.Core</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="_users")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the self-link for users from the Azure DocumentDB database service.
            </summary>
        <value>
            The self-link for users in the database.
            </value>
        <remarks>
            Every Azure DocumentDB resource has a static, immutable, addressable URI. 
            For users, this takes the form of;
            /dbs/db_rid/users/ where db_rid represents the value of the database's resource id.
            A resource id is not the id given to a database on creation, but an internally generated immutable id.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>