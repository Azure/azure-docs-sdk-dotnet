<Type Name="AssetsClient" FullName="Azure.Analytics.Purview.Share.AssetsClient">
  <TypeSignature Language="C#" Value="public class AssetsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AssetsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Share.AssetsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class AssetsClient" />
  <TypeSignature Language="F#" Value="type AssetsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Assets service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AssetsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of AssetsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssetsClient (string endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.#ctor(System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.AssetsClient : string * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Share.AssetsClient" Usage="new Azure.Analytics.Purview.Share.AssetsClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of AssetsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AssetsClient (string endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Share.PurviewShareClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Share.PurviewShareClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Share.PurviewShareClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential, options As PurviewShareClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.AssetsClient : string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Share.PurviewShareClientOptions -&gt; Azure.Analytics.Purview.Share.AssetsClient" Usage="new Azure.Analytics.Purview.Share.AssetsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Share.PurviewShareClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of AssetsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Create (Azure.WaitUntil waitUntil, string sentShareName, string assetName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Create(valuetype Azure.WaitUntil waitUntil, string sentShareName, string assetName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.Create(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (waitUntil As WaitUntil, sentShareName As String, assetName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Create : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="assetsClient.Create (waitUntil, sentShareName, assetName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="assetName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="assetName"> The name of the asset. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Adds a new asset to an existing share. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Create an asset on a sent share
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
            <code>{
              kind: AdlsGen2Account, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the adls gen2 storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of adls gen2 storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
              }, # Required. Adls gen 2 account asset properties
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
            <code>{
              kind: BlobAccount, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the blob storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of blob storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the blob storage account.
              }, # Required. Blob storage account asset properties
            }
            </code></details></details>
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
            <code>{
              kind: AdlsGen2Account, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the adls gen2 storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of adls gen2 storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
              }, # Required. Adls gen 2 account asset properties
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
            <code>{
              kind: BlobAccount, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the blob storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of blob storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the blob storage account.
              }, # Required. Blob storage account asset properties
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="assetName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Create with required parameters and request content and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                kind = "AdlsGen2Account",
                properties = new {
                    paths = new[] {
                        new {
                            containerName = "<StorageAccountPathContainerName>",
                            receiverPath = "<StorageAccountPathReceiverPath>",
                            senderPath = "<StorageAccountPathSenderPath>",
                        }
                    },
                    receiverAssetName = "<AdlsGen2AccountAssetPropertiesReceiverAssetName>",
                    storageAccountResourceId = "<AdlsGen2AccountAssetPropertiesStorageAccountResourceId>",
                },
            };
            
            var operation = client.Create(WaitUntil.Completed, "<sentShareName>", "<assetName>", RequestContent.Create(data));
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateAsync (Azure.WaitUntil waitUntil, string sentShareName, string assetName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateAsync(valuetype Azure.WaitUntil waitUntil, string sentShareName, string assetName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.CreateAsync(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (waitUntil As WaitUntil, sentShareName As String, assetName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="assetsClient.CreateAsync (waitUntil, sentShareName, assetName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="assetName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="assetName"> The name of the asset. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Adds a new asset to an existing share. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Create an asset on a sent share
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
            <code>{
              kind: AdlsGen2Account, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the adls gen2 storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of adls gen2 storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
              }, # Required. Adls gen 2 account asset properties
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
            <code>{
              kind: BlobAccount, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the blob storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of blob storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the blob storage account.
              }, # Required. Blob storage account asset properties
            }
            </code></details></details>
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
            <code>{
              kind: AdlsGen2Account, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the adls gen2 storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of adls gen2 storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
              }, # Required. Adls gen 2 account asset properties
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
            <code>{
              kind: BlobAccount, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the blob storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of blob storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the blob storage account.
              }, # Required. Blob storage account asset properties
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="assetName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateAsync with required parameters and request content and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                kind = "AdlsGen2Account",
                properties = new {
                    paths = new[] {
                        new {
                            containerName = "<StorageAccountPathContainerName>",
                            receiverPath = "<StorageAccountPathReceiverPath>",
                            senderPath = "<StorageAccountPathSenderPath>",
                        }
                    },
                    receiverAssetName = "<AdlsGen2AccountAssetPropertiesReceiverAssetName>",
                    storageAccountResourceId = "<AdlsGen2AccountAssetPropertiesStorageAccountResourceId>",
                },
            };
            
            var operation = await client.CreateAsync(WaitUntil.Completed, "<sentShareName>", "<assetName>", RequestContent.Create(data));
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation Delete (Azure.WaitUntil waitUntil, string sentShareName, string assetName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation Delete(valuetype Azure.WaitUntil waitUntil, string sentShareName, string assetName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.Delete(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, sentShareName As String, assetName As String, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.Delete : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; Azure.Operation" Usage="assetsClient.Delete (waitUntil, sentShareName, assetName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="assetName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="assetName"> The name of the asset. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete asset in a sentShare. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks> Delete an asset on a sent share. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Delete with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            var operation = client.Delete(WaitUntil.Completed, "<sentShareName>", "<assetName>");
            
            var response = operation.WaitForCompletionResponse();
            Console.WriteLine(response.Status)
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; DeleteAsync (Azure.WaitUntil waitUntil, string sentShareName, string assetName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, string sentShareName, string assetName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.DeleteAsync(Azure.WaitUntil,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, sentShareName As String, assetName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="assetsClient.DeleteAsync (waitUntil, sentShareName, assetName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="assetName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="assetName"> The name of the asset. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete asset in a sentShare. </summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks> Delete an asset on a sent share. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteAsync with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            var operation = await client.DeleteAsync(WaitUntil.Completed, "<sentShareName>", "<assetName>");
            
            var response = await operation.WaitForCompletionResponseAsync();
            Console.WriteLine(response.Status)
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAsset">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAsset (string sentShareName, string assetName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAsset(string sentShareName, string assetName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.GetAsset(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsset (sentShareName As String, assetName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAsset : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAsset : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="assetsClient.GetAsset (sentShareName, assetName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="assetName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="assetName"> The name of the asset. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get asset in a sentShare. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get an asset on a sent share
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
            <code>{
              kind: AdlsGen2Account, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the adls gen2 storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of adls gen2 storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
              }, # Required. Adls gen 2 account asset properties
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
            <code>{
              kind: BlobAccount, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the blob storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of blob storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the blob storage account.
              }, # Required. Blob storage account asset properties
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAsset with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            Response response = client.GetAsset("<sentShareName>", "<assetName>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAssetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAssetAsync (string sentShareName, string assetName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAssetAsync(string sentShareName, string assetName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.GetAssetAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAssetAsync (sentShareName As String, assetName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAssetAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAssetAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="assetsClient.GetAssetAsync (sentShareName, assetName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="assetName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="assetName"> The name of the asset. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get asset in a sentShare. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get an asset on a sent share
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>AdlsGen2AccountAsset</summary>Schema for <c>AdlsGen2AccountAsset</c>:
            <code>{
              kind: AdlsGen2Account, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the adls gen2 storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of adls gen2 storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the adls gen2 storage account.
              }, # Required. Adls gen 2 account asset properties
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAsset</summary>Schema for <c>BlobAccountAsset</c>:
            <code>{
              kind: BlobAccount, # Required. The types of asset.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                location: string, # Optional. Location of the blob storage account.
                paths: [
                  {
                    containerName: string, # Required. Gets or sets the container name.
                    receiverPath: string, # Optional. Gets or sets the path on the receiver side where the asset is to be mapped.
                    senderPath: string, # Optional. Gets or sets the path to file/folder within the container to be shared.
                  }
                ], # Required. A list of blob storage account paths to be shared.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                receiverAssetName: string, # Required. Name of the asset for the receiver.
                storageAccountResourceId: string, # Required. Resource id of the blob storage account.
              }, # Required. Blob storage account asset properties
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="assetName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAssetAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            Response response = await client.GetAssetAsync("<sentShareName>", "<assetName>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAssets">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAssets (string sentShareName, string skipToken = default, string filter = default, string orderby = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAssets(string sentShareName, string skipToken, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.GetAssets(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAssets (sentShareName As String, Optional skipToken As String = Nothing, Optional filter As String = Nothing, Optional orderby As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAssets : string * string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAssets : string * string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="assetsClient.GetAssets (sentShareName, skipToken, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="skipToken"> The continuation token to list the next page. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List Assets in a share. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            List assets on a sent share
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>AssetListValue</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              kind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAssets with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            foreach (var data in client.GetAssets("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetAssets with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            foreach (var data in client.GetAssets("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAssetsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAssetsAsync (string sentShareName, string skipToken = default, string filter = default, string orderby = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAssetsAsync(string sentShareName, string skipToken, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AssetsClient.GetAssetsAsync(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAssetsAsync (sentShareName As String, Optional skipToken As String = Nothing, Optional filter As String = Nothing, Optional orderby As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAssetsAsync : string * string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAssetsAsync : string * string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="assetsClient.GetAssetsAsync (sentShareName, skipToken, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="skipToken"> The continuation token to list the next page. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List Assets in a share. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            List assets on a sent share
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>AssetListValue</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              kind: "AdlsGen2Account" | "BlobAccount", # Required. The types of asset.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAssetsAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            await foreach (var data in client.GetAssetsAsync("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetAssetsAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AssetsClient("<https://my-service.azure.com>", credential);
            
            await foreach (var data in client.GetAssetsAsync("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("kind").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Share.AssetsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Share.AssetsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
