<Type Name="SentShareInvitationsClient" FullName="Azure.Analytics.Purview.Share.SentShareInvitationsClient">
  <TypeSignature Language="C#" Value="public class SentShareInvitationsClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SentShareInvitationsClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Share.SentShareInvitationsClient" />
  <TypeSignature Language="VB.NET" Value="Public Class SentShareInvitationsClient" />
  <TypeSignature Language="F#" Value="type SentShareInvitationsClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The SentShareInvitations service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SentShareInvitationsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of SentShareInvitationsClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SentShareInvitationsClient (string endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.#ctor(System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.SentShareInvitationsClient : string * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Share.SentShareInvitationsClient" Usage="new Azure.Analytics.Purview.Share.SentShareInvitationsClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of SentShareInvitationsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SentShareInvitationsClient (string endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Share.PurviewShareClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Share.PurviewShareClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Share.PurviewShareClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential, options As PurviewShareClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.SentShareInvitationsClient : string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Share.PurviewShareClientOptions -&gt; Azure.Analytics.Purview.Share.SentShareInvitationsClient" Usage="new Azure.Analytics.Purview.Share.SentShareInvitationsClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Share.PurviewShareClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of SentShareInvitationsClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdate (string sentShareName, string sentShareInvitationName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdate(string sentShareName, string sentShareInvitationName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.CreateOrUpdate(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (sentShareName As String, sentShareInvitationName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdate : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="sentShareInvitationsClient.CreateOrUpdate (sentShareName, sentShareInvitationName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="sentShareInvitationName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="sentShareInvitationName"> Name of the sent invitation. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Create/Update a sent share invitation in the given account. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Create a sent share invitation
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>ApplicationInvitation</summary>Schema for <c>ApplicationInvitation</c>:
            <code>{
              invitationKind: Application, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
                targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
              }, # Required. Properties of the application invitation type.
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
            <code>{
              invitationKind: User, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetEmail: string, # Required. The receiver email for the invitation is being sent.
              }, # Required. Properties of the user invitation type.
            }
            </code></details></details>
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>ApplicationInvitation</summary>Schema for <c>ApplicationInvitation</c>:
            <code>{
              invitationKind: Application, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
                targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
              }, # Required. Properties of the application invitation type.
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
            <code>{
              invitationKind: User, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetEmail: string, # Required. The receiver email for the invitation is being sent.
              }, # Required. Properties of the user invitation type.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="sentShareInvitationName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdate with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                invitationKind = "Application",
                properties = new {
                    targetActiveDirectoryId = "<ApplicationInvitationPropertiesTargetActiveDirectoryId>",
                    targetObjectId = "<ApplicationInvitationPropertiesTargetObjectId>",
                },
            };
            
            Response response = client.CreateOrUpdate("<sentShareName>", "<sentShareInvitationName>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                invitationKind = "Application",
                properties = new {
                    expirationDate = "<2022-05-10T14:57:31.2311892-04:00>",
                    shareKind = "<InPlace>",
                    targetActiveDirectoryId = "<ApplicationInvitationPropertiesTargetActiveDirectoryId>",
                    targetObjectId = "<ApplicationInvitationPropertiesTargetObjectId>",
                },
            };
            
            Response response = client.CreateOrUpdate("<sentShareName>", "<sentShareInvitationName>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateAsync (string sentShareName, string sentShareInvitationName, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateAsync(string sentShareName, string sentShareInvitationName, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.CreateOrUpdateAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (sentShareName As String, sentShareInvitationName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentShareInvitationsClient.CreateOrUpdateAsync (sentShareName, sentShareInvitationName, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="sentShareInvitationName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="sentShareInvitationName"> Name of the sent invitation. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Create/Update a sent share invitation in the given account. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Create a sent share invitation
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>ApplicationInvitation</summary>Schema for <c>ApplicationInvitation</c>:
            <code>{
              invitationKind: Application, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
                targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
              }, # Required. Properties of the application invitation type.
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
            <code>{
              invitationKind: User, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetEmail: string, # Required. The receiver email for the invitation is being sent.
              }, # Required. Properties of the user invitation type.
            }
            </code></details></details>
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>ApplicationInvitation</summary>Schema for <c>ApplicationInvitation</c>:
            <code>{
              invitationKind: Application, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
                targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
              }, # Required. Properties of the application invitation type.
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
            <code>{
              invitationKind: User, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetEmail: string, # Required. The receiver email for the invitation is being sent.
              }, # Required. Properties of the user invitation type.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="sentShareInvitationName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call CreateOrUpdateAsync with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                invitationKind = "Application",
                properties = new {
                    targetActiveDirectoryId = "<ApplicationInvitationPropertiesTargetActiveDirectoryId>",
                    targetObjectId = "<ApplicationInvitationPropertiesTargetObjectId>",
                },
            };
            
            Response response = await client.CreateOrUpdateAsync("<sentShareName>", "<sentShareInvitationName>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                invitationKind = "Application",
                properties = new {
                    expirationDate = "<2022-05-10T14:57:31.2311892-04:00>",
                    shareKind = "<InPlace>",
                    targetActiveDirectoryId = "<ApplicationInvitationPropertiesTargetActiveDirectoryId>",
                    targetObjectId = "<ApplicationInvitationPropertiesTargetObjectId>",
                },
            };
            
            Response response = await client.CreateOrUpdateAsync("<sentShareName>", "<sentShareInvitationName>", RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (string sentShareName, string sentShareInvitationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(string sentShareName, string sentShareInvitationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.Delete(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (sentShareName As String, sentShareInvitationName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Delete : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sentShareInvitationsClient.Delete (sentShareName, sentShareInvitationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="sentShareInvitationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="sentShareInvitationName"> Name of the sent invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete Invitation in a share. </summary>
        <returns> The response returned from the service. </returns>
        <remarks> Delete a sent share invitation. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Delete with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            Response response = client.Delete("<sentShareName>", "<sentShareInvitationName>");
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (string sentShareName, string sentShareInvitationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(string sentShareName, string sentShareInvitationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.DeleteAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (sentShareName As String, sentShareInvitationName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentShareInvitationsClient.DeleteAsync (sentShareName, sentShareInvitationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="sentShareInvitationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="sentShareInvitationName"> Name of the sent invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Delete Invitation in a share. </summary>
        <returns> The response returned from the service. </returns>
        <remarks> Delete a sent share invitation. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call DeleteAsync with required parameters.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            Response response = await client.DeleteAsync("<sentShareName>", "<sentShareInvitationName>");
            Console.WriteLine(response.Status);
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareInvitation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSentShareInvitation (string sentShareName, string sentShareInvitationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSentShareInvitation(string sentShareName, string sentShareInvitationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.GetSentShareInvitation(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareInvitation (sentShareName As String, sentShareInvitationName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareInvitation : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSentShareInvitation : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sentShareInvitationsClient.GetSentShareInvitation (sentShareName, sentShareInvitationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="sentShareInvitationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="sentShareInvitationName"> Name of the sent invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get Invitation for a given share. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get a sent share invitation
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>ApplicationInvitation</summary>Schema for <c>ApplicationInvitation</c>:
            <code>{
              invitationKind: Application, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
                targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
              }, # Required. Properties of the application invitation type.
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
            <code>{
              invitationKind: User, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetEmail: string, # Required. The receiver email for the invitation is being sent.
              }, # Required. Properties of the user invitation type.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetSentShareInvitation with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            Response response = client.GetSentShareInvitation("<sentShareName>", "<sentShareInvitationName>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareInvitationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSentShareInvitationAsync (string sentShareName, string sentShareInvitationName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSentShareInvitationAsync(string sentShareName, string sentShareInvitationName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.GetSentShareInvitationAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareInvitationAsync (sentShareName As String, sentShareInvitationName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareInvitationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSentShareInvitationAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sentShareInvitationsClient.GetSentShareInvitationAsync (sentShareName, sentShareInvitationName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="sentShareInvitationName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="sentShareInvitationName"> Name of the sent invitation. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get Invitation for a given share. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get a sent share invitation
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this.
            <details><summary>ApplicationInvitation</summary>Schema for <c>ApplicationInvitation</c>:
            <code>{
              invitationKind: Application, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetActiveDirectoryId: string, # Required. The target azure active directory id the invitation is sent to.
                targetObjectId: string, # Required. The target object id in the azure active directory the invitation is sent to.
              }, # Required. Properties of the application invitation type.
            }
            </code></details><details><summary>~+ 1 more JSON objects</summary><details><summary>UserInvitation</summary>Schema for <c>UserInvitation</c>:
            <code>{
              invitationKind: User, # Required. The types of invitations.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                expirationDate: string (ISO 8601 Format), # Optional. The expiration date for the invitation
                invitationId: string, # Optional. Id of the invitation
                invitationStatus: "Pending" | "Accepted" | "Rejected", # Optional. Status of the invitation.
                provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                respondedAt: string (ISO 8601 Format), # Optional. The time the recipient responded to the invitation.
                senderEmail: string, # Optional. Email address of the sender.
                senderName: string, # Optional. Name of the sender
                senderTenantName: string, # Optional. Tenant name of the sender
                sentAt: string (ISO 8601 Format), # Optional. Gets the time at which the invitation was sent.
                shareKind: "InPlace", # Optional. Defines the supported types for share.
                targetEmail: string, # Required. The receiver email for the invitation is being sent.
              }, # Required. Properties of the user invitation type.
            }
            </code></details></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="sentShareInvitationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetSentShareInvitationAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            Response response = await client.GetSentShareInvitationAsync("<sentShareName>", "<sentShareInvitationName>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("invitationKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareInvitations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSentShareInvitations (string sentShareName, string skipToken = default, string filter = default, string orderby = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSentShareInvitations(string sentShareName, string skipToken, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.GetSentShareInvitations(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareInvitations (sentShareName As String, Optional skipToken As String = Nothing, Optional filter As String = Nothing, Optional orderby As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareInvitations : string * string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSentShareInvitations : string * string * string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="sentShareInvitationsClient.GetSentShareInvitations (sentShareName, skipToken, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="skipToken"> The continuation token to list the next page. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all Invitations in a share. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            List sent share invitations
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>SentShareInvitationListValue</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              invitationKind: "User" | "Application", # Required. The types of invitations.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetSentShareInvitations with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            foreach (var data in client.GetSentShareInvitations("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetSentShareInvitations with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            foreach (var data in client.GetSentShareInvitations("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("invitationKind").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSentShareInvitationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSentShareInvitationsAsync (string sentShareName, string skipToken = default, string filter = default, string orderby = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSentShareInvitationsAsync(string sentShareName, string skipToken, string filter, string orderby, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.SentShareInvitationsClient.GetSentShareInvitationsAsync(System.String,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSentShareInvitationsAsync (sentShareName As String, Optional skipToken As String = Nothing, Optional filter As String = Nothing, Optional orderby As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSentShareInvitationsAsync : string * string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSentShareInvitationsAsync : string * string * string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="sentShareInvitationsClient.GetSentShareInvitationsAsync (sentShareName, skipToken, filter, orderby, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="skipToken"> The continuation token to list the next page. </param>
        <param name="filter"> Filters the results using OData syntax. </param>
        <param name="orderby"> Sorts the results using OData syntax. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List all Invitations in a share. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            List sent share invitations
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>SentShareInvitationListValue</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              invitationKind: "User" | "Application", # Required. The types of invitations.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetSentShareInvitationsAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            await foreach (var data in client.GetSentShareInvitationsAsync("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetSentShareInvitationsAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new SentShareInvitationsClient("<https://my-service.azure.com>", credential);
            
            await foreach (var data in client.GetSentShareInvitationsAsync("<sentShareName>", "<skipToken>", "<filter>", "<orderby>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("invitationKind").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Share.SentShareInvitationsClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Share.SentShareInvitationsClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
