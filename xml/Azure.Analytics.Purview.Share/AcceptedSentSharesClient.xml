<Type Name="AcceptedSentSharesClient" FullName="Azure.Analytics.Purview.Share.AcceptedSentSharesClient">
  <TypeSignature Language="C#" Value="public class AcceptedSentSharesClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AcceptedSentSharesClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Share.AcceptedSentSharesClient" />
  <TypeSignature Language="VB.NET" Value="Public Class AcceptedSentSharesClient" />
  <TypeSignature Language="F#" Value="type AcceptedSentSharesClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The AcceptedSentShares service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AcceptedSentSharesClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of AcceptedSentSharesClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AcceptedSentSharesClient (string endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.#ctor(System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.AcceptedSentSharesClient : string * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Share.AcceptedSentSharesClient" Usage="new Azure.Analytics.Purview.Share.AcceptedSentSharesClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of AcceptedSentSharesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AcceptedSentSharesClient (string endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Share.PurviewShareClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Share.PurviewShareClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Share.PurviewShareClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential, options As PurviewShareClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.AcceptedSentSharesClient : string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Share.PurviewShareClientOptions -&gt; Azure.Analytics.Purview.Share.AcceptedSentSharesClient" Usage="new Azure.Analytics.Purview.Share.AcceptedSentSharesClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Share.PurviewShareClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of AcceptedSentSharesClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAcceptedSentShare">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetAcceptedSentShare (string sentShareName, string acceptedSentShareName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetAcceptedSentShare(string sentShareName, string acceptedSentShareName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.GetAcceptedSentShare(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAcceptedSentShare (sentShareName As String, acceptedSentShareName As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetAcceptedSentShare : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetAcceptedSentShare : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="acceptedSentSharesClient.GetAcceptedSentShare (sentShareName, acceptedSentShareName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get an accepted share with acceptedSentShareName to a particular sent share. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get an accepted sent share
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAcceptedSentShare with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            Response response = client.GetAcceptedSentShare("<sentShareName>", "<acceptedSentShareName>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAcceptedSentShareAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetAcceptedSentShareAsync (string sentShareName, string acceptedSentShareName, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetAcceptedSentShareAsync(string sentShareName, string acceptedSentShareName, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.GetAcceptedSentShareAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAcceptedSentShareAsync (sentShareName As String, acceptedSentShareName As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetAcceptedSentShareAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetAcceptedSentShareAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="acceptedSentSharesClient.GetAcceptedSentShareAsync (sentShareName, acceptedSentShareName, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Get an accepted share with acceptedSentShareName to a particular sent share. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Get an accepted sent share
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAcceptedSentShareAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            Response response = await client.GetAcceptedSentShareAsync("<sentShareName>", "<acceptedSentShareName>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAcceptedSentShares">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetAcceptedSentShares (string sentShareName, string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetAcceptedSentShares(string sentShareName, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.GetAcceptedSentShares(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAcceptedSentShares (sentShareName As String, Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAcceptedSentShares : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetAcceptedSentShares : string * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="acceptedSentSharesClient.GetAcceptedSentShares (sentShareName, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="skipToken"> The continuation token to list the next page. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List of accepted shares for the current sent share. </summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Get list of accepted sent shares
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>AcceptedSentShareListValue</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              shareKind: "InPlace", # Required. Defines the supported types for share.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAcceptedSentShares with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            foreach (var data in client.GetAcceptedSentShares("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetAcceptedSentShares with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            foreach (var data in client.GetAcceptedSentShares("<sentShareName>", "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("shareKind").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetAcceptedSentSharesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetAcceptedSentSharesAsync (string sentShareName, string skipToken = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetAcceptedSentSharesAsync(string sentShareName, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.GetAcceptedSentSharesAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAcceptedSentSharesAsync (sentShareName As String, Optional skipToken As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetAcceptedSentSharesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetAcceptedSentSharesAsync : string * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="acceptedSentSharesClient.GetAcceptedSentSharesAsync (sentShareName, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="skipToken"> The continuation token to list the next page. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> List of accepted shares for the current sent share. </summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
            Get list of accepted sent shares
            
            Below is the JSON schema for one item in the pageable response.
            
            Response Body:
            
            Schema for <c>AcceptedSentShareListValue</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              shareKind: "InPlace", # Required. Defines the supported types for share.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call GetAcceptedSentSharesAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            await foreach (var data in client.GetAcceptedSentSharesAsync("<sentShareName>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
            ]]></code>
            This sample shows how to call GetAcceptedSentSharesAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            await foreach (var data in client.GetAcceptedSentSharesAsync("<sentShareName>", "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("shareKind").ToString());
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Share.AcceptedSentSharesClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reinstate">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Reinstate (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Reinstate(valuetype Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, class Azure.Core.RequestContent content, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.Reinstate(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reinstate (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Reinstate : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Reinstate : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="acceptedSentSharesClient.Reinstate (waitUntil, sentShareName, acceptedSentShareName, content, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Reinstate a revoked accepted sent share. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Reinstate a revoked accepted sent share
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="acceptedSentShareName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Reinstate with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {},
            };
            
            var operation = client.Reinstate(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call Reinstate with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {
                    expirationDate = "<2022-05-10T14:57:31.2311892-04:00>",
                },
            };
            
            var operation = client.Reinstate(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReinstateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; ReinstateAsync (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; ReinstateAsync(valuetype Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, class Azure.Core.RequestContent content, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.ReinstateAsync(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReinstateAsync (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ReinstateAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.ReinstateAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="acceptedSentSharesClient.ReinstateAsync (waitUntil, sentShareName, acceptedSentShareName, content, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Reinstate a revoked accepted sent share. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Reinstate a revoked accepted sent share
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="acceptedSentShareName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call ReinstateAsync with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {},
            };
            
            var operation = await client.ReinstateAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call ReinstateAsync with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {
                    expirationDate = "<2022-05-10T14:57:31.2311892-04:00>",
                },
            };
            
            var operation = await client.ReinstateAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Revoke">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; Revoke (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; Revoke(valuetype Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.Revoke(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Revoke (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Revoke : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.Revoke : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="acceptedSentSharesClient.Revoke (waitUntil, sentShareName, acceptedSentShareName, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Revoke an accepted sent share's access. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Revoke an accepted sent share
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Revoke with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var operation = client.Revoke(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call Revoke with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var operation = client.Revoke(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RevokeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; RevokeAsync (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; RevokeAsync(valuetype Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RevokeAsync (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member RevokeAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.RevokeAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="acceptedSentSharesClient.RevokeAsync (waitUntil, sentShareName, acceptedSentShareName, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Revoke an accepted sent share's access. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Revoke an accepted sent share
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call RevokeAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call RevokeAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateExpiration">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; UpdateExpiration (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; UpdateExpiration(valuetype Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, class Azure.Core.RequestContent content, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.UpdateExpiration(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExpiration (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member UpdateExpiration : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.UpdateExpiration : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="acceptedSentSharesClient.UpdateExpiration (waitUntil, sentShareName, acceptedSentShareName, content, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Update the expiration date of an active accepted sent share. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Update the expiration date of an accepted sent share
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="acceptedSentShareName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call UpdateExpiration with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {},
            };
            
            var operation = client.UpdateExpiration(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call UpdateExpiration with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {
                    expirationDate = "<2022-05-10T14:57:31.2311892-04:00>",
                },
            };
            
            var operation = client.UpdateExpiration(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");
            
            BinaryData data = operation.WaitForCompletion();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateExpirationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; UpdateExpirationAsync (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; UpdateExpirationAsync(valuetype Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, class Azure.Core.RequestContent content, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.UpdateExpirationAsync(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExpirationAsync (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member UpdateExpirationAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.UpdateExpirationAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="acceptedSentSharesClient.UpdateExpirationAsync (waitUntil, sentShareName, acceptedSentShareName, content, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="sentShareName" Type="System.String" />
        <Parameter Name="acceptedSentShareName" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="sentShareName"> The name of the sent share. </param>
        <param name="acceptedSentShareName"> The name of the accepted sent share. </param>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Update the expiration date of an active accepted sent share. </summary>
        <returns> The <see cref="T:Azure.Operation`1" /> from the service that will contain a <see cref="T:System.BinaryData" /> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        <remarks>
            Update the expiration date of an accepted sent share
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details>
            
            Response Body:
            
            <details><summary>InPlaceAcceptedSentShare</summary>Schema for <c>InPlaceAcceptedSentShare</c>:
            <code>{
              shareKind: InPlace, # Required. Defines the supported types for share.
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                createdAt: string (ISO 8601 Format), # Optional. created at
                expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                receiverTargetObjectId: string, # Optional. Receiver's target object id
                receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                senderName: string, # Optional. Name of the sender who created the sent share invitation
                senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                sharedAt: string (ISO 8601 Format), # Optional. Shared at
              }, # Required. Properties of in place accepted sent share.
            }
            </code></details></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sentShareName" />, <paramref name="acceptedSentShareName" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sentShareName" /> or <paramref name="acceptedSentShareName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call UpdateExpirationAsync with required parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {},
            };
            
            var operation = await client.UpdateExpirationAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data));
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call UpdateExpirationAsync with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                shareKind = "InPlace",
                properties = new {
                    expirationDate = "<2022-05-10T14:57:31.2311892-04:00>",
                },
            };
            
            var operation = await client.UpdateExpirationAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", RequestContent.Create(data), "<repeatabilityRequestId>");
            
            BinaryData data = await operation.WaitForCompletionAsync();
            JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("shareKind").ToString());
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
