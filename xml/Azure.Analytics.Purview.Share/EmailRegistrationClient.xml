<Type Name="EmailRegistrationClient" FullName="Azure.Analytics.Purview.Share.EmailRegistrationClient">
  <TypeSignature Language="C#" Value="public class EmailRegistrationClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EmailRegistrationClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.Share.EmailRegistrationClient" />
  <TypeSignature Language="VB.NET" Value="Public Class EmailRegistrationClient" />
  <TypeSignature Language="F#" Value="type EmailRegistrationClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The EmailRegistration service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EmailRegistrationClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of EmailRegistrationClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmailRegistrationClient (string endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.#ctor(System.String,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.EmailRegistrationClient : string * Azure.Core.TokenCredential -&gt; Azure.Analytics.Purview.Share.EmailRegistrationClient" Usage="new Azure.Analytics.Purview.Share.EmailRegistrationClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of EmailRegistrationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmailRegistrationClient (string endpoint, Azure.Core.TokenCredential credential, Azure.Analytics.Purview.Share.PurviewShareClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string endpoint, class Azure.Core.TokenCredential credential, class Azure.Analytics.Purview.Share.PurviewShareClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.#ctor(System.String,Azure.Core.TokenCredential,Azure.Analytics.Purview.Share.PurviewShareClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As String, credential As TokenCredential, options As PurviewShareClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Analytics.Purview.Share.EmailRegistrationClient : string * Azure.Core.TokenCredential * Azure.Analytics.Purview.Share.PurviewShareClientOptions -&gt; Azure.Analytics.Purview.Share.EmailRegistrationClient" Usage="new Azure.Analytics.Purview.Share.EmailRegistrationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Analytics.Purview.Share.PurviewShareClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com/share. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of EmailRegistrationClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Activate (Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Activate(class Azure.Core.RequestContent content, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.Activate(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Activate (content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Activate : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Activate : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; Azure.Response" Usage="emailRegistrationClient.Activate (content, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Activates the tenant and email combination using the activation code received. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Activates the email registration for current tenant
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>TenantEmailRegistration</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                activationCode: string, # Required. Activation code for the registration.
                activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
                email: string, # Optional. The email to register.
                registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
                tenantId: string, # Optional. The tenant id to register.
              }, # Optional. Tenant email registration property bag.
            }
            </code>
            
            Response Body:
            
            Schema for <c>TenantEmailRegistration</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                activationCode: string, # Required. Activation code for the registration.
                activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
                email: string, # Optional. The email to register.
                registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
                tenantId: string, # Optional. The tenant id to register.
              }, # Optional. Tenant email registration property bag.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Activate with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            var data = new {};
            
            Response response = client.Activate(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call Activate with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                properties = new {
                    activationCode = "<TenantEmailRegistrationPropertiesActivationCode>",
                },
            };
            
            Response response = client.Activate(RequestContent.Create(data), "<repeatabilityRequestId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ActivateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ActivateAsync (Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ActivateAsync(class Azure.Core.RequestContent content, string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.ActivateAsync(Azure.Core.RequestContent,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ActivateAsync (content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ActivateAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ActivateAsync : Azure.Core.RequestContent * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="emailRegistrationClient.ActivateAsync (content, repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Activates the tenant and email combination using the activation code received. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Activates the email registration for current tenant
            
            Below is the JSON schema for the request and response payloads.
            
            Request Body:
            
            Schema for <c>TenantEmailRegistration</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                activationCode: string, # Required. Activation code for the registration.
                activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
                email: string, # Optional. The email to register.
                registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
                tenantId: string, # Optional. The tenant id to register.
              }, # Optional. Tenant email registration property bag.
            }
            </code>
            
            Response Body:
            
            Schema for <c>TenantEmailRegistration</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                activationCode: string, # Required. Activation code for the registration.
                activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
                email: string, # Optional. The email to register.
                registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
                tenantId: string, # Optional. The tenant id to register.
              }, # Optional. Tenant email registration property bag.
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call ActivateAsync with required parameters and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            var data = new {};
            
            Response response = await client.ActivateAsync(RequestContent.Create(data));
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call ActivateAsync with all parameters and request content, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            var data = new {
                properties = new {
                    activationCode = "<TenantEmailRegistrationPropertiesActivationCode>",
                },
            };
            
            Response response = await client.ActivateAsync(RequestContent.Create(data), "<repeatabilityRequestId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.Share.EmailRegistrationClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.Share.EmailRegistrationClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Register (string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Register(string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.Register(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Register (Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Register : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Register : string * Azure.RequestContext -&gt; Azure.Response" Usage="emailRegistrationClient.Register (repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Registers the tenant and email combination for activation. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Register an email for the current tenant
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TenantEmailRegistration</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                activationCode: string, # Required. Activation code for the registration.
                activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
                email: string, # Optional. The email to register.
                registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
                tenantId: string, # Optional. The tenant id to register.
              }, # Optional. Tenant email registration property bag.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call Register and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            Response response = client.Register();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call Register with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            Response response = client.Register("<repeatabilityRequestId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RegisterAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RegisterAsync (string repeatabilityRequestId = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RegisterAsync(string repeatabilityRequestId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.Share.EmailRegistrationClient.RegisterAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RegisterAsync (Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RegisterAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RegisterAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="emailRegistrationClient.RegisterAsync (repeatabilityRequestId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.Share</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="repeatabilityRequestId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="repeatabilityRequestId"> If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary> Registers the tenant and email combination for activation. </summary>
        <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        <remarks>
            Register an email for the current tenant
            
            Below is the JSON schema for the response payload.
            
            Response Body:
            
            Schema for <c>TenantEmailRegistration</c>:
            <code>{
              id: string, # Optional. The resource id of the resource.
              name: string, # Optional. Name of the resource.
              type: string, # Optional. Type of the resource.
              properties: {
                activationCode: string, # Required. Activation code for the registration.
                activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration.
                email: string, # Optional. The email to register.
                registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
                tenantId: string, # Optional. The tenant id to register.
              }, # Optional. Tenant email registration property bag.
            }
            </code></remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
            This sample shows how to call RegisterAsync and parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            Response response = await client.RegisterAsync();
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
            ]]></code>
            This sample shows how to call RegisterAsync with all parameters, and how to parse the result.
            <code><![CDATA[
            var credential = new DefaultAzureCredential();
            var client = new EmailRegistrationClient("<https://my-service.azure.com>", credential);
            
            Response response = await client.RegisterAsync("<repeatabilityRequestId>");
            
            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
