<Type Name="Application" FullName="System.Fabric.Query.Application">
  <TypeSignature Language="C#" Value="public sealed class Application" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Application extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.Query.Application" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Application" />
  <TypeSignature Language="F#" Value="type Application = class" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Describes an application instance which is characterized by application-name, application-type, application-parameters, 
            health-state etc.</para>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationDefinitionKind">
      <MemberSignature Language="C#" Value="public System.Fabric.Query.ApplicationDefinitionKind ApplicationDefinitionKind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Fabric.Query.ApplicationDefinitionKind ApplicationDefinitionKind" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ApplicationDefinitionKind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationDefinitionKind As ApplicationDefinitionKind" />
      <MemberSignature Language="F#" Value="member this.ApplicationDefinitionKind : System.Fabric.Query.ApplicationDefinitionKind" Usage="System.Fabric.Query.Application.ApplicationDefinitionKind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Query.ApplicationDefinitionKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the definition kind.</para>
        </summary>
        <value>
          <para>The definition kind which contains one of the values defined in the
            enumeration <see cref="P:System.Fabric.Query.Application.ApplicationDefinitionKind" />.</para>
          <para>Specifies the mechanism the user used to define a Service Fabric application.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public Uri ApplicationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationName As Uri" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : Uri" Usage="System.Fabric.Query.Application.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the name of the application as a URI.</para>
        </summary>
        <value>
          <para>The name of the application.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationParameters">
      <MemberSignature Language="C#" Value="public System.Fabric.Description.ApplicationParameterList ApplicationParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Fabric.Description.ApplicationParameterList ApplicationParameters" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ApplicationParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationParameters As ApplicationParameterList" />
      <MemberSignature Language="F#" Value="member this.ApplicationParameters : System.Fabric.Description.ApplicationParameterList" Usage="System.Fabric.Query.Application.ApplicationParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Description.ApplicationParameterList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the list of <see cref="T:System.Fabric.Description.ApplicationParameter" />'s of the application that have been overridden by the user at the time of application-creation or through application upgrades. Note, this parameter list does not include
             the parameters that still have default values from the application manifest. To find out the parameters of the application that still have default values from the manifest, one could use the ApplicationParameters returned by the <see cref="M:System.Fabric.FabricClient.QueryClient.GetApplicationListAsync(System.Uri)">GetApplication</see> query and
             the DefaultParameters returned by the <see cref="M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)">GetApplicationType</see> query; the parameters that still have default values from the manifest can be found by excluding all parameters in the ApplicationParameters list from the DefaultParameters list.</para>
        </summary>
        <value>
          <para>The overridden parameters of the application.</para>
        </value>
        <remarks>To be added.</remarks>
        <example>
          <para> Following example shows how to get the overridden parameters and the paramters that still have default values from the application manifest.</para>
          <code language="c#">
                // Custom comparer for ApplicationParameter class to compare if two application parameters have the same name.
                class ApplicationParameterNameComparer : IEqualityComparer&lt;ApplicationParameter&gt;
                {
                    // Here we consider two ApplicationParameters are equal if they have the same name.
                    // In general though, two application parameters should be considered equal only if their names and their values are equal.
                    public bool Equals(ApplicationParameter x, ApplicationParameter y)
                    {
                        return x.Name.Equals(y.Name);
                    }
            
                    public int GetHashCode(ApplicationParameter applicationParameter)
                    {
                        return applicationParameter.Name.GetHashCode();
                    }
                }
                 
                using (var fabricClient = new FabricClient(clientConnectionString))
                {
                    ApplicationList applicationList = await fabricClient.QueryManager.GetApplicationListAsync(applicationUri);
            
                    Application application = applicationList.First();
            
                    // If no parameters have been overridden during application creation or through application upgrade, then overridenParameters would be empty.
                    ApplicationParameterList overridenParameters = application.ApplicationParameters;
            
                    ApplicationTypeList applicationTypeList = await fabricClient.QueryManager.GetApplicationTypeListAsync(application.ApplicationTypeName);
            
                    ApplicationType applicationType = applicationTypeList.First();
            
                    ApplicationParameterList parametersFromApplicationManifest = applicationType.DefaultParameters;
            
                    // If no parameters have been overridden during application creation or through application upgrade, then parametersStillHavingDefaultValues would be equal to parametersFromApplicationManifest.
                    IEnumerable&lt;ApplicationParameter&gt; parametersStillHavingDefaultValues = parametersFromApplicationManifest.Except(overridenParameters, new ApplicationParameterNameComparer());
                }
             </code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ApplicationStatus">
      <MemberSignature Language="C#" Value="public System.Fabric.Query.ApplicationStatus ApplicationStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Fabric.Query.ApplicationStatus ApplicationStatus" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ApplicationStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationStatus As ApplicationStatus" />
      <MemberSignature Language="F#" Value="member this.ApplicationStatus : System.Fabric.Query.ApplicationStatus" Usage="System.Fabric.Query.Application.ApplicationStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Query.ApplicationStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the status of the application as <see cref="T:System.Fabric.Query.ApplicationStatus" />.</para>
        </summary>
        <value>
          <para>The status of the application.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationTypeName">
      <MemberSignature Language="C#" Value="public string ApplicationTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ApplicationTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationTypeName As String" />
      <MemberSignature Language="F#" Value="member this.ApplicationTypeName : string" Usage="System.Fabric.Query.Application.ApplicationTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the application type name as specified in the Application Manifest.</para>
        </summary>
        <value>
          <para>The application type name.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationTypeVersion">
      <MemberSignature Language="C#" Value="public string ApplicationTypeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationTypeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ApplicationTypeVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationTypeVersion As String" />
      <MemberSignature Language="F#" Value="member this.ApplicationTypeVersion : string" Usage="System.Fabric.Query.Application.ApplicationTypeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the application type version as specified in the Application Manifest.</para>
        </summary>
        <value>
          <para>The application type version.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HealthState">
      <MemberSignature Language="C#" Value="public System.Fabric.Health.HealthState HealthState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Fabric.Health.HealthState HealthState" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.HealthState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HealthState As HealthState" />
      <MemberSignature Language="F#" Value="member this.HealthState : System.Fabric.Health.HealthState" Usage="System.Fabric.Query.Application.HealthState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Health.HealthState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets the aggregated health state of the application as <see cref="T:System.Fabric.Health.HealthState" />. </para>
        </summary>
        <value>
          <para>The aggregated health of the application.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManagedApplicationIdentity">
      <MemberSignature Language="C#" Value="public System.Fabric.Description.ManagedApplicationIdentityDescription ManagedApplicationIdentity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Fabric.Description.ManagedApplicationIdentityDescription ManagedApplicationIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.ManagedApplicationIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Property ManagedApplicationIdentity As ManagedApplicationIdentityDescription" />
      <MemberSignature Language="F#" Value="member this.ManagedApplicationIdentity : System.Fabric.Description.ManagedApplicationIdentityDescription with get, set" Usage="System.Fabric.Query.Application.ManagedApplicationIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Fabric.Description.ManagedApplicationIdentityDescription</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Application identity
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpgradeParameters">
      <MemberSignature Language="C#" Value="public System.Fabric.Description.ApplicationParameterList UpgradeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Fabric.Description.ApplicationParameterList UpgradeParameters" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.UpgradeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpgradeParameters As ApplicationParameterList" />
      <MemberSignature Language="F#" Value="member this.UpgradeParameters : System.Fabric.Description.ApplicationParameterList" Usage="System.Fabric.Query.Application.UpgradeParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("Use ApplicationUpgradeProgress.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use ApplicationUpgradeProgress.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Fabric.Description.ApplicationParameterList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Deprecated: Do not use. See <see cref="T:System.Fabric.ApplicationUpgradeProgress" /> instead.</para>
        </summary>
        <value>
          <para>Returns <see cref="T:System.Fabric.Description.ApplicationParameterList" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpgradeTypeVersion">
      <MemberSignature Language="C#" Value="public string UpgradeTypeVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpgradeTypeVersion" />
      <MemberSignature Language="DocId" Value="P:System.Fabric.Query.Application.UpgradeTypeVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpgradeTypeVersion As String" />
      <MemberSignature Language="F#" Value="member this.UpgradeTypeVersion : string" Usage="System.Fabric.Query.Application.UpgradeTypeVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("Use ApplicationUpgradeProgress.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use ApplicationUpgradeProgress.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Deprecated: Do not use. See <see cref="T:System.Fabric.ApplicationUpgradeProgress" /> instead.</para>
        </summary>
        <value>
          <para>Returns <see cref="T:System.String" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
