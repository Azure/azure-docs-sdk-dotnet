<Type Name="MockableServiceLinkerArmClient" FullName="Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient">
  <TypeSignature Language="C#" Value="public class MockableServiceLinkerArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableServiceLinkerArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableServiceLinkerArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableServiceLinkerArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ServiceLinker</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableServiceLinkerArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceLinker</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkerResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceLinker.LinkerResource GetLinkerResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceLinker.LinkerResource GetLinkerResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient.GetLinkerResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkerResource (id As ResourceIdentifier) As LinkerResource" />
      <MemberSignature Language="F#" Value="abstract member GetLinkerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceLinker.LinkerResource&#xA;override this.GetLinkerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceLinker.LinkerResource" Usage="mockableServiceLinkerArmClient.GetLinkerResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceLinker</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceLinker.LinkerResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ServiceLinker.LinkerResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ServiceLinker.LinkerResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ServiceLinker.LinkerResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ServiceLinker.LinkerResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLinkerResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt; GetLinkerResource (Azure.Core.ResourceIdentifier scope, string linkerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ServiceLinker.LinkerResource&gt; GetLinkerResource(class Azure.Core.ResourceIdentifier scope, string linkerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient.GetLinkerResource(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkerResource (scope As ResourceIdentifier, linkerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LinkerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLinkerResource : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;&#xA;override this.GetLinkerResource : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;" Usage="mockableServiceLinkerArmClient.GetLinkerResource (scope, linkerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceLinker</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="linkerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="linkerName"> The name Linker resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns Linker resource for a given name.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}</description></item><item><term>Operation Id</term><description>Linker_Get</description></item><item><term>Default Api Version</term><description>2022-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ServiceLinker.LinkerResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLinkerResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;&gt; GetLinkerResourceAsync (Azure.Core.ResourceIdentifier scope, string linkerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ServiceLinker.LinkerResource&gt;&gt; GetLinkerResourceAsync(class Azure.Core.ResourceIdentifier scope, string linkerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient.GetLinkerResourceAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkerResourceAsync (scope As ResourceIdentifier, linkerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LinkerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLinkerResourceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;&gt;&#xA;override this.GetLinkerResourceAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;&gt;" Usage="mockableServiceLinkerArmClient.GetLinkerResourceAsync (scope, linkerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceLinker</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ServiceLinker.LinkerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="linkerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="linkerName"> The name Linker resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns Linker resource for a given name.
            <list type="bullet"><item><term>Request Path</term><description>/{resourceUri}/providers/Microsoft.ServiceLinker/linkers/{linkerName}</description></item><item><term>Operation Id</term><description>Linker_Get</description></item><item><term>Default Api Version</term><description>2022-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.ServiceLinker.LinkerResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLinkerResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceLinker.LinkerResourceCollection GetLinkerResources (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceLinker.LinkerResourceCollection GetLinkerResources(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceLinker.Mocking.MockableServiceLinkerArmClient.GetLinkerResources(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLinkerResources (scope As ResourceIdentifier) As LinkerResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLinkerResources : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceLinker.LinkerResourceCollection&#xA;override this.GetLinkerResources : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceLinker.LinkerResourceCollection" Usage="mockableServiceLinkerArmClient.GetLinkerResources scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceLinker</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceLinker.LinkerResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of LinkerResources in the ArmClient. </summary>
        <returns> An object representing collection of LinkerResources and their operations over a LinkerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
