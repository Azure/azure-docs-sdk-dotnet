<Type Name="TrafficManagerHeatMapCollection" FullName="Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection">
  <TypeSignature Language="C#" Value="public class TrafficManagerHeatMapCollection : Azure.ResourceManager.ArmCollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TrafficManagerHeatMapCollection extends Azure.ResourceManager.ArmCollection" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TrafficManagerHeatMapCollection&#xA;Inherits ArmCollection" />
  <TypeSignature Language="F#" Value="type TrafficManagerHeatMapCollection = class&#xA;    inherit ArmCollection" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.TrafficManager</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmCollection</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A class representing a collection of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> and their operations.
            Each <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource" /> in the collection will belong to the same instance of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />.
            To get a <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection" /> instance call the GetTrafficManagerHeatMaps method from an instance of <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerProfileResource" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TrafficManagerHeatMapCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.TrafficManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; Exists (Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, System.Collections.Generic.IEnumerable&lt;double&gt; topLeft = default, System.Collections.Generic.IEnumerable&lt;double&gt; botRight = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; Exists(valuetype Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; topLeft, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; botRight, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.Exists(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Exists (heatMapType As TrafficManagerHeatMapType, Optional topLeft As IEnumerable(Of Double) = Nothing, Optional botRight As IEnumerable(Of Double) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Exists : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;&#xA;override this.Exists : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="trafficManagerHeatMapCollection.Exists (heatMapType, topLeft, botRight, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.TrafficManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="heatMapType" Type="Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" />
        <Parameter Name="topLeft" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="botRight" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; ExistsAsync (Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, System.Collections.Generic.IEnumerable&lt;double&gt; topLeft = default, System.Collections.Generic.IEnumerable&lt;double&gt; botRight = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; ExistsAsync(valuetype Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; topLeft, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; botRight, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.ExistsAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExistsAsync (heatMapType As TrafficManagerHeatMapType, Optional topLeft As IEnumerable(Of Double) = Nothing, Optional botRight As IEnumerable(Of Double) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="abstract member ExistsAsync : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;&#xA;override this.ExistsAsync : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="trafficManagerHeatMapCollection.ExistsAsync (heatMapType, topLeft, botRight, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.TrafficManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="heatMapType" Type="Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" />
        <Parameter Name="topLeft" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="botRight" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks to see if the resource exists in azure.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt; Get (Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, System.Collections.Generic.IEnumerable&lt;double&gt; topLeft = default, System.Collections.Generic.IEnumerable&lt;double&gt; botRight = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt; Get(valuetype Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; topLeft, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; botRight, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.Get(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (heatMapType As TrafficManagerHeatMapType, Optional topLeft As IEnumerable(Of Double) = Nothing, Optional botRight As IEnumerable(Of Double) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of TrafficManagerHeatMapResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;&#xA;override this.Get : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;" Usage="trafficManagerHeatMapCollection.Get (heatMapType, topLeft, botRight, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.TrafficManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="heatMapType" Type="Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" />
        <Parameter Name="topLeft" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="botRight" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;&gt; GetAsync (Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, System.Collections.Generic.IEnumerable&lt;double&gt; topLeft = default, System.Collections.Generic.IEnumerable&lt;double&gt; botRight = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;&gt; GetAsync(valuetype Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType heatMapType, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; topLeft, class System.Collections.Generic.IEnumerable`1&lt;float64&gt; botRight, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapCollection.GetAsync(Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (heatMapType As TrafficManagerHeatMapType, Optional topLeft As IEnumerable(Of Double) = Nothing, Optional botRight As IEnumerable(Of Double) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TrafficManagerHeatMapResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;&gt;&#xA;override this.GetAsync : Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType * seq&lt;double&gt; * seq&lt;double&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;&gt;" Usage="trafficManagerHeatMapCollection.GetAsync (heatMapType, topLeft, botRight, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.TrafficManager</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.TrafficManager.TrafficManagerHeatMapResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="heatMapType" Type="Azure.ResourceManager.TrafficManager.Models.TrafficManagerHeatMapType" />
        <Parameter Name="topLeft" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="botRight" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="heatMapType"> The type of HeatMap for the Traffic Manager profile. </param>
        <param name="topLeft"> The top left latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="botRight"> The bottom right latitude,longitude pair of the rectangular viewport to query for. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets latest heatmap for Traffic Manager profile.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficmanagerprofiles/{profileName}/heatMaps/{heatMapType}
            Operation Id: HeatMap_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
