<Type Name="FaceClient" FullName="Azure.AI.Vision.Face.FaceClient">
  <TypeSignature Language="C#" Value="public class FaceClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FaceClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Vision.Face.FaceClient" />
  <TypeSignature Language="VB.NET" Value="Public Class FaceClient" />
  <TypeSignature Language="F#" Value="type FaceClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Face service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FaceClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of FaceClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaceClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.FaceClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.Vision.Face.FaceClient" Usage="new Azure.AI.Vision.Face.FaceClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaceClient (Uri endpoint, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.FaceClient : Uri * Azure.Core.TokenCredential -&gt; Azure.AI.Vision.Face.FaceClient" Usage="new Azure.AI.Vision.Face.FaceClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaceClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.FaceClient : Uri * Azure.AzureKeyCredential * Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions -&gt; Azure.AI.Vision.Face.FaceClient" Usage="new Azure.AI.Vision.Face.FaceClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaceClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, options As AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.FaceClient : Uri * Azure.Core.TokenCredential * Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions -&gt; Azure.AI.Vision.Face.FaceClient" Usage="new Azure.AI.Vision.Face.FaceClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Detect">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt; Detect (BinaryData imageContent, Azure.AI.Vision.Face.FaceDetectionModel detectionModel, Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes = default, bool? returnFaceLandmarks = default, bool? returnRecognitionModel = default, int? faceIdTimeToLive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt; Detect(class System.BinaryData imageContent, valuetype Azure.AI.Vision.Face.FaceDetectionModel detectionModel, valuetype Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes, valuetype System.Nullable`1&lt;bool&gt; returnFaceLandmarks, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Nullable`1&lt;int32&gt; faceIdTimeToLive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.Detect(System.BinaryData,Azure.AI.Vision.Face.FaceDetectionModel,Azure.AI.Vision.Face.FaceRecognitionModel,System.Boolean,System.Collections.Generic.IEnumerable{Azure.AI.Vision.Face.FaceAttributeType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Detect (imageContent As BinaryData, detectionModel As FaceDetectionModel, recognitionModel As FaceRecognitionModel, returnFaceId As Boolean, Optional returnFaceAttributes As IEnumerable(Of FaceAttributeType) = Nothing, Optional returnFaceLandmarks As Nullable(Of Boolean) = Nothing, Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional faceIdTimeToLive As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of FaceDetectionResult))" />
      <MemberSignature Language="F#" Value="abstract member Detect : BinaryData * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&#xA;override this.Detect : BinaryData * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;" Usage="faceClient.Detect (imageContent, detectionModel, recognitionModel, returnFaceId, returnFaceAttributes, returnFaceLandmarks, returnRecognitionModel, faceIdTimeToLive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageContent" Type="System.BinaryData" />
        <Parameter Name="detectionModel" Type="Azure.AI.Vision.Face.FaceDetectionModel" />
        <Parameter Name="recognitionModel" Type="Azure.AI.Vision.Face.FaceRecognitionModel" />
        <Parameter Name="returnFaceId" Type="System.Boolean" />
        <Parameter Name="returnFaceAttributes" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt;" />
        <Parameter Name="returnFaceLandmarks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="faceIdTimeToLive" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="imageContent"> The input image binary. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="recognitionModel"> The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        <param name="returnFaceId"> Return faceIds of the detected faces or not. The default value is true. </param>
        <param name="returnFaceAttributes"> Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face attribute analysis has additional computational and time cost. </param>
        <param name="returnFaceLandmarks"> Return face landmarks of the detected faces or not. The default value is false. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="faceIdTimeToLive"> The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours). </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="imageContent" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Detect">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt; Detect (Uri url, Azure.AI.Vision.Face.FaceDetectionModel detectionModel, Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes = default, bool? returnFaceLandmarks = default, bool? returnRecognitionModel = default, int? faceIdTimeToLive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt; Detect(class System.Uri url, valuetype Azure.AI.Vision.Face.FaceDetectionModel detectionModel, valuetype Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes, valuetype System.Nullable`1&lt;bool&gt; returnFaceLandmarks, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Nullable`1&lt;int32&gt; faceIdTimeToLive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.Detect(System.Uri,Azure.AI.Vision.Face.FaceDetectionModel,Azure.AI.Vision.Face.FaceRecognitionModel,System.Boolean,System.Collections.Generic.IEnumerable{Azure.AI.Vision.Face.FaceAttributeType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Detect (url As Uri, detectionModel As FaceDetectionModel, recognitionModel As FaceRecognitionModel, returnFaceId As Boolean, Optional returnFaceAttributes As IEnumerable(Of FaceAttributeType) = Nothing, Optional returnFaceLandmarks As Nullable(Of Boolean) = Nothing, Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional faceIdTimeToLive As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of FaceDetectionResult))" />
      <MemberSignature Language="F#" Value="abstract member Detect : Uri * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&#xA;override this.Detect : Uri * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;" Usage="faceClient.Detect (url, detectionModel, recognitionModel, returnFaceId, returnFaceAttributes, returnFaceLandmarks, returnRecognitionModel, faceIdTimeToLive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="detectionModel" Type="Azure.AI.Vision.Face.FaceDetectionModel" />
        <Parameter Name="recognitionModel" Type="Azure.AI.Vision.Face.FaceRecognitionModel" />
        <Parameter Name="returnFaceId" Type="System.Boolean" />
        <Parameter Name="returnFaceAttributes" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt;" />
        <Parameter Name="returnFaceLandmarks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="faceIdTimeToLive" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="url"> URL of input image. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="recognitionModel"> The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        <param name="returnFaceId"> Return faceIds of the detected faces or not. The default value is true. </param>
        <param name="returnFaceAttributes"> Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face attribute analysis has additional computational and time cost. </param>
        <param name="returnFaceLandmarks"> Return face landmarks of the detected faces or not. The default value is false. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="faceIdTimeToLive"> The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours). </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect-from-url for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DetectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt; DetectAsync (BinaryData imageContent, Azure.AI.Vision.Face.FaceDetectionModel detectionModel, Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes = default, bool? returnFaceLandmarks = default, bool? returnRecognitionModel = default, int? faceIdTimeToLive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt; DetectAsync(class System.BinaryData imageContent, valuetype Azure.AI.Vision.Face.FaceDetectionModel detectionModel, valuetype Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes, valuetype System.Nullable`1&lt;bool&gt; returnFaceLandmarks, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Nullable`1&lt;int32&gt; faceIdTimeToLive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.DetectAsync(System.BinaryData,Azure.AI.Vision.Face.FaceDetectionModel,Azure.AI.Vision.Face.FaceRecognitionModel,System.Boolean,System.Collections.Generic.IEnumerable{Azure.AI.Vision.Face.FaceAttributeType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DetectAsync (imageContent As BinaryData, detectionModel As FaceDetectionModel, recognitionModel As FaceRecognitionModel, returnFaceId As Boolean, Optional returnFaceAttributes As IEnumerable(Of FaceAttributeType) = Nothing, Optional returnFaceLandmarks As Nullable(Of Boolean) = Nothing, Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional faceIdTimeToLive As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of FaceDetectionResult)))" />
      <MemberSignature Language="F#" Value="abstract member DetectAsync : BinaryData * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt;&#xA;override this.DetectAsync : BinaryData * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt;" Usage="faceClient.DetectAsync (imageContent, detectionModel, recognitionModel, returnFaceId, returnFaceAttributes, returnFaceLandmarks, returnRecognitionModel, faceIdTimeToLive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageContent" Type="System.BinaryData" />
        <Parameter Name="detectionModel" Type="Azure.AI.Vision.Face.FaceDetectionModel" />
        <Parameter Name="recognitionModel" Type="Azure.AI.Vision.Face.FaceRecognitionModel" />
        <Parameter Name="returnFaceId" Type="System.Boolean" />
        <Parameter Name="returnFaceAttributes" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt;" />
        <Parameter Name="returnFaceLandmarks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="faceIdTimeToLive" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="imageContent"> The input image binary. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="recognitionModel"> The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        <param name="returnFaceId"> Return faceIds of the detected faces or not. The default value is true. </param>
        <param name="returnFaceAttributes"> Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face attribute analysis has additional computational and time cost. </param>
        <param name="returnFaceLandmarks"> Return face landmarks of the detected faces or not. The default value is false. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="faceIdTimeToLive"> The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours). </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="imageContent" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DetectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt; DetectAsync (Uri url, Azure.AI.Vision.Face.FaceDetectionModel detectionModel, Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes = default, bool? returnFaceLandmarks = default, bool? returnRecognitionModel = default, int? faceIdTimeToLive = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt; DetectAsync(class System.Uri url, valuetype Azure.AI.Vision.Face.FaceDetectionModel detectionModel, valuetype Azure.AI.Vision.Face.FaceRecognitionModel recognitionModel, bool returnFaceId, class System.Collections.Generic.IEnumerable`1&lt;valuetype Azure.AI.Vision.Face.FaceAttributeType&gt; returnFaceAttributes, valuetype System.Nullable`1&lt;bool&gt; returnFaceLandmarks, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Nullable`1&lt;int32&gt; faceIdTimeToLive, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.DetectAsync(System.Uri,Azure.AI.Vision.Face.FaceDetectionModel,Azure.AI.Vision.Face.FaceRecognitionModel,System.Boolean,System.Collections.Generic.IEnumerable{Azure.AI.Vision.Face.FaceAttributeType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DetectAsync (url As Uri, detectionModel As FaceDetectionModel, recognitionModel As FaceRecognitionModel, returnFaceId As Boolean, Optional returnFaceAttributes As IEnumerable(Of FaceAttributeType) = Nothing, Optional returnFaceLandmarks As Nullable(Of Boolean) = Nothing, Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional faceIdTimeToLive As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of FaceDetectionResult)))" />
      <MemberSignature Language="F#" Value="abstract member DetectAsync : Uri * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt;&#xA;override this.DetectAsync : Uri * Azure.AI.Vision.Face.FaceDetectionModel * Azure.AI.Vision.Face.FaceRecognitionModel * bool * seq&lt;Azure.AI.Vision.Face.FaceAttributeType&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt;" Usage="faceClient.DetectAsync (url, detectionModel, recognitionModel, returnFaceId, returnFaceAttributes, returnFaceLandmarks, returnRecognitionModel, faceIdTimeToLive, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceDetectionResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="detectionModel" Type="Azure.AI.Vision.Face.FaceDetectionModel" />
        <Parameter Name="recognitionModel" Type="Azure.AI.Vision.Face.FaceRecognitionModel" />
        <Parameter Name="returnFaceId" Type="System.Boolean" />
        <Parameter Name="returnFaceAttributes" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Vision.Face.FaceAttributeType&gt;" />
        <Parameter Name="returnFaceLandmarks" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="faceIdTimeToLive" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="url"> URL of input image. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="recognitionModel"> The 'recognitionModel' associated with the detected faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        <param name="returnFaceId"> Return faceIds of the detected faces or not. The default value is true. </param>
        <param name="returnFaceAttributes"> Analyze and return the one or more specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face attribute analysis has additional computational and time cost. </param>
        <param name="returnFaceLandmarks"> Return face landmarks of the detected faces or not. The default value is false. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="faceIdTimeToLive"> The number of seconds for the face ID being cached. Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours). </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect-from-url for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="FindSimilar">
      <MemberSignature Language="C#" Value="public virtual Azure.Response FindSimilar (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response FindSimilar(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilar(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilar (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member FindSimilar : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.FindSimilar : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="faceClient.FindSimilar (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Given query face's faceId, to search the similar-looking faces from a faceId array. A faceId array contains the faces created by Detect.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.FindSimilar(System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call FindSimilar and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "c5c24a82-6845-4031-9d5d-978df9175426",
    maxNumOfCandidatesReturned = 3,
    mode = "matchPerson",
    faceIds = new object[]
    {
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "be386ab3-af91-4104-9e6d-4dae4c9fddb7"
    },
});
Response response = client.FindSimilar(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilar">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt; FindSimilar (Guid faceId, System.Collections.Generic.IEnumerable&lt;Guid&gt; faceIds, int? maxNumOfCandidatesReturned = default, Azure.AI.Vision.Face.FindSimilarMatchMode? mode = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt; FindSimilar(valuetype System.Guid faceId, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Guid&gt; faceIds, valuetype System.Nullable`1&lt;int32&gt; maxNumOfCandidatesReturned, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FindSimilarMatchMode&gt; mode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilar(System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilar (faceId As Guid, faceIds As IEnumerable(Of Guid), Optional maxNumOfCandidatesReturned As Nullable(Of Integer) = Nothing, Optional mode As Nullable(Of FindSimilarMatchMode) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of FaceFindSimilarResult))" />
      <MemberSignature Language="F#" Value="abstract member FindSimilar : Guid * seq&lt;Guid&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&#xA;override this.FindSimilar : Guid * seq&lt;Guid&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;" Usage="faceClient.FindSimilar (faceId, faceIds, maxNumOfCandidatesReturned, mode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId" Type="System.Guid" />
        <Parameter Name="faceIds" Type="System.Collections.Generic.IEnumerable&lt;System.Guid&gt;" />
        <Parameter Name="maxNumOfCandidatesReturned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="mode" Type="System.Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId"> faceId of the query face. User needs to call "Detect" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call. </param>
        <param name="faceIds"> An array of candidate faceIds. All of them are created by "Detect" and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. </param>
        <param name="maxNumOfCandidatesReturned"> The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20. </param>
        <param name="mode"> Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Given query face's faceId, to search the similar-looking faces from a faceId array. A faceId array contains the faces created by Detect. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/find-similar for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="faceIds" /> is null. </exception>
        <example>
This sample shows how to call FindSimilar.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilar(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), new Guid[] { Guid.Parse("015839fb-fbd9-4f79-ace9-7675fc2f1dd9"), Guid.Parse("be386ab3-af91-4104-9e6d-4dae4c9fddb7") });
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilarAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; FindSimilarAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; FindSimilarAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilarAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilarAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member FindSimilarAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.FindSimilarAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="faceClient.FindSimilarAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Given query face's faceId, to search the similar-looking faces from a faceId array. A faceId array contains the faces created by Detect.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.FindSimilarAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call FindSimilarAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "c5c24a82-6845-4031-9d5d-978df9175426",
    maxNumOfCandidatesReturned = 3,
    mode = "matchPerson",
    faceIds = new object[]
    {
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "be386ab3-af91-4104-9e6d-4dae4c9fddb7"
    },
});
Response response = await client.FindSimilarAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilarAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt; FindSimilarAsync (Guid faceId, System.Collections.Generic.IEnumerable&lt;Guid&gt; faceIds, int? maxNumOfCandidatesReturned = default, Azure.AI.Vision.Face.FindSimilarMatchMode? mode = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt; FindSimilarAsync(valuetype System.Guid faceId, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Guid&gt; faceIds, valuetype System.Nullable`1&lt;int32&gt; maxNumOfCandidatesReturned, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FindSimilarMatchMode&gt; mode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilarAsync(System.Guid,System.Collections.Generic.IEnumerable{System.Guid},System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilarAsync (faceId As Guid, faceIds As IEnumerable(Of Guid), Optional maxNumOfCandidatesReturned As Nullable(Of Integer) = Nothing, Optional mode As Nullable(Of FindSimilarMatchMode) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of FaceFindSimilarResult)))" />
      <MemberSignature Language="F#" Value="abstract member FindSimilarAsync : Guid * seq&lt;Guid&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt;&#xA;override this.FindSimilarAsync : Guid * seq&lt;Guid&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt;" Usage="faceClient.FindSimilarAsync (faceId, faceIds, maxNumOfCandidatesReturned, mode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId" Type="System.Guid" />
        <Parameter Name="faceIds" Type="System.Collections.Generic.IEnumerable&lt;System.Guid&gt;" />
        <Parameter Name="maxNumOfCandidatesReturned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="mode" Type="System.Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId"> faceId of the query face. User needs to call "Detect" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call. </param>
        <param name="faceIds"> An array of candidate faceIds. All of them are created by "Detect" and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000. </param>
        <param name="maxNumOfCandidatesReturned"> The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20. </param>
        <param name="mode"> Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Given query face's faceId, to search the similar-looking faces from a faceId array. A faceId array contains the faces created by Detect. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/find-similar for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="faceIds" /> is null. </exception>
        <example>
This sample shows how to call FindSimilarAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarAsync(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), new Guid[] { Guid.Parse("015839fb-fbd9-4f79-ace9-7675fc2f1dd9"), Guid.Parse("be386ab3-af91-4104-9e6d-4dae4c9fddb7") });
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilarFromLargeFaceList">
      <MemberSignature Language="C#" Value="public virtual Azure.Response FindSimilarFromLargeFaceList (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response FindSimilarFromLargeFaceList(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilarFromLargeFaceList(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilarFromLargeFaceList (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member FindSimilarFromLargeFaceList : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.FindSimilarFromLargeFaceList : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="faceClient.FindSimilarFromLargeFaceList (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Given query face's faceId, to search the similar-looking faces from a Large Face List. A 'largeFaceListId' is created by Create Large Face List.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.FindSimilarFromLargeFaceList(System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call FindSimilarFromLargeFaceList and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "c5c24a82-6845-4031-9d5d-978df9175426",
    maxNumOfCandidatesReturned = 3,
    mode = "matchPerson",
    largeFaceListId = "your_large_face_list_id",
});
Response response = client.FindSimilarFromLargeFaceList(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilarFromLargeFaceList">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt; FindSimilarFromLargeFaceList (Guid faceId, string largeFaceListId, int? maxNumOfCandidatesReturned = default, Azure.AI.Vision.Face.FindSimilarMatchMode? mode = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt; FindSimilarFromLargeFaceList(valuetype System.Guid faceId, string largeFaceListId, valuetype System.Nullable`1&lt;int32&gt; maxNumOfCandidatesReturned, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FindSimilarMatchMode&gt; mode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilarFromLargeFaceList(System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilarFromLargeFaceList (faceId As Guid, largeFaceListId As String, Optional maxNumOfCandidatesReturned As Nullable(Of Integer) = Nothing, Optional mode As Nullable(Of FindSimilarMatchMode) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of FaceFindSimilarResult))" />
      <MemberSignature Language="F#" Value="abstract member FindSimilarFromLargeFaceList : Guid * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&#xA;override this.FindSimilarFromLargeFaceList : Guid * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;" Usage="faceClient.FindSimilarFromLargeFaceList (faceId, largeFaceListId, maxNumOfCandidatesReturned, mode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId" Type="System.Guid" />
        <Parameter Name="largeFaceListId" Type="System.String" />
        <Parameter Name="maxNumOfCandidatesReturned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="mode" Type="System.Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId"> faceId of the query face. User needs to call "Detect" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call. </param>
        <param name="largeFaceListId"> An existing user-specified unique candidate Large Face List, created in "Create Large Face List". Large Face List contains a set of persistedFaceIds which are persisted and will never expire. </param>
        <param name="maxNumOfCandidatesReturned"> The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20. </param>
        <param name="mode"> Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Given query face's faceId, to search the similar-looking faces from a Large Face List. A 'largeFaceListId' is created by Create Large Face List. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/find-similar-from-large-face-list for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="largeFaceListId" /> is null. </exception>
        <example>
This sample shows how to call FindSimilarFromLargeFaceList.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = client.FindSimilarFromLargeFaceList(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), "your_large_face_list_id");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilarFromLargeFaceListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; FindSimilarFromLargeFaceListAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; FindSimilarFromLargeFaceListAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilarFromLargeFaceListAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilarFromLargeFaceListAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member FindSimilarFromLargeFaceListAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.FindSimilarFromLargeFaceListAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="faceClient.FindSimilarFromLargeFaceListAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Given query face's faceId, to search the similar-looking faces from a Large Face List. A 'largeFaceListId' is created by Create Large Face List.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.FindSimilarFromLargeFaceListAsync(System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call FindSimilarFromLargeFaceListAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "c5c24a82-6845-4031-9d5d-978df9175426",
    maxNumOfCandidatesReturned = 3,
    mode = "matchPerson",
    largeFaceListId = "your_large_face_list_id",
});
Response response = await client.FindSimilarFromLargeFaceListAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="FindSimilarFromLargeFaceListAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt; FindSimilarFromLargeFaceListAsync (Guid faceId, string largeFaceListId, int? maxNumOfCandidatesReturned = default, Azure.AI.Vision.Face.FindSimilarMatchMode? mode = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt; FindSimilarFromLargeFaceListAsync(valuetype System.Guid faceId, string largeFaceListId, valuetype System.Nullable`1&lt;int32&gt; maxNumOfCandidatesReturned, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FindSimilarMatchMode&gt; mode, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.FindSimilarFromLargeFaceListAsync(System.Guid,System.String,System.Nullable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FindSimilarMatchMode},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindSimilarFromLargeFaceListAsync (faceId As Guid, largeFaceListId As String, Optional maxNumOfCandidatesReturned As Nullable(Of Integer) = Nothing, Optional mode As Nullable(Of FindSimilarMatchMode) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of FaceFindSimilarResult)))" />
      <MemberSignature Language="F#" Value="abstract member FindSimilarFromLargeFaceListAsync : Guid * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt;&#xA;override this.FindSimilarFromLargeFaceListAsync : Guid * string * Nullable&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt;" Usage="faceClient.FindSimilarFromLargeFaceListAsync (faceId, largeFaceListId, maxNumOfCandidatesReturned, mode, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceFindSimilarResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId" Type="System.Guid" />
        <Parameter Name="largeFaceListId" Type="System.String" />
        <Parameter Name="maxNumOfCandidatesReturned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="mode" Type="System.Nullable&lt;Azure.AI.Vision.Face.FindSimilarMatchMode&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId"> faceId of the query face. User needs to call "Detect" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call. </param>
        <param name="largeFaceListId"> An existing user-specified unique candidate Large Face List, created in "Create Large Face List". Large Face List contains a set of persistedFaceIds which are persisted and will never expire. </param>
        <param name="maxNumOfCandidatesReturned"> The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20. </param>
        <param name="mode"> Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Given query face's faceId, to search the similar-looking faces from a Large Face List. A 'largeFaceListId' is created by Create Large Face List. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/find-similar-from-large-face-list for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="largeFaceListId" /> is null. </exception>
        <example>
This sample shows how to call FindSimilarFromLargeFaceListAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceFindSimilarResult>> response = await client.FindSimilarFromLargeFaceListAsync(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), "your_large_face_list_id");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Group (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Group(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.Group(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Group (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Group : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Group : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="faceClient.Group (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Divide candidate faces into groups based on face similarity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.Group(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Group and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "c5c24a82-6845-4031-9d5d-978df9175426",
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "65d083d4-9447-47d1-af30-b626144bf0fb",
        "fce92aed-d578-4d2e-8114-068f8af4492e",
        "30ea1073-cc9e-4652-b1e3-d08fb7b95315",
        "be386ab3-af91-4104-9e6d-4dae4c9fddb7",
        "fbd2a038-dbff-452c-8e79-2ee81b1aa84e",
        "b64d5e15-8257-4af2-b20a-5a750f8940e7"
    },
});
Response response = client.Group(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt; Group (System.Collections.Generic.IEnumerable&lt;Guid&gt; faceIds, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceGroupingResult&gt; Group(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Guid&gt; faceIds, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.Group(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Group (faceIds As IEnumerable(Of Guid), Optional cancellationToken As CancellationToken = Nothing) As Response(Of FaceGroupingResult)" />
      <MemberSignature Language="F#" Value="abstract member Group : seq&lt;Guid&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;&#xA;override this.Group : seq&lt;Guid&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;" Usage="faceClient.Group (faceIds, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceIds" Type="System.Collections.Generic.IEnumerable&lt;System.Guid&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceIds"> Array of candidate faceIds created by "Detect". The maximum is 1000 faces. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Divide candidate faces into groups based on face similarity. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="faceIds" /> is null. </exception>
        <example>
This sample shows how to call Group.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceGroupingResult> response = client.Group(new Guid[] { Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), Guid.Parse("015839fb-fbd9-4f79-ace9-7675fc2f1dd9"), Guid.Parse("65d083d4-9447-47d1-af30-b626144bf0fb"), Guid.Parse("fce92aed-d578-4d2e-8114-068f8af4492e"), Guid.Parse("30ea1073-cc9e-4652-b1e3-d08fb7b95315"), Guid.Parse("be386ab3-af91-4104-9e6d-4dae4c9fddb7"), Guid.Parse("fbd2a038-dbff-452c-8e79-2ee81b1aa84e"), Guid.Parse("b64d5e15-8257-4af2-b20a-5a750f8940e7") });
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GroupAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GroupAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.GroupAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GroupAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GroupAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GroupAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="faceClient.GroupAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Divide candidate faces into groups based on face similarity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.GroupAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "c5c24a82-6845-4031-9d5d-978df9175426",
        "015839fb-fbd9-4f79-ace9-7675fc2f1dd9",
        "65d083d4-9447-47d1-af30-b626144bf0fb",
        "fce92aed-d578-4d2e-8114-068f8af4492e",
        "30ea1073-cc9e-4652-b1e3-d08fb7b95315",
        "be386ab3-af91-4104-9e6d-4dae4c9fddb7",
        "fbd2a038-dbff-452c-8e79-2ee81b1aa84e",
        "b64d5e15-8257-4af2-b20a-5a750f8940e7"
    },
});
Response response = await client.GroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("groups")[0][0].ToString());
Console.WriteLine(result.GetProperty("messyGroup")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;&gt; GroupAsync (System.Collections.Generic.IEnumerable&lt;Guid&gt; faceIds, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceGroupingResult&gt;&gt; GroupAsync(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Guid&gt; faceIds, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.GroupAsync(System.Collections.Generic.IEnumerable{System.Guid},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GroupAsync (faceIds As IEnumerable(Of Guid), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FaceGroupingResult))" />
      <MemberSignature Language="F#" Value="abstract member GroupAsync : seq&lt;Guid&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;&gt;&#xA;override this.GroupAsync : seq&lt;Guid&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;&gt;" Usage="faceClient.GroupAsync (faceIds, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceGroupingResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceIds" Type="System.Collections.Generic.IEnumerable&lt;System.Guid&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceIds"> Array of candidate faceIds created by "Detect". The maximum is 1000 faces. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Divide candidate faces into groups based on face similarity. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="faceIds" /> is null. </exception>
        <example>
This sample shows how to call GroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceGroupingResult> response = await client.GroupAsync(new Guid[] { Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), Guid.Parse("015839fb-fbd9-4f79-ace9-7675fc2f1dd9"), Guid.Parse("65d083d4-9447-47d1-af30-b626144bf0fb"), Guid.Parse("fce92aed-d578-4d2e-8114-068f8af4492e"), Guid.Parse("30ea1073-cc9e-4652-b1e3-d08fb7b95315"), Guid.Parse("be386ab3-af91-4104-9e6d-4dae4c9fddb7"), Guid.Parse("fbd2a038-dbff-452c-8e79-2ee81b1aa84e"), Guid.Parse("b64d5e15-8257-4af2-b20a-5a750f8940e7") });
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="IdentifyFromLargePersonGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response IdentifyFromLargePersonGroup (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response IdentifyFromLargePersonGroup(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.IdentifyFromLargePersonGroup(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IdentifyFromLargePersonGroup (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member IdentifyFromLargePersonGroup : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.IdentifyFromLargePersonGroup : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="faceClient.IdentifyFromLargePersonGroup (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] 1-to-many identification to find the closest matches of the specific query person face from a Large Person Group.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.IdentifyFromLargePersonGroup(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Single},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call IdentifyFromLargePersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "c5c24a82-6845-4031-9d5d-978df9175426"
    },
    largePersonGroupId = "your_large_person_group_id",
    maxNumOfCandidatesReturned = 9,
    confidenceThreshold = 0.7F,
});
Response response = client.IdentifyFromLargePersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="IdentifyFromLargePersonGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt; IdentifyFromLargePersonGroup (System.Collections.Generic.IEnumerable&lt;Guid&gt; faceIds, string largePersonGroupId, int? maxNumOfCandidatesReturned = default, float? confidenceThreshold = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt; IdentifyFromLargePersonGroup(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Guid&gt; faceIds, string largePersonGroupId, valuetype System.Nullable`1&lt;int32&gt; maxNumOfCandidatesReturned, valuetype System.Nullable`1&lt;float32&gt; confidenceThreshold, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.IdentifyFromLargePersonGroup(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Single},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IdentifyFromLargePersonGroup (faceIds As IEnumerable(Of Guid), largePersonGroupId As String, Optional maxNumOfCandidatesReturned As Nullable(Of Integer) = Nothing, Optional confidenceThreshold As Nullable(Of Single) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of FaceIdentificationResult))" />
      <MemberSignature Language="F#" Value="abstract member IdentifyFromLargePersonGroup : seq&lt;Guid&gt; * string * Nullable&lt;int&gt; * Nullable&lt;single&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;&#xA;override this.IdentifyFromLargePersonGroup : seq&lt;Guid&gt; * string * Nullable&lt;int&gt; * Nullable&lt;single&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;" Usage="faceClient.IdentifyFromLargePersonGroup (faceIds, largePersonGroupId, maxNumOfCandidatesReturned, confidenceThreshold, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceIds" Type="System.Collections.Generic.IEnumerable&lt;System.Guid&gt;" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
        <Parameter Name="maxNumOfCandidatesReturned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="confidenceThreshold" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceIds"> Array of query faces faceIds, created by the "Detect". Each of the faces are identified independently. The valid number of faceIds is between [1, 10]. </param>
        <param name="largePersonGroupId"> largePersonGroupId of the target Large Person Group, created by "Create Large Person Group". Parameter personGroupId and largePersonGroupId should not be provided at the same time. </param>
        <param name="maxNumOfCandidatesReturned"> The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10. </param>
        <param name="confidenceThreshold"> Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> 1-to-many identification to find the closest matches of the specific query person face from a Large Person Group. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/identify-from-person-group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="faceIds" /> or <paramref name="largePersonGroupId" /> is null. </exception>
        <example>
This sample shows how to call IdentifyFromLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = client.IdentifyFromLargePersonGroup(new Guid[] { Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426") }, "your_large_person_group_id");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="IdentifyFromLargePersonGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; IdentifyFromLargePersonGroupAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; IdentifyFromLargePersonGroupAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.IdentifyFromLargePersonGroupAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IdentifyFromLargePersonGroupAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member IdentifyFromLargePersonGroupAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.IdentifyFromLargePersonGroupAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="faceClient.IdentifyFromLargePersonGroupAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] 1-to-many identification to find the closest matches of the specific query person face from a Large Person Group.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.IdentifyFromLargePersonGroupAsync(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Single},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call IdentifyFromLargePersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceIds = new object[]
    {
        "c5c24a82-6845-4031-9d5d-978df9175426"
    },
    largePersonGroupId = "your_large_person_group_id",
    maxNumOfCandidatesReturned = 9,
    confidenceThreshold = 0.7F,
});
Response response = await client.IdentifyFromLargePersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("faceId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("candidates")[0].GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="IdentifyFromLargePersonGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;&gt; IdentifyFromLargePersonGroupAsync (System.Collections.Generic.IEnumerable&lt;Guid&gt; faceIds, string largePersonGroupId, int? maxNumOfCandidatesReturned = default, float? confidenceThreshold = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;&gt; IdentifyFromLargePersonGroupAsync(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Guid&gt; faceIds, string largePersonGroupId, valuetype System.Nullable`1&lt;int32&gt; maxNumOfCandidatesReturned, valuetype System.Nullable`1&lt;float32&gt; confidenceThreshold, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.IdentifyFromLargePersonGroupAsync(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Nullable{System.Int32},System.Nullable{System.Single},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IdentifyFromLargePersonGroupAsync (faceIds As IEnumerable(Of Guid), largePersonGroupId As String, Optional maxNumOfCandidatesReturned As Nullable(Of Integer) = Nothing, Optional confidenceThreshold As Nullable(Of Single) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of FaceIdentificationResult)))" />
      <MemberSignature Language="F#" Value="abstract member IdentifyFromLargePersonGroupAsync : seq&lt;Guid&gt; * string * Nullable&lt;int&gt; * Nullable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;&gt;&#xA;override this.IdentifyFromLargePersonGroupAsync : seq&lt;Guid&gt; * string * Nullable&lt;int&gt; * Nullable&lt;single&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;&gt;" Usage="faceClient.IdentifyFromLargePersonGroupAsync (faceIds, largePersonGroupId, maxNumOfCandidatesReturned, confidenceThreshold, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.FaceIdentificationResult&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceIds" Type="System.Collections.Generic.IEnumerable&lt;System.Guid&gt;" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
        <Parameter Name="maxNumOfCandidatesReturned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="confidenceThreshold" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceIds"> Array of query faces faceIds, created by the "Detect". Each of the faces are identified independently. The valid number of faceIds is between [1, 10]. </param>
        <param name="largePersonGroupId"> largePersonGroupId of the target Large Person Group, created by "Create Large Person Group". Parameter personGroupId and largePersonGroupId should not be provided at the same time. </param>
        <param name="maxNumOfCandidatesReturned"> The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10. </param>
        <param name="confidenceThreshold"> Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> 1-to-many identification to find the closest matches of the specific query person face from a Large Person Group. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/identify-from-person-group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="faceIds" /> or <paramref name="largePersonGroupId" /> is null. </exception>
        <example>
This sample shows how to call IdentifyFromLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<IReadOnlyList<FaceIdentificationResult>> response = await client.IdentifyFromLargePersonGroupAsync(new Guid[] { Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426") }, "your_large_person_group_id");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Vision.Face.FaceClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Vision.Face.FaceClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyFaceToFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response VerifyFaceToFace (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response VerifyFaceToFace(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFaceToFace(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFaceToFace (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member VerifyFaceToFace : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.VerifyFaceToFace : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="faceClient.VerifyFaceToFace (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Verify whether two faces belong to a same person.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.VerifyFaceToFace(System.Guid,System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call VerifyFaceToFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId1 = "c5c24a82-6845-4031-9d5d-978df9175426",
    faceId2 = "3aa87e30-b380-48eb-ad9e-1aa54fc52bd3",
});
Response response = client.VerifyFaceToFace(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFaceToFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt; VerifyFaceToFace (Guid faceId1, Guid faceId2, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceVerificationResult&gt; VerifyFaceToFace(valuetype System.Guid faceId1, valuetype System.Guid faceId2, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFaceToFace(System.Guid,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFaceToFace (faceId1 As Guid, faceId2 As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FaceVerificationResult)" />
      <MemberSignature Language="F#" Value="abstract member VerifyFaceToFace : Guid * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&#xA;override this.VerifyFaceToFace : Guid * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;" Usage="faceClient.VerifyFaceToFace (faceId1, faceId2, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId1" Type="System.Guid" />
        <Parameter Name="faceId2" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId1"> The faceId of one face, come from "Detect". </param>
        <param name="faceId2"> The faceId of another face, come from "Detect". </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Verify whether two faces belong to a same person. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/verify-face-to-face for more details. </remarks>
        <example>
This sample shows how to call VerifyFaceToFace.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFaceToFace(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), Guid.Parse("3aa87e30-b380-48eb-ad9e-1aa54fc52bd3"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFaceToFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; VerifyFaceToFaceAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; VerifyFaceToFaceAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFaceToFaceAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFaceToFaceAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member VerifyFaceToFaceAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.VerifyFaceToFaceAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="faceClient.VerifyFaceToFaceAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Verify whether two faces belong to a same person.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.VerifyFaceToFaceAsync(System.Guid,System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call VerifyFaceToFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId1 = "c5c24a82-6845-4031-9d5d-978df9175426",
    faceId2 = "3aa87e30-b380-48eb-ad9e-1aa54fc52bd3",
});
Response response = await client.VerifyFaceToFaceAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFaceToFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt; VerifyFaceToFaceAsync (Guid faceId1, Guid faceId2, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt; VerifyFaceToFaceAsync(valuetype System.Guid faceId1, valuetype System.Guid faceId2, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFaceToFaceAsync(System.Guid,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFaceToFaceAsync (faceId1 As Guid, faceId2 As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FaceVerificationResult))" />
      <MemberSignature Language="F#" Value="abstract member VerifyFaceToFaceAsync : Guid * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt;&#xA;override this.VerifyFaceToFaceAsync : Guid * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt;" Usage="faceClient.VerifyFaceToFaceAsync (faceId1, faceId2, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId1" Type="System.Guid" />
        <Parameter Name="faceId2" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId1"> The faceId of one face, come from "Detect". </param>
        <param name="faceId2"> The faceId of another face, come from "Detect". </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Verify whether two faces belong to a same person. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/verify-face-to-face for more details. </remarks>
        <example>
This sample shows how to call VerifyFaceToFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFaceToFaceAsync(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), Guid.Parse("3aa87e30-b380-48eb-ad9e-1aa54fc52bd3"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFromLargePersonGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response VerifyFromLargePersonGroup (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response VerifyFromLargePersonGroup(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFromLargePersonGroup(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFromLargePersonGroup (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member VerifyFromLargePersonGroup : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.VerifyFromLargePersonGroup : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="faceClient.VerifyFromLargePersonGroup (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Verify whether a face belongs to a person in a Large Person Group.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.VerifyFromLargePersonGroup(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call VerifyFromLargePersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "c5c24a82-6845-4031-9d5d-978df9175426",
    personId = "815df99c-598f-4926-930a-a734b3fd651c",
    largePersonGroupId = "your_large_person_group",
});
Response response = client.VerifyFromLargePersonGroup(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFromLargePersonGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt; VerifyFromLargePersonGroup (Guid faceId, string largePersonGroupId, Guid personId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceVerificationResult&gt; VerifyFromLargePersonGroup(valuetype System.Guid faceId, string largePersonGroupId, valuetype System.Guid personId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFromLargePersonGroup(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFromLargePersonGroup (faceId As Guid, largePersonGroupId As String, personId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FaceVerificationResult)" />
      <MemberSignature Language="F#" Value="abstract member VerifyFromLargePersonGroup : Guid * string * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&#xA;override this.VerifyFromLargePersonGroup : Guid * string * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;" Usage="faceClient.VerifyFromLargePersonGroup (faceId, largePersonGroupId, personId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId" Type="System.Guid" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId"> The faceId of the face, come from "Detect". </param>
        <param name="largePersonGroupId"> Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in "Create Large Person Group". </param>
        <param name="personId"> Specify a certain person in Large Person Group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Verify whether a face belongs to a person in a Large Person Group. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/verify-from-large-person-group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="largePersonGroupId" /> is null. </exception>
        <example>
This sample shows how to call VerifyFromLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = client.VerifyFromLargePersonGroup(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), "your_large_person_group", Guid.Parse("815df99c-598f-4926-930a-a734b3fd651c"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFromLargePersonGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; VerifyFromLargePersonGroupAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; VerifyFromLargePersonGroupAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFromLargePersonGroupAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFromLargePersonGroupAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member VerifyFromLargePersonGroupAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.VerifyFromLargePersonGroupAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="faceClient.VerifyFromLargePersonGroupAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Verify whether a face belongs to a person in a Large Person Group.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.FaceClient.VerifyFromLargePersonGroupAsync(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call VerifyFromLargePersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

using RequestContent content = RequestContent.Create(new
{
    faceId = "c5c24a82-6845-4031-9d5d-978df9175426",
    personId = "815df99c-598f-4926-930a-a734b3fd651c",
    largePersonGroupId = "your_large_person_group",
});
Response response = await client.VerifyFromLargePersonGroupAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("isIdentical").ToString());
Console.WriteLine(result.GetProperty("confidence").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="VerifyFromLargePersonGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt; VerifyFromLargePersonGroupAsync (Guid faceId, string largePersonGroupId, Guid personId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt; VerifyFromLargePersonGroupAsync(valuetype System.Guid faceId, string largePersonGroupId, valuetype System.Guid personId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.FaceClient.VerifyFromLargePersonGroupAsync(System.Guid,System.String,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyFromLargePersonGroupAsync (faceId As Guid, largePersonGroupId As String, personId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FaceVerificationResult))" />
      <MemberSignature Language="F#" Value="abstract member VerifyFromLargePersonGroupAsync : Guid * string * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt;&#xA;override this.VerifyFromLargePersonGroupAsync : Guid * string * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt;" Usage="faceClient.VerifyFromLargePersonGroupAsync (faceId, largePersonGroupId, personId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceVerificationResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="faceId" Type="System.Guid" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="faceId"> The faceId of the face, come from "Detect". </param>
        <param name="largePersonGroupId"> Using existing largePersonGroupId and personId for fast loading a specified person. largePersonGroupId is created in "Create Large Person Group". </param>
        <param name="personId"> Specify a certain person in Large Person Group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Verify whether a face belongs to a person in a Large Person Group. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/face-recognition-operations/verify-from-large-person-group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="largePersonGroupId" /> is null. </exception>
        <example>
This sample shows how to call VerifyFromLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
FaceClient client = new FaceClient(endpoint, credential);

Response<FaceVerificationResult> response = await client.VerifyFromLargePersonGroupAsync(Guid.Parse("c5c24a82-6845-4031-9d5d-978df9175426"), "your_large_person_group", Guid.Parse("815df99c-598f-4926-930a-a734b3fd651c"));
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
