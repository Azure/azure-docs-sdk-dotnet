<Type Name="LargePersonGroupClient" FullName="Azure.AI.Vision.Face.LargePersonGroupClient">
  <TypeSignature Language="C#" Value="public class LargePersonGroupClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LargePersonGroupClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Vision.Face.LargePersonGroupClient" />
  <TypeSignature Language="VB.NET" Value="Public Class LargePersonGroupClient" />
  <TypeSignature Language="F#" Value="type LargePersonGroupClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The LargePersonGroup sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected LargePersonGroupClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of LargePersonGroupClient for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LargePersonGroupClient (Uri endpoint, Azure.AzureKeyCredential credential, string largePersonGroupId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, string largePersonGroupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.#ctor(System.Uri,Azure.AzureKeyCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, largePersonGroupId As String)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.LargePersonGroupClient : Uri * Azure.AzureKeyCredential * string -&gt; Azure.AI.Vision.Face.LargePersonGroupClient" Usage="new Azure.AI.Vision.Face.LargePersonGroupClient (endpoint, credential, largePersonGroupId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="largePersonGroupId"> ID of the container. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LargePersonGroupClient (Uri endpoint, Azure.Core.TokenCredential credential, string largePersonGroupId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, string largePersonGroupId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.#ctor(System.Uri,Azure.Core.TokenCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, largePersonGroupId As String)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.LargePersonGroupClient : Uri * Azure.Core.TokenCredential * string -&gt; Azure.AI.Vision.Face.LargePersonGroupClient" Usage="new Azure.AI.Vision.Face.LargePersonGroupClient (endpoint, credential, largePersonGroupId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="largePersonGroupId"> ID of the container. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LargePersonGroupClient (Uri endpoint, Azure.AzureKeyCredential credential, string largePersonGroupId, Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, string largePersonGroupId, class Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.#ctor(System.Uri,Azure.AzureKeyCredential,System.String,Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, largePersonGroupId As String, options As AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.LargePersonGroupClient : Uri * Azure.AzureKeyCredential * string * Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions -&gt; Azure.AI.Vision.Face.LargePersonGroupClient" Usage="new Azure.AI.Vision.Face.LargePersonGroupClient (endpoint, credential, largePersonGroupId, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="largePersonGroupId"> ID of the container. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of LargePersonGroupClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LargePersonGroupClient (Uri endpoint, Azure.Core.TokenCredential credential, string largePersonGroupId, Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, string largePersonGroupId, class Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.#ctor(System.Uri,Azure.Core.TokenCredential,System.String,Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, largePersonGroupId As String, options As AzureAIVisionFaceClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Vision.Face.LargePersonGroupClient : Uri * Azure.Core.TokenCredential * string * Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions -&gt; Azure.AI.Vision.Face.LargePersonGroupClient" Usage="new Azure.AI.Vision.Face.LargePersonGroupClient (endpoint, credential, largePersonGroupId, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="largePersonGroupId" Type="System.String" />
        <Parameter Name="options" Type="Azure.AI.Vision.Face.AzureAIVisionFaceClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://{resource-name}.cognitiveservices.azure.com).
            </param>
        <param name="largePersonGroupId"> ID of the container. </param>
        <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of FaceClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AddFace (Guid personId, Azure.Core.RequestContent content, System.Collections.Generic.IEnumerable&lt;int&gt; targetFace = default, string detectionModel = default, string userData = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AddFace(valuetype System.Guid personId, class Azure.Core.RequestContent content, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; targetFace, string detectionModel, string userData, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFace(System.Guid,Azure.Core.RequestContent,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFace (personId As Guid, content As RequestContent, Optional targetFace As IEnumerable(Of Integer) = Nothing, Optional detectionModel As String = Nothing, Optional userData As String = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AddFace : Guid * Azure.Core.RequestContent * seq&lt;int&gt; * string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AddFace : Guid * Azure.Core.RequestContent * seq&lt;int&gt; * string * string * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.AddFace (personId, content, targetFace, detectionModel, userData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="targetFace" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="detectionModel" Type="System.String" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values: "detection_01" | "detection_02" | "detection_03". </param>
        <param name="userData"> User-provided data attached to the face. The size limit is 1K. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Add a face to a person into a Large Person Group for face identification or verification.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the ser <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFace(System.Guid,System.BinaryData,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FaceDetectionModel},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt; AddFace (Guid personId, BinaryData imageContent, System.Collections.Generic.IEnumerable&lt;int&gt; targetFace = default, Azure.AI.Vision.Face.FaceDetectionModel? detectionModel = default, string userData = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.AddFaceResult&gt; AddFace(valuetype System.Guid personId, class System.BinaryData imageContent, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; targetFace, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FaceDetectionModel&gt; detectionModel, string userData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFace(System.Guid,System.BinaryData,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FaceDetectionModel},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFace (personId As Guid, imageContent As BinaryData, Optional targetFace As IEnumerable(Of Integer) = Nothing, Optional detectionModel As Nullable(Of FaceDetectionModel) = Nothing, Optional userData As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AddFaceResult)" />
      <MemberSignature Language="F#" Value="abstract member AddFace : Guid * BinaryData * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&#xA;override this.AddFace : Guid * BinaryData * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;" Usage="largePersonGroupClient.AddFace (personId, imageContent, targetFace, detectionModel, userData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="imageContent" Type="System.BinaryData" />
        <Parameter Name="targetFace" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="detectionModel" Type="System.Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt;" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="imageContent"> The image to be analyzed. </param>
        <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="userData"> User-provided data attached to the face. The size limit is 1K. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Add a face to a person into a Large Person Group for face identification or verification. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="imageContent" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt; AddFace (Guid personId, Uri uri, System.Collections.Generic.IEnumerable&lt;int&gt; targetFace = default, Azure.AI.Vision.Face.FaceDetectionModel? detectionModel = default, string userData = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.AddFaceResult&gt; AddFace(valuetype System.Guid personId, class System.Uri uri, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; targetFace, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FaceDetectionModel&gt; detectionModel, string userData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFace(System.Guid,System.Uri,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FaceDetectionModel},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFace (personId As Guid, uri As Uri, Optional targetFace As IEnumerable(Of Integer) = Nothing, Optional detectionModel As Nullable(Of FaceDetectionModel) = Nothing, Optional userData As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AddFaceResult)" />
      <MemberSignature Language="F#" Value="abstract member AddFace : Guid * Uri * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&#xA;override this.AddFace : Guid * Uri * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;" Usage="largePersonGroupClient.AddFace (personId, uri, targetFace, detectionModel, userData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="targetFace" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="detectionModel" Type="System.Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt;" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="uri"> URL of input image. </param>
        <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="userData"> User-provided data attached to the face. The size limit is 1K. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Add a face to a person into a Large Person Group for face identification or verification. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AddFaceAsync (Guid personId, Azure.Core.RequestContent content, System.Collections.Generic.IEnumerable&lt;int&gt; targetFace = default, string detectionModel = default, string userData = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AddFaceAsync(valuetype System.Guid personId, class Azure.Core.RequestContent content, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; targetFace, string detectionModel, string userData, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFaceAsync(System.Guid,Azure.Core.RequestContent,System.Collections.Generic.IEnumerable{System.Int32},System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFaceAsync (personId As Guid, content As RequestContent, Optional targetFace As IEnumerable(Of Integer) = Nothing, Optional detectionModel As String = Nothing, Optional userData As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AddFaceAsync : Guid * Azure.Core.RequestContent * seq&lt;int&gt; * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AddFaceAsync : Guid * Azure.Core.RequestContent * seq&lt;int&gt; * string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.AddFaceAsync (personId, content, targetFace, detectionModel, userData, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="targetFace" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="detectionModel" Type="System.String" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. Allowed values: "detection_01" | "detection_02" | "detection_03". </param>
        <param name="userData"> User-provided data attached to the face. The size limit is 1K. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Add a face to a person into a Large Person Group for face identification or verification.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the ser <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFaceAsync(System.Guid,System.BinaryData,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FaceDetectionModel},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt; AddFaceAsync (Guid personId, BinaryData imageContent, System.Collections.Generic.IEnumerable&lt;int&gt; targetFace = default, Azure.AI.Vision.Face.FaceDetectionModel? detectionModel = default, string userData = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.AddFaceResult&gt;&gt; AddFaceAsync(valuetype System.Guid personId, class System.BinaryData imageContent, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; targetFace, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FaceDetectionModel&gt; detectionModel, string userData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFaceAsync(System.Guid,System.BinaryData,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FaceDetectionModel},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFaceAsync (personId As Guid, imageContent As BinaryData, Optional targetFace As IEnumerable(Of Integer) = Nothing, Optional detectionModel As Nullable(Of FaceDetectionModel) = Nothing, Optional userData As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AddFaceResult))" />
      <MemberSignature Language="F#" Value="abstract member AddFaceAsync : Guid * BinaryData * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt;&#xA;override this.AddFaceAsync : Guid * BinaryData * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt;" Usage="largePersonGroupClient.AddFaceAsync (personId, imageContent, targetFace, detectionModel, userData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="imageContent" Type="System.BinaryData" />
        <Parameter Name="targetFace" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="detectionModel" Type="System.Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt;" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="imageContent"> The image to be analyzed. </param>
        <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="userData"> User-provided data attached to the face. The size limit is 1K. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Add a face to a person into a Large Person Group for face identification or verification. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="imageContent" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt; AddFaceAsync (Guid personId, Uri uri, System.Collections.Generic.IEnumerable&lt;int&gt; targetFace = default, Azure.AI.Vision.Face.FaceDetectionModel? detectionModel = default, string userData = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.AddFaceResult&gt;&gt; AddFaceAsync(valuetype System.Guid personId, class System.Uri uri, class System.Collections.Generic.IEnumerable`1&lt;int32&gt; targetFace, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FaceDetectionModel&gt; detectionModel, string userData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.AddFaceAsync(System.Guid,System.Uri,System.Collections.Generic.IEnumerable{System.Int32},System.Nullable{Azure.AI.Vision.Face.FaceDetectionModel},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddFaceAsync (personId As Guid, uri As Uri, Optional targetFace As IEnumerable(Of Integer) = Nothing, Optional detectionModel As Nullable(Of FaceDetectionModel) = Nothing, Optional userData As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AddFaceResult))" />
      <MemberSignature Language="F#" Value="abstract member AddFaceAsync : Guid * Uri * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt;&#xA;override this.AddFaceAsync : Guid * Uri * seq&lt;int&gt; * Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt;" Usage="largePersonGroupClient.AddFaceAsync (personId, uri, targetFace, detectionModel, userData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.AddFaceResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="targetFace" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" />
        <Parameter Name="detectionModel" Type="System.Nullable&lt;Azure.AI.Vision.Face.FaceDetectionModel&gt;" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="uri"> URL of input image. </param>
        <param name="targetFace"> A face rectangle to specify the target face to be added to a person, in the format of 'targetFace=left,top,width,height'. </param>
        <param name="detectionModel"> The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'. </param>
        <param name="userData"> User-provided data attached to the face. The size limit is 1K. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Add a face to a person into a Large Person Group for face identification or verification. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uri" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Create (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Create(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.Create(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Create : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.Create (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and recognitionModel.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.Create(System.String,System.String,System.Nullable{Azure.AI.Vision.Face.FaceRecognitionModel},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_name",
    userData = "your_user_data",
    recognitionModel = "recognition_01",
});
Response response = client.Create(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Create (string name, string userData = default, Azure.AI.Vision.Face.FaceRecognitionModel? recognitionModel = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Create(string name, string userData, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FaceRecognitionModel&gt; recognitionModel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.Create(System.String,System.String,System.Nullable{Azure.AI.Vision.Face.FaceRecognitionModel},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (name As String, Optional userData As String = Nothing, Optional recognitionModel As Nullable(Of FaceRecognitionModel) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Create : string * string * Nullable&lt;Azure.AI.Vision.Face.FaceRecognitionModel&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Create : string * string * Nullable&lt;Azure.AI.Vision.Face.FaceRecognitionModel&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="largePersonGroupClient.Create (name, userData, recognitionModel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="recognitionModel" Type="System.Nullable&lt;Azure.AI.Vision.Face.FaceRecognitionModel&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> User defined name, maximum length is 128. </param>
        <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        <param name="recognitionModel"> The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and recognitionModel. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.Create("your_large_person_group_name");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreateAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.CreateAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and recognitionModel.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreateAsync(System.String,System.String,System.Nullable{Azure.AI.Vision.Face.FaceRecognitionModel},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_name",
    userData = "your_user_data",
    recognitionModel = "recognition_01",
});
Response response = await client.CreateAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAsync (string name, string userData = default, Azure.AI.Vision.Face.FaceRecognitionModel? recognitionModel = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAsync(string name, string userData, valuetype System.Nullable`1&lt;valuetype Azure.AI.Vision.Face.FaceRecognitionModel&gt; recognitionModel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreateAsync(System.String,System.String,System.Nullable{Azure.AI.Vision.Face.FaceRecognitionModel},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (name As String, Optional userData As String = Nothing, Optional recognitionModel As Nullable(Of FaceRecognitionModel) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : string * string * Nullable&lt;Azure.AI.Vision.Face.FaceRecognitionModel&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAsync : string * string * Nullable&lt;Azure.AI.Vision.Face.FaceRecognitionModel&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.CreateAsync (name, userData, recognitionModel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="recognitionModel" Type="System.Nullable&lt;Azure.AI.Vision.Face.FaceRecognitionModel&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> User defined name, maximum length is 128. </param>
        <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        <param name="recognitionModel"> The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and recognitionModel. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.CreateAsync("your_large_person_group_name");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePerson">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreatePerson (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreatePerson(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreatePerson(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePerson (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreatePerson : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreatePerson : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.CreatePerson (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person Group Person Face".
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreatePerson(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreatePerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_person_name",
    userData = "your_user_data",
});
Response response = client.CreatePerson(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePerson">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt; CreatePerson (string name, string userData = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.CreatePersonResult&gt; CreatePerson(string name, string userData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreatePerson(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePerson (name As String, Optional userData As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CreatePersonResult)" />
      <MemberSignature Language="F#" Value="abstract member CreatePerson : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;&#xA;override this.CreatePerson : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;" Usage="largePersonGroupClient.CreatePerson (name, userData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> User defined name, maximum length is 128. </param>
        <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person Group Person Face". </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group-person for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <example>
This sample shows how to call CreatePerson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<CreatePersonResult> response = client.CreatePerson("your_large_person_group_person_name");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePersonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreatePersonAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreatePersonAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreatePersonAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePersonAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreatePersonAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreatePersonAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.CreatePersonAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person Group Person Face".
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreatePersonAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreatePersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_person_name",
    userData = "your_user_data",
});
Response response = await client.CreatePersonAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreatePersonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;&gt; CreatePersonAsync (string name, string userData = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.CreatePersonResult&gt;&gt; CreatePersonAsync(string name, string userData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.CreatePersonAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreatePersonAsync (name As String, Optional userData As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CreatePersonResult))" />
      <MemberSignature Language="F#" Value="abstract member CreatePersonAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;&gt;&#xA;override this.CreatePersonAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;&gt;" Usage="largePersonGroupClient.CreatePersonAsync (name, userData, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.CreatePersonResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="userData" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="name"> User defined name, maximum length is 128. </param>
        <param name="userData"> Optional user defined data. Length should not exceed 16K. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person Group Person Face". </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group-person for more details. </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <example>
This sample shows how to call CreatePersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<CreatePersonResult> response = await client.CreatePersonAsync("your_large_person_group_person_name");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.Delete(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.RequestContext -&gt; Azure.Response&#xA;override this.Delete : Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.Delete context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.Delete();

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.DeleteAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.DeleteAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.DeleteAsync();

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteFace (Guid personId, Guid persistedFaceId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteFace(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.DeleteFace(System.Guid,System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteFace (personId As Guid, persistedFaceId As Guid, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteFace : Guid * Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteFace : Guid * Guid * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.DeleteFace (personId, persistedFaceId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a face from a person in a Large Person Group by specified largePersonGroupId, personId and persistedFaceId.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteFace.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.DeleteFace(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteFaceAsync (Guid personId, Guid persistedFaceId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteFaceAsync(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.DeleteFaceAsync(System.Guid,System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteFaceAsync (personId As Guid, persistedFaceId As Guid, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteFaceAsync : Guid * Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteFaceAsync : Guid * Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.DeleteFaceAsync (personId, persistedFaceId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a face from a person in a Large Person Group by specified largePersonGroupId, personId and persistedFaceId.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.DeleteFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeletePerson">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeletePerson (Guid personId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeletePerson(valuetype System.Guid personId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.DeletePerson(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeletePerson (personId As Guid, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeletePerson : Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeletePerson : Guid * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.DeletePerson (personId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group-person for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeletePerson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.DeletePerson(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeletePersonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeletePersonAsync (Guid personId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeletePersonAsync(valuetype System.Guid personId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.DeletePersonAsync(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeletePersonAsync (personId As Guid, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeletePersonAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeletePersonAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.DeletePersonAsync (personId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group-person for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeletePersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.DeletePersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetFace (Guid personId, Guid persistedFaceId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetFace(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetFace(System.Guid,System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFace (personId As Guid, persistedFaceId As Guid, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetFace : Guid * Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetFace : Guid * Guid * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.GetFace (personId, persistedFaceId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person-face for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetFace(System.Guid,System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetFace and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.GetFace(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt; GetFace (Guid personId, Guid persistedFaceId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt; GetFace(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetFace(System.Guid,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFace (personId As Guid, persistedFaceId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LargePersonGroupPersonFace)" />
      <MemberSignature Language="F#" Value="abstract member GetFace : Guid * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;&#xA;override this.GetFace : Guid * Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;" Usage="largePersonGroupClient.GetFace (personId, persistedFaceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person-face for more details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetFace.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<LargePersonGroupPersonFace> response = client.GetFace(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetFaceAsync (Guid personId, Guid persistedFaceId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetFaceAsync(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetFaceAsync(System.Guid,System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFaceAsync (personId As Guid, persistedFaceId As Guid, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetFaceAsync : Guid * Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetFaceAsync : Guid * Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.GetFaceAsync (personId, persistedFaceId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person-face for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetFaceAsync(System.Guid,System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetFaceAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.GetFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;&gt; GetFaceAsync (Guid personId, Guid persistedFaceId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;&gt; GetFaceAsync(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetFaceAsync(System.Guid,System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFaceAsync (personId As Guid, persistedFaceId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LargePersonGroupPersonFace))" />
      <MemberSignature Language="F#" Value="abstract member GetFaceAsync : Guid * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;&gt;&#xA;override this.GetFaceAsync : Guid * Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;&gt;" Usage="largePersonGroupClient.GetFaceAsync (personId, persistedFaceId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPersonFace&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person-face for more details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<LargePersonGroupPersonFace> response = await client.GetFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetLargePersonGroup (bool? returnRecognitionModel, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetLargePersonGroup(valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroup(System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroup (returnRecognitionModel As Nullable(Of Boolean), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroup : Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetLargePersonGroup : Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.GetLargePersonGroup (returnRecognitionModel, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroup(System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetLargePersonGroup and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.GetLargePersonGroup(true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt; GetLargePersonGroup (bool? returnRecognitionModel = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.LargePersonGroup&gt; GetLargePersonGroup(valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroup(System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroup (Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LargePersonGroup)" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroup : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&#xA;override this.GetLargePersonGroup : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;" Usage="largePersonGroupClient.GetLargePersonGroup (returnRecognitionModel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetLargePersonGroup.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<LargePersonGroup> response = client.GetLargePersonGroup();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetLargePersonGroupAsync (bool? returnRecognitionModel, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetLargePersonGroupAsync(valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroupAsync(System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroupAsync (returnRecognitionModel As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroupAsync : Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetLargePersonGroupAsync : Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.GetLargePersonGroupAsync (returnRecognitionModel, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroupAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetLargePersonGroupAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.GetLargePersonGroupAsync(true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("largePersonGroupId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt; GetLargePersonGroupAsync (bool? returnRecognitionModel = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.LargePersonGroup&gt;&gt; GetLargePersonGroupAsync(valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroupAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroupAsync (Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LargePersonGroup))" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroupAsync : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&#xA;override this.GetLargePersonGroupAsync : Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;" Usage="largePersonGroupClient.GetLargePersonGroupAsync (returnRecognitionModel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetLargePersonGroupAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<LargePersonGroup> response = await client.GetLargePersonGroupAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetLargePersonGroups (string start, int? top, bool? returnRecognitionModel, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetLargePersonGroups(string start, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroups (start As String, top As Nullable(Of Integer), returnRecognitionModel As Nullable(Of Boolean), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroups : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetLargePersonGroups : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.GetLargePersonGroups (start, top, returnRecognitionModel, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetLargePersonGroups and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient(null);

Response response = client.GetLargePersonGroups("00000000-0000-0000-0000-000000000000", 20, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt; GetLargePersonGroups (string start = default, int? top = default, bool? returnRecognitionModel = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.LargePersonGroup&gt;&gt; GetLargePersonGroups(string start, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroups(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroups (Optional start As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of LargePersonGroup))" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroups : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&#xA;override this.GetLargePersonGroups : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;" Usage="largePersonGroupClient.GetLargePersonGroups (start, top, returnRecognitionModel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-groups for more details. </remarks>
        <example>
This sample shows how to call GetLargePersonGroups.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient(null);

Response<IReadOnlyList<LargePersonGroup>> response = client.GetLargePersonGroups();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroupsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetLargePersonGroupsAsync (string start, int? top, bool? returnRecognitionModel, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetLargePersonGroupsAsync(string start, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroupsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroupsAsync (start As String, top As Nullable(Of Integer), returnRecognitionModel As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroupsAsync : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetLargePersonGroupsAsync : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.GetLargePersonGroupsAsync (start, top, returnRecognitionModel, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroupsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetLargePersonGroupsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient(null);

Response response = await client.GetLargePersonGroupsAsync("00000000-0000-0000-0000-000000000000", 20, true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("name").ToString());
Console.WriteLine(result[0].GetProperty("largePersonGroupId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetLargePersonGroupsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&gt; GetLargePersonGroupsAsync (string start = default, int? top = default, bool? returnRecognitionModel = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&gt; GetLargePersonGroupsAsync(string start, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Nullable`1&lt;bool&gt; returnRecognitionModel, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetLargePersonGroupsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLargePersonGroupsAsync (Optional start As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional returnRecognitionModel As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of LargePersonGroup)))" />
      <MemberSignature Language="F#" Value="abstract member GetLargePersonGroupsAsync : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&gt;&#xA;override this.GetLargePersonGroupsAsync : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&gt;" Usage="largePersonGroupClient.GetLargePersonGroupsAsync (start, top, returnRecognitionModel, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroup&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="returnRecognitionModel" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="returnRecognitionModel"> Return 'recognitionModel' or not. The default value is false. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-groups for more details. </remarks>
        <example>
This sample shows how to call GetLargePersonGroupsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient(null);

Response<IReadOnlyList<LargePersonGroup>> response = await client.GetLargePersonGroupsAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPerson">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetPerson (Guid personId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetPerson(valuetype System.Guid personId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPerson(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPerson (personId As Guid, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetPerson : Guid * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetPerson : Guid * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.GetPerson (personId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPerson(System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPerson and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.GetPerson(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPerson">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt; GetPerson (Guid personId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.LargePersonGroupPerson&gt; GetPerson(valuetype System.Guid personId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPerson(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPerson (personId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LargePersonGroupPerson)" />
      <MemberSignature Language="F#" Value="abstract member GetPerson : Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&#xA;override this.GetPerson : Guid * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;" Usage="largePersonGroupClient.GetPerson (personId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person for more details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetPerson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<LargePersonGroupPerson> response = client.GetPerson(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPersonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetPersonAsync (Guid personId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetPersonAsync(valuetype System.Guid personId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersonAsync(System.Guid,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPersonAsync (personId As Guid, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetPersonAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetPersonAsync : Guid * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.GetPersonAsync (personId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersonAsync(System.Guid,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPersonAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.GetPersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("personId").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPersonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt; GetPersonAsync (Guid personId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt; GetPersonAsync(valuetype System.Guid personId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersonAsync(System.Guid,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPersonAsync (personId As Guid, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LargePersonGroupPerson))" />
      <MemberSignature Language="F#" Value="abstract member GetPersonAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&#xA;override this.GetPersonAsync : Guid * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;" Usage="largePersonGroupClient.GetPersonAsync (personId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person for more details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetPersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<LargePersonGroupPerson> response = await client.GetPersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPersons">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetPersons (string start, int? top, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetPersons(string start, valuetype System.Nullable`1&lt;int32&gt; top, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersons(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPersons (start As String, top As Nullable(Of Integer), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetPersons : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetPersons : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.GetPersons (start, top, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all persons' information in the specified Large Person Group, including personId, name, userData and persistedFaceIds of registered person faces.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersons(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPersons and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.GetPersons("00000000-0000-0000-0000-000000000000", 20, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPersons">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt; GetPersons (string start = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt; GetPersons(string start, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersons(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPersons (Optional start As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of LargePersonGroupPerson))" />
      <MemberSignature Language="F#" Value="abstract member GetPersons : string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&#xA;override this.GetPersons : string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;" Usage="largePersonGroupClient.GetPersons (start, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List all persons' information in the specified Large Person Group, including personId, name, userData and persistedFaceIds of registered person faces. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-persons for more details. </remarks>
        <example>
This sample shows how to call GetPersons.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<IReadOnlyList<LargePersonGroupPerson>> response = client.GetPersons();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPersonsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetPersonsAsync (string start, int? top, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetPersonsAsync(string start, valuetype System.Nullable`1&lt;int32&gt; top, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersonsAsync(System.String,System.Nullable{System.Int32},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPersonsAsync (start As String, top As Nullable(Of Integer), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetPersonsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetPersonsAsync : string * Nullable&lt;int&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.GetPersonsAsync (start, top, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all persons' information in the specified Large Person Group, including personId, name, userData and persistedFaceIds of registered person faces.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersonsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetPersonsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.GetPersonsAsync("00000000-0000-0000-0000-000000000000", 20, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].GetProperty("personId").ToString());
Console.WriteLine(result[0].GetProperty("name").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetPersonsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&gt; GetPersonsAsync (string start = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&gt; GetPersonsAsync(string start, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetPersonsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPersonsAsync (Optional start As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of LargePersonGroupPerson)))" />
      <MemberSignature Language="F#" Value="abstract member GetPersonsAsync : string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&gt;&#xA;override this.GetPersonsAsync : string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&gt;" Usage="largePersonGroupClient.GetPersonsAsync (start, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.AI.Vision.Face.LargePersonGroupPerson&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="start"> List resources greater than the "start". It contains no more than 64 characters. Default is empty. </param>
        <param name="top"> The number of items to list, ranging in [1, 1000]. Default is 1000. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> List all persons' information in the specified Large Person Group, including personId, name, userData and persistedFaceIds of registered person faces. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-persons for more details. </remarks>
        <example>
This sample shows how to call GetPersonsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<IReadOnlyList<LargePersonGroupPerson>> response = await client.GetPersonsAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTrainingStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTrainingStatus (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTrainingStatus(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetTrainingStatus(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTrainingStatus (context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTrainingStatus : Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTrainingStatus : Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.GetTrainingStatus context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] To check Large Person Group training status completed or still ongoing. Large Person Group training is an asynchronous operation triggered by "Train Large Person Group" API.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetTrainingStatus(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTrainingStatus and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = client.GetTrainingStatus(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTrainingStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt; GetTrainingStatus (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceTrainingResult&gt; GetTrainingStatus(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetTrainingStatus(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTrainingStatus (Optional cancellationToken As CancellationToken = Nothing) As Response(Of FaceTrainingResult)" />
      <MemberSignature Language="F#" Value="abstract member GetTrainingStatus : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;&#xA;override this.GetTrainingStatus : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;" Usage="largePersonGroupClient.GetTrainingStatus cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> To check Large Person Group training status completed or still ongoing. Large Person Group training is an asynchronous operation triggered by "Train Large Person Group" API. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-training-status for more details. </remarks>
        <example>
This sample shows how to call GetTrainingStatus.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<FaceTrainingResult> response = client.GetTrainingStatus();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTrainingStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTrainingStatusAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTrainingStatusAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetTrainingStatusAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTrainingStatusAsync (context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTrainingStatusAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTrainingStatusAsync : Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.GetTrainingStatusAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] To check Large Person Group training status completed or still ongoing. Large Person Group training is an asynchronous operation triggered by "Train Large Person Group" API.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetTrainingStatusAsync(System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTrainingStatusAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response response = await client.GetTrainingStatusAsync(null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTrainingStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;&gt; GetTrainingStatusAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Vision.Face.FaceTrainingResult&gt;&gt; GetTrainingStatusAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.GetTrainingStatusAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTrainingStatusAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FaceTrainingResult))" />
      <MemberSignature Language="F#" Value="abstract member GetTrainingStatusAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;&gt;&#xA;override this.GetTrainingStatusAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;&gt;" Usage="largePersonGroupClient.GetTrainingStatusAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Vision.Face.FaceTrainingResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> To check Large Person Group training status completed or still ongoing. Large Person Group training is an asynchronous operation triggered by "Train Large Person Group" API. </summary>
        <returns>To be added.</returns>
        <remarks> Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-training-status for more details. </remarks>
        <example>
This sample shows how to call GetTrainingStatusAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Response<FaceTrainingResult> response = await client.GetTrainingStatusAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Vision.Face.LargePersonGroupClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Vision.Face.LargePersonGroupClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Train">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation Train (Azure.WaitUntil waitUntil, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation Train(valuetype Azure.WaitUntil waitUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.Train(Azure.WaitUntil,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Train (waitUntil As WaitUntil, Optional context As RequestContext = Nothing) As Operation" />
      <MemberSignature Language="F#" Value="abstract member Train : Azure.WaitUntil * Azure.RequestContext -&gt; Azure.Operation&#xA;override this.Train : Azure.WaitUntil * Azure.RequestContext -&gt; Azure.Operation" Usage="largePersonGroupClient.Train (waitUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Submit a Large Person Group training task. Training is a crucial step that only a trained Large Person Group can be used by "Identify From Large Person Group".
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Train.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Operation operation = client.Train(WaitUntil.Completed);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TrainAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&gt; TrainAsync (Azure.WaitUntil waitUntil, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation&gt; TrainAsync(valuetype Azure.WaitUntil waitUntil, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.TrainAsync(Azure.WaitUntil,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TrainAsync (waitUntil As WaitUntil, Optional context As RequestContext = Nothing) As Task(Of Operation)" />
      <MemberSignature Language="F#" Value="abstract member TrainAsync : Azure.WaitUntil * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;&#xA;override this.TrainAsync : Azure.WaitUntil * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&gt;" Usage="largePersonGroupClient.TrainAsync (waitUntil, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Submit a Large Person Group training task. Training is a crucial step that only a trained Large Person Group can be used by "Identify From Large Person Group".
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call TrainAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

Operation operation = await client.TrainAsync(WaitUntil.Completed);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Update (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Update(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.Update(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Update : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.Update (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Update.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_name",
    userData = "your_user_data",
});
Response response = client.Update(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.UpdateAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.UpdateAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_name",
    userData = "your_user_data",
});
Response response = await client.UpdateAsync(content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateFace">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateFace (Guid personId, Guid persistedFaceId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateFace(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.UpdateFace(System.Guid,System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateFace (personId As Guid, persistedFaceId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateFace : Guid * Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateFace : Guid * Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.UpdateFace (personId, persistedFaceId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person-face for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateFace.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    userData = "your_user_data",
});
Response response = client.UpdateFace(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateFaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateFaceAsync (Guid personId, Guid persistedFaceId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateFaceAsync(valuetype System.Guid personId, valuetype System.Guid persistedFaceId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.UpdateFaceAsync(System.Guid,System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateFaceAsync (personId As Guid, persistedFaceId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateFaceAsync : Guid * Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateFaceAsync : Guid * Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.UpdateFaceAsync (personId, persistedFaceId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="persistedFaceId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="persistedFaceId"> Face ID of the face. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person-face for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateFaceAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    userData = "your_user_data",
});
Response response = await client.UpdateFaceAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdatePerson">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdatePerson (Guid personId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdatePerson(valuetype System.Guid personId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.UpdatePerson(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdatePerson (personId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdatePerson : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdatePerson : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="largePersonGroupClient.UpdatePerson (personId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdatePerson.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_person_name",
    userData = "your_user_data",
});
Response response = client.UpdatePerson(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdatePersonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdatePersonAsync (Guid personId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdatePersonAsync(valuetype System.Guid personId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Vision.Face.LargePersonGroupClient.UpdatePersonAsync(System.Guid,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdatePersonAsync (personId As Guid, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdatePersonAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdatePersonAsync : Guid * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="largePersonGroupClient.UpdatePersonAsync (personId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Vision.Face</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="personId" Type="System.Guid" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="personId"> ID of the person. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person for more details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdatePersonAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
AzureKeyCredential credential = new AzureKeyCredential("<key>");
LargePersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetLargePersonGroupClient("your_large_person_group_id");

using RequestContent content = RequestContent.Create(new
{
    name = "your_large_person_group_person_name",
    userData = "your_user_data",
});
Response response = await client.UpdatePersonAsync(Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
