<Type Name="RsaKeyWrapProvider" FullName="Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider">
  <TypeSignature Language="C#" Value="public class RsaKeyWrapProvider : Microsoft.IdentityModel.Tokens.KeyWrapProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RsaKeyWrapProvider extends Microsoft.IdentityModel.Tokens.KeyWrapProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class RsaKeyWrapProvider&#xA;Inherits KeyWrapProvider" />
  <TypeSignature Language="F#" Value="type RsaKeyWrapProvider = class&#xA;    inherit KeyWrapProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
    <AssemblyVersion>5.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.IdentityModel.Tokens.KeyWrapProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides RSA Wrap key and Unwrap key services.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RsaKeyWrapProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool willUnwrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool willUnwrap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SecurityKey, algorithm As String, willUnwrap As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string * bool -&gt; Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" Usage="new Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider (key, algorithm, willUnwrap)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="willUnwrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="algorithm">To be added.</param>
        <param name="willUnwrap">To be added.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" /> class used for wrap key and unwrap key.
            <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used for crypto operations.</param><param name="algorithm">The KeyWrap algorithm to apply.</param><param name="willUnwrap">Whether this <see cref="T:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" /> is required to create decrypts then set this to true.</param><exception cref="T:System.ArgumentNullException">'key' is null.</exception><exception cref="T:System.ArgumentNullException">'algorithm' is null.</exception><exception cref="T:System.ArgumentException">The keysize doesn't match the algorithm.</exception><exception cref="T:System.ArgumentException">If <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception><exception cref="T:System.InvalidOperationException">Failed to create RSA algorithm with provided key and algorithm.</exception></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Algorithm">
      <MemberSignature Language="C#" Value="public override string Algorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Algorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Algorithm" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Algorithm As String" />
      <MemberSignature Language="F#" Value="member this.Algorithm : string" Usage="Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Algorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the KeyWrap algorithm that is being used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public override string Context { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Context" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Context As String" />
      <MemberSignature Language="F#" Value="member this.Context : string with get, set" Usage="Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a user context for a <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" />.
            </summary>
        <value>To be added.</value>
        <remarks>This is null by default. This can be used by runtimes or for extensibility scenarios.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="rsaKeyWrapProvider.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        <summary>
            Disposes of internal components.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedAlgorithm">
      <MemberSignature Language="C#" Value="protected virtual bool IsSupportedAlgorithm (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsSupportedAlgorithm(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.IsSupportedAlgorithm(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsSupportedAlgorithm (key As SecurityKey, algorithm As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedAlgorithm : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; bool&#xA;override this.IsSupportedAlgorithm : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; bool" Usage="rsaKeyWrapProvider.IsSupportedAlgorithm (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used for crypto operations.</param>
        <param name="algorithm">The KeyWrap algorithm to apply.</param>
        <summary>
            Checks if an algorithm is supported.
            </summary>
        <returns>true if the algorithm is supported; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public override Microsoft.IdentityModel.Tokens.SecurityKey Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Tokens.SecurityKey Key" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Key" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Key As SecurityKey" />
      <MemberSignature Language="F#" Value="member this.Key : Microsoft.IdentityModel.Tokens.SecurityKey" Usage="Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SecurityKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that is being used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnwrapKey">
      <MemberSignature Language="C#" Value="public override byte[] UnwrapKey (byte[] keyBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] UnwrapKey(unsigned int8[] keyBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.UnwrapKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UnwrapKey (keyBytes As Byte()) As Byte()" />
      <MemberSignature Language="F#" Value="override this.UnwrapKey : byte[] -&gt; byte[]" Usage="rsaKeyWrapProvider.UnwrapKey keyBytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyBytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="keyBytes">the bytes to unwrap.</param>
        <summary>
            Unwrap a key using RSA decryption.
            </summary>
        <returns>Unwrapped key</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'keyBytes' is null or length == 0.</exception>
        <exception cref="T:System.ObjectDisposedException">If <see cref="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Dispose(System.Boolean)" /> has been called.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenKeyWrapException">Failed to unwrap the wrappedKey.</exception>
        <exception cref="T:System.InvalidOperationException">If the internal RSA algorithm is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="WrapKey">
      <MemberSignature Language="C#" Value="public override byte[] WrapKey (byte[] keyBytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] WrapKey(unsigned int8[] keyBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.WrapKey(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WrapKey (keyBytes As Byte()) As Byte()" />
      <MemberSignature Language="F#" Value="override this.WrapKey : byte[] -&gt; byte[]" Usage="rsaKeyWrapProvider.WrapKey keyBytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyBytes" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="keyBytes">the key to be wrapped</param>
        <summary>
            Wrap a key using RSA encryption.
            </summary>
        <returns>A wrapped key</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'keyBytes' is null or has length == 0.</exception>
        <exception cref="T:System.ObjectDisposedException">If <see cref="M:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Dispose(System.Boolean)" /> has been called.</exception>
        <exception cref="T:Microsoft.IdentityModel.Tokens.SecurityTokenKeyWrapException">Failed to wrap the 'keyBytes'.</exception>
        <exception cref="T:System.InvalidOperationException">If the internal RSA algorithm is null.</exception>
      </Docs>
    </Member>
  </Members>
</Type>