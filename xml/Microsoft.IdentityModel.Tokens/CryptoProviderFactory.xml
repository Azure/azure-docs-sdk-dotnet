<Type Name="CryptoProviderFactory" FullName="Microsoft.IdentityModel.Tokens.CryptoProviderFactory">
  <TypeSignature Language="C#" Value="public class CryptoProviderFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CryptoProviderFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class CryptoProviderFactory" />
  <TypeSignature Language="F#" Value="type CryptoProviderFactory = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
    <AssemblyVersion>5.6.0.0</AssemblyVersion>
    <AssemblyVersion>6.5.0.0</AssemblyVersion>
    <AssemblyVersion>6.5.1.0</AssemblyVersion>
    <AssemblyVersion>6.6.0.0</AssemblyVersion>
    <AssemblyVersion>6.7.0.0</AssemblyVersion>
    <AssemblyVersion>6.7.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Creates cryptographic operators by specifying a <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />'s and algorithms.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CryptoProviderFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Default constructor for <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CryptoProviderFactory (Microsoft.IdentityModel.Tokens.CryptoProviderFactory other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.IdentityModel.Tokens.CryptoProviderFactory other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.#ctor(Microsoft.IdentityModel.Tokens.CryptoProviderFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (other As CryptoProviderFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.Tokens.CryptoProviderFactory : Microsoft.IdentityModel.Tokens.CryptoProviderFactory -&gt; Microsoft.IdentityModel.Tokens.CryptoProviderFactory" Usage="new Microsoft.IdentityModel.Tokens.CryptoProviderFactory other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="other" Type="Microsoft.IdentityModel.Tokens.CryptoProviderFactory" />
      </Parameters>
      <Docs>
        <param name="other">
          <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory" /> to copy from.</param>
        <summary>
            Constructor that creates a deep copy of given <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory" /> object.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheSignatureProviders">
      <MemberSignature Language="C#" Value="public bool CacheSignatureProviders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CacheSignatureProviders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CacheSignatureProviders" />
      <MemberSignature Language="VB.NET" Value="Public Property CacheSignatureProviders As Boolean" />
      <MemberSignature Language="F#" Value="member this.CacheSignatureProviders : bool with get, set" Usage="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CacheSignatureProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a bool controlling if <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> should be cached.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAuthenticatedEncryptionProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider CreateAuthenticatedEncryptionProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider CreateAuthenticatedEncryptionProvider(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateAuthenticatedEncryptionProvider(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAuthenticatedEncryptionProvider (key As SecurityKey, algorithm As String) As AuthenticatedEncryptionProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateAuthenticatedEncryptionProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider&#xA;override this.CreateAuthenticatedEncryptionProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" Usage="cryptoProviderFactory.CreateAuthenticatedEncryptionProvider (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use.</param>
        <param name="algorithm">the algorithm to use.</param>
        <summary>
            Creates an instance of <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" /> for a specific &lt;SecurityKey, Algorithm&gt;.
            </summary>
        <returns>an instance of <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" /></returns>
        <remarks>
          <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider" />.
            </para>
          <para>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseKeyWrapProvider(Microsoft.IdentityModel.Tokens.KeyWrapProvider)" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentException">thrown if <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateForSigning">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.SignatureProvider CreateForSigning (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.SignatureProvider CreateForSigning(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForSigning (key As SecurityKey, algorithm As String) As SignatureProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateForSigning : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider&#xA;override this.CreateForSigning : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider" Usage="cryptoProviderFactory.CreateForSigning (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SignatureProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signing.</param>
        <param name="algorithm">the algorithm to use for signing.</param>
        <summary>
            Creates a <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that creates a signature with the algorithm and <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that can be used to create a signature using the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.</returns>
        <remarks>
          <para>AsymmetricSignatureProviders require access to a PrivateKey for Signing.</para>
          <para>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider)" />.</para>
          <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> is not a <see cref="T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey" /> or a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">thrown if <see cref="P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize" /> is too small.</exception>
        <exception cref="T:System.NotSupportedException">thrown if the key / algorithm is not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateForSigning">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.SignatureProvider CreateForSigning (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool cacheProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.SignatureProvider CreateForSigning(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool cacheProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForSigning (key As SecurityKey, algorithm As String, cacheProvider As Boolean) As SignatureProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateForSigning : Microsoft.IdentityModel.Tokens.SecurityKey * string * bool -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider&#xA;override this.CreateForSigning : Microsoft.IdentityModel.Tokens.SecurityKey * string * bool -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider" Usage="cryptoProviderFactory.CreateForSigning (key, algorithm, cacheProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SignatureProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="cacheProvider" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signing.</param>
        <param name="algorithm">the algorithm to use for signing.</param>
        <param name="cacheProvider">indicates if the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> should be cached for reuse.</param>
        <summary>
            Creates a <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that creates a signature with the algorithm and <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that can be used to create a signature using the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.</returns>
        <remarks>
          <para>AsymmetricSignatureProviders require access to a PrivateKey for Signing.</para>
          <para>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider)" />.</para>
          <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> is not a <see cref="T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey" /> or a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">thrown if <see cref="P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize" /> is too small.</exception>
        <exception cref="T:System.NotSupportedException">thrown if the key / algorithm is not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateForVerifying">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.SignatureProvider CreateForVerifying (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.SignatureProvider CreateForVerifying(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForVerifying(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForVerifying (key As SecurityKey, algorithm As String) As SignatureProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateForVerifying : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider&#xA;override this.CreateForVerifying : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider" Usage="cryptoProviderFactory.CreateForVerifying (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SignatureProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signature verification.</param>
        <param name="algorithm">The algorithm to use for verifying.</param>
        <summary>
            Creates a <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that supports the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that can be used to validate a signature using the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.</returns>
        <remarks>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider)" />.
            <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.
            </para></remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />' is not a <see cref="T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey" /> or a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">thrown if <see cref="P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize" /> is too small.</exception>
        <exception cref="T:System.NotSupportedException">thrown if the key / algorithm is not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateForVerifying">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.SignatureProvider CreateForVerifying (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool cacheProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.SignatureProvider CreateForVerifying(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool cacheProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForVerifying(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateForVerifying (key As SecurityKey, algorithm As String, cacheProvider As Boolean) As SignatureProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateForVerifying : Microsoft.IdentityModel.Tokens.SecurityKey * string * bool -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider&#xA;override this.CreateForVerifying : Microsoft.IdentityModel.Tokens.SecurityKey * string * bool -&gt; Microsoft.IdentityModel.Tokens.SignatureProvider" Usage="cryptoProviderFactory.CreateForVerifying (key, algorithm, cacheProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.SignatureProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="cacheProvider" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signature verification.</param>
        <param name="algorithm">The algorithm to use for verifying.</param>
        <param name="cacheProvider">should the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> be cached.</param>
        <summary>
            Creates a <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that supports the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that can be used to validate a signature using the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.</returns>
        <remarks>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider)" />.
            <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.
            </para></remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />' is not a <see cref="T:Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey" /> or a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />.</exception>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">thrown if <see cref="P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize" /> is too small.</exception>
        <exception cref="T:System.NotSupportedException">thrown if the key / algorithm is not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateHashAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm (System.Security.Cryptography.HashAlgorithmName algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm(valuetype System.Security.Cryptography.HashAlgorithmName algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.Security.Cryptography.HashAlgorithmName)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateHashAlgorithm (algorithm As HashAlgorithmName) As HashAlgorithm" />
      <MemberSignature Language="F#" Value="abstract member CreateHashAlgorithm : System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.HashAlgorithm&#xA;override this.CreateHashAlgorithm : System.Security.Cryptography.HashAlgorithmName -&gt; System.Security.Cryptography.HashAlgorithm" Usage="cryptoProviderFactory.CreateHashAlgorithm algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.Security.Cryptography.HashAlgorithmName" />
      </Parameters>
      <Docs>
        <param name="algorithm">the name of the hash algorithm to create.</param>
        <summary>
            Creates a <see cref="T:System.Security.Cryptography.HashAlgorithm" /> for a specific algorithm.
            </summary>
        <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</returns>
        <remarks>When finished with the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm)" />.
            <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:System.Security.Cryptography.HashAlgorithm" />.
            </para></remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</exception>
        <exception cref="T:System.NotSupportedException">thrown if <paramref name="algorithm" /> is not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateHashAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.HashAlgorithm CreateHashAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateHashAlgorithm (algorithm As String) As HashAlgorithm" />
      <MemberSignature Language="F#" Value="abstract member CreateHashAlgorithm : string -&gt; System.Security.Cryptography.HashAlgorithm&#xA;override this.CreateHashAlgorithm : string -&gt; System.Security.Cryptography.HashAlgorithm" Usage="cryptoProviderFactory.CreateHashAlgorithm algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">the name of the hash algorithm to create.</param>
        <summary>
            Creates a <see cref="T:System.Security.Cryptography.HashAlgorithm" /> for a specific algorithm.
            </summary>
        <returns>A <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</returns>
        <remarks>When finished with the <see cref="T:System.Security.Cryptography.HashAlgorithm" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm)" />.
            <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:System.Security.Cryptography.HashAlgorithm" />.
            </para></remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</exception>
        <exception cref="T:System.NotSupportedException">thrown if <paramref name="algorithm" /> is not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyedHashAlgorithm">
      <MemberSignature Language="C#" Value="public virtual System.Security.Cryptography.KeyedHashAlgorithm CreateKeyedHashAlgorithm (byte[] keyBytes, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Cryptography.KeyedHashAlgorithm CreateKeyedHashAlgorithm(unsigned int8[] keyBytes, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateKeyedHashAlgorithm(System.Byte[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateKeyedHashAlgorithm (keyBytes As Byte(), algorithm As String) As KeyedHashAlgorithm" />
      <MemberSignature Language="F#" Value="abstract member CreateKeyedHashAlgorithm : byte[] * string -&gt; System.Security.Cryptography.KeyedHashAlgorithm&#xA;override this.CreateKeyedHashAlgorithm : byte[] * string -&gt; System.Security.Cryptography.KeyedHashAlgorithm" Usage="cryptoProviderFactory.CreateKeyedHashAlgorithm (keyBytes, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.KeyedHashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyBytes" Type="System.Byte[]" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keyBytes">bytes to use to create the Keyed Hash.</param>
        <param name="algorithm">the name of the keyed hash algorithm to create.</param>
        <summary>
            Returns a <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> for a specific algorithm.
            </summary>
        <returns>A <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.</returns>
        <remarks>When finished with the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm)" />.
            <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.
            </para></remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="algorithm" /> is not supported.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyWrapProvider">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.KeyWrapProvider CreateKeyWrapProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.KeyWrapProvider CreateKeyWrapProvider(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateKeyWrapProvider(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateKeyWrapProvider (key As SecurityKey, algorithm As String) As KeyWrapProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateKeyWrapProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.KeyWrapProvider&#xA;override this.CreateKeyWrapProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.KeyWrapProvider" Usage="cryptoProviderFactory.CreateKeyWrapProvider (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.KeyWrapProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use.</param>
        <param name="algorithm">the algorithm to use.</param>
        <summary>
            Creates an instance of <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" /> for a specific &lt;SecurityKey, Algorithm&gt;.
            </summary>
        <returns>an instance of <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" /></returns>
        <remarks>
          <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" />.
            </para>
          <para>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseKeyWrapProvider(Microsoft.IdentityModel.Tokens.KeyWrapProvider)" />.</para>
        </remarks>
        <exception cref="T:System.ArgumentException">If <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.NotSupportedException">thrown if <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyWrapProviderForUnwrap">
      <MemberSignature Language="C#" Value="public virtual Microsoft.IdentityModel.Tokens.KeyWrapProvider CreateKeyWrapProviderForUnwrap (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.IdentityModel.Tokens.KeyWrapProvider CreateKeyWrapProviderForUnwrap(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateKeyWrapProviderForUnwrap(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateKeyWrapProviderForUnwrap (key As SecurityKey, algorithm As String) As KeyWrapProvider" />
      <MemberSignature Language="F#" Value="abstract member CreateKeyWrapProviderForUnwrap : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.KeyWrapProvider&#xA;override this.CreateKeyWrapProviderForUnwrap : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.KeyWrapProvider" Usage="cryptoProviderFactory.CreateKeyWrapProviderForUnwrap (key, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.KeyWrapProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to use for signing.</param>
        <param name="algorithm">the algorithm to use for signing.</param>
        <summary>
            Creates a <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that creates a signature with the algorithm and <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.
            </summary>
        <returns>A <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> that can be used to create a signature using the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm.</returns>
        <remarks>
          <para>AsymmetricSignatureProviders require access to a PrivateKey for Signing.</para>
          <para>When finished with the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> call <see cref="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider)" />.</para>
          <para>If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> is called to obtain the <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentException">If <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="algorithm" /> is null or empty.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">thrown if <see cref="P:Microsoft.IdentityModel.Tokens.SecurityKey.KeySize" /> is too small.</exception>
        <exception cref="T:System.NotSupportedException">thrown if the key / algorithm is not supported.</exception>
        <exception cref="T:System.InvalidOperationException">thrown if <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> returns a type that is not assignable from <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CryptoProviderCache">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Tokens.CryptoProviderCache CryptoProviderCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Tokens.CryptoProviderCache CryptoProviderCache" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderCache" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CryptoProviderCache As CryptoProviderCache" />
      <MemberSignature Language="F#" Value="member this.CryptoProviderCache : Microsoft.IdentityModel.Tokens.CryptoProviderCache" Usage="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.CryptoProviderCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderCache" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomCryptoProvider">
      <MemberSignature Language="C#" Value="public Microsoft.IdentityModel.Tokens.ICryptoProvider CustomCryptoProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.IdentityModel.Tokens.ICryptoProvider CustomCryptoProvider" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomCryptoProvider As ICryptoProvider" />
      <MemberSignature Language="F#" Value="member this.CustomCryptoProvider : Microsoft.IdentityModel.Tokens.ICryptoProvider with get, set" Usage="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.ICryptoProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Extensibility point for creating custom cryptographic operators.
            </summary>
        <value>To be added.</value>
        <remarks>By default, if set, <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> will be called before creating cryptographic operators.
            If true is returned, then <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.Create(System.String,System.Object[])" /> will be called. The <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory" /> will throw if the
            Cryptographic operator returned is not of the correct type.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static Microsoft.IdentityModel.Tokens.CryptoProviderFactory Default { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.IdentityModel.Tokens.CryptoProviderFactory Default" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Default As CryptoProviderFactory" />
      <MemberSignature Language="F#" Value="member this.Default : Microsoft.IdentityModel.Tokens.CryptoProviderFactory with get, set" Usage="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.IdentityModel.Tokens.CryptoProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the default <see cref="T:Microsoft.IdentityModel.Tokens.CryptoProviderFactory" /> instance.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCacheSignatureProviders">
      <MemberSignature Language="C#" Value="public static bool DefaultCacheSignatureProviders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool DefaultCacheSignatureProviders" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.DefaultCacheSignatureProviders" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultCacheSignatureProviders As Boolean" />
      <MemberSignature Language="F#" Value="member this.DefaultCacheSignatureProviders : bool with get, set" Usage="Microsoft.IdentityModel.Tokens.CryptoProviderFactory.DefaultCacheSignatureProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the default value for caching of <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" />'s.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedAlgorithm">
      <MemberSignature Language="C#" Value="public virtual bool IsSupportedAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.IsSupportedAlgorithm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSupportedAlgorithm (algorithm As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedAlgorithm : string -&gt; bool&#xA;override this.IsSupportedAlgorithm : string -&gt; bool" Usage="cryptoProviderFactory.IsSupportedAlgorithm algorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">the name of the Hash algorithm.</param>
        <summary>
            Checks if an algorithm is supported.
            </summary>
        <returns>true if:
            <para>
            If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            </para><para>The algorithm is supported.
            </para></returns>
        <remarks>Only considers known Hash algorithms.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedAlgorithm">
      <MemberSignature Language="C#" Value="public virtual bool IsSupportedAlgorithm (string algorithm, Microsoft.IdentityModel.Tokens.SecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedAlgorithm(string algorithm, class Microsoft.IdentityModel.Tokens.SecurityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.IsSupportedAlgorithm(System.String,Microsoft.IdentityModel.Tokens.SecurityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSupportedAlgorithm (algorithm As String, key As SecurityKey) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsSupportedAlgorithm : string * Microsoft.IdentityModel.Tokens.SecurityKey -&gt; bool&#xA;override this.IsSupportedAlgorithm : string * Microsoft.IdentityModel.Tokens.SecurityKey -&gt; bool" Usage="cryptoProviderFactory.IsSupportedAlgorithm (algorithm, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
      </Parameters>
      <Docs>
        <param name="algorithm">the security algorithm to apply.</param>
        <param name="key">the <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.</param>
        <summary>
            Checks if the algorithm and <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> is supported.
            </summary>
        <returns>true if:
            <para>
            If <see cref="P:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider" /> is set and <see cref="M:Microsoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(System.String,System.Object[])" /> returns true.
            </para><para>The algorithm / key pair is supported.
            </para></returns>
        <remarks>Algorithms are supported for specific key types.
            For example:
            <para><see cref="F:Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256" /> and <see cref="T:Microsoft.IdentityModel.Tokens.RsaSecurityKey" /> will return true.</para><para><see cref="F:Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256" /> and <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> will return false.</para></remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHashAlgorithm">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHashAlgorithm (System.Security.Cryptography.HashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHashAlgorithm(class System.Security.Cryptography.HashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHashAlgorithm (hashAlgorithm As HashAlgorithm)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHashAlgorithm : System.Security.Cryptography.HashAlgorithm -&gt; unit&#xA;override this.ReleaseHashAlgorithm : System.Security.Cryptography.HashAlgorithm -&gt; unit" Usage="cryptoProviderFactory.ReleaseHashAlgorithm hashAlgorithm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hashAlgorithm" Type="System.Security.Cryptography.HashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="hashAlgorithm">
          <see cref="T:System.Security.Cryptography.HashAlgorithm" /> to be released.</param>
        <summary>
            When finished with a <see cref="T:System.Security.Cryptography.HashAlgorithm" /> call this method for cleanup. The default behavior is to call <see cref="M:System.Security.Cryptography.HashAlgorithm.Dispose" /></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="hashAlgorithm" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseKeyWrapProvider">
      <MemberSignature Language="C#" Value="public virtual void ReleaseKeyWrapProvider (Microsoft.IdentityModel.Tokens.KeyWrapProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseKeyWrapProvider(class Microsoft.IdentityModel.Tokens.KeyWrapProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseKeyWrapProvider(Microsoft.IdentityModel.Tokens.KeyWrapProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseKeyWrapProvider (provider As KeyWrapProvider)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseKeyWrapProvider : Microsoft.IdentityModel.Tokens.KeyWrapProvider -&gt; unit&#xA;override this.ReleaseKeyWrapProvider : Microsoft.IdentityModel.Tokens.KeyWrapProvider -&gt; unit" Usage="cryptoProviderFactory.ReleaseKeyWrapProvider provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="Microsoft.IdentityModel.Tokens.KeyWrapProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" /> to be released.</param>
        <summary>
            When finished with a <see cref="T:Microsoft.IdentityModel.Tokens.KeyWrapProvider" /> call this method for cleanup."/&gt;
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="provider" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseRsaKeyWrapProvider">
      <MemberSignature Language="C#" Value="public virtual void ReleaseRsaKeyWrapProvider (Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseRsaKeyWrapProvider(class Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseRsaKeyWrapProvider(Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseRsaKeyWrapProvider (provider As RsaKeyWrapProvider)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseRsaKeyWrapProvider : Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider -&gt; unit&#xA;override this.ReleaseRsaKeyWrapProvider : Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider -&gt; unit" Usage="cryptoProviderFactory.ReleaseRsaKeyWrapProvider provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" /> to be released.</param>
        <summary>
            When finished with a <see cref="T:Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider" /> call this method for cleanup."/&gt;
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="provider" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseSignatureProvider">
      <MemberSignature Language="C#" Value="public virtual void ReleaseSignatureProvider (Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseSignatureProvider(class Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseSignatureProvider (signatureProvider As SignatureProvider)" />
      <MemberSignature Language="F#" Value="abstract member ReleaseSignatureProvider : Microsoft.IdentityModel.Tokens.SignatureProvider -&gt; unit&#xA;override this.ReleaseSignatureProvider : Microsoft.IdentityModel.Tokens.SignatureProvider -&gt; unit" Usage="cryptoProviderFactory.ReleaseSignatureProvider signatureProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signatureProvider" Type="Microsoft.IdentityModel.Tokens.SignatureProvider" />
      </Parameters>
      <Docs>
        <param name="signatureProvider">
          <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> to be released.</param>
        <summary>
            When finished with a <see cref="T:Microsoft.IdentityModel.Tokens.SignatureProvider" /> call this method for cleanup. The default behavior is to call <see cref="M:Microsoft.IdentityModel.Tokens.SignatureProvider.Dispose" /></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">thrown if <paramref name="signatureProvider" /> is null.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
