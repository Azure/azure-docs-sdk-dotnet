<Type Name="SymmetricSignatureProvider" FullName="Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider">
  <TypeSignature Language="C#" Value="public class SymmetricSignatureProvider : Microsoft.IdentityModel.Tokens.SignatureProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SymmetricSignatureProvider extends Microsoft.IdentityModel.Tokens.SignatureProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class SymmetricSignatureProvider&#xA;Inherits SignatureProvider" />
  <TypeSignature Language="F#" Value="type SymmetricSignatureProvider = class&#xA;    inherit SignatureProvider" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
    <AssemblyVersion>5.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.IdentityModel.Tokens.SignatureProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides signing and verifying operations using a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> and specifying an algorithm.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricSignatureProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SecurityKey, algorithm As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string -&gt; Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider" Usage="new Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider (key, algorithm)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used for signature operations.</param>
        <param name="algorithm">The signature algorithm to use.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider" /> class that uses an <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to create and / or verify signatures over a array of bytes.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'algorithm' is null or empty.</exception>
        <exception cref="T:System.NotSupportedException">If <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.KeySize' is smaller than <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.MinimumSymmetricKeySizeInBits" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SymmetricSignatureProvider (Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool willCreateSignatures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool willCreateSignatures) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (key As SecurityKey, algorithm As String, willCreateSignatures As Boolean)" />
      <MemberSignature Language="F#" Value="new Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider : Microsoft.IdentityModel.Tokens.SecurityKey * string * bool -&gt; Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider" Usage="new Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider (key, algorithm, willCreateSignatures)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="willCreateSignatures" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">The <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> that will be used for signature operations.</param>
        <param name="algorithm">The signature algorithm to use.</param>
        <param name="willCreateSignatures">indicates if this <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider" /> will be used to create signatures.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider" /> class that uses an <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> to create and / or verify signatures over a array of bytes.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'algorithm' is null or empty.</exception>
        <exception cref="T:System.NotSupportedException">If <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" /> and algorithm pair are not supported.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">'<see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />.KeySize' is smaller than <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.MinimumSymmetricKeySizeInBits" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSymmetricKeySizeInBits">
      <MemberSignature Language="C#" Value="public static readonly int DefaultMinimumSymmetricKeySizeInBits;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 DefaultMinimumSymmetricKeySizeInBits" />
      <MemberSignature Language="DocId" Value="F:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.DefaultMinimumSymmetricKeySizeInBits" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultMinimumSymmetricKeySizeInBits As Integer " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultMinimumSymmetricKeySizeInBits : int" Usage="Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.DefaultMinimumSymmetricKeySizeInBits" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This is the minimum <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />.KeySize when creating and verifying signatures.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="symmetricSignatureProvider.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true, if called from Dispose(), false, if invoked inside a finalizer.</param>
        <summary>
            Disposes of internal components.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKeyBytes">
      <MemberSignature Language="C#" Value="protected virtual byte[] GetKeyBytes (Microsoft.IdentityModel.Tokens.SecurityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance unsigned int8[] GetKeyBytes(class Microsoft.IdentityModel.Tokens.SecurityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.GetKeyBytes(Microsoft.IdentityModel.Tokens.SecurityKey)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetKeyBytes (key As SecurityKey) As Byte()" />
      <MemberSignature Language="F#" Value="abstract member GetKeyBytes : Microsoft.IdentityModel.Tokens.SecurityKey -&gt; byte[]&#xA;override this.GetKeyBytes : Microsoft.IdentityModel.Tokens.SecurityKey -&gt; byte[]" Usage="symmetricSignatureProvider.GetKeyBytes key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Microsoft.IdentityModel.Tokens.SecurityKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:Microsoft.IdentityModel.Tokens.SecurityKey" />that will be used to obtain the byte[].</param>
        <summary>
            Called to obtain the byte[] needed to create a <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.KeyedHashAlgorithm" /></summary>
        <returns>
          <see cref="T:System.Byte" />[] that is used to populated the KeyedHashAlgorithm.</returns>
        <remarks>
          <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> and <see cref="T:Microsoft.IdentityModel.Tokens.JsonWebKey" /> are supported.
            <para>For a <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> .Key is returned</para><para>For a <see cref="T:Microsoft.IdentityModel.Tokens.JsonWebKey" />Base64UrlEncoder.DecodeBytes is called with <see cref="P:Microsoft.IdentityModel.Tokens.JsonWebKey.K" /> if <see cref="P:Microsoft.IdentityModel.Tokens.JsonWebKey.Kty" /> == JsonWebAlgorithmsKeyTypes.Octet</para></remarks>
        <exception cref="T:System.ArgumentNullException">if key is null.</exception>
        <exception cref="T:System.ArgumentException">if a byte[] can not be obtained from SecurityKey.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyedHashAlgorithm">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (byte[] keyBytes, string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm(unsigned int8[] keyBytes, string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.GetKeyedHashAlgorithm(System.Byte[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetKeyedHashAlgorithm (keyBytes As Byte(), algorithm As String) As KeyedHashAlgorithm" />
      <MemberSignature Language="F#" Value="abstract member GetKeyedHashAlgorithm : byte[] * string -&gt; System.Security.Cryptography.KeyedHashAlgorithm&#xA;override this.GetKeyedHashAlgorithm : byte[] * string -&gt; System.Security.Cryptography.KeyedHashAlgorithm" Usage="symmetricSignatureProvider.GetKeyedHashAlgorithm (keyBytes, algorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.KeyedHashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyBytes" Type="System.Byte[]" />
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keyBytes">The byte array of the key.</param>
        <param name="algorithm">The hash algorithm to use to create the hash value.</param>
        <summary>
            Returns the <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.KeyedHashAlgorithm" />.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSymmetricKeySizeInBits">
      <MemberSignature Language="C#" Value="public int MinimumSymmetricKeySizeInBits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSymmetricKeySizeInBits" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.MinimumSymmetricKeySizeInBits" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSymmetricKeySizeInBits As Integer" />
      <MemberSignature Language="F#" Value="member this.MinimumSymmetricKeySizeInBits : int with get, set" Usage="Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.MinimumSymmetricKeySizeInBits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the minimum <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" />.KeySize"/&gt;.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">'value' is smaller than <see cref="F:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.DefaultMinimumSymmetricKeySizeInBits" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public override byte[] Sign (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] Sign(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Sign(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Sign (input As Byte()) As Byte()" />
      <MemberSignature Language="F#" Value="override this.Sign : byte[] -&gt; byte[]" Usage="symmetricSignatureProvider.Sign input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">The bytes to sign.</param>
        <summary>
            Produces a signature over the 'input' using the <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> and 'algorithm' passed to <see cref="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />.
            </summary>
        <returns>Signed bytes</returns>
        <remarks>Sign is thread safe.</remarks>
        <exception cref="T:System.ArgumentNullException">'input' is null. </exception>
        <exception cref="T:System.ArgumentException">'input.Length' == 0. </exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.KeyedHashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public override bool Verify (byte[] input, byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Verify(unsigned int8[] input, unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Verify(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Verify (input As Byte(), signature As Byte()) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Verify : byte[] * byte[] -&gt; bool" Usage="symmetricSignatureProvider.Verify (input, signature)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="input">The bytes to verify.</param>
        <param name="signature">signature to compare against.</param>
        <summary>
            Verifies that a signature created over the 'input' matches the signature. Using <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> and 'algorithm' passed to <see cref="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />.
            </summary>
        <returns>true if computed signature matches the signature parameter, false otherwise.</returns>
        <remarks>Verify is thread safe.</remarks>
        <exception cref="T:System.ArgumentNullException">'signature' is null.</exception>
        <exception cref="T:System.ArgumentException">'signature.Length' == 0. </exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called.</exception>
        <exception cref="T:System.InvalidOperationException">If the internal <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.KeyedHashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public bool Verify (byte[] input, byte[] signature, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Verify(unsigned int8[] input, unsigned int8[] signature, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Verify(System.Byte[],System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Verify (input As Byte(), signature As Byte(), length As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Verify : byte[] * byte[] * int -&gt; bool" Usage="symmetricSignatureProvider.Verify (input, signature, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Tokens</AssemblyName>
        <AssemblyVersion>5.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" />
        <Parameter Name="signature" Type="System.Byte[]" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">The bytes to verify.</param>
        <param name="signature">signature to compare against.</param>
        <param name="length">number of bytes of signature to use.</param>
        <summary>
            Verifies that a signature created over the 'input' matches the signature. Using <see cref="T:Microsoft.IdentityModel.Tokens.SymmetricSecurityKey" /> and 'algorithm' passed to <see cref="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.#ctor(Microsoft.IdentityModel.Tokens.SecurityKey,System.String)" />.
            </summary>
        <returns>true if computed signature matches the signature parameter, false otherwise.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">'signature' is null.</exception>
        <exception cref="T:System.ArgumentException">'length &lt; 1'</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="M:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(System.Boolean)" /> has been called.</exception>
        <exception cref="T:System.InvalidOperationException">If the internal <see cref="P:Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.KeyedHashAlgorithm" /> is null. This can occur if a derived type deletes it or does not create it.</exception>
      </Docs>
    </Member>
  </Members>
</Type>