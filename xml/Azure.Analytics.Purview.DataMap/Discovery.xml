<Type Name="Discovery" FullName="Azure.Analytics.Purview.DataMap.Discovery">
  <TypeSignature Language="C#" Value="public class Discovery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Discovery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.DataMap.Discovery" />
  <TypeSignature Language="VB.NET" Value="Public Class Discovery" />
  <TypeSignature Language="F#" Value="type Discovery = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Discovery sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Discovery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of Discovery for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoComplete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt; AutoComplete (Azure.Analytics.Purview.DataMap.AutoCompleteConfig autoCompleteConfig, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt; AutoComplete(class Azure.Analytics.Purview.DataMap.AutoCompleteConfig autoCompleteConfig, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.AutoComplete(Azure.Analytics.Purview.DataMap.AutoCompleteConfig,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AutoComplete (autoCompleteConfig As AutoCompleteConfig, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AutoCompleteResult)" />
      <MemberSignature Language="F#" Value="abstract member AutoComplete : Azure.Analytics.Purview.DataMap.AutoCompleteConfig * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;&#xA;override this.AutoComplete : Azure.Analytics.Purview.DataMap.AutoCompleteConfig * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;" Usage="discovery.AutoComplete (autoCompleteConfig, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoCompleteConfig" Type="Azure.Analytics.Purview.DataMap.AutoCompleteConfig" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="autoCompleteConfig"> The payload of autocomplete request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get auto complete options. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="autoCompleteConfig" /> is null. </exception>
        <example>
This sample shows how to call AutoComplete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteConfig autoCompleteConfig = new AutoCompleteConfig();
Response<AutoCompleteResult> response = client.AutoComplete(autoCompleteConfig);
]]></code>
This sample shows how to call AutoComplete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteConfig autoCompleteConfig = new AutoCompleteConfig
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<AutoCompleteResult> response = client.AutoComplete(autoCompleteConfig);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AutoComplete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AutoComplete (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AutoComplete(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.AutoComplete(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AutoComplete (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AutoComplete : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AutoComplete : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="discovery.AutoComplete (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get auto complete options.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Discovery.AutoComplete(Azure.Analytics.Purview.DataMap.AutoCompleteConfig,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AutoComplete and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = client.AutoComplete(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AutoComplete with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = client.AutoComplete(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;&gt; AutoCompleteAsync (Azure.Analytics.Purview.DataMap.AutoCompleteConfig autoCompleteConfig, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;&gt; AutoCompleteAsync(class Azure.Analytics.Purview.DataMap.AutoCompleteConfig autoCompleteConfig, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.AutoCompleteAsync(Azure.Analytics.Purview.DataMap.AutoCompleteConfig,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AutoCompleteAsync (autoCompleteConfig As AutoCompleteConfig, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AutoCompleteResult))" />
      <MemberSignature Language="F#" Value="abstract member AutoCompleteAsync : Azure.Analytics.Purview.DataMap.AutoCompleteConfig * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;&gt;&#xA;override this.AutoCompleteAsync : Azure.Analytics.Purview.DataMap.AutoCompleteConfig * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;&gt;" Usage="discovery.AutoCompleteAsync (autoCompleteConfig, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AutoCompleteResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoCompleteConfig" Type="Azure.Analytics.Purview.DataMap.AutoCompleteConfig" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="autoCompleteConfig"> The payload of autocomplete request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get auto complete options. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="autoCompleteConfig" /> is null. </exception>
        <example>
This sample shows how to call AutoCompleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteConfig autoCompleteConfig = new AutoCompleteConfig();
Response<AutoCompleteResult> response = await client.AutoCompleteAsync(autoCompleteConfig);
]]></code>
This sample shows how to call AutoCompleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

AutoCompleteConfig autoCompleteConfig = new AutoCompleteConfig
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<AutoCompleteResult> response = await client.AutoCompleteAsync(autoCompleteConfig);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AutoCompleteAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AutoCompleteAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.AutoCompleteAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AutoCompleteAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AutoCompleteAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AutoCompleteAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="discovery.AutoCompleteAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get auto complete options.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Discovery.AutoCompleteAsync(Azure.Analytics.Purview.DataMap.AutoCompleteConfig,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AutoCompleteAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.AutoCompleteAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call AutoCompleteAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = await client.AutoCompleteAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("queryPlusText").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.DataMap.Discovery.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.DataMap.Discovery.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt; Query (Azure.Analytics.Purview.DataMap.QueryConfig queryConfig, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.QueryResult&gt; Query(class Azure.Analytics.Purview.DataMap.QueryConfig queryConfig, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.Query(Azure.Analytics.Purview.DataMap.QueryConfig,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Query (queryConfig As QueryConfig, Optional cancellationToken As CancellationToken = Nothing) As Response(Of QueryResult)" />
      <MemberSignature Language="F#" Value="abstract member Query : Azure.Analytics.Purview.DataMap.QueryConfig * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;&#xA;override this.Query : Azure.Analytics.Purview.DataMap.QueryConfig * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;" Usage="discovery.Query (queryConfig, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryConfig" Type="Azure.Analytics.Purview.DataMap.QueryConfig" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryConfig"> The search query of advanced search request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get data using search. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queryConfig" /> is null. </exception>
        <example>
This sample shows how to call Query.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig queryConfig = new QueryConfig();
Response<QueryResult> response = client.Query(queryConfig);
]]></code>
This sample shows how to call Query with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig queryConfig = new QueryConfig
{
    Keywords = "<keywords>",
    Limit = 1234,
    ContinuationToken = "<continuationToken>",
    Orderby = { BinaryData.FromObjectAsJson(new object()) },
    Filter = BinaryData.FromObjectAsJson(new object()),
    Facets = {new SearchFacetItem
    {
        Count = 1234,
        Facet = "<facet>",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Ascend,
            Value = SearchSortOrder.Ascend,
        },
    }},
    TaxonomySetting = new SearchTaxonomySetting
    {
        AssetTypes = { "<assetTypes>" },
        Facet = default,
    },
};
Response<QueryResult> response = client.Query(queryConfig);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Query (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Query(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.Query(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Query (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Query : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Query : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="discovery.Query (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get data using search.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Discovery.Query(Azure.Analytics.Purview.DataMap.QueryConfig,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Query and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Query with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    continuationToken = "<continuationToken>",
    orderby = new object[]
    {
        new object()
    },
    filter = new object(),
    facets = new object[]
    {
        new
        {
            count = 1234,
            facet = "<facet>",
            sort = new
            {
                count = "asc",
                value = "asc",
            },
        }
    },
    taxonomySetting = new
    {
        assetTypes = new object[]
        {
            "<assetTypes>"
        },
    },
});
Response response = client.Query(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("@search.count").ToString());
Console.WriteLine(result.GetProperty("@search.count.approximate").ToString());
Console.WriteLine(result.GetProperty("continuationToken").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("id")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("qualifiedName")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("name")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("description")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("entityType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="QueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;&gt; QueryAsync (Azure.Analytics.Purview.DataMap.QueryConfig queryConfig, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.QueryResult&gt;&gt; QueryAsync(class Azure.Analytics.Purview.DataMap.QueryConfig queryConfig, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.QueryAsync(Azure.Analytics.Purview.DataMap.QueryConfig,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryAsync (queryConfig As QueryConfig, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of QueryResult))" />
      <MemberSignature Language="F#" Value="abstract member QueryAsync : Azure.Analytics.Purview.DataMap.QueryConfig * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;&gt;&#xA;override this.QueryAsync : Azure.Analytics.Purview.DataMap.QueryConfig * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;&gt;" Usage="discovery.QueryAsync (queryConfig, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.QueryResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryConfig" Type="Azure.Analytics.Purview.DataMap.QueryConfig" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queryConfig"> The search query of advanced search request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get data using search. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queryConfig" /> is null. </exception>
        <example>
This sample shows how to call QueryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig queryConfig = new QueryConfig();
Response<QueryResult> response = await client.QueryAsync(queryConfig);
]]></code>
This sample shows how to call QueryAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

QueryConfig queryConfig = new QueryConfig
{
    Keywords = "<keywords>",
    Limit = 1234,
    ContinuationToken = "<continuationToken>",
    Orderby = { BinaryData.FromObjectAsJson(new object()) },
    Filter = BinaryData.FromObjectAsJson(new object()),
    Facets = {new SearchFacetItem
    {
        Count = 1234,
        Facet = "<facet>",
        Sort = new SearchFacetSort
        {
            Count = SearchSortOrder.Ascend,
            Value = SearchSortOrder.Ascend,
        },
    }},
    TaxonomySetting = new SearchTaxonomySetting
    {
        AssetTypes = { "<assetTypes>" },
        Facet = default,
    },
};
Response<QueryResult> response = await client.QueryAsync(queryConfig);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="QueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; QueryAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; QueryAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.QueryAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function QueryAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member QueryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.QueryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="discovery.QueryAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get data using search.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Discovery.QueryAsync(Azure.Analytics.Purview.DataMap.QueryConfig,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call QueryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call QueryAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    continuationToken = "<continuationToken>",
    orderby = new object[]
    {
        new object()
    },
    filter = new object(),
    facets = new object[]
    {
        new
        {
            count = 1234,
            facet = "<facet>",
            sort = new
            {
                count = "asc",
                value = "asc",
            },
        }
    },
    taxonomySetting = new
    {
        assetTypes = new object[]
        {
            "<assetTypes>"
        },
    },
});
Response response = await client.QueryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("@search.count").ToString());
Console.WriteLine(result.GetProperty("@search.count.approximate").ToString());
Console.WriteLine(result.GetProperty("continuationToken").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("entityType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("assetType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("classification")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("term")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactId")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("contactType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("label")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("glossaryType")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termStatus")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("count").ToString());
Console.WriteLine(result.GetProperty("@search.facets").GetProperty("termTemplate")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("id")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("qualifiedName")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("name")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("description")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.highlights").GetProperty("entityType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Suggest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt; Suggest (Azure.Analytics.Purview.DataMap.SuggestConfig suggestConfig, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.SuggestResult&gt; Suggest(class Azure.Analytics.Purview.DataMap.SuggestConfig suggestConfig, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.Suggest(Azure.Analytics.Purview.DataMap.SuggestConfig,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Suggest (suggestConfig As SuggestConfig, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SuggestResult)" />
      <MemberSignature Language="F#" Value="abstract member Suggest : Azure.Analytics.Purview.DataMap.SuggestConfig * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;&#xA;override this.Suggest : Azure.Analytics.Purview.DataMap.SuggestConfig * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;" Usage="discovery.Suggest (suggestConfig, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suggestConfig" Type="Azure.Analytics.Purview.DataMap.SuggestConfig" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="suggestConfig"> The payload of suggest request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get search suggestions by query criteria. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="suggestConfig" /> is null. </exception>
        <example>
This sample shows how to call Suggest.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestConfig suggestConfig = new SuggestConfig();
Response<SuggestResult> response = client.Suggest(suggestConfig);
]]></code>
This sample shows how to call Suggest with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestConfig suggestConfig = new SuggestConfig
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<SuggestResult> response = client.Suggest(suggestConfig);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Suggest">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Suggest (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Suggest(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.Suggest(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Suggest (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Suggest : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Suggest : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="discovery.Suggest (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get search suggestions by query criteria.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Discovery.Suggest(Azure.Analytics.Purview.DataMap.SuggestConfig,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Suggest and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = client.Suggest(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call Suggest with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = client.Suggest(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SuggestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;&gt; SuggestAsync (Azure.Analytics.Purview.DataMap.SuggestConfig suggestConfig, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.SuggestResult&gt;&gt; SuggestAsync(class Azure.Analytics.Purview.DataMap.SuggestConfig suggestConfig, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.SuggestAsync(Azure.Analytics.Purview.DataMap.SuggestConfig,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SuggestAsync (suggestConfig As SuggestConfig, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SuggestResult))" />
      <MemberSignature Language="F#" Value="abstract member SuggestAsync : Azure.Analytics.Purview.DataMap.SuggestConfig * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;&gt;&#xA;override this.SuggestAsync : Azure.Analytics.Purview.DataMap.SuggestConfig * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;&gt;" Usage="discovery.SuggestAsync (suggestConfig, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.SuggestResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suggestConfig" Type="Azure.Analytics.Purview.DataMap.SuggestConfig" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="suggestConfig"> The payload of suggest request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get search suggestions by query criteria. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="suggestConfig" /> is null. </exception>
        <example>
This sample shows how to call SuggestAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestConfig suggestConfig = new SuggestConfig();
Response<SuggestResult> response = await client.SuggestAsync(suggestConfig);
]]></code>
This sample shows how to call SuggestAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

SuggestConfig suggestConfig = new SuggestConfig
{
    Keywords = "<keywords>",
    Limit = 1234,
    Filter = BinaryData.FromObjectAsJson(new object()),
};
Response<SuggestResult> response = await client.SuggestAsync(suggestConfig);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="SuggestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; SuggestAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; SuggestAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Discovery.SuggestAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SuggestAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member SuggestAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.SuggestAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="discovery.SuggestAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get search suggestions by query criteria.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Discovery.SuggestAsync(Azure.Analytics.Purview.DataMap.SuggestConfig,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call SuggestAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.SuggestAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call SuggestAsync with all request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Discovery client = new DataMapClient(endpoint, credential).GetDiscoveryClient(apiVersion: "2023-09-01");

using RequestContent content = RequestContent.Create(new
{
    keywords = "<keywords>",
    limit = 1234,
    filter = new object(),
});
Response response = await client.SuggestAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.score").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("@search.text").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("objectType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("createTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("updateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("qualifiedName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("entityType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("endorsement").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("owner").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("classification")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("label")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("glossaryName").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("term")[0].GetProperty("guid").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("info").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("contact")[0].GetProperty("contactType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("assetType")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossaryType").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("glossary").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termStatus").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("termTemplate")[0].ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("longDescription").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
