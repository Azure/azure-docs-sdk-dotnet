<Type Name="Glossary" FullName="Azure.Analytics.Purview.DataMap.Glossary">
  <TypeSignature Language="C#" Value="public class Glossary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Glossary extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Analytics.Purview.DataMap.Glossary" />
  <TypeSignature Language="VB.NET" Value="Public Class Glossary" />
  <TypeSignature Language="F#" Value="type Glossary = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Glossary sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Glossary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of Glossary for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignTermToEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AssignTermToEntities (string termId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AssignTermToEntities(string termId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.AssignTermToEntities(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssignTermToEntities (termId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AssignTermToEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AssignTermToEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.AssignTermToEntities (termId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
             [Protocol Method] Assign the given term to the provided list of related objects. Recommend using
             small batches with multiple API calls.
            
             [Entities Create Or Update
             operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
             is an alternative to assign a term to multiple entities.
             <list type="bullet"><item><description>
             This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
             </description></item><item><description>
             Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.AssignTermToEntities(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
             </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AssignTermToEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "ab9f1920-0b94-436d-aeb4-11a32c270fc0",
        relationshipAttributes = new
        {
            attributes = new
            {
                expression = "Example Expression",
                confidence = 100,
                description = "Example Description",
                source = "ExampleSource",
            },
        },
    }
});
Response response = client.AssignTermToEntities("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AssignTermToEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AssignTermToEntities (string termId, System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AssignTermToEntities(string termId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.AssignTermToEntities(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssignTermToEntities (termId As String, body As IEnumerable(Of AtlasRelatedObjectId), Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AssignTermToEntities : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.AssignTermToEntities : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="glossary.AssignTermToEntities (termId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body"> An array of related object IDs to which the term has to be associated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Assign the given term to the provided list of related objects. Recommend using
             small batches with multiple API calls.
            
             [Entities Create Or Update
             operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
             is an alternative to assign a term to multiple entities.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AssignTermToEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.AssignTermToEntities("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "ab9f1920-0b94-436d-aeb4-11a32c270fc0",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["expression"] = BinaryData.FromObjectAsJson("Example Expression"),
                ["confidence"] = BinaryData.FromObjectAsJson(100),
                ["description"] = BinaryData.FromObjectAsJson("Example Description"),
                ["source"] = BinaryData.FromObjectAsJson("ExampleSource")
            },
        },
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AssignTermToEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AssignTermToEntitiesAsync (string termId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AssignTermToEntitiesAsync(string termId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.AssignTermToEntitiesAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssignTermToEntitiesAsync (termId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AssignTermToEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AssignTermToEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.AssignTermToEntitiesAsync (termId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
             [Protocol Method] Assign the given term to the provided list of related objects. Recommend using
             small batches with multiple API calls.
            
             [Entities Create Or Update
             operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
             is an alternative to assign a term to multiple entities.
             <list type="bullet"><item><description>
             This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
             </description></item><item><description>
             Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.AssignTermToEntitiesAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
             </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AssignTermToEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "ab9f1920-0b94-436d-aeb4-11a32c270fc0",
        relationshipAttributes = new
        {
            attributes = new
            {
                expression = "Example Expression",
                confidence = 100,
                description = "Example Description",
                source = "ExampleSource",
            },
        },
    }
});
Response response = await client.AssignTermToEntitiesAsync("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AssignTermToEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AssignTermToEntitiesAsync (string termId, System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AssignTermToEntitiesAsync(string termId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.AssignTermToEntitiesAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AssignTermToEntitiesAsync (termId As String, body As IEnumerable(Of AtlasRelatedObjectId), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AssignTermToEntitiesAsync : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AssignTermToEntitiesAsync : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.AssignTermToEntitiesAsync (termId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body"> An array of related object IDs to which the term has to be associated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Assign the given term to the provided list of related objects. Recommend using
             small batches with multiple API calls.
            
             [Entities Create Or Update
             operation](https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP)
             is an alternative to assign a term to multiple entities.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AssignTermToEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.AssignTermToEntitiesAsync("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "ab9f1920-0b94-436d-aeb4-11a32c270fc0",
        RelationshipAttributes = new AtlasStruct
        {
            Attributes =
            {
                ["expression"] = BinaryData.FromObjectAsJson("Example Expression"),
                ["confidence"] = BinaryData.FromObjectAsJson(100),
                ["description"] = BinaryData.FromObjectAsJson("Example Description"),
                ["source"] = BinaryData.FromObjectAsJson("ExampleSource")
            },
        },
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="BatchGet">
      <MemberSignature Language="C#" Value="public virtual Azure.Response BatchGet (int? limit, int? offset, string sort, bool? ignoreTermsAndCategories, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response BatchGet(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.BatchGet(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchGet (limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, ignoreTermsAndCategories As Nullable(Of Boolean), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member BatchGet : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.BatchGet : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.BatchGet (limit, offset, sort, ignoreTermsAndCategories, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all glossaries. Recommend using limit/offset to get pagination result.
            Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
            separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
            and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.BatchGet(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call BatchGet and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.BatchGet(null, null, "ASC", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="BatchGet">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; BatchGet (int? limit = default, int? offset = default, string sort = default, bool? ignoreTermsAndCategories = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; BatchGet(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.BatchGet(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchGet (Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasGlossary))" />
      <MemberSignature Language="F#" Value="abstract member BatchGet : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&#xA;override this.BatchGet : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;" Usage="glossary.BatchGet (limit, offset, sort, ignoreTermsAndCategories, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all glossaries. Recommend using limit/offset to get pagination result.
            Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
            separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
            and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call BatchGet.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossary>> response = client.BatchGet();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="BatchGetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; BatchGetAsync (int? limit, int? offset, string sort, bool? ignoreTermsAndCategories, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; BatchGetAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.BatchGetAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchGetAsync (limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, ignoreTermsAndCategories As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member BatchGetAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.BatchGetAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.BatchGetAsync (limit, offset, sort, ignoreTermsAndCategories, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all glossaries. Recommend using limit/offset to get pagination result.
            Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
            separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
            and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.BatchGetAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call BatchGetAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.BatchGetAsync(null, null, "ASC", null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="BatchGetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&gt; BatchGetAsync (int? limit = default, int? offset = default, string sort = default, bool? ignoreTermsAndCategories = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&gt; BatchGetAsync(valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.BatchGetAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BatchGetAsync (Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasGlossary)))" />
      <MemberSignature Language="F#" Value="abstract member BatchGetAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&gt;&#xA;override this.BatchGetAsync : Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&gt;" Usage="glossary.BatchGetAsync (limit, offset, sort, ignoreTermsAndCategories, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all glossaries. Recommend using limit/offset to get pagination result.
            Recommend using 'ignoreTermsAndCategories=true' and fetch terms/categories
            separately using 'GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms'
            and 'GET '/datamap/api/atlas/v2/glossary/{glossaryId}/categories'.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call BatchGetAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossary>> response = await client.BatchGetAsync();
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; Create (Azure.Analytics.Purview.DataMap.AtlasGlossary body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; Create(class Azure.Analytics.Purview.DataMap.AtlasGlossary body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.Create(Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (body As AtlasGlossary, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossary)" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Analytics.Purview.DataMap.AtlasGlossary * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&#xA;override this.Create : Azure.Analytics.Purview.DataMap.AtlasGlossary * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;" Usage="glossary.Create (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossary" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a glossary. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call Create.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary body = new AtlasGlossary
{
    LongDescription = "Example Long Description",
    Name = "Glossary",
    ShortDescription = "Example Short Description",
    Language = "en",
    Usage = "Example Glossary",
};
Response<AtlasGlossary> response = client.Create(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Create (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Create(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.Create(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Create : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Create : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.Create (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.Create(Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Create and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    name = "Glossary",
    shortDescription = "Example Short Description",
    longDescription = "Example Long Description",
    language = "en",
    usage = "Example Glossary",
});
Response response = client.Create(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; CreateAsync (Azure.Analytics.Purview.DataMap.AtlasGlossary body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; CreateAsync(class Azure.Analytics.Purview.DataMap.AtlasGlossary body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateAsync(Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (body As AtlasGlossary, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossary))" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Analytics.Purview.DataMap.AtlasGlossary * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&#xA;override this.CreateAsync : Azure.Analytics.Purview.DataMap.AtlasGlossary * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;" Usage="glossary.CreateAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossary" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a glossary. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary body = new AtlasGlossary
{
    LongDescription = "Example Long Description",
    Name = "Glossary",
    ShortDescription = "Example Short Description",
    Language = "en",
    Usage = "Example Glossary",
};
Response<AtlasGlossary> response = await client.CreateAsync(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.CreateAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateAsync(Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    name = "Glossary",
    shortDescription = "Example Short Description",
    longDescription = "Example Long Description",
    language = "en",
    usage = "Example Glossary",
});
Response response = await client.CreateAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateCategories (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateCategories(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategories(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategories (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateCategories : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateCategories : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.CreateCategories (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary category in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategories(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        name = "ExampleCategory2",
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    },
    new
    {
        name = "ExampleCategory3",
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    }
});
Response response = client.CreateCategories(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; CreateCategories (System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; CreateCategories(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategories(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategories (body As IEnumerable(Of AtlasGlossaryCategory), Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasGlossaryCategory))" />
      <MemberSignature Language="F#" Value="abstract member CreateCategories : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&#xA;override this.CreateCategories : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;" Usage="glossary.CreateCategories (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> An array of glossary category definitions to be created. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create glossary category in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateCategories.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.CreateCategories(new AtlasGlossaryCategory[]
{
    new AtlasGlossaryCategory
    {
        Name = "ExampleCategory2",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    },
    new AtlasGlossaryCategory
    {
        Name = "ExampleCategory3",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateCategoriesAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateCategoriesAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategoriesAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategoriesAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateCategoriesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateCategoriesAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.CreateCategoriesAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary category in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategoriesAsync(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        name = "ExampleCategory2",
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    },
    new
    {
        name = "ExampleCategory3",
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    }
});
Response response = await client.CreateCategoriesAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt; CreateCategoriesAsync (System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt; CreateCategoriesAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategoriesAsync(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategoriesAsync (body As IEnumerable(Of AtlasGlossaryCategory), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasGlossaryCategory)))" />
      <MemberSignature Language="F#" Value="abstract member CreateCategoriesAsync : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt;&#xA;override this.CreateCategoriesAsync : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt;" Usage="glossary.CreateCategoriesAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> An array of glossary category definitions to be created. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create glossary category in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateCategoriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.CreateCategoriesAsync(new AtlasGlossaryCategory[]
{
    new AtlasGlossaryCategory
    {
        Name = "ExampleCategory2",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    },
    new AtlasGlossaryCategory
    {
        Name = "ExampleCategory3",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; CreateCategory (Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; CreateCategory(class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategory(Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategory (body As AtlasGlossaryCategory, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryCategory)" />
      <MemberSignature Language="F#" Value="abstract member CreateCategory : Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&#xA;override this.CreateCategory : Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;" Usage="glossary.CreateCategory (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a glossary category. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory body = new AtlasGlossaryCategory
{
    Name = "ExampleCategory1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    Terms = {new AtlasRelatedTermHeader
    {
        TermGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    }},
};
Response<AtlasGlossaryCategory> response = client.CreateCategory(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateCategory (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateCategory(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategory(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategory (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateCategory : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateCategory : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.CreateCategory (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategory(Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    name = "ExampleCategory1",
    terms = new object[]
    {
        new
        {
            termGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
        }
    },
});
Response response = client.CreateCategory(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; CreateCategoryAsync (Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; CreateCategoryAsync(class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategoryAsync(Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategoryAsync (body As AtlasGlossaryCategory, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryCategory))" />
      <MemberSignature Language="F#" Value="abstract member CreateCategoryAsync : Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&#xA;override this.CreateCategoryAsync : Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;" Usage="glossary.CreateCategoryAsync (body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a glossary category. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory body = new AtlasGlossaryCategory
{
    Name = "ExampleCategory1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    Terms = {new AtlasRelatedTermHeader
    {
        TermGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    }},
};
Response<AtlasGlossaryCategory> response = await client.CreateCategoryAsync(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateCategoryAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateCategoryAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategoryAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateCategoryAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateCategoryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateCategoryAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.CreateCategoryAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateCategoryAsync(Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    name = "ExampleCategory1",
    terms = new object[]
    {
        new
        {
            termGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
        }
    },
});
Response response = await client.CreateCategoryAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; CreateTerm (Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; CreateTerm(class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTerm(Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTerm (body As AtlasGlossaryTerm, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryTerm)" />
      <MemberSignature Language="F#" Value="abstract member CreateTerm : Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&#xA;override this.CreateTerm : Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;" Usage="glossary.CreateTerm (body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Body parameter. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a glossary term. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm body = new AtlasGlossaryTerm
{
    LongDescription = "Example Long Description",
    Name = "ExampleTerm1",
    ShortDescription = "Example Short Description",
    Abbreviation = "T1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    Status = TermStatus.Approved,
    Resources = {new ResourceLink
    {
        DisplayName = "Example Display Name",
        Url = "Example Url",
    }},
    Contacts =
    {
        ["Expert"] = new ContactInfo[]
        {
            new ContactInfo
            {
                Id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                Info = "Example Expert Info",
            }
        },
        ["Steward"] = new ContactInfo[]
        {
            new ContactInfo
            {
                Id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                Info = "Example Steward info",
            }
        }
    },
};
Response<AtlasGlossaryTerm> response = client.CreateTerm(body);
]]></code>
This sample shows how to call CreateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm body = new AtlasGlossaryTerm
{
    Name = "ExampleTerm",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    Attributes =
    {
        ["ExampleTermTemplateAttribute"] = new Dictionary<string, BinaryData>
        {
            ["plain string"] = BinaryData.FromObjectAsJson("Example String"),
            ["date"] = BinaryData.FromObjectAsJson(1606233600000L),
            ["single choice"] = BinaryData.FromObjectAsJson("Example Single Choice A"),
            ["multi choice"] = BinaryData.FromObjectAsJson(new object[]
            {
                "Example Multi Choice A",
                "Example Multi Choice B"
            })
        }
    },
};
Response<AtlasGlossaryTerm> response = client.CreateTerm(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTerm (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTerm(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTerm(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTerm (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTerm : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateTerm : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.CreateTerm (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTerm(Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    name = "ExampleTerm1",
    shortDescription = "Example Short Description",
    longDescription = "Example Long Description",
    abbreviation = "T1",
    status = "Approved",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    resources = new object[]
    {
        new
        {
            displayName = "Example Display Name",
            url = "Example Url",
        }
    },
    contacts = new
    {
        Expert = new object[]
        {
            new
            {
                id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                info = "Example Expert Info",
            }
        },
        Steward = new object[]
        {
            new
            {
                id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                info = "Example Steward info",
            }
        },
    },
});
Response response = client.CreateTerm(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    name = "ExampleTerm",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    attributes = new
    {
        ExampleTermTemplateAttribute = new Dictionary<string, object>
        {
            ["plain string"] = "Example String",
            ["date"] = 1606233600000L,
            ["single choice"] = "Example Single Choice A",
            ["multi choice"] = new object[]
            {
                "Example Multi Choice A",
                "Example Multi Choice B"
            }
        },
    },
});
Response response = client.CreateTerm(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; CreateTermAsync (Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; CreateTermAsync(class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTermAsync(Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTermAsync (body As AtlasGlossaryTerm, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryTerm))" />
      <MemberSignature Language="F#" Value="abstract member CreateTermAsync : Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&#xA;override this.CreateTermAsync : Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;" Usage="glossary.CreateTermAsync (body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> Body parameter. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create a glossary term. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm body = new AtlasGlossaryTerm
{
    LongDescription = "Example Long Description",
    Name = "ExampleTerm1",
    ShortDescription = "Example Short Description",
    Abbreviation = "T1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    Status = TermStatus.Approved,
    Resources = {new ResourceLink
    {
        DisplayName = "Example Display Name",
        Url = "Example Url",
    }},
    Contacts =
    {
        ["Expert"] = new ContactInfo[]
        {
            new ContactInfo
            {
                Id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                Info = "Example Expert Info",
            }
        },
        ["Steward"] = new ContactInfo[]
        {
            new ContactInfo
            {
                Id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                Info = "Example Steward info",
            }
        }
    },
};
Response<AtlasGlossaryTerm> response = await client.CreateTermAsync(body);
]]></code>
This sample shows how to call CreateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm body = new AtlasGlossaryTerm
{
    Name = "ExampleTerm",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    Attributes =
    {
        ["ExampleTermTemplateAttribute"] = new Dictionary<string, BinaryData>
        {
            ["plain string"] = BinaryData.FromObjectAsJson("Example String"),
            ["date"] = BinaryData.FromObjectAsJson(1606233600000L),
            ["single choice"] = BinaryData.FromObjectAsJson("Example Single Choice A"),
            ["multi choice"] = BinaryData.FromObjectAsJson(new object[]
            {
                "Example Multi Choice A",
                "Example Multi Choice B"
            })
        }
    },
};
Response<AtlasGlossaryTerm> response = await client.CreateTermAsync(body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTermAsync (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTermAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTermAsync(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTermAsync (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTermAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTermAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.CreateTermAsync (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTermAsync(Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    name = "ExampleTerm1",
    shortDescription = "Example Short Description",
    longDescription = "Example Long Description",
    abbreviation = "T1",
    status = "Approved",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    resources = new object[]
    {
        new
        {
            displayName = "Example Display Name",
            url = "Example Url",
        }
    },
    contacts = new
    {
        Expert = new object[]
        {
            new
            {
                id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                info = "Example Expert Info",
            }
        },
        Steward = new object[]
        {
            new
            {
                id = "30435ff9-9b96-44af-a5a9-e05c8b1ae2df",
                info = "Example Steward info",
            }
        },
    },
});
Response response = await client.CreateTermAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    name = "ExampleTerm",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    },
    attributes = new
    {
        ExampleTermTemplateAttribute = new Dictionary<string, object>
        {
            ["plain string"] = "Example String",
            ["date"] = 1606233600000L,
            ["single choice"] = "Example Single Choice A",
            ["multi choice"] = new object[]
            {
                "Example Multi Choice A",
                "Example Multi Choice B"
            }
        },
    },
});
Response response = await client.CreateTermAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateTerms (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateTerms(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTerms(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTerms (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateTerms : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateTerms : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.CreateTerms (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary terms in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTerms(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        name = "ExampleTerm2",
        status = "Approved",
        shortDescription = "Example Short Description",
        longDescription = "Example Long Description",
        abbreviation = "T2",
        resources = new object[]
        {
            new
            {
                displayName = "Example Display Name",
                url = "Example Url",
            }
        },
    },
    new
    {
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        name = "ExampleTerm3",
        status = "Approved",
        shortDescription = "Example Short Description",
        longDescription = "Example Long Description",
        abbreviation = "T3",
        resources = new object[]
        {
            new
            {
                displayName = "Example Display Name",
                url = "Example Url",
            }
        },
    }
});
Response response = client.CreateTerms(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; CreateTerms (System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; CreateTerms(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTerms(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTerms (body As IEnumerable(Of AtlasGlossaryTerm), Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasGlossaryTerm))" />
      <MemberSignature Language="F#" Value="abstract member CreateTerms : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&#xA;override this.CreateTerms : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;" Usage="glossary.CreateTerms (body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> An array of glossary term definitions to be created in bulk. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create glossary terms in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateTerms.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.CreateTerms(new AtlasGlossaryTerm[]
{
    new AtlasGlossaryTerm
    {
        LongDescription = "Example Long Description",
        Name = "ExampleTerm2",
        ShortDescription = "Example Short Description",
        Abbreviation = "T2",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        Status = TermStatus.Approved,
        Resources = {new ResourceLink
        {
            DisplayName = "Example Display Name",
            Url = "Example Url",
        }},
    },
    new AtlasGlossaryTerm
    {
        LongDescription = "Example Long Description",
        Name = "ExampleTerm3",
        ShortDescription = "Example Short Description",
        Abbreviation = "T3",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        Status = TermStatus.Approved,
        Resources = {new ResourceLink
        {
            DisplayName = "Example Display Name",
            Url = "Example Url",
        }},
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateTermsAsync (Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateTermsAsync(class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTermsAsync(Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTermsAsync (content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateTermsAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateTermsAsync : Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.CreateTermsAsync (content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create glossary terms in bulk.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTermsAsync(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        name = "ExampleTerm2",
        status = "Approved",
        shortDescription = "Example Short Description",
        longDescription = "Example Long Description",
        abbreviation = "T2",
        resources = new object[]
        {
            new
            {
                displayName = "Example Display Name",
                url = "Example Url",
            }
        },
    },
    new
    {
        anchor = new
        {
            glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        name = "ExampleTerm3",
        status = "Approved",
        shortDescription = "Example Short Description",
        longDescription = "Example Long Description",
        abbreviation = "T3",
        resources = new object[]
        {
            new
            {
                displayName = "Example Display Name",
                url = "Example Url",
            }
        },
    }
});
Response response = await client.CreateTermsAsync(content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt; CreateTermsAsync (System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt; CreateTermsAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.CreateTermsAsync(System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateTermsAsync (body As IEnumerable(Of AtlasGlossaryTerm), Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasGlossaryTerm)))" />
      <MemberSignature Language="F#" Value="abstract member CreateTermsAsync : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt;&#xA;override this.CreateTermsAsync : seq&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt;" Usage="glossary.CreateTermsAsync (body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="body"> An array of glossary term definitions to be created in bulk. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Create glossary terms in bulk. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="body" /> is null. </exception>
        <example>
This sample shows how to call CreateTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.CreateTermsAsync(new AtlasGlossaryTerm[]
{
    new AtlasGlossaryTerm
    {
        LongDescription = "Example Long Description",
        Name = "ExampleTerm2",
        ShortDescription = "Example Short Description",
        Abbreviation = "T2",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        Status = TermStatus.Approved,
        Resources = {new ResourceLink
        {
            DisplayName = "Example Display Name",
            Url = "Example Url",
        }},
    },
    new AtlasGlossaryTerm
    {
        LongDescription = "Example Long Description",
        Name = "ExampleTerm3",
        ShortDescription = "Example Short Description",
        Abbreviation = "T3",
        Anchor = new AtlasGlossaryHeader
        {
            GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        },
        Status = TermStatus.Approved,
        Resources = {new ResourceLink
        {
            DisplayName = "Example Display Name",
            Url = "Example Url",
        }},
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (string glossaryId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(string glossaryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.Delete(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (glossaryId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Delete : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.Delete (glossaryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary. Will delete underlying terms/categories together. Recommend
            separate delete terms and categories.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.Delete("c0c54153-13d1-1608-13af-43457cdffe75");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (string glossaryId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(string glossaryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (glossaryId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.DeleteAsync (glossaryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary. Will delete underlying terms/categories together. Recommend
            separate delete terms and categories.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteAsync("c0c54153-13d1-1608-13af-43457cdffe75");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteCategory (string categoryId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteCategory(string categoryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteCategory(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteCategory (categoryId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteCategory : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteCategory : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.DeleteCategory (categoryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteCategory("0e391355-252a-e5f3-ac18-5a3602df7616");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteCategoryAsync (string categoryId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteCategoryAsync(string categoryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteCategoryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteCategoryAsync (categoryId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.DeleteCategoryAsync (categoryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteCategoryAsync("0e391355-252a-e5f3-ac18-5a3602df7616");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTerm (string termId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTerm(string termId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTerm(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTerm (termId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTerm : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTerm : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.DeleteTerm (termId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteTerm("b0942506-2d7d-1f45-d286-c29ca9e7f2ef");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAssignmentFromEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTermAssignmentFromEntities (string termId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTermAssignmentFromEntities(string termId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAssignmentFromEntities(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAssignmentFromEntities (termId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAssignmentFromEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteTermAssignmentFromEntities : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.DeleteTermAssignmentFromEntities (termId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete the term assignment for the given list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAssignmentFromEntities(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "16feb2a1-2c79-ade1-338d-fb24fcb8b8bd",
        relationshipGuid = "624f08bb-3c93-4f03-9ce1-ed2ce2c7c8d5",
    }
});
Response response = client.DeleteTermAssignmentFromEntities("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAssignmentFromEntities">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteTermAssignmentFromEntities (string termId, System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteTermAssignmentFromEntities(string termId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAssignmentFromEntities(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAssignmentFromEntities (termId As String, body As IEnumerable(Of AtlasRelatedObjectId), Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAssignmentFromEntities : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteTermAssignmentFromEntities : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; Azure.Response" Usage="glossary.DeleteTermAssignmentFromEntities (termId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body"> An array of related object IDs from which the term has to be dissociated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delete the term assignment for the given list of related objects. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DeleteTermAssignmentFromEntities.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.DeleteTermAssignmentFromEntities("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "16feb2a1-2c79-ade1-338d-fb24fcb8b8bd",
        RelationshipGuid = Guid.Parse("624f08bb-3c93-4f03-9ce1-ed2ce2c7c8d5"),
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAssignmentFromEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTermAssignmentFromEntitiesAsync (string termId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTermAssignmentFromEntitiesAsync(string termId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAssignmentFromEntitiesAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAssignmentFromEntitiesAsync (termId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAssignmentFromEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTermAssignmentFromEntitiesAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.DeleteTermAssignmentFromEntitiesAsync (termId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete the term assignment for the given list of related objects.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAssignmentFromEntitiesAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new object[]
{
    new
    {
        guid = "16feb2a1-2c79-ade1-338d-fb24fcb8b8bd",
        relationshipGuid = "624f08bb-3c93-4f03-9ce1-ed2ce2c7c8d5",
    }
});
Response response = await client.DeleteTermAssignmentFromEntitiesAsync("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAssignmentFromEntitiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTermAssignmentFromEntitiesAsync (string termId, System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTermAssignmentFromEntitiesAsync(string termId, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAssignmentFromEntitiesAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAssignmentFromEntitiesAsync (termId As String, body As IEnumerable(Of AtlasRelatedObjectId), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAssignmentFromEntitiesAsync : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTermAssignmentFromEntitiesAsync : string * seq&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.DeleteTermAssignmentFromEntitiesAsync (termId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IEnumerable&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body"> An array of related object IDs from which the term has to be dissociated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Delete the term assignment for the given list of related objects. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DeleteTermAssignmentFromEntitiesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteTermAssignmentFromEntitiesAsync("8a7f65ec-6429-0b9b-3734-ec57bf1e34c2", new AtlasRelatedObjectId[]
{
    new AtlasRelatedObjectId
    {
        Guid = "16feb2a1-2c79-ade1-338d-fb24fcb8b8bd",
        RelationshipGuid = Guid.Parse("624f08bb-3c93-4f03-9ce1-ed2ce2c7c8d5"),
    }
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteTermAsync (string termId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteTermAsync(string termId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.DeleteTermAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteTermAsync (termId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTermAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteTermAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.DeleteTermAsync (termId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a glossary term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.DeleteTermAsync("b0942506-2d7d-1f45-d286-c29ca9e7f2ef");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCategories (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCategories(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategories (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetCategories (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the categories belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategories("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; GetCategories (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; GetCategories(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategories (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasGlossaryCategory))" />
      <MemberSignature Language="F#" Value="abstract member GetCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&#xA;override this.GetCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;" Usage="glossary.GetCategories (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the categories belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategories.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = client.GetCategories("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCategoriesAsync (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCategoriesAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoriesAsync (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetCategoriesAsync (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the categories belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoriesAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt; GetCategoriesAsync (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt; GetCategoriesAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoriesAsync (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasGlossaryCategory)))" />
      <MemberSignature Language="F#" Value="abstract member GetCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt;&#xA;override this.GetCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt;" Usage="glossary.GetCategoriesAsync (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the categories belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategoriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryCategory>> response = await client.GetCategoriesAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoriesHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCategoriesHeaders (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCategoriesHeaders(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoriesHeaders (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCategoriesHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCategoriesHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetCategoriesHeaders (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the category headers belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoriesHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategoriesHeaders("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoriesHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt; GetCategoriesHeaders (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt; GetCategoriesHeaders(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoriesHeaders (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasRelatedCategoryHeader))" />
      <MemberSignature Language="F#" Value="abstract member GetCategoriesHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&#xA;override this.GetCategoriesHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;" Usage="glossary.GetCategoriesHeaders (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the category headers belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategoriesHeaders.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = client.GetCategoriesHeaders("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoriesHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCategoriesHeadersAsync (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCategoriesHeadersAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoriesHeadersAsync (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCategoriesHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCategoriesHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetCategoriesHeadersAsync (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get the category headers belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoriesHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoriesHeadersAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoriesHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt; GetCategoriesHeadersAsync (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt; GetCategoriesHeadersAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoriesHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoriesHeadersAsync (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasRelatedCategoryHeader)))" />
      <MemberSignature Language="F#" Value="abstract member GetCategoriesHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&#xA;override this.GetCategoriesHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;" Usage="glossary.GetCategoriesHeadersAsync (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the category headers belonging to a specific glossary. Recommend using
            limit/offset to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategoriesHeadersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedCategoryHeader>> response = await client.GetCategoriesHeadersAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCategory (string categoryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCategory(string categoryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategory(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategory (categoryId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCategory : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCategory : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetCategory (categoryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get specific glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategory(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategory("ed7458f0-9463-48a5-b5c6-4f785fb34e12", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; GetCategory (string categoryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; GetCategory(string categoryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategory(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategory (categoryId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryCategory)" />
      <MemberSignature Language="F#" Value="abstract member GetCategory : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&#xA;override this.GetCategory : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;" Usage="glossary.GetCategory (categoryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get specific glossary category by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = client.GetCategory("ed7458f0-9463-48a5-b5c6-4f785fb34e12");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCategoryAsync (string categoryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCategoryAsync(string categoryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryAsync (categoryId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCategoryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetCategoryAsync (categoryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get specific glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoryAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; GetCategoryAsync (string categoryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; GetCategoryAsync(string categoryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryAsync (categoryId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryCategory))" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&#xA;override this.GetCategoryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;" Usage="glossary.GetCategoryAsync (categoryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get specific glossary category by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = await client.GetCategoryAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetCategoryTerms (string categoryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetCategoryTerms(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTerms (categoryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetCategoryTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetCategoryTerms (categoryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all terms associated with the specific category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoryTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetCategoryTerms("ed7458f0-9463-48a5-b5c6-4f785fb34e12", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt; GetCategoryTerms (string categoryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt; GetCategoryTerms(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTerms (categoryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasRelatedTermHeader))" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&#xA;override this.GetCategoryTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;" Usage="glossary.GetCategoryTerms (categoryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get all terms associated with the specific category. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategoryTerms.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetCategoryTerms("ed7458f0-9463-48a5-b5c6-4f785fb34e12");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetCategoryTermsAsync (string categoryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetCategoryTermsAsync(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTermsAsync (categoryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetCategoryTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetCategoryTermsAsync (categoryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all terms associated with the specific category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetCategoryTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetCategoryTermsAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetCategoryTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt; GetCategoryTermsAsync (string categoryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt; GetCategoryTermsAsync(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetCategoryTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCategoryTermsAsync (categoryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasRelatedTermHeader)))" />
      <MemberSignature Language="F#" Value="abstract member GetCategoryTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&#xA;override this.GetCategoryTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;" Usage="glossary.GetCategoryTermsAsync (categoryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get all terms associated with the specific category. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetCategoryTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetCategoryTermsAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDetailed">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDetailed (string glossaryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDetailed(string glossaryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetDetailed(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailed (glossaryId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDetailed : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDetailed : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetDetailed (glossaryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
             [Protocol Method] Get a specific glossary with detailed information. This API is not
             recommend.
            
             Recommend to fetch terms/categories details separately using
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms and
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/categories.
             <list type="bullet"><item><description>
             This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
             </description></item><item><description>
             Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetDetailed(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
             </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDetailed and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetDetailed("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDetailed">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt; GetDetailed (string glossaryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt; GetDetailed(string glossaryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetDetailed(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailed (glossaryId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryExtInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetDetailed : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;&#xA;override this.GetDetailed : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;" Usage="glossary.GetDetailed (glossaryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Get a specific glossary with detailed information. This API is not
             recommend.
            
             Recommend to fetch terms/categories details separately using
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms and
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/categories.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDetailed.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryExtInfo> response = client.GetDetailed("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDetailedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDetailedAsync (string glossaryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDetailedAsync(string glossaryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetDetailedAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailedAsync (glossaryId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDetailedAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDetailedAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetDetailedAsync (glossaryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
             [Protocol Method] Get a specific glossary with detailed information. This API is not
             recommend.
            
             Recommend to fetch terms/categories details separately using
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms and
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/categories.
             <list type="bullet"><item><description>
             This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
             </description></item><item><description>
             Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetDetailedAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
             </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetDetailedAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetDetailedAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetDetailedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;&gt; GetDetailedAsync (string glossaryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;&gt; GetDetailedAsync(string glossaryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetDetailedAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDetailedAsync (glossaryId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryExtInfo))" />
      <MemberSignature Language="F#" Value="abstract member GetDetailedAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;&gt;&#xA;override this.GetDetailedAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;&gt;" Usage="glossary.GetDetailedAsync (glossaryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryExtInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Get a specific glossary with detailed information. This API is not
             recommend.
            
             Recommend to fetch terms/categories details separately using
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/terms and
            
             GET /datamap/api/atlas/v2/glossary/{glossaryId}/categories.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetDetailedAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryExtInfo> response = await client.GetDetailedAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesAssignedWithTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetEntitiesAssignedWithTerm (string termId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetEntitiesAssignedWithTerm(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetEntitiesAssignedWithTerm(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTerm (termId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesAssignedWithTerm : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetEntitiesAssignedWithTerm : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetEntitiesAssignedWithTerm (termId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all related objects assigned with the specified term. Recommend using
            limit/offset to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetEntitiesAssignedWithTerm(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntitiesAssignedWithTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetEntitiesAssignedWithTerm("daf0ba4d-bc9a-4536-8a88-4b58e39dd3d4", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesAssignedWithTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt; GetEntitiesAssignedWithTerm (string termId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt; GetEntitiesAssignedWithTerm(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetEntitiesAssignedWithTerm(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTerm (termId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasRelatedObjectId))" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesAssignedWithTerm : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;&#xA;override this.GetEntitiesAssignedWithTerm : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;" Usage="glossary.GetEntitiesAssignedWithTerm (termId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all related objects assigned with the specified term. Recommend using
            limit/offset to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntitiesAssignedWithTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedObjectId>> response = client.GetEntitiesAssignedWithTerm("daf0ba4d-bc9a-4536-8a88-4b58e39dd3d4");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesAssignedWithTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetEntitiesAssignedWithTermAsync (string termId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetEntitiesAssignedWithTermAsync(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetEntitiesAssignedWithTermAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTermAsync (termId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesAssignedWithTermAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetEntitiesAssignedWithTermAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetEntitiesAssignedWithTermAsync (termId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] List all related objects assigned with the specified term. Recommend using
            limit/offset to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetEntitiesAssignedWithTermAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetEntitiesAssignedWithTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetEntitiesAssignedWithTermAsync("daf0ba4d-bc9a-4536-8a88-4b58e39dd3d4", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetEntitiesAssignedWithTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;&gt; GetEntitiesAssignedWithTermAsync (string termId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;&gt; GetEntitiesAssignedWithTermAsync(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetEntitiesAssignedWithTermAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntitiesAssignedWithTermAsync (termId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasRelatedObjectId)))" />
      <MemberSignature Language="F#" Value="abstract member GetEntitiesAssignedWithTermAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;&gt;&#xA;override this.GetEntitiesAssignedWithTermAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;&gt;" Usage="glossary.GetEntitiesAssignedWithTermAsync (termId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedObjectId&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List all related objects assigned with the specified term. Recommend using
            limit/offset to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetEntitiesAssignedWithTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedObjectId>> response = await client.GetEntitiesAssignedWithTermAsync("daf0ba4d-bc9a-4536-8a88-4b58e39dd3d4");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetGlossary (string glossaryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetGlossary(string glossaryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetGlossary(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossary (glossaryId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetGlossary : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetGlossary : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetGlossary (glossaryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific Glossary by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetGlossary(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossary and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetGlossary("47029611-67a1-42d5-8766-90eb904f7f22", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossary">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; GetGlossary (string glossaryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; GetGlossary(string glossaryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetGlossary(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossary (glossaryId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossary)" />
      <MemberSignature Language="F#" Value="abstract member GetGlossary : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&#xA;override this.GetGlossary : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;" Usage="glossary.GetGlossary (glossaryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get a specific Glossary by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetGlossary.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = client.GetGlossary("47029611-67a1-42d5-8766-90eb904f7f22");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetGlossaryAsync (string glossaryId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetGlossaryAsync(string glossaryId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetGlossaryAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryAsync (glossaryId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetGlossaryAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetGlossaryAsync (glossaryId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific Glossary by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetGlossaryAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetGlossaryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetGlossaryAsync("47029611-67a1-42d5-8766-90eb904f7f22", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetGlossaryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; GetGlossaryAsync (string glossaryId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; GetGlossaryAsync(string glossaryId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetGlossaryAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGlossaryAsync (glossaryId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossary))" />
      <MemberSignature Language="F#" Value="abstract member GetGlossaryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&#xA;override this.GetGlossaryAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;" Usage="glossary.GetGlossaryAsync (glossaryId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get a specific Glossary by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetGlossaryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = await client.GetGlossaryAsync("47029611-67a1-42d5-8766-90eb904f7f22");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelatedCategories (string categoryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelatedCategories(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategories (categoryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRelatedCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetRelatedCategories (categoryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related categories (parent and children). Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedCategories and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetRelatedCategories("ed7458f0-9463-48a5-b5c6-4f785fb34e12", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCategories">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt; GetRelatedCategories (string categoryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt; GetRelatedCategories(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedCategories(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategories (categoryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyDictionary(Of String, IList(Of AtlasRelatedCategoryHeader)))" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&#xA;override this.GetRelatedCategories : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;" Usage="glossary.GetRelatedCategories (categoryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all related categories (parent and children). Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetRelatedCategories.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = client.GetRelatedCategories("ed7458f0-9463-48a5-b5c6-4f785fb34e12");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelatedCategoriesAsync (string categoryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelatedCategoriesAsync(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategoriesAsync (categoryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelatedCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetRelatedCategoriesAsync (categoryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related categories (parent and children). Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedCategoriesAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetRelatedCategoriesAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&gt; GetRelatedCategoriesAsync (string categoryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&gt; GetRelatedCategoriesAsync(string categoryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedCategoriesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedCategoriesAsync (categoryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyDictionary(Of String, IList(Of AtlasRelatedCategoryHeader))))" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&gt;&#xA;override this.GetRelatedCategoriesAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&gt;" Usage="glossary.GetRelatedCategoriesAsync (categoryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedCategoryHeader&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all related categories (parent and children). Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetRelatedCategoriesAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedCategoryHeader>>> response = await client.GetRelatedCategoriesAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetRelatedTerms (string termId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetRelatedTerms(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTerms (termId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetRelatedTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetRelatedTerms (termId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related terms for a specific term by its GUID. Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetRelatedTerms("54688d39-b298-4104-9e80-f2a16f44aaea", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt; GetRelatedTerms (string termId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt; GetRelatedTerms(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTerms (termId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyDictionary(Of String, IList(Of AtlasRelatedTermHeader)))" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&#xA;override this.GetRelatedTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;" Usage="glossary.GetRelatedTerms (termId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all related terms for a specific term by its GUID. Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetRelatedTerms.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = client.GetRelatedTerms("54688d39-b298-4104-9e80-f2a16f44aaea");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetRelatedTermsAsync (string termId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetRelatedTermsAsync(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTermsAsync (termId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetRelatedTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetRelatedTermsAsync (termId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get all related terms for a specific term by its GUID. Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetRelatedTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetRelatedTermsAsync("54688d39-b298-4104-9e80-f2a16f44aaea", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("<key>")[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetRelatedTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&gt; GetRelatedTermsAsync (string termId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&gt; GetRelatedTermsAsync(string termId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetRelatedTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRelatedTermsAsync (termId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyDictionary(Of String, IList(Of AtlasRelatedTermHeader))))" />
      <MemberSignature Language="F#" Value="abstract member GetRelatedTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&gt;&#xA;override this.GetRelatedTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;string, System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&gt;" Usage="glossary.GetRelatedTermsAsync (termId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.Collections.Generic.IList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get all related terms for a specific term by its GUID. Limit, offset, and sort
            parameters are currently not being enabled and won't work even they are passed.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetRelatedTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyDictionary<string, IList<AtlasRelatedTermHeader>>> response = await client.GetRelatedTermsAsync("54688d39-b298-4104-9e80-f2a16f44aaea");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTerm (string termId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTerm(string termId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTerm(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTerm (termId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTerm : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTerm : string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetTerm (termId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetTerm(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTerm("54688d39-b298-4104-9e80-f2a16f44aaea", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTerm("54688d39-b298-4104-9e80-f2a16f44aaea", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; GetTerm (string termId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; GetTerm(string termId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTerm(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTerm (termId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryTerm)" />
      <MemberSignature Language="F#" Value="abstract member GetTerm : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&#xA;override this.GetTerm : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;" Usage="glossary.GetTerm (termId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get a specific glossary term by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = client.GetTerm("54688d39-b298-4104-9e80-f2a16f44aaea");
]]></code>
This sample shows how to call GetTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = client.GetTerm("54688d39-b298-4104-9e80-f2a16f44aaea");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermAsync (string termId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermAsync(string termId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermAsync (termId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetTermAsync (termId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get a specific glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; GetTermAsync (string termId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; GetTermAsync(string termId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermAsync (termId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryTerm))" />
      <MemberSignature Language="F#" Value="abstract member GetTermAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&#xA;override this.GetTermAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;" Usage="glossary.GetTermAsync (termId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Get a specific glossary term by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = await client.GetTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea");
]]></code>
This sample shows how to call GetTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = await client.GetTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTermHeaders (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTermHeaders(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermHeaders (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTermHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTermHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetTermHeaders (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get term headers belonging to a specific glossary. Recommend using limit/offset
            to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTermHeaders and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTermHeaders("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermHeaders">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt; GetTermHeaders (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt; GetTermHeaders(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermHeaders(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermHeaders (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasRelatedTermHeader))" />
      <MemberSignature Language="F#" Value="abstract member GetTermHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&#xA;override this.GetTermHeaders : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;" Usage="glossary.GetTermHeaders (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get term headers belonging to a specific glossary. Recommend using limit/offset
            to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTermHeaders.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = client.GetTermHeaders("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermHeadersAsync (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermHeadersAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermHeadersAsync (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetTermHeadersAsync (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get term headers belonging to a specific glossary. Recommend using limit/offset
            to get pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTermHeadersAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermHeadersAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermHeadersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt; GetTermHeadersAsync (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt; GetTermHeadersAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermHeadersAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermHeadersAsync (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasRelatedTermHeader)))" />
      <MemberSignature Language="F#" Value="abstract member GetTermHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;&#xA;override this.GetTermHeadersAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;" Usage="glossary.GetTermHeadersAsync (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasRelatedTermHeader&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get term headers belonging to a specific glossary. Recommend using limit/offset
            to get pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTermHeadersAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasRelatedTermHeader>> response = await client.GetTermHeadersAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetTerms (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetTerms(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTerms (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.GetTerms (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get terms belonging to a specific glossary. Recommend using limit/offset to get
            pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTerms and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = client.GetTerms("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTerms">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; GetTerms (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; GetTerms(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTerms(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTerms (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IReadOnlyList(Of AtlasGlossaryTerm))" />
      <MemberSignature Language="F#" Value="abstract member GetTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&#xA;override this.GetTerms : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;" Usage="glossary.GetTerms (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get terms belonging to a specific glossary. Recommend using limit/offset to get
            pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTerms.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = client.GetTerms("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetTermsAsync (string glossaryId, int? limit, int? offset, string sort, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetTermsAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermsAsync (glossaryId As String, limit As Nullable(Of Integer), offset As Nullable(Of Integer), sort As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.GetTermsAsync (glossaryId, limit, offset, sort, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get terms belonging to a specific glossary. Recommend using limit/offset to get
            pagination result.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetTermsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response response = await client.GetTermsAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", null, null, "ASC", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result[0].ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTermsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt; GetTermsAsync (string glossaryId, int? limit = default, int? offset = default, string sort = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt; GetTermsAsync(string glossaryId, valuetype System.Nullable`1&lt;int32&gt; limit, valuetype System.Nullable`1&lt;int32&gt; offset, string sort, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.GetTermsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTermsAsync (glossaryId As String, Optional limit As Nullable(Of Integer) = Nothing, Optional offset As Nullable(Of Integer) = Nothing, Optional sort As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of AtlasGlossaryTerm)))" />
      <MemberSignature Language="F#" Value="abstract member GetTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt;&#xA;override this.GetTermsAsync : string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt;" Usage="glossary.GetTermsAsync (glossaryId, limit, offset, sort, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Collections.Generic.IReadOnlyList&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="limit" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="offset" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="limit"> The page size - by default there is no paging. </param>
        <param name="offset"> The offset for pagination purpose. </param>
        <param name="sort"> The sort order, ASC (default) or DESC. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get terms belonging to a specific glossary. Recommend using limit/offset to get
            pagination result.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetTermsAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<IReadOnlyList<AtlasGlossaryTerm>> response = await client.GetTermsAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdate (string glossaryId, Azure.Core.RequestContent content, bool? ignoreTermsAndCategories = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdate(string glossaryId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdate(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdate (glossaryId As String, content As RequestContent, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdate : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdate : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.PartialUpdate (glossaryId, content, ignoreTermsAndCategories, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
             [Protocol Method] Update the glossary partially. Some properties such as qualifiedName are not
             allowed to be updated.
            
             So far we only supports partial updating
             shortDescription, longDescription, language and usage for glossary.
            
             Recommend
             using 'ignoreTermsAndCategories=true' to reduce response body size.
             <list type="bullet"><item><description>
             This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
             </description></item><item><description>
             Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdate(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
             </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    longDescription = "Example Long Description",
});
Response response = client.PartialUpdate("c018ddaf-7c21-4b37-a838-dae5f110c3d8", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; PartialUpdate (string glossaryId, System.Collections.Generic.IDictionary&lt;string,string&gt; body, bool? ignoreTermsAndCategories = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; PartialUpdate(string glossaryId, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; body, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdate(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdate (glossaryId As String, body As IDictionary(Of String, String), Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossary)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdate : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&#xA;override this.PartialUpdate : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;" Usage="glossary.PartialUpdate (glossaryId, body, ignoreTermsAndCategories, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="body">
             A map containing keys as attribute names and values as corresponding attribute
             values.
             </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Update the glossary partially. Some properties such as qualifiedName are not
             allowed to be updated.
            
             So far we only supports partial updating
             shortDescription, longDescription, language and usage for glossary.
            
             Recommend
             using 'ignoreTermsAndCategories=true' to reduce response body size.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call PartialUpdate.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = client.PartialUpdate("c018ddaf-7c21-4b37-a838-dae5f110c3d8", new Dictionary<string, string>
{
    ["longDescription"] = "Example Long Description"
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateAsync (string glossaryId, Azure.Core.RequestContent content, bool? ignoreTermsAndCategories = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateAsync(string glossaryId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateAsync (glossaryId As String, content As RequestContent, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.PartialUpdateAsync (glossaryId, content, ignoreTermsAndCategories, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
             [Protocol Method] Update the glossary partially. Some properties such as qualifiedName are not
             allowed to be updated.
            
             So far we only supports partial updating
             shortDescription, longDescription, language and usage for glossary.
            
             Recommend
             using 'ignoreTermsAndCategories=true' to reduce response body size.
             <list type="bullet"><item><description>
             This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
             </description></item><item><description>
             Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
             </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    longDescription = "Example Long Description",
});
Response response = await client.PartialUpdateAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; PartialUpdateAsync (string glossaryId, System.Collections.Generic.IDictionary&lt;string,string&gt; body, bool? ignoreTermsAndCategories = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; PartialUpdateAsync(string glossaryId, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; body, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateAsync (glossaryId As String, body As IDictionary(Of String, String), Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossary))" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateAsync : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&#xA;override this.PartialUpdateAsync : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;" Usage="glossary.PartialUpdateAsync (glossaryId, body, ignoreTermsAndCategories, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="body">
             A map containing keys as attribute names and values as corresponding attribute
             values.
             </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             Update the glossary partially. Some properties such as qualifiedName are not
             allowed to be updated.
            
             So far we only supports partial updating
             shortDescription, longDescription, language and usage for glossary.
            
             Recommend
             using 'ignoreTermsAndCategories=true' to reduce response body size.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call PartialUpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossary> response = await client.PartialUpdateAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", new Dictionary<string, string>
{
    ["longDescription"] = "Example Long Description"
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateCategory (string categoryId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateCategory(string categoryId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateCategory(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateCategory (categoryId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.PartialUpdateCategory (categoryId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary category partially. So far we only supports partial
            updating shortDescription and longDescription for category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateCategory(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    longDescription = "Example Long Description",
});
Response response = client.PartialUpdateCategory("3243ea0a-9492-47e1-392e-a84e64980af9", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; PartialUpdateCategory (string categoryId, System.Collections.Generic.IDictionary&lt;string,string&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; PartialUpdateCategory(string categoryId, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateCategory(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateCategory (categoryId As String, body As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryCategory)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateCategory : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&#xA;override this.PartialUpdateCategory : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;" Usage="glossary.PartialUpdateCategory (categoryId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="body">
            A map containing keys as attribute names and values as corresponding attribute
            values for partial update.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update the glossary category partially. So far we only supports partial
            updating shortDescription and longDescription for category.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call PartialUpdateCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = client.PartialUpdateCategory("3243ea0a-9492-47e1-392e-a84e64980af9", new Dictionary<string, string>
{
    ["longDescription"] = "Example Long Description"
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateCategoryAsync (string categoryId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateCategoryAsync(string categoryId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateCategoryAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateCategoryAsync (categoryId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.PartialUpdateCategoryAsync (categoryId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary category partially. So far we only supports partial
            updating shortDescription and longDescription for category.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateCategoryAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    longDescription = "Example Long Description",
});
Response response = await client.PartialUpdateCategoryAsync("3243ea0a-9492-47e1-392e-a84e64980af9", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; PartialUpdateCategoryAsync (string categoryId, System.Collections.Generic.IDictionary&lt;string,string&gt; body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; PartialUpdateCategoryAsync(string categoryId, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateCategoryAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateCategoryAsync (categoryId As String, body As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryCategory))" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateCategoryAsync : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&#xA;override this.PartialUpdateCategoryAsync : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;" Usage="glossary.PartialUpdateCategoryAsync (categoryId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="body">
            A map containing keys as attribute names and values as corresponding attribute
            values for partial update.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update the glossary category partially. So far we only supports partial
            updating shortDescription and longDescription for category.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call PartialUpdateCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryCategory> response = await client.PartialUpdateCategoryAsync("3243ea0a-9492-47e1-392e-a84e64980af9", new Dictionary<string, string>
{
    ["longDescription"] = "Example Long Description"
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response PartialUpdateTerm (string termId, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response PartialUpdateTerm(string termId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateTerm(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateTerm (termId As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.PartialUpdateTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.PartialUpdateTerm (termId, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary term partially. So far we only supports partial updating
            shortDescription, longDescription, abbreviation, usage and status for term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateTerm(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    longDescription = "Example Long Description",
});
Response response = client.PartialUpdateTerm("54688d39-b298-4104-9e80-f2a16f44aaea", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; PartialUpdateTerm (string termId, System.Collections.Generic.IDictionary&lt;string,string&gt; body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; PartialUpdateTerm(string termId, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateTerm(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateTerm (termId As String, body As IDictionary(Of String, String), Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryTerm)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateTerm : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&#xA;override this.PartialUpdateTerm : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;" Usage="glossary.PartialUpdateTerm (termId, body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body">
            A map containing keys as attribute names and values as corresponding attribute
            values to be updated.
            </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update the glossary term partially. So far we only supports partial updating
            shortDescription, longDescription, abbreviation, usage and status for term.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call PartialUpdateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = client.PartialUpdateTerm("54688d39-b298-4104-9e80-f2a16f44aaea", new Dictionary<string, string>
{
    ["longDescription"] = "Example Long Description"
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; PartialUpdateTermAsync (string termId, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; PartialUpdateTermAsync(string termId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateTermAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateTermAsync (termId As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.PartialUpdateTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.PartialUpdateTermAsync (termId, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the glossary term partially. So far we only supports partial updating
            shortDescription, longDescription, abbreviation, usage and status for term.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateTermAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call PartialUpdateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    longDescription = "Example Long Description",
});
Response response = await client.PartialUpdateTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="PartialUpdateTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; PartialUpdateTermAsync (string termId, System.Collections.Generic.IDictionary&lt;string,string&gt; body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; PartialUpdateTermAsync(string termId, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.PartialUpdateTermAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartialUpdateTermAsync (termId As String, body As IDictionary(Of String, String), Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryTerm))" />
      <MemberSignature Language="F#" Value="abstract member PartialUpdateTermAsync : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&#xA;override this.PartialUpdateTermAsync : string * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;" Usage="glossary.PartialUpdateTermAsync (termId, body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body">
            A map containing keys as attribute names and values as corresponding attribute
            values to be updated.
            </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update the glossary term partially. So far we only supports partial updating
            shortDescription, longDescription, abbreviation, usage and status for term.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call PartialUpdateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

Response<AtlasGlossaryTerm> response = await client.PartialUpdateTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea", new Dictionary<string, string>
{
    ["longDescription"] = "Example Long Description"
});
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Analytics.Purview.DataMap.Glossary.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Analytics.Purview.DataMap.Glossary.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; Update (string glossaryId, Azure.Analytics.Purview.DataMap.AtlasGlossary body, bool? ignoreTermsAndCategories = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt; Update(string glossaryId, class Azure.Analytics.Purview.DataMap.AtlasGlossary body, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.Update(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (glossaryId As String, body As AtlasGlossary, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossary)" />
      <MemberSignature Language="F#" Value="abstract member Update : string * Azure.Analytics.Purview.DataMap.AtlasGlossary * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&#xA;override this.Update : string * Azure.Analytics.Purview.DataMap.AtlasGlossary * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;" Usage="glossary.Update (glossaryId, body, ignoreTermsAndCategories, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossary" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="body"> Body parameter. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update the given glossary. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call Update.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary body = new AtlasGlossary
{
    Guid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    LongDescription = "Example Long Description",
    Name = "Glossary",
    QualifiedName = "Glossary",
    ShortDescription = "Example Short Description",
    LastModifiedTS = "1",
    Categories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
        DisplayText = "ExampleCategory3",
        ParentCategoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
        RelationGuid = "26a486a4-a8e2-483c-8a84-3b88e909f8d2",
    }, new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
        DisplayText = "ExampleCategory1",
        ParentCategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
        RelationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
    }, new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
        DisplayText = "ExampleCategory2",
        RelationGuid = "94071e56-fd3e-4441-93ff-1834f818482d",
    }},
    Language = "en",
    Terms = {new AtlasRelatedTermHeader
    {
        DisplayText = "ExampleTerm1",
        RelationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
        TermGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    }, new AtlasRelatedTermHeader
    {
        DisplayText = "ExampleTerm2",
        RelationGuid = "9385640b-e6be-437d-a6b9-62d11c14a189",
        TermGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
    }},
    Usage = "Example Glossary",
};
Response<AtlasGlossary> response = client.Update("c018ddaf-7c21-4b37-a838-dae5f110c3d8", body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Update (string glossaryId, Azure.Core.RequestContent content, bool? ignoreTermsAndCategories = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Update(string glossaryId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.Update(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (glossaryId As String, content As RequestContent, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Update : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Update : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.Update (glossaryId, content, ignoreTermsAndCategories, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.Update(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Update and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    qualifiedName = "Glossary",
    name = "Glossary",
    shortDescription = "Example Short Description",
    longDescription = "Example Long Description",
    lastModifiedTS = "1",
    language = "en",
    usage = "Example Glossary",
    terms = new object[]
    {
        new
        {
            termGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
            relationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
            displayText = "ExampleTerm1",
        },
        new
        {
            termGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
            relationGuid = "9385640b-e6be-437d-a6b9-62d11c14a189",
            displayText = "ExampleTerm2",
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
            parentCategoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
            relationGuid = "26a486a4-a8e2-483c-8a84-3b88e909f8d2",
            displayText = "ExampleCategory3",
        },
        new
        {
            categoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
            parentCategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
            relationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
            displayText = "ExampleCategory1",
        },
        new
        {
            categoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
            relationGuid = "94071e56-fd3e-4441-93ff-1834f818482d",
            displayText = "ExampleCategory2",
        }
    },
});
Response response = client.Update("c018ddaf-7c21-4b37-a838-dae5f110c3d8", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; UpdateAsync (string glossaryId, Azure.Analytics.Purview.DataMap.AtlasGlossary body, bool? ignoreTermsAndCategories = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt; UpdateAsync(string glossaryId, class Azure.Analytics.Purview.DataMap.AtlasGlossary body, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateAsync(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (glossaryId As String, body As AtlasGlossary, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossary))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : string * Azure.Analytics.Purview.DataMap.AtlasGlossary * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;&#xA;override this.UpdateAsync : string * Azure.Analytics.Purview.DataMap.AtlasGlossary * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;" Usage="glossary.UpdateAsync (glossaryId, body, ignoreTermsAndCategories, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossary" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="body"> Body parameter. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update the given glossary. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UpdateAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossary body = new AtlasGlossary
{
    Guid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    LongDescription = "Example Long Description",
    Name = "Glossary",
    QualifiedName = "Glossary",
    ShortDescription = "Example Short Description",
    LastModifiedTS = "1",
    Categories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
        DisplayText = "ExampleCategory3",
        ParentCategoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
        RelationGuid = "26a486a4-a8e2-483c-8a84-3b88e909f8d2",
    }, new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
        DisplayText = "ExampleCategory1",
        ParentCategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
        RelationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
    }, new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
        DisplayText = "ExampleCategory2",
        RelationGuid = "94071e56-fd3e-4441-93ff-1834f818482d",
    }},
    Language = "en",
    Terms = {new AtlasRelatedTermHeader
    {
        DisplayText = "ExampleTerm1",
        RelationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
        TermGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    }, new AtlasRelatedTermHeader
    {
        DisplayText = "ExampleTerm2",
        RelationGuid = "9385640b-e6be-437d-a6b9-62d11c14a189",
        TermGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
    }},
    Usage = "Example Glossary",
};
Response<AtlasGlossary> response = await client.UpdateAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateAsync (string glossaryId, Azure.Core.RequestContent content, bool? ignoreTermsAndCategories = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateAsync(string glossaryId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; ignoreTermsAndCategories, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (glossaryId As String, content As RequestContent, Optional ignoreTermsAndCategories As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.UpdateAsync (glossaryId, content, ignoreTermsAndCategories, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glossaryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="ignoreTermsAndCategories" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="glossaryId"> The globally unique identifier for glossary. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="ignoreTermsAndCategories"> Whether ignore terms and categories. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateAsync(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossary,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="glossaryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="glossaryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
    qualifiedName = "Glossary",
    name = "Glossary",
    shortDescription = "Example Short Description",
    longDescription = "Example Long Description",
    lastModifiedTS = "1",
    language = "en",
    usage = "Example Glossary",
    terms = new object[]
    {
        new
        {
            termGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
            relationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
            displayText = "ExampleTerm1",
        },
        new
        {
            termGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
            relationGuid = "9385640b-e6be-437d-a6b9-62d11c14a189",
            displayText = "ExampleTerm2",
        }
    },
    categories = new object[]
    {
        new
        {
            categoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
            parentCategoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
            relationGuid = "26a486a4-a8e2-483c-8a84-3b88e909f8d2",
            displayText = "ExampleCategory3",
        },
        new
        {
            categoryGuid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
            parentCategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
            relationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
            displayText = "ExampleCategory1",
        },
        new
        {
            categoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
            relationGuid = "94071e56-fd3e-4441-93ff-1834f818482d",
            displayText = "ExampleCategory2",
        }
    },
});
Response response = await client.UpdateAsync("c018ddaf-7c21-4b37-a838-dae5f110c3d8", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; UpdateCategory (string categoryId, Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt; UpdateCategory(string categoryId, class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateCategory(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateCategory (categoryId As String, body As AtlasGlossaryCategory, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryCategory)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCategory : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&#xA;override this.UpdateCategory : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;" Usage="glossary.UpdateCategory (categoryId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update the given glossary category by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UpdateCategory.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory body = new AtlasGlossaryCategory
{
    Guid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
    Name = "ExampleCategory1",
    QualifiedName = "ExampleCategory1@Glossary",
    LastModifiedTS = "1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        RelationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
    },
    ChildrenCategories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
    }},
    ParentCategory = new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
    },
    Terms = {new AtlasRelatedTermHeader
    {
        RelationGuid = "6aebf5ac-0c83-40c0-98bf-958fe9c99007",
        TermGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    }},
};
Response<AtlasGlossaryCategory> response = client.UpdateCategory("ed7458f0-9463-48a5-b5c6-4f785fb34e12", body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateCategory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateCategory (string categoryId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateCategory(string categoryId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateCategory(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateCategory (categoryId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateCategory : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.UpdateCategory (categoryId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateCategory(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateCategory and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
    qualifiedName = "ExampleCategory1@Glossary",
    name = "ExampleCategory1",
    lastModifiedTS = "1",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        relationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
    },
    terms = new object[]
    {
        new
        {
            termGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
            relationGuid = "6aebf5ac-0c83-40c0-98bf-958fe9c99007",
        }
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
        }
    },
    parentCategory = new
    {
        categoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
    },
});
Response response = client.UpdateCategory("ed7458f0-9463-48a5-b5c6-4f785fb34e12", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; UpdateCategoryAsync (string categoryId, Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt; UpdateCategoryAsync(string categoryId, class Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory body, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateCategoryAsync(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateCategoryAsync (categoryId As String, body As AtlasGlossaryCategory, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryCategory))" />
      <MemberSignature Language="F#" Value="abstract member UpdateCategoryAsync : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;&#xA;override this.UpdateCategoryAsync : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;" Usage="glossary.UpdateCategoryAsync (categoryId, body, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="body"> Body parameter. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update the given glossary category by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UpdateCategoryAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryCategory body = new AtlasGlossaryCategory
{
    Guid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
    Name = "ExampleCategory1",
    QualifiedName = "ExampleCategory1@Glossary",
    LastModifiedTS = "1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        RelationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
    },
    ChildrenCategories = {new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
    }},
    ParentCategory = new AtlasRelatedCategoryHeader
    {
        CategoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
    },
    Terms = {new AtlasRelatedTermHeader
    {
        RelationGuid = "6aebf5ac-0c83-40c0-98bf-958fe9c99007",
        TermGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    }},
};
Response<AtlasGlossaryCategory> response = await client.UpdateCategoryAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12", body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateCategoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateCategoryAsync (string categoryId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateCategoryAsync(string categoryId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateCategoryAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateCategoryAsync (categoryId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateCategoryAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.UpdateCategoryAsync (categoryId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categoryId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="categoryId"> The globally unique identifier of the category. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary category by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateCategoryAsync(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryCategory,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="categoryId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="categoryId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateCategoryAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "ed7458f0-9463-48a5-b5c6-4f785fb34e12",
    qualifiedName = "ExampleCategory1@Glossary",
    name = "ExampleCategory1",
    lastModifiedTS = "1",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        relationGuid = "7bdcef93-a57a-4d1d-95ab-9d3036f394a0",
    },
    terms = new object[]
    {
        new
        {
            termGuid = "54688d39-b298-4104-9e80-f2a16f44aaea",
            relationGuid = "6aebf5ac-0c83-40c0-98bf-958fe9c99007",
        }
    },
    childrenCategories = new object[]
    {
        new
        {
            categoryGuid = "0d6766f6-f4b6-435b-bda2-d3edc358998e",
        }
    },
    parentCategory = new
    {
        categoryGuid = "e47c4584-daca-4f9e-9092-194e04692c9a",
    },
});
Response response = await client.UpdateCategoryAsync("ed7458f0-9463-48a5-b5c6-4f785fb34e12", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; UpdateTerm (string termId, Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt; UpdateTerm(string termId, class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateTerm(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTerm (termId As String, body As AtlasGlossaryTerm, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AtlasGlossaryTerm)" />
      <MemberSignature Language="F#" Value="abstract member UpdateTerm : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&#xA;override this.UpdateTerm : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;" Usage="glossary.UpdateTerm (termId, body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body"> Body parameter. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update the given glossary term by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UpdateTerm.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm body = new AtlasGlossaryTerm
{
    Guid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    Name = "ExampleTerm1",
    QualifiedName = "ExampleTerm1@Glossary",
    ShortDescription = "Example Short Description",
    LastModifiedTS = "1",
    Abbreviation = "T1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        RelationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
    },
    Status = TermStatus.Approved,
    Resources = {new ResourceLink
    {
        DisplayName = "Example Display Name",
        Url = "Example Url",
    }},
    SeeAlso = {new AtlasRelatedTermHeader
    {
        TermGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
    }, new AtlasRelatedTermHeader
    {
        TermGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
    }},
    Synonyms = {new AtlasRelatedTermHeader
    {
        TermGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
    }, new AtlasRelatedTermHeader
    {
        TermGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
    }},
};
Response<AtlasGlossaryTerm> response = client.UpdateTerm("54688d39-b298-4104-9e80-f2a16f44aaea", body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateTerm">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateTerm (string termId, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateTerm(string termId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateTerm(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTerm (termId As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateTerm : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="glossary.UpdateTerm (termId, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateTerm(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateTerm and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    qualifiedName = "ExampleTerm1@Glossary",
    name = "ExampleTerm1",
    shortDescription = "Example Short Description",
    lastModifiedTS = "1",
    abbreviation = "T1",
    status = "Approved",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        relationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
    },
    resources = new object[]
    {
        new
        {
            displayName = "Example Display Name",
            url = "Example Url",
        }
    },
    seeAlso = new object[]
    {
        new
        {
            termGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
        },
        new
        {
            termGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
        }
    },
    synonyms = new object[]
    {
        new
        {
            termGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
        },
        new
        {
            termGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
        }
    },
});
Response response = client.UpdateTerm("54688d39-b298-4104-9e80-f2a16f44aaea", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; UpdateTermAsync (string termId, Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, bool? includeTermHierarchy = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt; UpdateTermAsync(string termId, class Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm body, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateTermAsync(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTermAsync (termId As String, body As AtlasGlossaryTerm, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AtlasGlossaryTerm))" />
      <MemberSignature Language="F#" Value="abstract member UpdateTermAsync : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;&#xA;override this.UpdateTermAsync : string * Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;" Usage="glossary.UpdateTermAsync (termId, body, includeTermHierarchy, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="body" Type="Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="body"> Body parameter. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update the given glossary term by its GUID. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="body" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UpdateTermAsync.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

AtlasGlossaryTerm body = new AtlasGlossaryTerm
{
    Guid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    Name = "ExampleTerm1",
    QualifiedName = "ExampleTerm1@Glossary",
    ShortDescription = "Example Short Description",
    LastModifiedTS = "1",
    Abbreviation = "T1",
    Anchor = new AtlasGlossaryHeader
    {
        GlossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        RelationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
    },
    Status = TermStatus.Approved,
    Resources = {new ResourceLink
    {
        DisplayName = "Example Display Name",
        Url = "Example Url",
    }},
    SeeAlso = {new AtlasRelatedTermHeader
    {
        TermGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
    }, new AtlasRelatedTermHeader
    {
        TermGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
    }},
    Synonyms = {new AtlasRelatedTermHeader
    {
        TermGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
    }, new AtlasRelatedTermHeader
    {
        TermGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
    }},
};
Response<AtlasGlossaryTerm> response = await client.UpdateTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea", body);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateTermAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateTermAsync (string termId, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateTermAsync(string termId, class Azure.Core.RequestContent content, valuetype System.Nullable`1&lt;bool&gt; includeTermHierarchy, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateTermAsync(System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateTermAsync (termId As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateTermAsync : string * Azure.Core.RequestContent * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="glossary.UpdateTermAsync (termId, content, includeTermHierarchy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Analytics.Purview.DataMap</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="termId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="includeTermHierarchy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="termId"> The globally unique identifier for glossary term. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="includeTermHierarchy"> Whether include term hierarchy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Update the given glossary term by its GUID.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Analytics.Purview.DataMap.Glossary.UpdateTermAsync(System.String,Azure.Analytics.Purview.DataMap.AtlasGlossaryTerm,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="termId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="termId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UpdateTermAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<endpoint>");
TokenCredential credential = new DefaultAzureCredential();
Glossary client = new DataMapClient(endpoint, credential).GetGlossaryClient();

using RequestContent content = RequestContent.Create(new
{
    guid = "54688d39-b298-4104-9e80-f2a16f44aaea",
    qualifiedName = "ExampleTerm1@Glossary",
    name = "ExampleTerm1",
    shortDescription = "Example Short Description",
    lastModifiedTS = "1",
    abbreviation = "T1",
    status = "Approved",
    anchor = new
    {
        glossaryGuid = "c018ddaf-7c21-4b37-a838-dae5f110c3d8",
        relationGuid = "7b6a8149-a928-476a-a068-dce58653cfa0",
    },
    resources = new object[]
    {
        new
        {
            displayName = "Example Display Name",
            url = "Example Url",
        }
    },
    seeAlso = new object[]
    {
        new
        {
            termGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
        },
        new
        {
            termGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
        }
    },
    synonyms = new object[]
    {
        new
        {
            termGuid = "952c7ba4-4c89-42d8-a05a-7d2161be7008",
        },
        new
        {
            termGuid = "821beef0-ced9-47ba-8f7f-c4f3459f4d18",
        }
    },
});
Response response = await client.UpdateTermAsync("54688d39-b298-4104-9e80-f2a16f44aaea", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
