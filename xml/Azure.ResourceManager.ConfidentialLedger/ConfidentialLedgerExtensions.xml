<Type Name="ConfidentialLedgerExtensions" FullName="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions">
  <TypeSignature Language="C#" Value="public static class ConfidentialLedgerExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ConfidentialLedgerExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ConfidentialLedgerExtensions" />
  <TypeSignature Language="F#" Value="type ConfidentialLedgerExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to Azure.ResourceManager.ConfidentialLedger. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckConfidentialLedgerNameAvailability">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt; CheckConfidentialLedgerNameAvailability (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt; CheckConfidentialLedgerNameAvailability(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckConfidentialLedgerNameAvailability(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckConfidentialLedgerNameAvailability (subscriptionResource As SubscriptionResource, content As ConfidentialLedgerNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfidentialLedgerNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="static member CheckConfidentialLedgerNameAvailability : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckConfidentialLedgerNameAvailability (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="content" Type="Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Name availability request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            To check whether a resource name is available.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/checkNameAvailability
            Operation Id: CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckConfidentialLedgerNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt; CheckConfidentialLedgerNameAvailabilityAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt; CheckConfidentialLedgerNameAvailabilityAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckConfidentialLedgerNameAvailabilityAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckConfidentialLedgerNameAvailabilityAsync (subscriptionResource As SubscriptionResource, content As ConfidentialLedgerNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfidentialLedgerNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="static member CheckConfidentialLedgerNameAvailabilityAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckConfidentialLedgerNameAvailabilityAsync (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" Index="0" FrameworkAlternate="azure-dotnet" RefType="this" />
        <Parameter Name="content" Type="Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Name availability request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            To check whether a resource name is available.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/checkNameAvailability
            Operation Id: CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckLedgerNameAvailability">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt; CheckLedgerNameAvailability (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt; CheckLedgerNameAvailability(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckLedgerNameAvailability(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckLedgerNameAvailability (subscriptionResource As SubscriptionResource, content As LedgerNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LedgerNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="static member CheckLedgerNameAvailability : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckLedgerNameAvailability (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Name availability request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            To check whether a resource name is available.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/checkNameAvailability
            Operation Id: CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckLedgerNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt;&gt; CheckLedgerNameAvailabilityAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt;&gt; CheckLedgerNameAvailabilityAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, class Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckLedgerNameAvailabilityAsync(Azure.ResourceManager.Resources.SubscriptionResource,Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CheckLedgerNameAvailabilityAsync (subscriptionResource As SubscriptionResource, content As LedgerNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LedgerNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="static member CheckLedgerNameAvailabilityAsync : Azure.ResourceManager.Resources.SubscriptionResource * Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt;&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.CheckLedgerNameAvailabilityAsync (subscriptionResource, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="content" Type="Azure.ResourceManager.ConfidentialLedger.Models.LedgerNameAvailabilityContent" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="content"> Name availability request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            To check whether a resource name is available.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/checkNameAvailability
            Operation Id: CheckNameAvailability
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedger">
      <MemberSignature Language="C#" Value="public static Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedger (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string ledgerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedger(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string ledgerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedger(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfidentialLedger (resourceGroupResource As ResourceGroupResource, ledgerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfidentialLedgerResource)" />
      <MemberSignature Language="F#" Value="static member GetConfidentialLedger : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedger (resourceGroupResource, ledgerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="ledgerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="ledgerName"> Name of the Confidential Ledger. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of a Confidential Ledger.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}
            Operation Id: Ledger_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgerAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt; GetConfidentialLedgerAsync (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string ledgerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt; GetConfidentialLedgerAsync(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource, string ledgerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgerAsync(Azure.ResourceManager.Resources.ResourceGroupResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfidentialLedgerAsync (resourceGroupResource As ResourceGroupResource, ledgerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfidentialLedgerResource))" />
      <MemberSignature Language="F#" Value="static member GetConfidentialLedgerAsync : Azure.ResourceManager.Resources.ResourceGroupResource * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgerAsync (resourceGroupResource, ledgerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
        <Parameter Name="ledgerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <param name="ledgerName"> Name of the Confidential Ledger. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of a Confidential Ledger.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}
            Operation Id: Ledger_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgerResource">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource GetConfidentialLedgerResource (this Azure.ResourceManager.ArmClient client, Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource GetConfidentialLedgerResource(class Azure.ResourceManager.ArmClient client, class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgerResource(Azure.ResourceManager.ArmClient,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfidentialLedgerResource (client As ArmClient, id As ResourceIdentifier) As ConfidentialLedgerResource" />
      <MemberSignature Language="F#" Value="static member GetConfidentialLedgerResource : Azure.ResourceManager.ArmClient * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgerResource (client, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="client" Type="Azure.ResourceManager.ArmClient" RefType="this" />
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="client"> The <see cref="T:Azure.ResourceManager.ArmClient" /> instance the method will execute against. </param>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgers">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection GetConfidentialLedgers (this Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection GetConfidentialLedgers(class Azure.ResourceManager.Resources.ResourceGroupResource resourceGroupResource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgers(Azure.ResourceManager.Resources.ResourceGroupResource)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfidentialLedgers (resourceGroupResource As ResourceGroupResource) As ConfidentialLedgerCollection" />
      <MemberSignature Language="F#" Value="static member GetConfidentialLedgers : Azure.ResourceManager.Resources.ResourceGroupResource -&gt; Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgers resourceGroupResource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceGroupResource" Type="Azure.ResourceManager.Resources.ResourceGroupResource" RefType="this" />
      </Parameters>
      <Docs>
        <param name="resourceGroupResource"> The <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> instance the method will execute against. </param>
        <summary> Gets a collection of ConfidentialLedgerResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of ConfidentialLedgerResources and their operations over a ConfidentialLedgerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgers">
      <MemberSignature Language="C#" Value="public static Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgers (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Pageable`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgers(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgers(Azure.ResourceManager.Resources.SubscriptionResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfidentialLedgers (subscriptionResource As SubscriptionResource, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ConfidentialLedgerResource)" />
      <MemberSignature Language="F#" Value="static member GetConfidentialLedgers : Azure.ResourceManager.Resources.SubscriptionResource * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgers (subscriptionResource, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of all Confidential Ledgers.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/ledgers
            Operation Id: Ledger_ListBySubscription
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgersAsync">
      <MemberSignature Language="C#" Value="public static Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgersAsync (this Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgersAsync(class Azure.ResourceManager.Resources.SubscriptionResource subscriptionResource, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgersAsync(Azure.ResourceManager.Resources.SubscriptionResource,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConfidentialLedgersAsync (subscriptionResource As SubscriptionResource, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ConfidentialLedgerResource)" />
      <MemberSignature Language="F#" Value="static member GetConfidentialLedgersAsync : Azure.ResourceManager.Resources.SubscriptionResource * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;" Usage="Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerExtensions.GetConfidentialLedgersAsync (subscriptionResource, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionResource" Type="Azure.ResourceManager.Resources.SubscriptionResource" RefType="this" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="subscriptionResource"> The <see cref="T:Azure.ResourceManager.Resources.SubscriptionResource" /> instance the method will execute against. </param>
        <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of all Confidential Ledgers.
            Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/ledgers
            Operation Id: Ledger_ListBySubscription
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
