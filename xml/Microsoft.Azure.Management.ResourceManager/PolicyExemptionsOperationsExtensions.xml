<Type Name="PolicyExemptionsOperationsExtensions" FullName="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions">
  <TypeSignature Language="C#" Value="public static class PolicyExemptionsOperationsExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PolicyExemptionsOperationsExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module PolicyExemptionsOperationsExtensions" />
  <TypeSignature Language="F#" Value="type PolicyExemptionsOperationsExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.17.1.0</AssemblyVersion>
    <AssemblyVersion>3.17.2.0</AssemblyVersion>
    <AssemblyVersion>3.17.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for PolicyExemptionsOperations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption CreateOrUpdate (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption CreateOrUpdate(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.CreateOrUpdate(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateOrUpdate (operations As IPolicyExemptionsOperations, scope As String, policyExemptionName As String, parameters As PolicyExemption) As PolicyExemption" />
      <MemberSignature Language="F#" Value="static member CreateOrUpdate : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption -&gt; Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.CreateOrUpdate (operations, scope, policyExemptionName, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="policyExemptionName" Type="System.String" />
        <Parameter Name="parameters" Type="Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="scope">
            The scope of the policy exemption. Valid scopes are: management group
            (format:
            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format: '/subscriptions/{subscriptionId}'), resource group
            (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            resource (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            </param>
        <param name="policyExemptionName">
            The name of the policy exemption to delete.
            </param>
        <param name="parameters">
            Parameters for the policy exemption.
            </param>
        <summary>
            Creates or updates a policy exemption.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation creates or updates a policy exemption with the given scope
            and name. Policy exemptions apply to all resources contained within their
            scope. For example, when you create a policy exemption at resource group
            scope for a policy assignment at the same or above level, the exemption
            exempts to all applicable resources in the resource group.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; CreateOrUpdateAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption parameters, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; CreateOrUpdateAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.CreateOrUpdateAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateOrUpdateAsync (operations As IPolicyExemptionsOperations, scope As String, policyExemptionName As String, parameters As PolicyExemption, Optional cancellationToken As CancellationToken = Nothing) As Task(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member CreateOrUpdateAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.CreateOrUpdateAsync (operations, scope, policyExemptionName, parameters, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="policyExemptionName" Type="System.String" />
        <Parameter Name="parameters" Type="Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="scope">
            The scope of the policy exemption. Valid scopes are: management group
            (format:
            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format: '/subscriptions/{subscriptionId}'), resource group
            (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            resource (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            </param>
        <param name="policyExemptionName">
            The name of the policy exemption to delete.
            </param>
        <param name="parameters">
            Parameters for the policy exemption.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Creates or updates a policy exemption.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation creates or updates a policy exemption with the given scope
            and name. Policy exemptions apply to all resources contained within their
            scope. For example, when you create a policy exemption at resource group
            scope for a policy assignment at the same or above level, the exemption
            exempts to all applicable resources in the resource group.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.Delete(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Delete (operations As IPolicyExemptionsOperations, scope As String, policyExemptionName As String)" />
      <MemberSignature Language="F#" Value="static member Delete : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string -&gt; unit" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.Delete (operations, scope, policyExemptionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="policyExemptionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="scope">
            The scope of the policy exemption. Valid scopes are: management group
            (format:
            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format: '/subscriptions/{subscriptionId}'), resource group
            (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            resource (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            </param>
        <param name="policyExemptionName">
            The name of the policy exemption to delete.
            </param>
        <summary>
            Deletes a policy exemption.
            </summary>
        <remarks>
            This operation deletes a policy exemption, given its name and the scope it
            was created in. The scope of a policy exemption is the part of its ID
            preceding
            '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.DeleteAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteAsync (operations As IPolicyExemptionsOperations, scope As String, policyExemptionName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="static member DeleteAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.DeleteAsync (operations, scope, policyExemptionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="policyExemptionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="scope">
            The scope of the policy exemption. Valid scopes are: management group
            (format:
            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format: '/subscriptions/{subscriptionId}'), resource group
            (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            resource (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            </param>
        <param name="policyExemptionName">
            The name of the policy exemption to delete.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Deletes a policy exemption.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation deletes a policy exemption, given its name and the scope it
            was created in. The scope of a policy exemption is the part of its ID
            preceding
            '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption Get (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption Get(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.Get(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Get (operations As IPolicyExemptionsOperations, scope As String, policyExemptionName As String) As PolicyExemption" />
      <MemberSignature Language="F#" Value="static member Get : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string -&gt; Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.Get (operations, scope, policyExemptionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="policyExemptionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="scope">
            The scope of the policy exemption. Valid scopes are: management group
            (format:
            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format: '/subscriptions/{subscriptionId}'), resource group
            (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            resource (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            </param>
        <param name="policyExemptionName">
            The name of the policy exemption to delete.
            </param>
        <summary>
            Retrieves a policy exemption.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves a single policy exemption, given its name and the
            scope it was created at.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; GetAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; GetAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string scope, string policyExemptionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.GetAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAsync (operations As IPolicyExemptionsOperations, scope As String, policyExemptionName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member GetAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.GetAsync (operations, scope, policyExemptionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="scope" Type="System.String" />
        <Parameter Name="policyExemptionName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="scope">
            The scope of the policy exemption. Valid scopes are: management group
            (format:
            '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
            subscription (format: '/subscriptions/{subscriptionId}'), resource group
            (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
            resource (format:
            '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
            </param>
        <param name="policyExemptionName">
            The name of the policy exemption to delete.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves a policy exemption.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves a single policy exemption, given its name and the
            scope it was created at.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; List (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string filter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; List(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.List(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function List (operations As IPolicyExemptionsOperations, Optional filter As String = Nothing) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member List : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.List (operations, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a subscription.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given subscription that match the optional given $filter. Valid values
            for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter is not provided, the
            unfiltered list includes all policy exemptions associated with the
            subscription, including those that apply directly or from management groups
            that contain the given subscription, as well as any applied to objects
            contained within the subscription.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListAsync (operations As IPolicyExemptionsOperations, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListAsync (operations, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a subscription.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given subscription that match the optional given $filter. Valid values
            for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter is not provided, the
            unfiltered list includes all policy exemptions associated with the
            subscription, including those that apply directly or from management groups
            that contain the given subscription, as well as any applied to objects
            contained within the subscription.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForManagementGroup">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForManagementGroup (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string managementGroupId, string filter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForManagementGroup(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string managementGroupId, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroup(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForManagementGroup (operations As IPolicyExemptionsOperations, managementGroupId As String, Optional filter As String = Nothing) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListForManagementGroup : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroup (operations, managementGroupId, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="managementGroupId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="managementGroupId">
            The ID of the management group.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a management group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions applicable to
            the management group that match the given $filter. Valid values for $filter
            are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            returned list includes all policy exemptions that are assigned to the
            management group or the management group's ancestors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForManagementGroupAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForManagementGroupAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string managementGroupId, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForManagementGroupAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string managementGroupId, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroupAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForManagementGroupAsync (operations As IPolicyExemptionsOperations, managementGroupId As String, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListForManagementGroupAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroupAsync (operations, managementGroupId, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="managementGroupId" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="managementGroupId">
            The ID of the management group.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a management group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions applicable to
            the management group that match the given $filter. Valid values for $filter
            are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            returned list includes all policy exemptions that are assigned to the
            management group or the management group's ancestors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForManagementGroupNext">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForManagementGroupNext (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForManagementGroupNext(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroupNext(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForManagementGroupNext (operations As IPolicyExemptionsOperations, nextPageLink As String) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListForManagementGroupNext : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroupNext (operations, nextPageLink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a management group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions applicable to
            the management group that match the given $filter. Valid values for $filter
            are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            returned list includes all policy exemptions that are assigned to the
            management group or the management group's ancestors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForManagementGroupNextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForManagementGroupNextAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForManagementGroupNextAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroupNextAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForManagementGroupNextAsync (operations As IPolicyExemptionsOperations, nextPageLink As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListForManagementGroupNextAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForManagementGroupNextAsync (operations, nextPageLink, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a management group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions applicable to
            the management group that match the given $filter. Valid values for $filter
            are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
            returned list includes all policy exemptions that are assigned to the
            management group or the management group's ancestors.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResource">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResource (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResource(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResource(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResource (operations As IPolicyExemptionsOperations, resourceGroupName As String, resourceProviderNamespace As String, parentResourcePath As String, resourceType As String, resourceName As String, Optional filter As String = Nothing) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListForResource : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * string * string * string * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResource (operations, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="resourceProviderNamespace" Type="System.String" />
        <Parameter Name="parentResourcePath" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="resourceGroupName">
            The name of the resource group containing the resource.
            </param>
        <param name="resourceProviderNamespace">
            The namespace of the resource provider. For example, the namespace of a
            virtual machine is Microsoft.Compute (from
            Microsoft.Compute/virtualMachines)
            </param>
        <param name="parentResourcePath">
            The parent resource path. Use empty string if there is none.
            </param>
        <param name="resourceType">
            The resource type name. For example the type name of a web app is 'sites'
            (from Microsoft.Web/sites).
            </param>
        <param name="resourceName">
            The name of the resource.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the specified resource in the given resource group and subscription that
            match the optional given $filter. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, the unfiltered list includes all
            policy exemptions associated with the resource, including those that apply
            directly or from all containing scopes, as well as any applied to resources
            contained within the resource. Three parameters plus the resource name are
            used to identify a specific resource. If the resource is not part of a
            parent resource (the more common case), the parent resource path should not
            be provided (or provided as ''). For example a web app could be specified
            as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            resource is part of a parent resource, then all parameters should be
            provided. For example a virtual machine DNS name could be specified as
            ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            {resourceName} == 'MyComputerName'). A convenient alternative to providing
            the namespace and type name separately is to provide both in the
            {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            {resourceName} == 'MyWebApp').
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceAsync (operations As IPolicyExemptionsOperations, resourceGroupName As String, resourceProviderNamespace As String, parentResourcePath As String, resourceType As String, resourceName As String, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListForResourceAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceAsync (operations, resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="resourceProviderNamespace" Type="System.String" />
        <Parameter Name="parentResourcePath" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="resourceGroupName">
            The name of the resource group containing the resource.
            </param>
        <param name="resourceProviderNamespace">
            The namespace of the resource provider. For example, the namespace of a
            virtual machine is Microsoft.Compute (from
            Microsoft.Compute/virtualMachines)
            </param>
        <param name="parentResourcePath">
            The parent resource path. Use empty string if there is none.
            </param>
        <param name="resourceType">
            The resource type name. For example the type name of a web app is 'sites'
            (from Microsoft.Web/sites).
            </param>
        <param name="resourceName">
            The name of the resource.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the specified resource in the given resource group and subscription that
            match the optional given $filter. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, the unfiltered list includes all
            policy exemptions associated with the resource, including those that apply
            directly or from all containing scopes, as well as any applied to resources
            contained within the resource. Three parameters plus the resource name are
            used to identify a specific resource. If the resource is not part of a
            parent resource (the more common case), the parent resource path should not
            be provided (or provided as ''). For example a web app could be specified
            as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            resource is part of a parent resource, then all parameters should be
            provided. For example a virtual machine DNS name could be specified as
            ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            {resourceName} == 'MyComputerName'). A convenient alternative to providing
            the namespace and type name separately is to provide both in the
            {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            {resourceName} == 'MyWebApp').
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceGroup">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResourceGroup (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string filter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResourceGroup(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroup(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceGroup (operations As IPolicyExemptionsOperations, resourceGroupName As String, Optional filter As String = Nothing) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListForResourceGroup : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroup (operations, resourceGroupName, filter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="resourceGroupName">
            The name of the resource group containing the resource.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given resource group in the given subscription that match the optional
            given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            provided, the unfiltered list includes all policy exemptions associated
            with the resource group, including those that apply directly or apply from
            containing scopes, as well as any applied to resources contained within the
            resource group.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceGroupAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceGroupAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceGroupAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string resourceGroupName, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroupAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceGroupAsync (operations As IPolicyExemptionsOperations, resourceGroupName As String, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListForResourceGroupAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroupAsync (operations, resourceGroupName, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="resourceGroupName">
            The name of the resource group containing the resource.
            </param>
        <param name="filter">
            The filter to apply on the operation. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, no filtering is performed. If
            $filter is not provided, the unfiltered list includes all policy exemptions
            associated with the scope, including those that apply directly or apply
            from containing scopes. If $filter=atScope() is provided, the returned list
            only includes all policy exemptions that apply to the scope, which is
            everything in the unfiltered list except those applied to sub scopes
            contained within the given scope. If $filter=atExactScope() is provided,
            the returned list only includes all policy exemptions that at the given
            scope. If $filter=excludeExpired() is provided, the returned list only
            includes all policy exemptions that either haven't expired or didn't set
            expiration date. If $filter=policyAssignmentId eq '{value}' is provided.
            the returned list only includes all policy exemptions that are associated
            with the give policyAssignmentId.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given resource group in the given subscription that match the optional
            given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            provided, the unfiltered list includes all policy exemptions associated
            with the resource group, including those that apply directly or apply from
            containing scopes, as well as any applied to resources contained within the
            resource group.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceGroupNext">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResourceGroupNext (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResourceGroupNext(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroupNext(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceGroupNext (operations As IPolicyExemptionsOperations, nextPageLink As String) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListForResourceGroupNext : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroupNext (operations, nextPageLink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given resource group in the given subscription that match the optional
            given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            provided, the unfiltered list includes all policy exemptions associated
            with the resource group, including those that apply directly or apply from
            containing scopes, as well as any applied to resources contained within the
            resource group.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceGroupNextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceGroupNextAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceGroupNextAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroupNextAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceGroupNextAsync (operations As IPolicyExemptionsOperations, nextPageLink As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListForResourceGroupNextAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceGroupNextAsync (operations, nextPageLink, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given resource group in the given subscription that match the optional
            given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
            'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
            provided, the unfiltered list includes all policy exemptions associated
            with the resource group, including those that apply directly or apply from
            containing scopes, as well as any applied to resources contained within the
            resource group.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceNext">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResourceNext (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListForResourceNext(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceNext(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceNext (operations As IPolicyExemptionsOperations, nextPageLink As String) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListForResourceNext : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceNext (operations, nextPageLink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the specified resource in the given resource group and subscription that
            match the optional given $filter. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, the unfiltered list includes all
            policy exemptions associated with the resource, including those that apply
            directly or from all containing scopes, as well as any applied to resources
            contained within the resource. Three parameters plus the resource name are
            used to identify a specific resource. If the resource is not part of a
            parent resource (the more common case), the parent resource path should not
            be provided (or provided as ''). For example a web app could be specified
            as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            resource is part of a parent resource, then all parameters should be
            provided. For example a virtual machine DNS name could be specified as
            ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            {resourceName} == 'MyComputerName'). A convenient alternative to providing
            the namespace and type name separately is to provide both in the
            {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            {resourceName} == 'MyWebApp').
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListForResourceNextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceNextAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListForResourceNextAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceNextAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListForResourceNextAsync (operations As IPolicyExemptionsOperations, nextPageLink As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListForResourceNextAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListForResourceNextAsync (operations, nextPageLink, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a resource.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the specified resource in the given resource group and subscription that
            match the optional given $filter. Valid values for $filter are:
            'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq
            '{value}''. If $filter is not provided, the unfiltered list includes all
            policy exemptions associated with the resource, including those that apply
            directly or from all containing scopes, as well as any applied to resources
            contained within the resource. Three parameters plus the resource name are
            used to identify a specific resource. If the resource is not part of a
            parent resource (the more common case), the parent resource path should not
            be provided (or provided as ''). For example a web app could be specified
            as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} ==
            '', {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the
            resource is part of a parent resource, then all parameters should be
            provided. For example a virtual machine DNS name could be specified as
            ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath}
            == 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames',
            {resourceName} == 'MyComputerName'). A convenient alternative to providing
            the namespace and type name separately is to provide both in the
            {resourceType} parameter, format: ({resourceProviderNamespace} == '',
            {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites',
            {resourceName} == 'MyWebApp').
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListNext">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListNext (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt; ListNext(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListNext(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListNext (operations As IPolicyExemptionsOperations, nextPageLink As String) As IPage(Of PolicyExemption)" />
      <MemberSignature Language="F#" Value="static member ListNext : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListNext (operations, nextPageLink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a subscription.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given subscription that match the optional given $filter. Valid values
            for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter is not provided, the
            unfiltered list includes all policy exemptions associated with the
            subscription, including those that apply directly or from management groups
            that contain the given subscription, as well as any applied to objects
            contained within the subscription.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListNextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListNextAsync (this Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt; ListNextAsync(class Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations operations, string nextPageLink, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListNextAsync(Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListNextAsync (operations As IPolicyExemptionsOperations, nextPageLink As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of PolicyExemption))" />
      <MemberSignature Language="F#" Value="static member ListNextAsync : Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;" Usage="Microsoft.Azure.Management.ResourceManager.PolicyExemptionsOperationsExtensions.ListNextAsync (operations, nextPageLink, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.ResourceManager</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.17.1.0</AssemblyVersion>
        <AssemblyVersion>3.17.2.0</AssemblyVersion>
        <AssemblyVersion>3.17.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.ResourceManager.Models.PolicyExemption&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.ResourceManager.IPolicyExemptionsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Retrieves all policy exemptions that apply to a subscription.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            This operation retrieves the list of all policy exemptions associated with
            the given subscription that match the optional given $filter. Valid values
            for $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or
            'policyAssignmentId eq '{value}''. If $filter is not provided, the
            unfiltered list includes all policy exemptions associated with the
            subscription, including those that apply directly or from management groups
            that contain the given subscription, as well as any applied to objects
            contained within the subscription.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
