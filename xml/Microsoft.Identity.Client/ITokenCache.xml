<Type Name="ITokenCache" FullName="Microsoft.Identity.Client.ITokenCache">
  <TypeSignature Language="C#" Value="public interface ITokenCache" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITokenCache" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.ITokenCache" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITokenCache" />
  <TypeSignature Language="F#" Value="type ITokenCache = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.1.0</AssemblyVersion>
    <AssemblyVersion>4.8.0.0</AssemblyVersion>
    <AssemblyVersion>4.8.1.0</AssemblyVersion>
    <AssemblyVersion>4.8.2.0</AssemblyVersion>
    <AssemblyVersion>4.9.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
    <AssemblyVersion>4.12.0.0</AssemblyVersion>
    <AssemblyVersion>4.13.0.0</AssemblyVersion>
    <AssemblyVersion>4.14.0.0</AssemblyVersion>
    <AssemblyVersion>4.15.0.0</AssemblyVersion>
    <AssemblyVersion>4.16.0.0</AssemblyVersion>
    <AssemblyVersion>4.16.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            This is the interface that implements the public access to cache operations.
            With CacheV2, this should only be necessary if the caller is persisting
            the cache in their own store, since this will provide the serialize/deserialize
            and before/after notifications used in that scenario.
            See https://aka.ms/aka.ms/msal-net-token-cache-serialization
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public void Deserialize (byte[] msalV2State);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deserialize(unsigned int8[] msalV2State) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.Deserialize(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deserialize (msalV2State As Byte())" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : byte[] -&gt; unit" Usage="iTokenCache.Deserialize msalV2State" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This is expected to be removed in MSAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msalV2State" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="msalV2State" />
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV2(System.Byte[])" />.  See https://aka.ms/msal-net-4x-cache-breaking-change        /// </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAdalV3">
      <MemberSignature Language="C#" Value="public void DeserializeAdalV3 (byte[] adalV3State);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeserializeAdalV3(unsigned int8[] adalV3State) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.DeserializeAdalV3(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeserializeAdalV3 (adalV3State As Byte())" />
      <MemberSignature Language="F#" Value="abstract member DeserializeAdalV3 : byte[] -&gt; unit" Usage="iTokenCache.DeserializeAdalV3 adalV3State" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ITokenCacheSerializer.DeserializeAdalV3 on the TokenCacheNotificationArgs in the cache callback. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adalV3State" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="adalV3State">Byte stream representation of the cache</param>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeAdalV3(System.Byte[])" /> and is accessible in TokenCacheNotificationArgs.
            See https://aka.ms/msal-net-4x-cache-breaking-change
            </summary>
        <remarks>
          <see cref="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />/<see cref="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" /> is compatible with other MSAL libraries such as MSAL for Python and MSAL for Java.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeMsalV2">
      <MemberSignature Language="C#" Value="public void DeserializeMsalV2 (byte[] msalV2State);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeserializeMsalV2(unsigned int8[] msalV2State) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV2(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeserializeMsalV2 (msalV2State As Byte())" />
      <MemberSignature Language="F#" Value="abstract member DeserializeMsalV2 : byte[] -&gt; unit" Usage="iTokenCache.DeserializeMsalV2 msalV2State" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ITokenCacheSerializer.DeserializeMsalV2 on the TokenCacheNotificationArgs in the cache callback. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msalV2State" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="msalV2State">Byte stream representation of the cache</param>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV2(System.Byte[])" /> and is accessible in TokenCacheNotificationArgs.
            </summary>
        <remarks>
          <see cref="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />/<see cref="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" /> is compatible with other MSAL libraries such as MSAL for Python and MSAL for Java.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeMsalV3">
      <MemberSignature Language="C#" Value="public void DeserializeMsalV3 (byte[] msalV3State, bool shouldClearExistingCache = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeserializeMsalV3(unsigned int8[] msalV3State, bool shouldClearExistingCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeserializeMsalV3 (msalV3State As Byte(), Optional shouldClearExistingCache As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member DeserializeMsalV3 : byte[] * bool -&gt; unit" Usage="iTokenCache.DeserializeMsalV3 (msalV3State, shouldClearExistingCache)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ITokenCacheSerializer.DeserializeMsalV3 on the TokenCacheNotificationArgs in the cache callback. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msalV3State" Type="System.Byte[]" />
        <Parameter Name="shouldClearExistingCache" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="msalV3State">Byte stream representation of the cache</param>
        <param name="shouldClearExistingCache">
            Set to true to clear MSAL cache contents.  Defaults to false.
            You would want to set this to true if you want the cache contents in memory to be exactly what's on disk.
            You would want to set this to false if you want to merge the contents of what's on disk with your current in memory state.
            </param>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV3(System.Byte[],System.Boolean)" /> and is accessible in TokenCacheNotificationArgs.
            </summary>
        <remarks>
            This is the recommended format for maintaining SSO state between applications.
            <see cref="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />/<see cref="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" /> is compatible with other MSAL libraries such as MSAL for Python and MSAL for Java.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeUnifiedAndAdalCache">
      <MemberSignature Language="C#" Value="public void DeserializeUnifiedAndAdalCache (Microsoft.Identity.Client.Cache.CacheData cacheData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeserializeUnifiedAndAdalCache(class Microsoft.Identity.Client.Cache.CacheData cacheData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.DeserializeUnifiedAndAdalCache(Microsoft.Identity.Client.Cache.CacheData)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeserializeUnifiedAndAdalCache (cacheData As CacheData)" />
      <MemberSignature Language="F#" Value="abstract member DeserializeUnifiedAndAdalCache : Microsoft.Identity.Client.Cache.CacheData -&gt; unit" Usage="iTokenCache.DeserializeUnifiedAndAdalCache cacheData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This is expected to be removed in MSAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheData" Type="Microsoft.Identity.Client.Cache.CacheData" />
      </Parameters>
      <Docs>
        <param name="cacheData" />
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV2(System.Byte[])" /> and <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeAdalV3(System.Byte[])" />
            See https://aka.ms/msal-net-4x-cache-breaking-change
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public byte[] Serialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] Serialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.Serialize" />
      <MemberSignature Language="VB.NET" Value="Public Function Serialize () As Byte()" />
      <MemberSignature Language="F#" Value="abstract member Serialize : unit -&gt; byte[]" Usage="iTokenCache.Serialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This is expected to be removed in MSAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV2" />. See https://aka.ms/msal-net-4x-cache-breaking-change
            /// </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAdalV3">
      <MemberSignature Language="C#" Value="public byte[] SerializeAdalV3 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SerializeAdalV3() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SerializeAdalV3" />
      <MemberSignature Language="VB.NET" Value="Public Function SerializeAdalV3 () As Byte()" />
      <MemberSignature Language="F#" Value="abstract member SerializeAdalV3 : unit -&gt; byte[]" Usage="iTokenCache.SerializeAdalV3 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ITokenCacheSerializer.SerializeAdalV3 on the TokenCacheNotificationArgs in the cache callback. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeAdalV3" /> and is accessible in TokenCacheNotificationArgs.
            </summary>
        <returns>Byte stream representation of the cache</returns>
        <remarks>
          <see cref="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />/<see cref="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" /> is compatible with other MSAL libraries such as MSAL for Python and MSAL for Java.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeMsalV2">
      <MemberSignature Language="C#" Value="public byte[] SerializeMsalV2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SerializeMsalV2() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV2" />
      <MemberSignature Language="VB.NET" Value="Public Function SerializeMsalV2 () As Byte()" />
      <MemberSignature Language="F#" Value="abstract member SerializeMsalV2 : unit -&gt; byte[]" Usage="iTokenCache.SerializeMsalV2 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ITokenCacheSerializer.SerializeMsalV2 on the TokenCacheNotificationArgs in the cache callback. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV2" /> and is accessible in TokenCacheNotificationArgs.
            </summary>
        <returns>Byte stream representation of the cache</returns>
        <remarks>
          <see cref="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />/<see cref="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" /> is compatible with other MSAL libraries such as MSAL for Python and MSAL for Java.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeMsalV3">
      <MemberSignature Language="C#" Value="public byte[] SerializeMsalV3 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] SerializeMsalV3() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />
      <MemberSignature Language="VB.NET" Value="Public Function SerializeMsalV3 () As Byte()" />
      <MemberSignature Language="F#" Value="abstract member SerializeMsalV3 : unit -&gt; byte[]" Usage="iTokenCache.SerializeMsalV3 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use ITokenCacheSerializer.SerializeMsalV3 on the TokenCacheNotificationArgs in the cache callback. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV3" /> and is accessible in TokenCacheNotificationArgs.
            </summary>
        <returns>Byte stream representation of the cache</returns>
        <remarks>
            This is the recommended format for maintaining SSO state between applications.
            <see cref="M:Microsoft.Identity.Client.ITokenCache.SerializeMsalV3" />/<see cref="M:Microsoft.Identity.Client.ITokenCache.DeserializeMsalV3(System.Byte[],System.Boolean)" /> is compatible with other MSAL libraries such as MSAL for Python and MSAL for Java.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeUnifiedAndAdalCache">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.Cache.CacheData SerializeUnifiedAndAdalCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.Cache.CacheData SerializeUnifiedAndAdalCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SerializeUnifiedAndAdalCache" />
      <MemberSignature Language="VB.NET" Value="Public Function SerializeUnifiedAndAdalCache () As CacheData" />
      <MemberSignature Language="F#" Value="abstract member SerializeUnifiedAndAdalCache : unit -&gt; Microsoft.Identity.Client.Cache.CacheData" Usage="iTokenCache.SerializeUnifiedAndAdalCache " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This is expected to be removed in MSAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-4x-cache-breaking-change", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.Cache.CacheData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Functionality replaced by <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV2" /> and <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeAdalV3" />
            See https://aka.ms/msal-net-4x-cache-breaking-change
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAfterAccess">
      <MemberSignature Language="C#" Value="public void SetAfterAccess (Microsoft.Identity.Client.TokenCacheCallback afterAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAfterAccess(class Microsoft.Identity.Client.TokenCacheCallback afterAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAfterAccess (afterAccess As TokenCacheCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetAfterAccess : Microsoft.Identity.Client.TokenCacheCallback -&gt; unit" Usage="iTokenCache.SetAfterAccess afterAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afterAccess" Type="Microsoft.Identity.Client.TokenCacheCallback" />
      </Parameters>
      <Docs>
        <param name="afterAccess">Delegate set in order to handle the cache serialization in the case where the <see cref="P:Microsoft.Identity.Client.TokenCache.HasStateChanged" />
            member of the cache is <c>true</c></param>
        <summary>
            Sets a delegate to be notified after any library method accesses the cache. This gives an option to the
            delegate to serialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            If you need async/task-based callbacks, please use SetAfterAccessAsync instead.
            </summary>
        <remarks>In the case where the delegate is used to serialize the cache entirely (not just a row), it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV3" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAfterAccessAsync">
      <MemberSignature Language="C#" Value="public void SetAfterAccessAsync (Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt; afterAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAfterAccessAsync(class System.Func`2&lt;class Microsoft.Identity.Client.TokenCacheNotificationArgs, class System.Threading.Tasks.Task&gt; afterAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccessAsync(System.Func{Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAfterAccessAsync (afterAccess As Func(Of TokenCacheNotificationArgs, Task))" />
      <MemberSignature Language="F#" Value="abstract member SetAfterAccessAsync : Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="iTokenCache.SetAfterAccessAsync afterAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="afterAccess" Type="System.Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="afterAccess">Delegate set in order to handle the cache serialization in the case where the <see cref="P:Microsoft.Identity.Client.TokenCache.HasStateChanged" />
            member of the cache is <c>true</c></param>
        <summary>
            Sets a delegate to be notified after any library method accesses the cache. This gives an option to the
            delegate to serialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            This provides the same functionality as SetAfterAccess but it provides for an async/task-based callback.
            </summary>
        <remarks>In the case where the delegate is used to serialize the cache entirely (not just a row), it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.SerializeMsalV3" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeAccess">
      <MemberSignature Language="C#" Value="public void SetBeforeAccess (Microsoft.Identity.Client.TokenCacheCallback beforeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeAccess(class Microsoft.Identity.Client.TokenCacheCallback beforeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeAccess (beforeAccess As TokenCacheCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeAccess : Microsoft.Identity.Client.TokenCacheCallback -&gt; unit" Usage="iTokenCache.SetBeforeAccess beforeAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeAccess" Type="Microsoft.Identity.Client.TokenCacheCallback" />
      </Parameters>
      <Docs>
        <param name="beforeAccess">Delegate set in order to handle the cache deserialization</param>
        <summary>
            Sets a delegate to be notified before any library method accesses the cache. This gives an option to the
            delegate to deserialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            If you need async/task-based callbacks, please use SetBeforeAccessAsync instead.
            </summary>
        <remarks>When the delegate is used to deserialize the cache, it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV3(System.Byte[],System.Boolean)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeAccessAsync">
      <MemberSignature Language="C#" Value="public void SetBeforeAccessAsync (Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt; beforeAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeAccessAsync(class System.Func`2&lt;class Microsoft.Identity.Client.TokenCacheNotificationArgs, class System.Threading.Tasks.Task&gt; beforeAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeAccessAsync(System.Func{Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeAccessAsync (beforeAccess As Func(Of TokenCacheNotificationArgs, Task))" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeAccessAsync : Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="iTokenCache.SetBeforeAccessAsync beforeAccess" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeAccess" Type="System.Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="beforeAccess">Delegate set in order to handle the cache deserialization</param>
        <summary>
            Sets a delegate to be notified before any library method accesses the cache. This gives an option to the
            delegate to deserialize a cache entry for the application and accounts specified in the <see cref="T:Microsoft.Identity.Client.TokenCacheNotificationArgs" />.
            See https://aka.ms/msal-net-token-cache-serialization.
            This provides the same functionality as SetBeforeAccess but it provides for an async/task-based callback.
            </summary>
        <remarks>In the case where the delegate is used to deserialize the cache, it might
            want to call <see cref="M:Microsoft.Identity.Client.ITokenCacheSerializer.DeserializeMsalV3(System.Byte[],System.Boolean)" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeWrite">
      <MemberSignature Language="C#" Value="public void SetBeforeWrite (Microsoft.Identity.Client.TokenCacheCallback beforeWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeWrite(class Microsoft.Identity.Client.TokenCacheCallback beforeWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeWrite(Microsoft.Identity.Client.TokenCacheCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeWrite (beforeWrite As TokenCacheCallback)" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeWrite : Microsoft.Identity.Client.TokenCacheCallback -&gt; unit" Usage="iTokenCache.SetBeforeWrite beforeWrite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeWrite" Type="Microsoft.Identity.Client.TokenCacheCallback" />
      </Parameters>
      <Docs>
        <param name="beforeWrite">Delegate set in order to prepare the cache serialization</param>
        <summary>
            Sets a delegate called before any library method writes to the cache. This gives an option to the delegate
            to reload the cache state from a row in database and lock that row. That database row can then be unlocked in the delegate
            registered with <see cref="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
            If you need async/task-based callbacks, please use SetBeforeWriteAsync instead.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBeforeWriteAsync">
      <MemberSignature Language="C#" Value="public void SetBeforeWriteAsync (Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt; beforeWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBeforeWriteAsync(class System.Func`2&lt;class Microsoft.Identity.Client.TokenCacheNotificationArgs, class System.Threading.Tasks.Task&gt; beforeWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.ITokenCache.SetBeforeWriteAsync(System.Func{Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBeforeWriteAsync (beforeWrite As Func(Of TokenCacheNotificationArgs, Task))" />
      <MemberSignature Language="F#" Value="abstract member SetBeforeWriteAsync : Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs, System.Threading.Tasks.Task&gt; -&gt; unit" Usage="iTokenCache.SetBeforeWriteAsync beforeWrite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="beforeWrite" Type="System.Func&lt;Microsoft.Identity.Client.TokenCacheNotificationArgs,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="beforeWrite">Delegate set in order to prepare the cache serialization</param>
        <summary>
            Sets a delegate called before any library method writes to the cache. This gives an option to the delegate
            to reload the cache state from a row in database and lock that row. That database row can then be unlocked in the delegate
            registered with <see cref="M:Microsoft.Identity.Client.ITokenCache.SetAfterAccess(Microsoft.Identity.Client.TokenCacheCallback)" />
            This provides the same functionality as SetBeforeWrite but it provides for an async/task-based callback.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
