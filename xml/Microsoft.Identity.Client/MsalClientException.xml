<Type Name="MsalClientException" FullName="Microsoft.Identity.Client.MsalClientException">
  <TypeSignature Language="C#" Value="public class MsalClientException : Microsoft.Identity.Client.MsalException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MsalClientException extends Microsoft.Identity.Client.MsalException" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.MsalClientException" />
  <TypeSignature Language="VB.NET" Value="Public Class MsalClientException&#xA;Inherits MsalException" />
  <TypeSignature Language="F#" Value="type MsalClientException = class&#xA;    inherit MsalException" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>1.1.4.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Identity.Client.MsalException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This exception class represents errors that are local to the library or the device. Contrary to
            <see cref="T:Microsoft.Identity.Client.MsalServiceException" /> which represent errors happening from the Azure AD service or
            the network. For more details, see https://aka.ms/msal-net-exceptions
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalClientException (string errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.MsalClientException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (errorCode As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Identity.Client.MsalClientException : string -&gt; Microsoft.Identity.Client.MsalClientException" Usage="new Microsoft.Identity.Client.MsalClientException errorCode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="errorCode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="errorCode">
            The error code returned by the service or generated by client. This is the code you can rely on
            for exception handling.</param>
        <summary>
            Initializes a new instance of the exception class with a specified
            error code.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalClientException (string errorCode, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string errorCode, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.MsalClientException.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (errorCode As String, errorMessage As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Identity.Client.MsalClientException : string * string -&gt; Microsoft.Identity.Client.MsalClientException" Usage="new Microsoft.Identity.Client.MsalClientException (errorCode, errorMessage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="errorCode" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="errorCode">
            The error code returned by the service or generated by client. This is the code you can rely on
            for exception handling.
            </param>
        <param name="errorMessage">The error message that explains the reason for the exception.</param>
        <summary>
            Initializes a new instance of the exception class with a specified
            error code and error message.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalClientException (string errorCode, string errorMessage, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string errorCode, string errorMessage, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.MsalClientException.#ctor(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (errorCode As String, errorMessage As String, innerException As Exception)" />
      <MemberSignature Language="F#" Value="new Microsoft.Identity.Client.MsalClientException : string * string * Exception -&gt; Microsoft.Identity.Client.MsalClientException" Usage="new Microsoft.Identity.Client.MsalClientException (errorCode, errorMessage, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="errorCode" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="errorCode">
            The error code returned by the service or generated by client. This is the code you can rely on
            for exception handling.
            </param>
        <param name="errorMessage">The error message that explains the reason for the exception.</param>
        <param name="innerException"></param>
        <summary>
            Initializes a new instance of the exception class with a specified
            error code, error message and inner exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationCanceledError">
      <MemberSignature Language="C#" Value="public const string AuthenticationCanceledError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string AuthenticationCanceledError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.AuthenticationCanceledError" />
      <MemberSignature Language="VB.NET" Value="Public Const AuthenticationCanceledError As String " />
      <MemberSignature Language="F#" Value="val mutable AuthenticationCanceledError : string" Usage="Microsoft.Identity.Client.MsalClientException.AuthenticationCanceledError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Authentication canceled.
            <para>What happens?</para>The user had canceled the authentication, for instance by closing the authentication dialog
            <para>Mitigation</para>None, you cannot get a token to call the protected API. You might want to inform the user
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationUiFailedError">
      <MemberSignature Language="C#" Value="public const string AuthenticationUiFailedError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string AuthenticationUiFailedError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.AuthenticationUiFailedError" />
      <MemberSignature Language="VB.NET" Value="Public Const AuthenticationUiFailedError As String " />
      <MemberSignature Language="F#" Value="val mutable AuthenticationUiFailedError : string" Usage="Microsoft.Identity.Client.MsalClientException.AuthenticationUiFailedError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The request could not be performed because of a failure in the UI flow.
            <para>What happens?</para>The library failed to invoke the Web View required to perform interactive authentication.
            The exception might include the reason
            <para>Mitigation</para>If the exception includes the reason, you could inform the user. This might be, for instance, a browser
            implementing chrome tabs is missing on the Android phone (that's only an example: this exception can apply to other
            platforms as well)
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateQueryParameterError">
      <MemberSignature Language="C#" Value="public const string DuplicateQueryParameterError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DuplicateQueryParameterError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.DuplicateQueryParameterError" />
      <MemberSignature Language="VB.NET" Value="Public Const DuplicateQueryParameterError As String " />
      <MemberSignature Language="F#" Value="val mutable DuplicateQueryParameterError : string" Usage="Microsoft.Identity.Client.MsalClientException.DuplicateQueryParameterError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Duplicate query parameter was found in extraQueryParameters.
            <para>What happens?</para> You have used <see cref="P:Microsoft.Identity.Client.ClientApplicationBase.SliceParameters" /> or the <c>extraQueryParameter</c> of overrides
            of token acquisition operations in public client and confidential client application and are passing a parameter which is already present in the
            URL (either because you had it in another way, or the library added it).
            <para>Mitigation [App Development]</para> Remove the duplicate parameter from <see cref="P:Microsoft.Identity.Client.ClientApplicationBase.SliceParameters" /> or the token acquisition override.
            </summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:ClientApplicationBase.SliceParameters" />
        <altmember cref="M:Microsoft.Identity.Client.ConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidJwtError">
      <MemberSignature Language="C#" Value="public const string InvalidJwtError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string InvalidJwtError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.InvalidJwtError" />
      <MemberSignature Language="VB.NET" Value="Public Const InvalidJwtError As String " />
      <MemberSignature Language="F#" Value="val mutable InvalidJwtError : string" Usage="Microsoft.Identity.Client.MsalClientException.InvalidJwtError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            JWT was invalid.
            <para>What happens?</para>The library expected a JWT (for instance a token from the cache, or received from the STS), but
            the format is invalid
            <para>Mitigation</para>Make sure that the token cache was not tampered
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JsonParseError">
      <MemberSignature Language="C#" Value="public const string JsonParseError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string JsonParseError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.JsonParseError" />
      <MemberSignature Language="VB.NET" Value="Public Const JsonParseError As String " />
      <MemberSignature Language="F#" Value="val mutable JsonParseError : string" Usage="Microsoft.Identity.Client.MsalClientException.JsonParseError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            JSON parsing failed.
            <para>What happens?</para>A Json blob read from the token cache or received from the STS was not parseable. 
            This can happen when reading the token cache, or receiving an IDToken from the STS.
            <para>Mitigation</para>Make sure that the token cache was not tampered
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultipleTokensMatchedError">
      <MemberSignature Language="C#" Value="public const string MultipleTokensMatchedError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string MultipleTokensMatchedError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.MultipleTokensMatchedError" />
      <MemberSignature Language="VB.NET" Value="Public Const MultipleTokensMatchedError As String " />
      <MemberSignature Language="F#" Value="val mutable MultipleTokensMatchedError : string" Usage="Microsoft.Identity.Client.MsalClientException.MultipleTokensMatchedError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Multiple Tokens were matched. 
            <para>What happens?</para>This exception happens in the case of applications managing several identitities, 
            when calling <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />
            or one of its overrides and the user token cache contains multiple tokens for this client application and the the specified Account, but from different authorities.
            <para>Mitigation [App Development]</para>specify the authority to use in the acquire token operation
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkNotAvailableError">
      <MemberSignature Language="C#" Value="public const string NetworkNotAvailableError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string NetworkNotAvailableError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.NetworkNotAvailableError" />
      <MemberSignature Language="VB.NET" Value="Public Const NetworkNotAvailableError As String " />
      <MemberSignature Language="F#" Value="val mutable NetworkNotAvailableError : string" Usage="Microsoft.Identity.Client.MsalClientException.NetworkNotAvailableError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The request could not be preformed because the network is down.
            <para>Mitigation [App development]</para> In the application you could either inform the user that there are network issues
            or retry later
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonHttpsRedirectNotSupported">
      <MemberSignature Language="C#" Value="public const string NonHttpsRedirectNotSupported;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string NonHttpsRedirectNotSupported" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.NonHttpsRedirectNotSupported" />
      <MemberSignature Language="VB.NET" Value="Public Const NonHttpsRedirectNotSupported As String " />
      <MemberSignature Language="F#" Value="val mutable NonHttpsRedirectNotSupported : string" Usage="Microsoft.Identity.Client.MsalClientException.NonHttpsRedirectNotSupported" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Non HTTPS redirects are not supported
            <para>What happens?</para>This error happens when you have registered a non-https redirect URI for the 
            public client application other than <c>urn:ietf:wg:oauth:2.0:oob</c><para>Mitigation [App registration and development]</para>Register in the application a Reply URL starting with "https://"
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlatformNotSupported">
      <MemberSignature Language="C#" Value="public const string PlatformNotSupported;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PlatformNotSupported" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.PlatformNotSupported" />
      <MemberSignature Language="VB.NET" Value="Public Const PlatformNotSupported As String " />
      <MemberSignature Language="F#" Value="val mutable PlatformNotSupported : string" Usage="Microsoft.Identity.Client.MsalClientException.PlatformNotSupported" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The library is loaded on a platform which is not supported.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateMismatchError">
      <MemberSignature Language="C#" Value="public const string StateMismatchError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string StateMismatchError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.StateMismatchError" />
      <MemberSignature Language="VB.NET" Value="Public Const StateMismatchError As String " />
      <MemberSignature Language="F#" Value="val mutable StateMismatchError : string" Usage="Microsoft.Identity.Client.MsalClientException.StateMismatchError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            State returned from the STS was different from the one sent by the library
            <para>What happens?</para>The library sends to the STS a state associated to a request, and expects the reply to be consistent. 
            This errors indicates that the reply is not associated with the request. This could indicate an attempt to replay a response
            <para>Mitigation</para> None
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TenantDiscoveryFailedError">
      <MemberSignature Language="C#" Value="public const string TenantDiscoveryFailedError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string TenantDiscoveryFailedError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalClientException.TenantDiscoveryFailedError" />
      <MemberSignature Language="VB.NET" Value="Public Const TenantDiscoveryFailedError As String " />
      <MemberSignature Language="F#" Value="val mutable TenantDiscoveryFailedError : string" Usage="Microsoft.Identity.Client.MsalClientException.TenantDiscoveryFailedError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Tenant discovery failed.
            <para>What happens?</para>While reading the openid configuration associated with the authority, the Authorize endpoint,
            or Token endpoint, or the Issuer was not found
            <para>Mitigation</para>This indicates and authority which is not Open ID Connect compliant. Specify a different authority
            in the constructor of the application, or the token acquisition override
            /// </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>