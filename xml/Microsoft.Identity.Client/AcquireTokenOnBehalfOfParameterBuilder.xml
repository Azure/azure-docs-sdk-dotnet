<Type Name="AcquireTokenOnBehalfOfParameterBuilder" FullName="Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder">
  <TypeSignature Language="C#" Value="public sealed class AcquireTokenOnBehalfOfParameterBuilder : Microsoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder&lt;Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AcquireTokenOnBehalfOfParameterBuilder extends Microsoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder`1&lt;class Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AcquireTokenOnBehalfOfParameterBuilder&#xA;Inherits AbstractConfidentialClientAcquireTokenParameterBuilder(Of AcquireTokenOnBehalfOfParameterBuilder)" />
  <TypeSignature Language="F#" Value="type AcquireTokenOnBehalfOfParameterBuilder = class&#xA;    inherit AbstractConfidentialClientAcquireTokenParameterBuilder&lt;AcquireTokenOnBehalfOfParameterBuilder&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.30.0.0</AssemblyVersion>
    <AssemblyVersion>4.30.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder&lt;Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Builder for AcquireTokenOnBehalfOf (OBO flow)
            See https://aka.ms/msal-net-on-behalf-of
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="WithForceRefresh">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder WithForceRefresh (bool forceRefresh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder WithForceRefresh(bool forceRefresh) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithForceRefresh(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithForceRefresh (forceRefresh As Boolean) As AcquireTokenOnBehalfOfParameterBuilder" />
      <MemberSignature Language="F#" Value="member this.WithForceRefresh : bool -&gt; Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder" Usage="acquireTokenOnBehalfOfParameterBuilder.WithForceRefresh forceRefresh" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.30.0.0</AssemblyVersion>
        <AssemblyVersion>4.30.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceRefresh" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceRefresh">If <c>true</c>, ignore any access token in the user token cache
            and attempt to acquire new access token using the refresh token for the account
            if one is available. This can be useful in the case when the application developer wants to make
            sure that conditional access policies are applied immediately, rather than after the expiration of the access token.
            The default is <c>false</c></param>
        <summary>
            Specifies if the client application should force refreshing the
            token from the user token cache. By default the token is taken from the
            the user token cache (forceRefresh=false)
            </summary>
        <returns>The builder to chain the .With methods</returns>
        <remarks>Avoid unnecessarily setting <paramref name="forceRefresh" /> to <c>true</c> true in order to
            avoid negatively affecting the performance of your application</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSendX5C">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder WithSendX5C (bool withSendX5C);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder WithSendX5C(bool withSendX5C) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder.WithSendX5C(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function WithSendX5C (withSendX5C As Boolean) As AcquireTokenOnBehalfOfParameterBuilder" />
      <MemberSignature Language="F#" Value="member this.WithSendX5C : bool -&gt; Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder" Usage="acquireTokenOnBehalfOfParameterBuilder.WithSendX5C withSendX5C" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.30.0.0</AssemblyVersion>
        <AssemblyVersion>4.30.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withSendX5C" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="withSendX5C">
          <c>true</c> if the x5c should be sent. Otherwise <c>false</c>.
            The default is <c>false</c></param>
        <summary>
            Specifies if the x5c claim (public key of the certificate) should be sent to the STS.
            Sending the x5c enables application developers to achieve easy certificate roll-over in Azure AD:
            this method will send the public certificate to Azure AD along with the token request,
            so that Azure AD can use it to validate the subject name based on a trusted issuer policy.
            This saves the application admin from the need to explicitly manage the certificate rollover
            (either via portal or PowerShell/CLI operation). For details see https://aka.ms/msal-net-sni
            </summary>
        <returns>The builder to chain the .With methods</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
