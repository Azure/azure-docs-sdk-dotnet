<Type Name="IConfidentialClientApplication" FullName="Microsoft.Identity.Client.IConfidentialClientApplication">
  <TypeSignature Language="C#" Value="public interface IConfidentialClientApplication : Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IConfidentialClientApplication implements class Microsoft.Identity.Client.IClientApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.IConfidentialClientApplication" />
  <TypeSignature Language="VB.NET" Value="Public Interface IConfidentialClientApplication&#xA;Implements IClientApplicationBase" />
  <TypeSignature Language="F#" Value="type IConfidentialClientApplication = interface&#xA;    interface IClientApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.1.0</AssemblyVersion>
    <AssemblyVersion>4.8.0.0</AssemblyVersion>
    <AssemblyVersion>4.8.1.0</AssemblyVersion>
    <AssemblyVersion>4.8.2.0</AssemblyVersion>
    <AssemblyVersion>4.9.0.0</AssemblyVersion>
    <AssemblyVersion>4.10.0.0</AssemblyVersion>
    <AssemblyVersion>4.11.0.0</AssemblyVersion>
    <AssemblyVersion>4.12.0.0</AssemblyVersion>
    <AssemblyVersion>4.13.0.0</AssemblyVersion>
    <AssemblyVersion>4.14.0.0</AssemblyVersion>
    <AssemblyVersion>4.15.0.0</AssemblyVersion>
    <AssemblyVersion>4.16.0.0</AssemblyVersion>
    <AssemblyVersion>4.16.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Identity.Client.IClientApplicationBase</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Component to be used with confidential client applications like Web Apps/API.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AcquireTokenByAuthorizationCode">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder AcquireTokenByAuthorizationCode (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string authorizationCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder AcquireTokenByAuthorizationCode(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string authorizationCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenByAuthorizationCode(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByAuthorizationCode (scopes As IEnumerable(Of String), authorizationCode As String) As AcquireTokenByAuthorizationCodeParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByAuthorizationCode : seq&lt;string&gt; * string -&gt; Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenByAuthorizationCode (scopes, authorizationCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="authorizationCode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <param name="authorizationCode">The authorization code received from the service authorization endpoint.</param>
        <summary>
            [V3 API] Acquires a security token from the authority configured in the app using the authorization code
            previously received from the STS.
            It uses the OAuth 2.0 authorization code flow (See https://aka.ms/msal-net-authorization-code).
            It's usually used in Web Apps (for instance ASP.NET / ASP.NET Core Web apps) which sign-in users,
            and can request an authorization code.
            This method does not lookup the token cache, but stores the result in it, so it can be looked up
            using other methods such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilent(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request</returns>
        <remarks>You can set optional parameters by chaining the builder with:
            <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithAuthority(System.String,System.Boolean)" />,
            <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" />,
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenByAuthorizationCodeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenByAuthorizationCodeAsync (string authorizationCode, System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenByAuthorizationCodeAsync(string authorizationCode, class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenByAuthorizationCodeAsync(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenByAuthorizationCodeAsync (authorizationCode As String, scopes As IEnumerable(Of String)) As Task(Of AuthenticationResult)" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenByAuthorizationCodeAsync : string * seq&lt;string&gt; -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;" Usage="iConfidentialClientApplication.AcquireTokenByAuthorizationCodeAsync (authorizationCode, scopes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AcquireTokenByAuthorizationCode instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="authorizationCode" Type="System.String" />
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="authorizationCode">The authorization code received from service authorization endpoint.</param>
        <param name="scopes">Array of scopes requested for resource</param>
        <summary>
            [V2 API] Acquires security token from the authority using authorization code previously received.
            This method does not lookup token cache, but stores the result in it, so it can be looked up using other methods such as <see cref="M:Microsoft.Identity.Client.IClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" />.
            </summary>
        <returns>Authentication result containing token of the user for the requested scopes</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenForClient">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder AcquireTokenForClient (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder AcquireTokenForClient(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenForClient (scopes As IEnumerable(Of String)) As AcquireTokenForClientParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenForClient : seq&lt;string&gt; -&gt; Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenForClient scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">scopes requested to access a protected API. For this flow (client credentials), the scopes
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are really defined statically at application registration
            in the portal, and cannot be overridden in the application.</param>
        <summary>
            [V3 API] Acquires a token from the authority configured in the app, for the confidential client itself (in the name of no user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request</returns>
        <remarks>You can also chain the following optional parameters:
            <see cref="M:Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder.WithForceRefresh(System.Boolean)" /><see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenForClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenForClientAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenForClientAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenForClientAsync (scopes As IEnumerable(Of String)) As Task(Of AuthenticationResult)" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenForClientAsync : seq&lt;string&gt; -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;" Usage="iConfidentialClientApplication.AcquireTokenForClientAsync scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Array of scopes requested for resource</param>
        <summary>
            [V2 API] Acquires token from the service for the confidential client. This method attempts to look up valid access token in the cache.
            </summary>
        <returns>Authentication result containing application token for the requested scopes</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenForClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenForClientAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, bool forceRefresh);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenForClientAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, bool forceRefresh) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClientAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenForClientAsync (scopes As IEnumerable(Of String), forceRefresh As Boolean) As Task(Of AuthenticationResult)" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenForClientAsync : seq&lt;string&gt; * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;" Usage="iConfidentialClientApplication.AcquireTokenForClientAsync (scopes, forceRefresh)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="forceRefresh" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scopes">Array of scopes requested for resource</param>
        <param name="forceRefresh">If TRUE, API will ignore the access token in the cache and attempt to acquire new access token using client credentials</param>
        <summary>
            [V2 API] Acquires token from the service for the confidential client. This method attempts to look up valid access token in the cache.
            </summary>
        <returns>Authentication result containing application token for the requested scopes</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenOnBehalfOf">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.UserAssertion userAssertion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.UserAssertion userAssertion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOf(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.UserAssertion)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenOnBehalfOf (scopes As IEnumerable(Of String), userAssertion As UserAssertion) As AcquireTokenOnBehalfOfParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenOnBehalfOf : seq&lt;string&gt; * Microsoft.Identity.Client.UserAssertion -&gt; Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder" Usage="iConfidentialClientApplication.AcquireTokenOnBehalfOf (scopes, userAssertion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="userAssertion" Type="Microsoft.Identity.Client.UserAssertion" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <param name="userAssertion">Instance of <see cref="T:Microsoft.Identity.Client.UserAssertion" /> containing credential information about
            the user on behalf of whom to get a token.</param>
        <summary>
            [V3 API] Acquires an access token for this application (usually a Web API) from the authority configured in the application,
            in order to access another downstream protected Web API on behalf of a user using the OAuth 2.0 On-Behalf-Of flow.
            See https://aka.ms/msal-net-on-behalf-of.
            This confidential client application was itself called with a token which will be provided in the
            <paramref name="userAssertion">userAssertion</paramref> parameter.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request</returns>
        <remarks>You can also chain the following optional parameters:
            <see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenOnBehalfOfAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenOnBehalfOfAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.UserAssertion userAssertion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenOnBehalfOfAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.UserAssertion userAssertion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOfAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.UserAssertion)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenOnBehalfOfAsync (scopes As IEnumerable(Of String), userAssertion As UserAssertion) As Task(Of AuthenticationResult)" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenOnBehalfOfAsync : seq&lt;string&gt; * Microsoft.Identity.Client.UserAssertion -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;" Usage="iConfidentialClientApplication.AcquireTokenOnBehalfOfAsync (scopes, userAssertion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="userAssertion" Type="Microsoft.Identity.Client.UserAssertion" />
      </Parameters>
      <Docs>
        <param name="scopes">Array of scopes requested for resource</param>
        <param name="userAssertion">Instance of UserAssertion containing user's token.</param>
        <summary>
            [V3 API] Acquires token using On-Behalf-Of flow. (See https://aka.ms/msal-net-on-behalf-of)
            </summary>
        <returns>Authentication result containing token of the user for the requested scopes</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcquireTokenOnBehalfOfAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenOnBehalfOfAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, Microsoft.Identity.Client.UserAssertion userAssertion, string authority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Identity.Client.AuthenticationResult&gt; AcquireTokenOnBehalfOfAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, class Microsoft.Identity.Client.UserAssertion userAssertion, string authority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenOnBehalfOfAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.UserAssertion,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AcquireTokenOnBehalfOfAsync (scopes As IEnumerable(Of String), userAssertion As UserAssertion, authority As String) As Task(Of AuthenticationResult)" />
      <MemberSignature Language="F#" Value="abstract member AcquireTokenOnBehalfOfAsync : seq&lt;string&gt; * Microsoft.Identity.Client.UserAssertion * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;" Usage="iConfidentialClientApplication.AcquireTokenOnBehalfOfAsync (scopes, userAssertion, authority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Identity.Client.AuthenticationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="userAssertion" Type="Microsoft.Identity.Client.UserAssertion" />
        <Parameter Name="authority" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Array of scopes requested for resource</param>
        <param name="userAssertion">Instance of UserAssertion containing user's token.</param>
        <param name="authority">Specific authority for which the token is requested. Passing a different value than configured does not change the configured value</param>
        <summary>
            [V3 API] Acquires token using On-Behalf-Of flow. (See https://aka.ms/msal-net-on-behalf-of)
            </summary>
        <returns>Authentication result containing token of the user for the requested scopes</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppTokenCache">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.ITokenCache AppTokenCache { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Identity.Client.ITokenCache AppTokenCache" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.IConfidentialClientApplication.AppTokenCache" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppTokenCache As ITokenCache" />
      <MemberSignature Language="F#" Value="member this.AppTokenCache : Microsoft.Identity.Client.ITokenCache" Usage="Microsoft.Identity.Client.IConfidentialClientApplication.AppTokenCache" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.ITokenCache</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>On .NET Framework and .NET Core you can also customize the token cache serialization.
            See https://aka.ms/msal-net-token-cache-serialization. This is taken care of by MSAL.NET on other platforms.
            </remarks>
        <Summary>
            Application token cache. This case holds access tokens and refresh tokens for the application. It's maintained
            and updated silently if needed when calling <see cref="M:Microsoft.Identity.Client.IConfidentialClientApplication.AcquireTokenForClient(System.Collections.Generic.IEnumerable{System.String})" /></Summary>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRequestUrl">
      <MemberSignature Language="C#" Value="public Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder GetAuthorizationRequestUrl (System.Collections.Generic.IEnumerable&lt;string&gt; scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder GetAuthorizationRequestUrl(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrl(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizationRequestUrl (scopes As IEnumerable(Of String)) As GetAuthorizationRequestUrlParameterBuilder" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRequestUrl : seq&lt;string&gt; -&gt; Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder" Usage="iConfidentialClientApplication.GetAuthorizationRequestUrl scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="scopes">Scopes requested to access a protected API</param>
        <summary>
            [V3 API] Computes the URL of the authorization request letting the user sign-in and consent to the application accessing specific scopes in
            the user's name. The URL targets the /authorize endpoint of the authority configured in the application.
            This override enables you to specify a login hint and extra query parameter.
            </summary>
        <returns>A builder enabling you to add optional parameters before executing the token request to get the
            URL of the STS authorization endpoint parameterized with the parameters</returns>
        <remarks>You can also chain the following optional parameters:
            <see cref="M:Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithRedirectUri(System.String)" /><see cref="M:Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithLoginHint(System.String)" /><see cref="M:Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1.WithExtraQueryParameters(System.Collections.Generic.Dictionary{System.String,System.String})" /><see cref="M:Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder.WithExtraScopesToConsent(System.Collections.Generic.IEnumerable{System.String})" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRequestUrlAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Uri&gt; GetAuthorizationRequestUrlAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string loginHint, string extraQueryParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Uri&gt; GetAuthorizationRequestUrlAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string loginHint, string extraQueryParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizationRequestUrlAsync (scopes As IEnumerable(Of String), loginHint As String, extraQueryParameters As String) As Task(Of Uri)" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRequestUrlAsync : seq&lt;string&gt; * string * string -&gt; System.Threading.Tasks.Task&lt;Uri&gt;" Usage="iConfidentialClientApplication.GetAuthorizationRequestUrlAsync (scopes, loginHint, extraQueryParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Uri&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="loginHint" Type="System.String" />
        <Parameter Name="extraQueryParameters" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Array of scopes requested for resource</param>
        <param name="loginHint">Identifier of the user. Generally a UPN.</param>
        <param name="extraQueryParameters">This parameter will be appended as is to the query string in the HTTP authentication request to the authority. The parameter can be null.</param>
        <summary>
            [V2 API] URL of the authorize endpoint including the query parameters.
            </summary>
        <returns>URL of the authorize endpoint including the query parameters.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationRequestUrlAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Uri&gt; GetAuthorizationRequestUrlAsync (System.Collections.Generic.IEnumerable&lt;string&gt; scopes, string redirectUri, string loginHint, string extraQueryParameters, System.Collections.Generic.IEnumerable&lt;string&gt; extraScopesToConsent, string authority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Uri&gt; GetAuthorizationRequestUrlAsync(class System.Collections.Generic.IEnumerable`1&lt;string&gt; scopes, string redirectUri, string loginHint, string extraQueryParameters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; extraScopesToConsent, string authority) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.IConfidentialClientApplication.GetAuthorizationRequestUrlAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAuthorizationRequestUrlAsync (scopes As IEnumerable(Of String), redirectUri As String, loginHint As String, extraQueryParameters As String, extraScopesToConsent As IEnumerable(Of String), authority As String) As Task(Of Uri)" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationRequestUrlAsync : seq&lt;string&gt; * string * string * string * seq&lt;string&gt; * string -&gt; System.Threading.Tasks.Task&lt;Uri&gt;" Usage="iConfidentialClientApplication.GetAuthorizationRequestUrlAsync (scopes, redirectUri, loginHint, extraQueryParameters, extraScopesToConsent, authority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.0.0</AssemblyVersion>
        <AssemblyVersion>4.8.1.0</AssemblyVersion>
        <AssemblyVersion>4.8.2.0</AssemblyVersion>
        <AssemblyVersion>4.9.0.0</AssemblyVersion>
        <AssemblyVersion>4.10.0.0</AssemblyVersion>
        <AssemblyVersion>4.11.0.0</AssemblyVersion>
        <AssemblyVersion>4.12.0.0</AssemblyVersion>
        <AssemblyVersion>4.13.0.0</AssemblyVersion>
        <AssemblyVersion>4.14.0.0</AssemblyVersion>
        <AssemblyVersion>4.15.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.0.0</AssemblyVersion>
        <AssemblyVersion>4.16.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Uri&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="redirectUri" Type="System.String" />
        <Parameter Name="loginHint" Type="System.String" />
        <Parameter Name="extraQueryParameters" Type="System.String" />
        <Parameter Name="extraScopesToConsent" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="authority" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">Array of scopes requested for resource</param>
        <param name="redirectUri">Address to return to upon receiving a response from the authority.</param>
        <param name="loginHint">Identifier of the user. Generally a UPN.</param>
        <param name="extraQueryParameters">This parameter will be appended as is to the query string in the HTTP authentication request to the authority. The parameter can be null.</param>
        <param name="extraScopesToConsent">Array of scopes for which a developer can request consent upfront.</param>
        <param name="authority">Specific authority for which the token is requested. Passing a different value than configured does not change the configured value</param>
        <summary>
            [V2 API] Gets URL of the authorize endpoint including the query parameters.
            </summary>
        <returns>URL of the authorize endpoint including the query parameters.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
