<Type Name="EmbeddedWebViewOptions" FullName="Microsoft.Identity.Client.EmbeddedWebViewOptions">
  <TypeSignature Language="C#" Value="public class EmbeddedWebViewOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EmbeddedWebViewOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.EmbeddedWebViewOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class EmbeddedWebViewOptions" />
  <TypeSignature Language="F#" Value="type EmbeddedWebViewOptions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>4.30.0.0</AssemblyVersion>
    <AssemblyVersion>4.30.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Options for using the modern Windows embedded browser WebView2. 
            For more details see https://aka.ms/msal-net-webview2
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EmbeddedWebViewOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.EmbeddedWebViewOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.30.0.0</AssemblyVersion>
        <AssemblyVersion>4.30.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.EmbeddedWebViewOptions.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="Microsoft.Identity.Client.EmbeddedWebViewOptions.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.30.0.0</AssemblyVersion>
        <AssemblyVersion>4.30.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Forces a static title to be set on the window hosting the browser. If not configured, the widow's title is set to the web page title.
            </summary>
        <value>To be added.</value>
        <remarks>Currently only affects WebView2 browser on Windows.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WebView2BrowserExecutableFolder">
      <MemberSignature Language="C#" Value="public string WebView2BrowserExecutableFolder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WebView2BrowserExecutableFolder" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder" />
      <MemberSignature Language="VB.NET" Value="Public Property WebView2BrowserExecutableFolder As String" />
      <MemberSignature Language="F#" Value="member this.WebView2BrowserExecutableFolder : string with get, set" Usage="Microsoft.Identity.Client.EmbeddedWebViewOptions.WebView2BrowserExecutableFolder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>4.30.0.0</AssemblyVersion>
        <AssemblyVersion>4.30.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("In case when WebView2 is not available, MSAL.NET will fallback to legacy WebView.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("In case when WebView2 is not available, MSAL.NET will fallback to legacy WebView.", true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            It is possible for applications to bundle a fixed version of the runtime, and ship it side-by-side.
            For this you need to tell MSAL (so it can tell WebView2) where to find the runtime bits by setting this property. If you don't set it, MSAL will attempt to use a system-wide "evergreen" installation of the runtime."
            For more details see: https://docs.microsoft.com/en-us/dotnet/api/microsoft.web.webview2.core.corewebview2environment.createasync?view=webview2-dotnet-1.0.705.50
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
