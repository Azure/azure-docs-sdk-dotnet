<Type Name="MsalUiRequiredException" FullName="Microsoft.Identity.Client.MsalUiRequiredException">
  <TypeSignature Language="C#" Value="public class MsalUiRequiredException : Microsoft.Identity.Client.MsalServiceException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MsalUiRequiredException extends Microsoft.Identity.Client.MsalServiceException" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Identity.Client.MsalUiRequiredException" />
  <TypeSignature Language="VB.NET" Value="Public Class MsalUiRequiredException&#xA;Inherits MsalServiceException" />
  <TypeSignature Language="F#" Value="type MsalUiRequiredException = class&#xA;    inherit MsalServiceException" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Identity.Client</AssemblyName>
    <AssemblyVersion>1.1.4.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Identity.Client.MsalServiceException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This exception class is to inform developers that UI interaction is required for authentication to 
            succeed. It's thrown when calling <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> or one
            of its overrides, and when the token does not exists in the cache, or the user needs to provide more content, or perform multiple factor authentication based
            on Azure AD policies, etc..
            For more details, see https://aka.ms/msal-net-exceptions
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalUiRequiredException (string errorCode, string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string errorCode, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.MsalUiRequiredException.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (errorCode As String, errorMessage As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Identity.Client.MsalUiRequiredException : string * string -&gt; Microsoft.Identity.Client.MsalUiRequiredException" Usage="new Microsoft.Identity.Client.MsalUiRequiredException (errorCode, errorMessage)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="errorCode" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="errorCode">
            The error code returned by the service or generated by the client. This is the code you can rely on
            for exception handling.
            </param>
        <param name="errorMessage">The error message that explains the reason for the exception.</param>
        <summary>
            Initializes a new instance of the exception class with a specified
            error code and error message.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MsalUiRequiredException (string errorCode, string errorMessage, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string errorCode, string errorMessage, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Identity.Client.MsalUiRequiredException.#ctor(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (errorCode As String, errorMessage As String, innerException As Exception)" />
      <MemberSignature Language="F#" Value="new Microsoft.Identity.Client.MsalUiRequiredException : string * string * Exception -&gt; Microsoft.Identity.Client.MsalUiRequiredException" Usage="new Microsoft.Identity.Client.MsalUiRequiredException (errorCode, errorMessage, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="errorCode" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="errorCode">
            The error code returned by the service or generated by the client. This is the code you can rely on
            for exception handling.
            </param>
        <param name="errorMessage">The error message that explains the reason for the exception.</param>
        <param name="innerException">Represents the root cause of the exception.</param>
        <summary>
            Initializes a new instance of the exception class with a specified
            error code, error message and inner exception indicating the root cause.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidGrantError">
      <MemberSignature Language="C#" Value="public const string InvalidGrantError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string InvalidGrantError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalUiRequiredException.InvalidGrantError" />
      <MemberSignature Language="VB.NET" Value="Public Const InvalidGrantError As String " />
      <MemberSignature Language="F#" Value="val mutable InvalidGrantError : string" Usage="Microsoft.Identity.Client.MsalUiRequiredException.InvalidGrantError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Standard OAuth2 protocol error code. It indicates to the libray that the application needs to expose the UI to the user  
            so that the user does an interactive action in order to get a new token.
            <para>Mitigation:</para> If your application is a <see cref="T:PublicClientApplication" /> call one of the <c>AcquireTokenAsync</c> overrides to 
            perform an interactive authentication. If your application is a <see cref="T:ConfidentialClientApplication" /> chances are that the Claims member
            of the exception is not empty. See <see cref="P:MsalServiceException.Claims" /> for the right mitigation
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NoPromptFailedError">
      <MemberSignature Language="C#" Value="public const string NoPromptFailedError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string NoPromptFailedError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalUiRequiredException.NoPromptFailedError" />
      <MemberSignature Language="VB.NET" Value="Public Const NoPromptFailedError As String " />
      <MemberSignature Language="F#" Value="val mutable NoPromptFailedError : string" Usage="Microsoft.Identity.Client.MsalUiRequiredException.NoPromptFailedError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            One of two conditions was encountered:
            <list type="bullet"><item><description>The <c>UIBehavior.Never</c> UI behavior was passed in an interactive token call, but the constraint could not be honored because user interaction is required,
            for instance because the user needs to re-sign-in, give consent for more scopes, or perform multiple factor authentication.
            </description></item><item><description>
            An error occurred during a silent web authentication that prevented the authentication flow from completing in a short enough time frame.
            </description></item></list><para>Remediation:</para>call one of the <c>AcquireTokenAsync</c> overrides so that the user of your application signs-in and accepts consent. 
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NoTokensFoundError">
      <MemberSignature Language="C#" Value="public const string NoTokensFoundError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string NoTokensFoundError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalUiRequiredException.NoTokensFoundError" />
      <MemberSignature Language="VB.NET" Value="Public Const NoTokensFoundError As String " />
      <MemberSignature Language="F#" Value="val mutable NoTokensFoundError : string" Usage="Microsoft.Identity.Client.MsalUiRequiredException.NoTokensFoundError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Mitigation:</para> If your application is a <see cref="T:Microsoft.Identity.Client.PublicClientApplication" /> call one of the <c>AcquireTokenAsync</c> overrides so
            that the user of your application signs-in and accepts consent. If your application is a <see cref="T:ConfidentialClientApplication" />. If it's a Web App
            you should have previously called <see cref="M:Microsoft.Identity.Client.ConfidentialClientApplication.AcquireTokenByAuthorizationCodeAsync(System.String,System.Collections.Generic.IEnumerable{System.String})" />
            as described in https://aka.ms/msal-net-authorization-code. This error should not happen in Web APIs.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenCacheNullError">
      <MemberSignature Language="C#" Value="public const string TokenCacheNullError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string TokenCacheNullError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalUiRequiredException.TokenCacheNullError" />
      <MemberSignature Language="VB.NET" Value="Public Const TokenCacheNullError As String " />
      <MemberSignature Language="F#" Value="val mutable TokenCacheNullError : string" Usage="Microsoft.Identity.Client.MsalUiRequiredException.TokenCacheNullError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This error code comes back from <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> calls when 
            the user cache had not been set in the application constructor.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserNullError">
      <MemberSignature Language="C#" Value="public const string UserNullError;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string UserNullError" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Identity.Client.MsalUiRequiredException.UserNullError" />
      <MemberSignature Language="VB.NET" Value="Public Const UserNullError As String " />
      <MemberSignature Language="F#" Value="val mutable UserNullError : string" Usage="Microsoft.Identity.Client.MsalUiRequiredException.UserNullError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Identity.Client</AssemblyName>
        <AssemblyVersion>1.1.4.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This error code comes back from <see cref="M:Microsoft.Identity.Client.ClientApplicationBase.AcquireTokenSilentAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.IAccount)" /> calls when a null user is 
            passed as the <c>account</c> parameter.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>