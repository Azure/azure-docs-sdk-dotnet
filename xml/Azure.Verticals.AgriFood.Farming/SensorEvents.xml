<Type Name="SensorEvents" FullName="Azure.Verticals.AgriFood.Farming.SensorEvents">
  <TypeSignature Language="C#" Value="public class SensorEvents" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SensorEvents extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.SensorEvents" />
  <TypeSignature Language="VB.NET" Value="Public Class SensorEvents" />
  <TypeSignature Language="F#" Value="type SensorEvents = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The SensorEvents sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SensorEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.SensorEvents.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of SensorEvents for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSensorEvents">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSensorEvents (string sensorId, string sensorPartnerId, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, bool? excludeDuplicateEvents, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSensorEvents(string sensorId, string sensorPartnerId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;bool&gt; excludeDuplicateEvents, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.SensorEvents.GetSensorEvents(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensorEvents (sensorId As String, sensorPartnerId As String, startDateTime As Nullable(Of DateTimeOffset), endDateTime As Nullable(Of DateTimeOffset), excludeDuplicateEvents As Nullable(Of Boolean), context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSensorEvents : string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSensorEvents : string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="sensorEvents.GetSensorEvents (sensorId, sensorPartnerId, startDateTime, endDateTime, excludeDuplicateEvents, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="excludeDuplicateEvents" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorId"> Id of the associated sensor. </param>
        <param name="sensorPartnerId"> Id of the associated sensor partner. </param>
        <param name="startDateTime">
            Search span start time of sensor events (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
            It is truncated upto seconds if fraction is provided.
            </param>
        <param name="endDateTime">
            Search span end time of sensor events (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
            It is truncated upto seconds if fraction is provided.
            </param>
        <param name="excludeDuplicateEvents"> Flag to exclude duplicate events and take the latest ones only (Default: true). </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of sensor events data. Time span for query is limited to 90 days at a time.
            Returns last 90 days events when startDateTime and endDateTime are not provided.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SensorEventListResponse</c>:
<code>{
  value: [
    {
      sensorId: string, # Optional. Id of the sensor.
      sensorPartnerId: string, # Optional. Id of the sensor partner.
      partyId: string, # Optional. Id of the associated party.
      boundaryId: string, # Optional. Id of the associated boundary.
      eventDateTime: string (ISO 8601 Format), # Optional. DateTime of sensor event observation.
      ingestionDateTime: string (ISO 8601 Format), # Optional. DateTime of sensor event ingestion to data store.
      measures: Dictionary&lt;string, any&gt;, # Optional. Sensor measures.
    }
  ], # Required. List of requested objects.
  skipToken: string, # Optional. Token used in retrieving the next page. If null, there are no additional pages.
  nextLink: string, # Optional. Continuation link (absolute URI) to the next page of results in the list.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorId" /> or <paramref name="sensorPartnerId" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensorEvents and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
SensorEvents client = new FarmBeatsClient(endpoint, credential).GetSensorEventsClient();

Response response = client.GetSensorEvents("<sensorId>", "<sensorPartnerId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetSensorEvents with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
SensorEvents client = new FarmBeatsClient(endpoint, credential).GetSensorEventsClient();

Response response = client.GetSensorEvents("<sensorId>", "<sensorPartnerId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("eventDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("ingestionDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("measures").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("skipToken").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensorEventsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSensorEventsAsync (string sensorId, string sensorPartnerId, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, bool? excludeDuplicateEvents, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSensorEventsAsync(string sensorId, string sensorPartnerId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; startDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; endDateTime, valuetype System.Nullable`1&lt;bool&gt; excludeDuplicateEvents, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.SensorEvents.GetSensorEventsAsync(System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensorEventsAsync (sensorId As String, sensorPartnerId As String, startDateTime As Nullable(Of DateTimeOffset), endDateTime As Nullable(Of DateTimeOffset), excludeDuplicateEvents As Nullable(Of Boolean), context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSensorEventsAsync : string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSensorEventsAsync : string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sensorEvents.GetSensorEventsAsync (sensorId, sensorPartnerId, startDateTime, endDateTime, excludeDuplicateEvents, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="startDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="endDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="excludeDuplicateEvents" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorId"> Id of the associated sensor. </param>
        <param name="sensorPartnerId"> Id of the associated sensor partner. </param>
        <param name="startDateTime">
            Search span start time of sensor events (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
            It is truncated upto seconds if fraction is provided.
            </param>
        <param name="endDateTime">
            Search span end time of sensor events (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
            It is truncated upto seconds if fraction is provided.
            </param>
        <param name="excludeDuplicateEvents"> Flag to exclude duplicate events and take the latest ones only (Default: true). </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a list of sensor events data. Time span for query is limited to 90 days at a time.
            Returns last 90 days events when startDateTime and endDateTime are not provided.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SensorEventListResponse</c>:
<code>{
  value: [
    {
      sensorId: string, # Optional. Id of the sensor.
      sensorPartnerId: string, # Optional. Id of the sensor partner.
      partyId: string, # Optional. Id of the associated party.
      boundaryId: string, # Optional. Id of the associated boundary.
      eventDateTime: string (ISO 8601 Format), # Optional. DateTime of sensor event observation.
      ingestionDateTime: string (ISO 8601 Format), # Optional. DateTime of sensor event ingestion to data store.
      measures: Dictionary&lt;string, any&gt;, # Optional. Sensor measures.
    }
  ], # Required. List of requested objects.
  skipToken: string, # Optional. Token used in retrieving the next page. If null, there are no additional pages.
  nextLink: string, # Optional. Continuation link (absolute URI) to the next page of results in the list.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorId" /> or <paramref name="sensorPartnerId" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensorEventsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
SensorEvents client = new FarmBeatsClient(endpoint, credential).GetSensorEventsClient();

Response response = await client.GetSensorEventsAsync("<sensorId>", "<sensorPartnerId>", null, null, null, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].ToString());
]]></code>
This sample shows how to call GetSensorEventsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
SensorEvents client = new FarmBeatsClient(endpoint, credential).GetSensorEventsClient();

Response response = await client.GetSensorEventsAsync("<sensorId>", "<sensorPartnerId>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), true, null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("eventDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("ingestionDateTime").ToString());
Console.WriteLine(result.GetProperty("value")[0].GetProperty("measures").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("skipToken").ToString());
Console.WriteLine(result.GetProperty("nextLink").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.SensorEvents.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.SensorEvents.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
