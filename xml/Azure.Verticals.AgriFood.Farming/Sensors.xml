<Type Name="Sensors" FullName="Azure.Verticals.AgriFood.Farming.Sensors">
  <TypeSignature Language="C#" Value="public class Sensors" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Sensors extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.Sensors" />
  <TypeSignature Language="VB.NET" Value="Public Class Sensors" />
  <TypeSignature Language="F#" Value="type Sensors = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Sensors sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Sensors ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of Sensors for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CreateOrUpdate (string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CreateOrUpdate(string sensorPartnerId, string sensorId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.CreateOrUpdate(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdate (sensorPartnerId As String, sensorId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdate : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CreateOrUpdate : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="sensors.CreateOrUpdate (sensorPartnerId, sensorId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a sensor entity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Sensor</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>Sensor</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" />, <paramref name="sensorId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateOrUpdate("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new
{
    sensorDataModelId = "<sensorDataModelId>",
    integrationId = "<integrationId>",
    hardwareId = "<hardwareId>",
    deviceId = "<deviceId>",
    type = "<type>",
    location = new
    {
        latitude = 123.45,
        longitude = 123.45,
    },
    port = new
    {
        name = "<name>",
        type = "<type>",
    },
    depthInMeters = new object[]
    {
        123.45
    },
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Response response = client.CreateOrUpdate("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("integrationId").ToString());
Console.WriteLine(result.GetProperty("hardwareId").ToString());
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateOrUpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CreateOrUpdateAsync (string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CreateOrUpdateAsync(string sensorPartnerId, string sensorId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.CreateOrUpdateAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateOrUpdateAsync (sensorPartnerId As String, sensorId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CreateOrUpdateAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CreateOrUpdateAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sensors.CreateOrUpdateAsync (sensorPartnerId, sensorId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a sensor entity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Sensor</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>Sensor</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" />, <paramref name="sensorId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateOrUpdateAsync("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new
{
    sensorDataModelId = "<sensorDataModelId>",
    integrationId = "<integrationId>",
    hardwareId = "<hardwareId>",
    deviceId = "<deviceId>",
    type = "<type>",
    location = new
    {
        latitude = 123.45,
        longitude = 123.45,
    },
    port = new
    {
        name = "<name>",
        type = "<type>",
    },
    depthInMeters = new object[]
    {
        123.45
    },
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Response response = await client.CreateOrUpdateAsync("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("integrationId").ToString());
Console.WriteLine(result.GetProperty("hardwareId").ToString());
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (string sensorPartnerId, string sensorId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(string sensorPartnerId, string sensorId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.Delete(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (sensorPartnerId As String, sensorId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Delete : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.Delete : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sensors.Delete (sensorPartnerId, sensorId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a sensor entity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = client.Delete("<sensorPartnerId>", "<sensorId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = client.Delete("<sensorPartnerId>", "<sensorId>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (string sensorPartnerId, string sensorId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(string sensorPartnerId, string sensorId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.DeleteAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (sensorPartnerId As String, sensorId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sensors.DeleteAsync (sensorPartnerId, sensorId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a sensor entity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = await client.DeleteAsync("<sensorPartnerId>", "<sensorId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = await client.DeleteAsync("<sensorPartnerId>", "<sensorId>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetConnectionString">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetConnectionString (string sensorPartnerId, string sensorId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetConnectionString(string sensorPartnerId, string sensorId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.GetConnectionString(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnectionString (sensorPartnerId As String, sensorId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetConnectionString : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetConnectionString : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sensors.GetConnectionString (sensorPartnerId, sensorId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a sensor connection string.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>IoTHubDeviceAuthentication</c>:
<code>{
  primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
  secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetConnectionString and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = client.GetConnectionString("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetConnectionString with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = client.GetConnectionString("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetConnectionStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetConnectionStringAsync (string sensorPartnerId, string sensorId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetConnectionStringAsync(string sensorPartnerId, string sensorId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.GetConnectionStringAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConnectionStringAsync (sensorPartnerId As String, sensorId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetConnectionStringAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetConnectionStringAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sensors.GetConnectionStringAsync (sensorPartnerId, sensorId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a sensor connection string.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>IoTHubDeviceAuthentication</c>:
<code>{
  primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
  secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetConnectionStringAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = await client.GetConnectionStringAsync("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetConnectionStringAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = await client.GetConnectionStringAsync("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensor">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSensor (string sensorPartnerId, string sensorId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSensor(string sensorPartnerId, string sensorId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.GetSensor(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensor (sensorPartnerId As String, sensorId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSensor : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSensor : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="sensors.GetSensor (sensorPartnerId, sensorId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a sensor entity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Sensor</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensor and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = client.GetSensor("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSensor with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = client.GetSensor("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("integrationId").ToString());
Console.WriteLine(result.GetProperty("hardwareId").ToString());
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensorAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSensorAsync (string sensorPartnerId, string sensorId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSensorAsync(string sensorPartnerId, string sensorId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.GetSensorAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensorAsync (sensorPartnerId As String, sensorId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSensorAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSensorAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sensors.GetSensorAsync (sensorPartnerId, sensorId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a sensor entity.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Sensor</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensorAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = await client.GetSensorAsync("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetSensorAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

Response response = await client.GetSensorAsync("<sensorPartnerId>", "<sensorId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("integrationId").ToString());
Console.WriteLine(result.GetProperty("hardwareId").ToString());
Console.WriteLine(result.GetProperty("deviceId").ToString());
Console.WriteLine(result.GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensors">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetSensors (string sensorPartnerId, System.Collections.Generic.IEnumerable&lt;string&gt; sensorDataModelIds, System.Collections.Generic.IEnumerable&lt;string&gt; sensorMappingIds, System.Collections.Generic.IEnumerable&lt;string&gt; deviceIds, System.Collections.Generic.IEnumerable&lt;string&gt; ids, System.Collections.Generic.IEnumerable&lt;string&gt; names, System.Collections.Generic.IEnumerable&lt;string&gt; propertyFilters, System.Collections.Generic.IEnumerable&lt;string&gt; statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetSensors(string sensorPartnerId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; sensorDataModelIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; sensorMappingIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; deviceIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; ids, class System.Collections.Generic.IEnumerable`1&lt;string&gt; names, class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyFilters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; statuses, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minLastModifiedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxLastModifiedDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.GetSensors(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensors (sensorPartnerId As String, sensorDataModelIds As IEnumerable(Of String), sensorMappingIds As IEnumerable(Of String), deviceIds As IEnumerable(Of String), ids As IEnumerable(Of String), names As IEnumerable(Of String), propertyFilters As IEnumerable(Of String), statuses As IEnumerable(Of String), minCreatedDateTime As Nullable(Of DateTimeOffset), maxCreatedDateTime As Nullable(Of DateTimeOffset), minLastModifiedDateTime As Nullable(Of DateTimeOffset), maxLastModifiedDateTime As Nullable(Of DateTimeOffset), maxPageSize As Nullable(Of Integer), skipToken As String, context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSensors : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetSensors : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="sensors.GetSensors (sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorDataModelIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="sensorMappingIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="deviceIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="names" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="propertyFilters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="statuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="minCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="minLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the associated sensor partner. </param>
        <param name="sensorDataModelIds"> Id's of the sensor data models. </param>
        <param name="sensorMappingIds"> Ids of the sensor mappings. </param>
        <param name="deviceIds"> Id's of the devices. </param>
        <param name="ids"> Ids of the resource. </param>
        <param name="names"> Names of the resource. </param>
        <param name="propertyFilters">
            Filters on key-value pairs within the Properties object.
            eg. "{testKey} eq {testValue}".
            </param>
        <param name="statuses"> Statuses of the resource. </param>
        <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a paginated list of sensor resources.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SensorListResponseValue</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensors and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

foreach (BinaryData item in client.GetSensors("<sensorPartnerId>", null, null, null, null, null, null, null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSensors with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

foreach (BinaryData item in client.GetSensors("<sensorPartnerId>", new string[] { "<sensorDataModelIds>" }, new string[] { "<sensorMappingIds>" }, new string[] { "<deviceIds>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
    Console.WriteLine(result.GetProperty("integrationId").ToString());
    Console.WriteLine(result.GetProperty("hardwareId").ToString());
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
    Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
    Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensorsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetSensorsAsync (string sensorPartnerId, System.Collections.Generic.IEnumerable&lt;string&gt; sensorDataModelIds, System.Collections.Generic.IEnumerable&lt;string&gt; sensorMappingIds, System.Collections.Generic.IEnumerable&lt;string&gt; deviceIds, System.Collections.Generic.IEnumerable&lt;string&gt; ids, System.Collections.Generic.IEnumerable&lt;string&gt; names, System.Collections.Generic.IEnumerable&lt;string&gt; propertyFilters, System.Collections.Generic.IEnumerable&lt;string&gt; statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetSensorsAsync(string sensorPartnerId, class System.Collections.Generic.IEnumerable`1&lt;string&gt; sensorDataModelIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; sensorMappingIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; deviceIds, class System.Collections.Generic.IEnumerable`1&lt;string&gt; ids, class System.Collections.Generic.IEnumerable`1&lt;string&gt; names, class System.Collections.Generic.IEnumerable`1&lt;string&gt; propertyFilters, class System.Collections.Generic.IEnumerable`1&lt;string&gt; statuses, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxCreatedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; minLastModifiedDateTime, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; maxLastModifiedDateTime, valuetype System.Nullable`1&lt;int32&gt; maxPageSize, string skipToken, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.GetSensorsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32},System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensorsAsync (sensorPartnerId As String, sensorDataModelIds As IEnumerable(Of String), sensorMappingIds As IEnumerable(Of String), deviceIds As IEnumerable(Of String), ids As IEnumerable(Of String), names As IEnumerable(Of String), propertyFilters As IEnumerable(Of String), statuses As IEnumerable(Of String), minCreatedDateTime As Nullable(Of DateTimeOffset), maxCreatedDateTime As Nullable(Of DateTimeOffset), minLastModifiedDateTime As Nullable(Of DateTimeOffset), maxLastModifiedDateTime As Nullable(Of DateTimeOffset), maxPageSize As Nullable(Of Integer), skipToken As String, context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetSensorsAsync : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetSensorsAsync : string * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * seq&lt;string&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;int&gt; * string * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="sensors.GetSensorsAsync (sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorDataModelIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="sensorMappingIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="deviceIds" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="ids" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="names" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="propertyFilters" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="statuses" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="minCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxCreatedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="minLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxLastModifiedDateTime" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="maxPageSize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the associated sensor partner. </param>
        <param name="sensorDataModelIds"> Id's of the sensor data models. </param>
        <param name="sensorMappingIds"> Ids of the sensor mappings. </param>
        <param name="deviceIds"> Id's of the devices. </param>
        <param name="ids"> Ids of the resource. </param>
        <param name="names"> Names of the resource. </param>
        <param name="propertyFilters">
            Filters on key-value pairs within the Properties object.
            eg. "{testKey} eq {testValue}".
            </param>
        <param name="statuses"> Statuses of the resource. </param>
        <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        <param name="maxPageSize">
            Maximum number of items needed (inclusive).
            Minimum = 10, Maximum = 1000, Default value = 50.
            </param>
        <param name="skipToken"> Skip token for getting next set of results. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Returns a paginated list of sensor resources.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SensorListResponseValue</c>:
<code>{
  sensorDataModelId: string, # Optional. Id of the associated sensor data model.
  integrationId: string, # Optional. Integration id for the device.
  hardwareId: string, # Optional. Id of the associated hardware.
  deviceId: string, # Optional. Id of the associated device.
  type: string, # Optional. Type of sensor.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Optional. Location model class.
  port: {
    name: string, # Optional. Name of the port.
    type: string, # Optional. Type of port digital/analog.
  }, # Optional. Schema for storing port values.
  depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
Like sensor moisture at 2m, 4m, 6m.
  sensorPartnerId: string, # Optional. Id of the associated sensor partner.
  id: string, # Optional. Id of the resource.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and
only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensorsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

await foreach (BinaryData item in client.GetSensorsAsync("<sensorPartnerId>", null, null, null, null, null, null, null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSensorsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

await foreach (BinaryData item in client.GetSensorsAsync("<sensorPartnerId>", new string[] { "<sensorDataModelIds>" }, new string[] { "<sensorMappingIds>" }, new string[] { "<deviceIds>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
    Console.WriteLine(result.GetProperty("integrationId").ToString());
    Console.WriteLine(result.GetProperty("hardwareId").ToString());
    Console.WriteLine(result.GetProperty("deviceId").ToString());
    Console.WriteLine(result.GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
    Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
    Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.Sensors.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.Sensors.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewConnectionString">
      <MemberSignature Language="C#" Value="public virtual Azure.Response RenewConnectionString (string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response RenewConnectionString(string sensorPartnerId, string sensorId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.RenewConnectionString(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewConnectionString (sensorPartnerId As String, sensorId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member RenewConnectionString : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.RenewConnectionString : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="sensors.RenewConnectionString (sensorPartnerId, sensorId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Renews a sensor connection string.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SensorRenewConnectionStringModel</c>:
<code>{
  connectionStringType: "Primary" | "Secondary" | "Both", # Required. Specifies the type of connection string key to be renewed valid values - Primary/Secondary/Both.
}
</code>

Response Body:

Schema for <c>IoTHubDeviceAuthentication</c>:
<code>{
  primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
  secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" />, <paramref name="sensorId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RenewConnectionString and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new
{
    connectionStringType = "Primary",
});
Response response = client.RenewConnectionString("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RenewConnectionString with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new
{
    connectionStringType = "Primary",
});
Response response = client.RenewConnectionString("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="RenewConnectionStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RenewConnectionStringAsync (string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RenewConnectionStringAsync(string sensorPartnerId, string sensorId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.Sensors.RenewConnectionStringAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewConnectionStringAsync (sensorPartnerId As String, sensorId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RenewConnectionStringAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RenewConnectionStringAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sensors.RenewConnectionStringAsync (sensorPartnerId, sensorId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensorPartnerId" Type="System.String" />
        <Parameter Name="sensorId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="sensorPartnerId"> Id of the sensor partner. </param>
        <param name="sensorId"> Id of the sensor resource. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Renews a sensor connection string.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SensorRenewConnectionStringModel</c>:
<code>{
  connectionStringType: "Primary" | "Secondary" | "Both", # Required. Specifies the type of connection string key to be renewed valid values - Primary/Secondary/Both.
}
</code>

Response Body:

Schema for <c>IoTHubDeviceAuthentication</c>:
<code>{
  primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
  secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensorPartnerId" />, <paramref name="sensorId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="sensorPartnerId" /> or <paramref name="sensorId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call RenewConnectionStringAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new
{
    connectionStringType = "Primary",
});
Response response = await client.RenewConnectionStringAsync("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call RenewConnectionStringAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
Sensors client = new FarmBeatsClient(endpoint, credential).GetSensorsClient();

using RequestContent content = RequestContent.Create(new
{
    connectionStringType = "Primary",
});
Response response = await client.RenewConnectionStringAsync("<sensorPartnerId>", "<sensorId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>
