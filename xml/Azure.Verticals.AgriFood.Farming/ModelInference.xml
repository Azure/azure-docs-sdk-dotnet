<Type Name="ModelInference" FullName="Azure.Verticals.AgriFood.Farming.ModelInference">
  <TypeSignature Language="C#" Value="public class ModelInference" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ModelInference extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Verticals.AgriFood.Farming.ModelInference" />
  <TypeSignature Language="VB.NET" Value="Public Class ModelInference" />
  <TypeSignature Language="F#" Value="type ModelInference = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The ModelInference sub-client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ModelInference ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of ModelInference for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBiomassModelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateBiomassModelJob (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateBiomassModelJob(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.CreateBiomassModelJob(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateBiomassModelJob (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateBiomassModelJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateBiomassModelJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="modelInference.CreateBiomassModelJob (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> JobId provided by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a Biomass Model job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>BiomassModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
  modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
  cropName: "Corn", # Required. Crop name for biomass model. Available Value: Corn.
  plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>BiomassModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
  modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
  cropName: "Corn", # Required. Crop name for biomass model. Available Value: Corn.
  plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateBiomassModelJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    cropName = "Corn",
    plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    weatherExtensionId = "<weatherExtensionId>",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
});
Operation<BinaryData> operation = client.CreateBiomassModelJob(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
]]></code>
This sample shows how to call CreateBiomassModelJob with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    cropName = "Corn",
    plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    weatherExtensionId = "<weatherExtensionId>",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Operation<BinaryData> operation = client.CreateBiomassModelJob(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateBiomassModelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateBiomassModelJobAsync (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateBiomassModelJobAsync(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.CreateBiomassModelJobAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateBiomassModelJobAsync (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateBiomassModelJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateBiomassModelJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="modelInference.CreateBiomassModelJobAsync (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> JobId provided by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a Biomass Model job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>BiomassModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
  modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
  cropName: "Corn", # Required. Crop name for biomass model. Available Value: Corn.
  plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>BiomassModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
  modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
  cropName: "Corn", # Required. Crop name for biomass model. Available Value: Corn.
  plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateBiomassModelJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    cropName = "Corn",
    plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    weatherExtensionId = "<weatherExtensionId>",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
});
Operation<BinaryData> operation = await client.CreateBiomassModelJobAsync(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
]]></code>
This sample shows how to call CreateBiomassModelJobAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    cropName = "Corn",
    plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    weatherExtensionId = "<weatherExtensionId>",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Operation<BinaryData> operation = await client.CreateBiomassModelJobAsync(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateSensorPlacementModelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateSensorPlacementModelJob (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateSensorPlacementModelJob(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.CreateSensorPlacementModelJob(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSensorPlacementModelJob (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateSensorPlacementModelJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateSensorPlacementModelJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="modelInference.CreateSensorPlacementModelJob (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> JobId provided by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a Sensor Placement Model job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SensorPlacementModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which sensor placement is being calculated.
  modelVersion: string, # Required. The version of the sensor placement model to be run.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Start datetime for satellite data to be pulled.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime for satellite data to be pulled.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  sensorType: string, # Required. SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.
  isRanked: boolean, # Required. IsRanked, if True the sensor placements will be ranked.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>SensorPlacementModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which sensor placement is being calculated.
  modelVersion: string, # Required. The version of the sensor placement model to be run.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Start datetime for satellite data to be pulled.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime for satellite data to be pulled.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  sensorType: string, # Required. SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.
  isRanked: boolean, # Required. IsRanked, if True the sensor placements will be ranked.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateSensorPlacementModelJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    sensorType = "<sensorType>",
    isRanked = true,
});
Operation<BinaryData> operation = client.CreateSensorPlacementModelJob(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
]]></code>
This sample shows how to call CreateSensorPlacementModelJob with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    sensorType = "<sensorType>",
    isRanked = true,
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Operation<BinaryData> operation = client.CreateSensorPlacementModelJob(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateSensorPlacementModelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateSensorPlacementModelJobAsync (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateSensorPlacementModelJobAsync(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.CreateSensorPlacementModelJobAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSensorPlacementModelJobAsync (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateSensorPlacementModelJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateSensorPlacementModelJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="modelInference.CreateSensorPlacementModelJobAsync (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> JobId provided by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a Sensor Placement Model job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SensorPlacementModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which sensor placement is being calculated.
  modelVersion: string, # Required. The version of the sensor placement model to be run.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Start datetime for satellite data to be pulled.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime for satellite data to be pulled.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  sensorType: string, # Required. SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.
  isRanked: boolean, # Required. IsRanked, if True the sensor placements will be ranked.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>SensorPlacementModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which sensor placement is being calculated.
  modelVersion: string, # Required. The version of the sensor placement model to be run.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Start datetime for satellite data to be pulled.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime for satellite data to be pulled.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  sensorType: string, # Required. SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.
  isRanked: boolean, # Required. IsRanked, if True the sensor placements will be ranked.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateSensorPlacementModelJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    sensorType = "<sensorType>",
    isRanked = true,
});
Operation<BinaryData> operation = await client.CreateSensorPlacementModelJobAsync(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
]]></code>
This sample shows how to call CreateSensorPlacementModelJobAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    modelVersion = "<modelVersion>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    sensorType = "<sensorType>",
    isRanked = true,
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Operation<BinaryData> operation = await client.CreateSensorPlacementModelJobAsync(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateSoilMoistureModelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; CreateSoilMoistureModelJob (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; CreateSoilMoistureModelJob(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.CreateSoilMoistureModelJob(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSoilMoistureModelJob (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member CreateSoilMoistureModelJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.CreateSoilMoistureModelJob : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="modelInference.CreateSoilMoistureModelJob (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> JobId provided by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a SoilMoisture Model job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SoilMoistureModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
  sensorDataModelId: string, # Required. Sensor data model Id.
  sensorPartnerId: string, # Required. Sensor partner Id.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  modelVersion: string, # Required. The version of the soil moisture model to be run.
  sensorDefinition: {
    sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
    minProperty: string, # Required. The measurement name for minimum measurement value.
    maxProperty: string, # Required. The measurement name for maximum measurement value.
  }, # Required. Schema for storing sensor definition keywords.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>SoilMoistureModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
  sensorDataModelId: string, # Required. Sensor data model Id.
  sensorPartnerId: string, # Required. Sensor partner Id.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  modelVersion: string, # Required. The version of the soil moisture model to be run.
  sensorDefinition: {
    sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
    minProperty: string, # Required. The measurement name for minimum measurement value.
    maxProperty: string, # Required. The measurement name for maximum measurement value.
  }, # Required. Schema for storing sensor definition keywords.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateSoilMoistureModelJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    sensorDataModelId = "<sensorDataModelId>",
    sensorPartnerId = "<sensorPartnerId>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
    modelVersion = "<modelVersion>",
    sensorDefinition = new
    {
        sensorMeasurement = "<sensorMeasurement>",
        minProperty = "<minProperty>",
        maxProperty = "<maxProperty>",
    },
});
Operation<BinaryData> operation = client.CreateSoilMoistureModelJob(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
]]></code>
This sample shows how to call CreateSoilMoistureModelJob with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    sensorDataModelId = "<sensorDataModelId>",
    sensorPartnerId = "<sensorPartnerId>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
    modelVersion = "<modelVersion>",
    sensorDefinition = new
    {
        sensorMeasurement = "<sensorMeasurement>",
        minProperty = "<minProperty>",
        maxProperty = "<maxProperty>",
    },
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Operation<BinaryData> operation = client.CreateSoilMoistureModelJob(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateSoilMoistureModelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; CreateSoilMoistureModelJobAsync (Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; CreateSoilMoistureModelJobAsync(valuetype Azure.WaitUntil waitUntil, string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.CreateSoilMoistureModelJobAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSoilMoistureModelJobAsync (waitUntil As WaitUntil, jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member CreateSoilMoistureModelJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.CreateSoilMoistureModelJobAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="modelInference.CreateSoilMoistureModelJobAsync (waitUntil, jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="jobId"> JobId provided by user. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Create a SoilMoisture Model job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Operation" /> representing an asynchronous operation on the service. </returns>
        <remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SoilMoistureModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
  sensorDataModelId: string, # Required. Sensor data model Id.
  sensorPartnerId: string, # Required. Sensor partner Id.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  modelVersion: string, # Required. The version of the soil moisture model to be run.
  sensorDefinition: {
    sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
    minProperty: string, # Required. The measurement name for minimum measurement value.
    maxProperty: string, # Required. The measurement name for maximum measurement value.
  }, # Required. Schema for storing sensor definition keywords.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>SoilMoistureModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
  sensorDataModelId: string, # Required. Sensor data model Id.
  sensorPartnerId: string, # Required. Sensor partner Id.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  modelVersion: string, # Required. The version of the soil moisture model to be run.
  sensorDefinition: {
    sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
    minProperty: string, # Required. The measurement name for minimum measurement value.
    maxProperty: string, # Required. The measurement name for maximum measurement value.
  }, # Required. Schema for storing sensor definition keywords.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CreateSoilMoistureModelJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    sensorDataModelId = "<sensorDataModelId>",
    sensorPartnerId = "<sensorPartnerId>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
    modelVersion = "<modelVersion>",
    sensorDefinition = new
    {
        sensorMeasurement = "<sensorMeasurement>",
        minProperty = "<minProperty>",
        maxProperty = "<maxProperty>",
    },
});
Operation<BinaryData> operation = await client.CreateSoilMoistureModelJobAsync(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
]]></code>
This sample shows how to call CreateSoilMoistureModelJobAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

using RequestContent content = RequestContent.Create(new
{
    partyId = "<partyId>",
    boundaryId = "<boundaryId>",
    sensorDataModelId = "<sensorDataModelId>",
    sensorPartnerId = "<sensorPartnerId>",
    inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
    inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
    satelliteProvider = "Microsoft",
    satelliteSource = "Sentinel_2_L2A",
    imageResolution = 123.45,
    imageFormat = "TIF",
    modelVersion = "<modelVersion>",
    sensorDefinition = new
    {
        sensorMeasurement = "<sensorMeasurement>",
        minProperty = "<minProperty>",
        maxProperty = "<maxProperty>",
    },
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Operation<BinaryData> operation = await client.CreateSoilMoistureModelJobAsync(WaitUntil.Completed, "<jobId>", content);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetBiomassModelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetBiomassModelJob (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetBiomassModelJob(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.GetBiomassModelJob(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBiomassModelJob (jobId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetBiomassModelJob : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetBiomassModelJob : string * Azure.RequestContext -&gt; Azure.Response" Usage="modelInference.GetBiomassModelJob (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Biomass Model job's details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BiomassModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
  modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
  cropName: "Corn", # Required. Crop name for biomass model. Available Value: Corn.
  plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetBiomassModelJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = client.GetBiomassModelJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
]]></code>
This sample shows how to call GetBiomassModelJob with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = client.GetBiomassModelJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetBiomassModelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetBiomassModelJobAsync (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetBiomassModelJobAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.GetBiomassModelJobAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBiomassModelJobAsync (jobId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetBiomassModelJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetBiomassModelJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="modelInference.GetBiomassModelJobAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Biomass Model job's details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BiomassModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
  modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
  cropName: "Corn", # Required. Crop name for biomass model. Available Value: Corn.
  plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetBiomassModelJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = await client.GetBiomassModelJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
]]></code>
This sample shows how to call GetBiomassModelJobAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = await client.GetBiomassModelJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("cropName").ToString());
Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensorPlacementModelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSensorPlacementModelJob (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSensorPlacementModelJob(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.GetSensorPlacementModelJob(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensorPlacementModelJob (jobId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSensorPlacementModelJob : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSensorPlacementModelJob : string * Azure.RequestContext -&gt; Azure.Response" Usage="modelInference.GetSensorPlacementModelJob (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Sensor Placement Model job's details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SensorPlacementModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which sensor placement is being calculated.
  modelVersion: string, # Required. The version of the sensor placement model to be run.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Start datetime for satellite data to be pulled.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime for satellite data to be pulled.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  sensorType: string, # Required. SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.
  isRanked: boolean, # Required. IsRanked, if True the sensor placements will be ranked.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensorPlacementModelJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = client.GetSensorPlacementModelJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
]]></code>
This sample shows how to call GetSensorPlacementModelJob with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = client.GetSensorPlacementModelJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSensorPlacementModelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSensorPlacementModelJobAsync (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSensorPlacementModelJobAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.GetSensorPlacementModelJobAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSensorPlacementModelJobAsync (jobId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSensorPlacementModelJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSensorPlacementModelJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="modelInference.GetSensorPlacementModelJobAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get Sensor Placement Model job's details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SensorPlacementModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which sensor placement is being calculated.
  modelVersion: string, # Required. The version of the sensor placement model to be run.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Start datetime for satellite data to be pulled.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime for satellite data to be pulled.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  sensorType: string, # Required. SensorType. The sensor placement map generated for sensor type (e.g., soil moisture, soil temperature, npk). Available Value: SoilMoisture.
  isRanked: boolean, # Required. IsRanked, if True the sensor placements will be ranked.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSensorPlacementModelJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = await client.GetSensorPlacementModelJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
]]></code>
This sample shows how to call GetSensorPlacementModelJobAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = await client.GetSensorPlacementModelJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("sensorType").ToString());
Console.WriteLine(result.GetProperty("isRanked").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSoilMoistureModelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetSoilMoistureModelJob (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetSoilMoistureModelJob(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.GetSoilMoistureModelJob(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSoilMoistureModelJob (jobId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetSoilMoistureModelJob : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetSoilMoistureModelJob : string * Azure.RequestContext -&gt; Azure.Response" Usage="modelInference.GetSoilMoistureModelJob (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get SoilMoisture Model job's details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SoilMoistureModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
  sensorDataModelId: string, # Required. Sensor data model Id.
  sensorPartnerId: string, # Required. Sensor partner Id.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  modelVersion: string, # Required. The version of the soil moisture model to be run.
  sensorDefinition: {
    sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
    minProperty: string, # Required. The measurement name for minimum measurement value.
    maxProperty: string, # Required. The measurement name for maximum measurement value.
  }, # Required. Schema for storing sensor definition keywords.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSoilMoistureModelJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = client.GetSoilMoistureModelJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
]]></code>
This sample shows how to call GetSoilMoistureModelJob with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = client.GetSoilMoistureModelJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetSoilMoistureModelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetSoilMoistureModelJobAsync (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetSoilMoistureModelJobAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Verticals.AgriFood.Farming.ModelInference.GetSoilMoistureModelJobAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSoilMoistureModelJobAsync (jobId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetSoilMoistureModelJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetSoilMoistureModelJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="modelInference.GetSoilMoistureModelJobAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Get SoilMoisture Model job's details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SoilMoistureModelJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
  sensorDataModelId: string, # Required. Sensor data model Id.
  sensorPartnerId: string, # Required. Sensor partner Id.
  inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
  inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
  satelliteProvider: "Microsoft", # Required. Provider of satellite data. Available Value: Microsoft.
  satelliteSource: "Sentinel_2_L2A" | "Sentinel_2_L1C", # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
  imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
  imageFormat: "TIF", # Required. ImageFormat. Available value: TIF.
  modelVersion: string, # Required. The version of the soil moisture model to be run.
  sensorDefinition: {
    sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
    minProperty: string, # Required. The measurement name for minimum measurement value.
    maxProperty: string, # Required. The measurement name for maximum measurement value.
  }, # Required. Schema for storing sensor definition keywords.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: 'Waiting', 'Running', 'Succeeded', 'Failed', 'Cancelled'.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetSoilMoistureModelJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = await client.GetSoilMoistureModelJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
]]></code>
This sample shows how to call GetSoilMoistureModelJobAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
ModelInference client = new FarmBeatsClient(endpoint, credential).GetModelInferenceClient();

Response response = await client.GetSoilMoistureModelJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
Console.WriteLine(result.GetProperty("satelliteSource").ToString());
Console.WriteLine(result.GetProperty("imageResolution").ToString());
Console.WriteLine(result.GetProperty("imageFormat").ToString());
Console.WriteLine(result.GetProperty("modelVersion").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Verticals.AgriFood.Farming.ModelInference.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Verticals.AgriFood.Farming.ModelInference.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Verticals.AgriFood.Farming</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
