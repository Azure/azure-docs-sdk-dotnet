<Type Name="MockableLogicArmClient" FullName="Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient">
  <TypeSignature Language="C#" Value="public class MockableLogicArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableLogicArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableLogicArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableLogicArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableLogicArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountAgreementResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountAgreementResource GetIntegrationAccountAgreementResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountAgreementResource GetIntegrationAccountAgreementResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountAgreementResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountAgreementResource (id As ResourceIdentifier) As IntegrationAccountAgreementResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountAgreementResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountAgreementResource&#xA;override this.GetIntegrationAccountAgreementResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountAgreementResource" Usage="mockableLogicArmClient.GetIntegrationAccountAgreementResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountAgreementResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountAgreementResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountAgreementResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountAgreementResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountAgreementResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountAssemblyDefinitionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource GetIntegrationAccountAssemblyDefinitionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource GetIntegrationAccountAssemblyDefinitionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountAssemblyDefinitionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountAssemblyDefinitionResource (id As ResourceIdentifier) As IntegrationAccountAssemblyDefinitionResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountAssemblyDefinitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource&#xA;override this.GetIntegrationAccountAssemblyDefinitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource" Usage="mockableLogicArmClient.GetIntegrationAccountAssemblyDefinitionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountAssemblyDefinitionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountBatchConfigurationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource GetIntegrationAccountBatchConfigurationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource GetIntegrationAccountBatchConfigurationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountBatchConfigurationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountBatchConfigurationResource (id As ResourceIdentifier) As IntegrationAccountBatchConfigurationResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountBatchConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource&#xA;override this.GetIntegrationAccountBatchConfigurationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource" Usage="mockableLogicArmClient.GetIntegrationAccountBatchConfigurationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountBatchConfigurationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountCertificateResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountCertificateResource GetIntegrationAccountCertificateResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountCertificateResource GetIntegrationAccountCertificateResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountCertificateResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountCertificateResource (id As ResourceIdentifier) As IntegrationAccountCertificateResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountCertificateResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountCertificateResource&#xA;override this.GetIntegrationAccountCertificateResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountCertificateResource" Usage="mockableLogicArmClient.GetIntegrationAccountCertificateResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountCertificateResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountCertificateResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountCertificateResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountCertificateResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountCertificateResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountMapResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountMapResource GetIntegrationAccountMapResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountMapResource GetIntegrationAccountMapResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountMapResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountMapResource (id As ResourceIdentifier) As IntegrationAccountMapResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountMapResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountMapResource&#xA;override this.GetIntegrationAccountMapResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountMapResource" Usage="mockableLogicArmClient.GetIntegrationAccountMapResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountMapResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountMapResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountMapResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountMapResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountMapResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountPartnerResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountPartnerResource GetIntegrationAccountPartnerResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountPartnerResource GetIntegrationAccountPartnerResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountPartnerResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountPartnerResource (id As ResourceIdentifier) As IntegrationAccountPartnerResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountPartnerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountPartnerResource&#xA;override this.GetIntegrationAccountPartnerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountPartnerResource" Usage="mockableLogicArmClient.GetIntegrationAccountPartnerResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountPartnerResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountPartnerResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountPartnerResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountPartnerResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountPartnerResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountResource GetIntegrationAccountResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountResource GetIntegrationAccountResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountResource (id As ResourceIdentifier) As IntegrationAccountResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountResource&#xA;override this.GetIntegrationAccountResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountResource" Usage="mockableLogicArmClient.GetIntegrationAccountResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountSchemaResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountSchemaResource GetIntegrationAccountSchemaResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountSchemaResource GetIntegrationAccountSchemaResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountSchemaResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountSchemaResource (id As ResourceIdentifier) As IntegrationAccountSchemaResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountSchemaResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountSchemaResource&#xA;override this.GetIntegrationAccountSchemaResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountSchemaResource" Usage="mockableLogicArmClient.GetIntegrationAccountSchemaResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountSchemaResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountSchemaResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountSchemaResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountSchemaResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountSchemaResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountSessionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountSessionResource GetIntegrationAccountSessionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountSessionResource GetIntegrationAccountSessionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationAccountSessionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountSessionResource (id As ResourceIdentifier) As IntegrationAccountSessionResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountSessionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountSessionResource&#xA;override this.GetIntegrationAccountSessionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationAccountSessionResource" Usage="mockableLogicArmClient.GetIntegrationAccountSessionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountSessionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountSessionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationAccountSessionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountSessionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationAccountSessionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationServiceEnvironmentManagedApiResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource GetIntegrationServiceEnvironmentManagedApiResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource GetIntegrationServiceEnvironmentManagedApiResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationServiceEnvironmentManagedApiResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationServiceEnvironmentManagedApiResource (id As ResourceIdentifier) As IntegrationServiceEnvironmentManagedApiResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationServiceEnvironmentManagedApiResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource&#xA;override this.GetIntegrationServiceEnvironmentManagedApiResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource" Usage="mockableLogicArmClient.GetIntegrationServiceEnvironmentManagedApiResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentManagedApiResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationServiceEnvironmentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource GetIntegrationServiceEnvironmentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource GetIntegrationServiceEnvironmentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetIntegrationServiceEnvironmentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationServiceEnvironmentResource (id As ResourceIdentifier) As IntegrationServiceEnvironmentResource" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationServiceEnvironmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&#xA;override this.GetIntegrationServiceEnvironmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource" Usage="mockableLogicArmClient.GetIntegrationServiceEnvironmentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowResource GetLogicWorkflowResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowResource GetLogicWorkflowResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowResource (id As ResourceIdentifier) As LogicWorkflowResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowResource&#xA;override this.GetLogicWorkflowResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowResource" Usage="mockableLogicArmClient.GetLogicWorkflowResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunActionRepetitionRequestHistoryResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource GetLogicWorkflowRunActionRepetitionRequestHistoryResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource GetLogicWorkflowRunActionRepetitionRequestHistoryResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunActionRepetitionRequestHistoryResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunActionRepetitionRequestHistoryResource (id As ResourceIdentifier) As LogicWorkflowRunActionRepetitionRequestHistoryResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunActionRepetitionRequestHistoryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource&#xA;override this.GetLogicWorkflowRunActionRepetitionRequestHistoryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunActionRepetitionRequestHistoryResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionRequestHistoryResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunActionRepetitionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource GetLogicWorkflowRunActionRepetitionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource GetLogicWorkflowRunActionRepetitionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunActionRepetitionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunActionRepetitionResource (id As ResourceIdentifier) As LogicWorkflowRunActionRepetitionResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunActionRepetitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource&#xA;override this.GetLogicWorkflowRunActionRepetitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunActionRepetitionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRepetitionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunActionRequestHistoryResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource GetLogicWorkflowRunActionRequestHistoryResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource GetLogicWorkflowRunActionRequestHistoryResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunActionRequestHistoryResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunActionRequestHistoryResource (id As ResourceIdentifier) As LogicWorkflowRunActionRequestHistoryResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunActionRequestHistoryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource&#xA;override this.GetLogicWorkflowRunActionRequestHistoryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunActionRequestHistoryResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionRequestHistoryResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunActionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunActionResource GetLogicWorkflowRunActionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunActionResource GetLogicWorkflowRunActionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunActionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunActionResource (id As ResourceIdentifier) As LogicWorkflowRunActionResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunActionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionResource&#xA;override this.GetLogicWorkflowRunActionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunActionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunActionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunActionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunActionScopeRepetitionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource GetLogicWorkflowRunActionScopeRepetitionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource GetLogicWorkflowRunActionScopeRepetitionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunActionScopeRepetitionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunActionScopeRepetitionResource (id As ResourceIdentifier) As LogicWorkflowRunActionScopeRepetitionResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunActionScopeRepetitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource&#xA;override this.GetLogicWorkflowRunActionScopeRepetitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunActionScopeRepetitionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunActionScopeRepetitionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunOperationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource GetLogicWorkflowRunOperationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource GetLogicWorkflowRunOperationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunOperationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunOperationResource (id As ResourceIdentifier) As LogicWorkflowRunOperationResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunOperationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource&#xA;override this.GetLogicWorkflowRunOperationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunOperationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunOperationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowRunResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowRunResource GetLogicWorkflowRunResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowRunResource GetLogicWorkflowRunResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowRunResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowRunResource (id As ResourceIdentifier) As LogicWorkflowRunResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowRunResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunResource&#xA;override this.GetLogicWorkflowRunResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowRunResource" Usage="mockableLogicArmClient.GetLogicWorkflowRunResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowRunResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowRunResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowRunResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowTriggerHistoryResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource GetLogicWorkflowTriggerHistoryResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource GetLogicWorkflowTriggerHistoryResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowTriggerHistoryResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowTriggerHistoryResource (id As ResourceIdentifier) As LogicWorkflowTriggerHistoryResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowTriggerHistoryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource&#xA;override this.GetLogicWorkflowTriggerHistoryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource" Usage="mockableLogicArmClient.GetLogicWorkflowTriggerHistoryResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowTriggerHistoryResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowTriggerResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowTriggerResource GetLogicWorkflowTriggerResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowTriggerResource GetLogicWorkflowTriggerResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowTriggerResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowTriggerResource (id As ResourceIdentifier) As LogicWorkflowTriggerResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowTriggerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowTriggerResource&#xA;override this.GetLogicWorkflowTriggerResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowTriggerResource" Usage="mockableLogicArmClient.GetLogicWorkflowTriggerResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowTriggerResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowTriggerResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowTriggerResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowTriggerResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowTriggerResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowVersionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowVersionResource GetLogicWorkflowVersionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowVersionResource GetLogicWorkflowVersionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicArmClient.GetLogicWorkflowVersionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowVersionResource (id As ResourceIdentifier) As LogicWorkflowVersionResource" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowVersionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowVersionResource&#xA;override this.GetLogicWorkflowVersionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.Logic.LogicWorkflowVersionResource" Usage="mockableLogicArmClient.GetLogicWorkflowVersionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowVersionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowVersionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.Logic.LogicWorkflowVersionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowVersionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Logic.LogicWorkflowVersionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
