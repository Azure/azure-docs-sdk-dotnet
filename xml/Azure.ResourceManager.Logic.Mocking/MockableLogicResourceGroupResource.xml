<Type Name="MockableLogicResourceGroupResource" FullName="Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource">
  <TypeSignature Language="C#" Value="public class MockableLogicResourceGroupResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableLogicResourceGroupResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableLogicResourceGroupResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableLogicResourceGroupResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ResourceGroupResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableLogicResourceGroupResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccount">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt; GetIntegrationAccount (string integrationAccountName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Logic.IntegrationAccountResource&gt; GetIntegrationAccount(string integrationAccountName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetIntegrationAccount(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccount (integrationAccountName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IntegrationAccountResource)" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccount : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;&#xA;override this.GetIntegrationAccount : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;" Usage="mockableLogicResourceGroupResource.GetIntegrationAccount (integrationAccountName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationAccountName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationAccountName"> The integration account name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration account.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}</description></item><item><term>Operation Id</term><description>IntegrationAccounts_Get</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.IntegrationAccountResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationAccountName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationAccountName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;&gt; GetIntegrationAccountAsync (string integrationAccountName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Logic.IntegrationAccountResource&gt;&gt; GetIntegrationAccountAsync(string integrationAccountName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetIntegrationAccountAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccountAsync (integrationAccountName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IntegrationAccountResource))" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccountAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;&gt;&#xA;override this.GetIntegrationAccountAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;&gt;" Usage="mockableLogicResourceGroupResource.GetIntegrationAccountAsync (integrationAccountName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationAccountResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationAccountName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationAccountName"> The integration account name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration account.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}</description></item><item><term>Operation Id</term><description>IntegrationAccounts_Get</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.IntegrationAccountResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationAccountName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationAccountName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationAccounts">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationAccountCollection GetIntegrationAccounts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationAccountCollection GetIntegrationAccounts() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetIntegrationAccounts" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationAccounts () As IntegrationAccountCollection" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationAccounts : unit -&gt; Azure.ResourceManager.Logic.IntegrationAccountCollection&#xA;override this.GetIntegrationAccounts : unit -&gt; Azure.ResourceManager.Logic.IntegrationAccountCollection" Usage="mockableLogicResourceGroupResource.GetIntegrationAccounts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationAccountCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of IntegrationAccountResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of IntegrationAccountResources and their operations over a IntegrationAccountResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationServiceEnvironment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt; GetIntegrationServiceEnvironment (string integrationServiceEnvironmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt; GetIntegrationServiceEnvironment(string integrationServiceEnvironmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetIntegrationServiceEnvironment(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationServiceEnvironment (integrationServiceEnvironmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IntegrationServiceEnvironmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationServiceEnvironment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;&#xA;override this.GetIntegrationServiceEnvironment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;" Usage="mockableLogicResourceGroupResource.GetIntegrationServiceEnvironment (integrationServiceEnvironmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationServiceEnvironmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationServiceEnvironmentName"> The integration service environment name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration service environment.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}</description></item><item><term>Operation Id</term><description>IntegrationServiceEnvironments_Get</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationServiceEnvironmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationServiceEnvironmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationServiceEnvironmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;&gt; GetIntegrationServiceEnvironmentAsync (string integrationServiceEnvironmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;&gt; GetIntegrationServiceEnvironmentAsync(string integrationServiceEnvironmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetIntegrationServiceEnvironmentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationServiceEnvironmentAsync (integrationServiceEnvironmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IntegrationServiceEnvironmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationServiceEnvironmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;&gt;&#xA;override this.GetIntegrationServiceEnvironmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;&gt;" Usage="mockableLogicResourceGroupResource.GetIntegrationServiceEnvironmentAsync (integrationServiceEnvironmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="integrationServiceEnvironmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="integrationServiceEnvironmentName"> The integration service environment name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an integration service environment.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}</description></item><item><term>Operation Id</term><description>IntegrationServiceEnvironments_Get</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.IntegrationServiceEnvironmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="integrationServiceEnvironmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="integrationServiceEnvironmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetIntegrationServiceEnvironments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.IntegrationServiceEnvironmentCollection GetIntegrationServiceEnvironments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.IntegrationServiceEnvironmentCollection GetIntegrationServiceEnvironments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetIntegrationServiceEnvironments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetIntegrationServiceEnvironments () As IntegrationServiceEnvironmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetIntegrationServiceEnvironments : unit -&gt; Azure.ResourceManager.Logic.IntegrationServiceEnvironmentCollection&#xA;override this.GetIntegrationServiceEnvironments : unit -&gt; Azure.ResourceManager.Logic.IntegrationServiceEnvironmentCollection" Usage="mockableLogicResourceGroupResource.GetIntegrationServiceEnvironments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.IntegrationServiceEnvironmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of IntegrationServiceEnvironmentResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of IntegrationServiceEnvironmentResources and their operations over a IntegrationServiceEnvironmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflow">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt; GetLogicWorkflow (string workflowName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Logic.LogicWorkflowResource&gt; GetLogicWorkflow(string workflowName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetLogicWorkflow(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflow (workflowName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogicWorkflowResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflow : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;&#xA;override this.GetLogicWorkflow : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;" Usage="mockableLogicResourceGroupResource.GetLogicWorkflow (workflowName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workflowName"> The workflow name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a workflow.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}</description></item><item><term>Operation Id</term><description>Workflows_Get</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflowAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;&gt; GetLogicWorkflowAsync (string workflowName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Logic.LogicWorkflowResource&gt;&gt; GetLogicWorkflowAsync(string workflowName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetLogicWorkflowAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflowAsync (workflowName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LogicWorkflowResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflowAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;&gt;&#xA;override this.GetLogicWorkflowAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;&gt;" Usage="mockableLogicResourceGroupResource.GetLogicWorkflowAsync (workflowName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Logic.LogicWorkflowResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workflowName"> The workflow name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a workflow.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}</description></item><item><term>Operation Id</term><description>Workflows_Get</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLogicWorkflows">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Logic.LogicWorkflowCollection GetLogicWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Logic.LogicWorkflowCollection GetLogicWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.GetLogicWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicWorkflows () As LogicWorkflowCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLogicWorkflows : unit -&gt; Azure.ResourceManager.Logic.LogicWorkflowCollection&#xA;override this.GetLogicWorkflows : unit -&gt; Azure.ResourceManager.Logic.LogicWorkflowCollection" Usage="mockableLogicResourceGroupResource.GetLogicWorkflows " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Logic.LogicWorkflowCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of LogicWorkflowResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of LogicWorkflowResources and their operations over a LogicWorkflowResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateByLocationWorkflow">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ValidateByLocationWorkflow (Azure.Core.AzureLocation location, string workflowName, Azure.ResourceManager.Logic.LogicWorkflowData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ValidateByLocationWorkflow(valuetype Azure.Core.AzureLocation location, string workflowName, class Azure.ResourceManager.Logic.LogicWorkflowData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.ValidateByLocationWorkflow(Azure.Core.AzureLocation,System.String,Azure.ResourceManager.Logic.LogicWorkflowData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateByLocationWorkflow (location As AzureLocation, workflowName As String, data As LogicWorkflowData, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ValidateByLocationWorkflow : Azure.Core.AzureLocation * string * Azure.ResourceManager.Logic.LogicWorkflowData * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ValidateByLocationWorkflow : Azure.Core.AzureLocation * string * Azure.ResourceManager.Logic.LogicWorkflowData * System.Threading.CancellationToken -&gt; Azure.Response" Usage="mockableLogicResourceGroupResource.ValidateByLocationWorkflow (location, workflowName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="workflowName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Logic.LogicWorkflowData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The workflow location. </param>
        <param name="workflowName"> The workflow name. </param>
        <param name="data"> The workflow. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Validates the workflow definition.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate</description></item><item><term>Operation Id</term><description>Workflows_ValidateByLocation</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateByLocationWorkflowAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ValidateByLocationWorkflowAsync (Azure.Core.AzureLocation location, string workflowName, Azure.ResourceManager.Logic.LogicWorkflowData data, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ValidateByLocationWorkflowAsync(valuetype Azure.Core.AzureLocation location, string workflowName, class Azure.ResourceManager.Logic.LogicWorkflowData data, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Logic.Mocking.MockableLogicResourceGroupResource.ValidateByLocationWorkflowAsync(Azure.Core.AzureLocation,System.String,Azure.ResourceManager.Logic.LogicWorkflowData,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateByLocationWorkflowAsync (location As AzureLocation, workflowName As String, data As LogicWorkflowData, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ValidateByLocationWorkflowAsync : Azure.Core.AzureLocation * string * Azure.ResourceManager.Logic.LogicWorkflowData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ValidateByLocationWorkflowAsync : Azure.Core.AzureLocation * string * Azure.ResourceManager.Logic.LogicWorkflowData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="mockableLogicResourceGroupResource.ValidateByLocationWorkflowAsync (location, workflowName, data, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Logic</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="workflowName" Type="System.String" />
        <Parameter Name="data" Type="Azure.ResourceManager.Logic.LogicWorkflowData" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The workflow location. </param>
        <param name="workflowName"> The workflow name. </param>
        <param name="data"> The workflow. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Validates the workflow definition.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate</description></item><item><term>Operation Id</term><description>Workflows_ValidateByLocation</description></item><item><term>Default Api Version</term><description>2019-05-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Logic.LogicWorkflowResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowName" /> or <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
