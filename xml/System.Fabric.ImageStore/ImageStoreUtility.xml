<Type Name="ImageStoreUtility" FullName="System.Fabric.ImageStore.ImageStoreUtility">
  <TypeSignature Language="C#" Value="public class ImageStoreUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageStoreUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Fabric.ImageStore.ImageStoreUtility" />
  <TypeSignature Language="VB.NET" Value="Public Class ImageStoreUtility" />
  <TypeSignature Language="F#" Value="type ImageStoreUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Fabric</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides supplementary utility methods for application package deployment
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageStoreUtility ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArchiveApplicationPackage">
      <MemberSignature Language="C#" Value="public static void ArchiveApplicationPackage (string appPackageRootDirectory, System.Fabric.IImageStoreProgressHandler progressHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ArchiveApplicationPackage(string appPackageRootDirectory, class System.Fabric.IImageStoreProgressHandler progressHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.ArchiveApplicationPackage(System.String,System.Fabric.IImageStoreProgressHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ArchiveApplicationPackage (appPackageRootDirectory As String, progressHandler As IImageStoreProgressHandler)" />
      <MemberSignature Language="F#" Value="static member ArchiveApplicationPackage : string * System.Fabric.IImageStoreProgressHandler -&gt; unit" Usage="System.Fabric.ImageStore.ImageStoreUtility.ArchiveApplicationPackage (appPackageRootDirectory, progressHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appPackageRootDirectory" Type="System.String" />
        <Parameter Name="progressHandler" Type="System.Fabric.IImageStoreProgressHandler" />
      </Parameters>
      <Docs>
        <param name="appPackageRootDirectory">The application package root directory.</param>
        <param name="progressHandler">An optional handler for tracking progress of the compression operation.</param>
        <summary>
            Compresses all service package sub-directories (i.e. code/config/data packages) found under the application package root directory.
            </summary>
        <remarks>
          <para>
            Package checksums are computed on the resulting compressed package files rather than the original uncompressed contents. This means that when uploading compressed packages that were previously uncompressed, their versions must be changed in the Service Manifest.
            Alternatively, simply omit the sub-package whose contents have not changed from the overall application package.
            Also note that changing the last modified timestamp of a compressed package's contents will also result in changing the package's checksum.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComputeHash">
      <MemberSignature Language="C#" Value="public static string ComputeHash (string algorithm, string path, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ComputeHash(string algorithm, string path, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.ComputeHash(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ComputeHash (algorithm As String, path As String, ignoreCase As Boolean) As String" />
      <MemberSignature Language="F#" Value="static member ComputeHash : string * string * bool -&gt; string" Usage="System.Fabric.ImageStore.ImageStoreUtility.ComputeHash (algorithm, path, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="algorithm">algorithm to compute hash, sha256</param>
        <param name="path">path to the file or directory</param>
        <param name="ignoreCase">if path is directory, this parameter is effective. If true, names in the directory are transformed to lower-case to compute hash.</param>
        <summary>
            Compute hash of file or directory. Directory hash uses Merkel tree to compute hash
            </summary>
        <returns>the hash value in the format of hex string e.g. 0123456789ABCDEF </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandSfpkg">
      <MemberSignature Language="C#" Value="public static void ExpandSfpkg (string sfpkgFilePath, string appPackageRootDirectory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExpandSfpkg(string sfpkgFilePath, string appPackageRootDirectory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExpandSfpkg (sfpkgFilePath As String, appPackageRootDirectory As String)" />
      <MemberSignature Language="F#" Value="static member ExpandSfpkg : string * string -&gt; unit" Usage="System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg (sfpkgFilePath, appPackageRootDirectory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sfpkgFilePath" Type="System.String" />
        <Parameter Name="appPackageRootDirectory" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sfpkgFilePath">
          <para>The path to the sfpkg file, which must exist and have '.sfpkg' extension.</para>
        </param>
        <param name="appPackageRootDirectory">
          <para>The directory where the package is expanded. If it exists, it will be first deleted to ensure the resulting application package is valid.</para>
        </param>
        <summary>
            Expands the specified sfpkg file in the application package folder.
            </summary>
        <remarks>
          <para>If the destination directory doesn't exist, it is created.</para>
          <para>If the destination folder contains the sfpkg to be extracted, the package is extracted in place and, when extraction is complete, the sfpkg is deleted, to ensure the folder is a valid application package. Otherwise, the sfpkg is not deleted.</para>
          <para>If the destination folder exists, it must not contain other files or folders.</para>
          <para>
            The command does not perform any validation on the sfpkg or the expanded package.
            </para>
          <para>If the sfpkg was created using <see cref="M:System.Fabric.ImageStore.ImageStoreUtility.GenerateSfpkg(System.String,System.String,System.Boolean,System.String)" />, the <paramref name="sfpkgFilePath" /> is the returned value.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateApplicationPackageChecksumFiles">
      <MemberSignature Language="C#" Value="public static void GenerateApplicationPackageChecksumFiles (string appPackageRootDirectory, System.Fabric.IImageStoreProgressHandler progressHandler, bool isImageStoreServiceEnabled = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenerateApplicationPackageChecksumFiles(string appPackageRootDirectory, class System.Fabric.IImageStoreProgressHandler progressHandler, bool isImageStoreServiceEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.GenerateApplicationPackageChecksumFiles(System.String,System.Fabric.IImageStoreProgressHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GenerateApplicationPackageChecksumFiles (appPackageRootDirectory As String, progressHandler As IImageStoreProgressHandler, Optional isImageStoreServiceEnabled As Boolean = true)" />
      <MemberSignature Language="F#" Value="static member GenerateApplicationPackageChecksumFiles : string * System.Fabric.IImageStoreProgressHandler * bool -&gt; unit" Usage="System.Fabric.ImageStore.ImageStoreUtility.GenerateApplicationPackageChecksumFiles (appPackageRootDirectory, progressHandler, isImageStoreServiceEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appPackageRootDirectory" Type="System.String" />
        <Parameter Name="progressHandler" Type="System.Fabric.IImageStoreProgressHandler" />
        <Parameter Name="isImageStoreServiceEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appPackageRootDirectory">The application package root directory.</param>
        <param name="progressHandler">An optional handler for tracking progress of the checksum generation.</param>
        <param name="isImageStoreServiceEnabled">Should be set to true if the cluster's ImageStoreConnectionString is set to "fabric:ImageStore", false otherwise.</param>
        <summary>
            Generates checksum files for all service package sub-directories (i.e. code/config/data packages) and service manifests found under the application package root directory.
            </summary>
        <remarks>
          <para>
            The cluster will automatically generate checksums during application type registration if they're not already part of the application package. This method can be used to incur the cost of checksum file generation while preparing the application package, which will reduce the cost of registering the application type package for large packages.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSfpkg">
      <MemberSignature Language="C#" Value="public static string GenerateSfpkg (string appPackageRootDirectory, string destinationDirectory, bool applyCompression = true, string sfpkgName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GenerateSfpkg(string appPackageRootDirectory, string destinationDirectory, bool applyCompression, string sfpkgName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.GenerateSfpkg(System.String,System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GenerateSfpkg (appPackageRootDirectory As String, destinationDirectory As String, Optional applyCompression As Boolean = true, Optional sfpkgName As String = Nothing) As String" />
      <MemberSignature Language="F#" Value="static member GenerateSfpkg : string * string * bool * string -&gt; string" Usage="System.Fabric.ImageStore.ImageStoreUtility.GenerateSfpkg (appPackageRootDirectory, destinationDirectory, applyCompression, sfpkgName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appPackageRootDirectory" Type="System.String" />
        <Parameter Name="destinationDirectory" Type="System.String" />
        <Parameter Name="applyCompression" Type="System.Boolean" />
        <Parameter Name="sfpkgName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appPackageRootDirectory">
          <para>The application package root directory. It must exist.</para>
        </param>
        <param name="destinationDirectory">
          <para>The folder where the sfpkg file is placed. If it doesn't exist, it is created.</para>
        </param>
        <param name="applyCompression">
          <para>If true, the package is
            <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-package-apps#compress-a-package">compressed</see>
            before generating the sfpkg, inside <paramref name="appPackageRootDirectory" />.
            If the package is already compressed, no changes are made. To compress, the appPackageRootDirectory must allow write access.
            If false, the sfpkg is generated using the application package as it is, either compressed or uncompressed. Default: true.</para>
        </param>
        <param name="sfpkgName">
          <para>The name of the sfpkg file.</para>
        </param>
        <summary>
          <para>
            Creates a 'sfpkg' file from the application package found in the specified application package root directory.
            </para>
        </summary>
        <returns>
          <para>The path to the sfpkg file. Can be used to expand the sfpkg using <see cref="M:System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg(System.String,System.String)" />.</para>
        </returns>
        <remarks>
          <para>
            If sfpkgName is not specified or null, the generated package takes the name of the application package root folder, adding the '.sfpkg' extension.
            If the specified name has no extension or a different extension, the extension is replaced with '.sfpkg'.
            </para>
          <para>The destination directory can't be same or a child of the application package root directory, as extraction will fail.</para>
          <para>No validation is performed to ensure the package is valid. Please test the package before generating the sfpkg.</para>
          <para>The sfpkg can be uploaded to an external store and used for provisioning.</para>
          <para>To expand the sfpkg to see the original content, use <see cref="M:System.Fabric.ImageStore.ImageStoreUtility.ExpandSfpkg(System.String,System.String)" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAlgorithmTag">
      <MemberSignature Language="C#" Value="public static bool HasAlgorithmTag (string hash);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasAlgorithmTag(string hash) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.HasAlgorithmTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HasAlgorithmTag (hash As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member HasAlgorithmTag : string -&gt; bool" Usage="System.Fabric.ImageStore.ImageStoreUtility.HasAlgorithmTag hash" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hash" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hash">hash string to be evaluated</param>
        <summary>
            Check if the hash string conforms new format.
            </summary>
        <returns>tru if new format, false otherwise</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sha256">
      <MemberSignature Language="C#" Value="public const string Sha256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Sha256" />
      <MemberSignature Language="DocId" Value="F:System.Fabric.ImageStore.ImageStoreUtility.Sha256" />
      <MemberSignature Language="VB.NET" Value="Public Const Sha256 As String " />
      <MemberSignature Language="F#" Value="val mutable Sha256 : string" Usage="System.Fabric.ImageStore.ImageStoreUtility.Sha256" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            ComputeHash SHA256 algorithm name
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sha256Tag">
      <MemberSignature Language="C#" Value="public const string Sha256Tag;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string Sha256Tag" />
      <MemberSignature Language="DocId" Value="F:System.Fabric.ImageStore.ImageStoreUtility.Sha256Tag" />
      <MemberSignature Language="VB.NET" Value="Public Const Sha256Tag As String " />
      <MemberSignature Language="F#" Value="val mutable Sha256Tag : string" Usage="System.Fabric.ImageStore.ImageStoreUtility.Sha256Tag" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Hash string's SHA256 algorithm tag (algorithm + ':')
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryExtractApplicationPackage">
      <MemberSignature Language="C#" Value="public static bool TryExtractApplicationPackage (string appPackageRootDirectory, System.Fabric.IImageStoreProgressHandler progressHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryExtractApplicationPackage(string appPackageRootDirectory, class System.Fabric.IImageStoreProgressHandler progressHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Fabric.ImageStore.ImageStoreUtility.TryExtractApplicationPackage(System.String,System.Fabric.IImageStoreProgressHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryExtractApplicationPackage (appPackageRootDirectory As String, progressHandler As IImageStoreProgressHandler) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryExtractApplicationPackage : string * System.Fabric.IImageStoreProgressHandler -&gt; bool" Usage="System.Fabric.ImageStore.ImageStoreUtility.TryExtractApplicationPackage (appPackageRootDirectory, progressHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Fabric</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appPackageRootDirectory" Type="System.String" />
        <Parameter Name="progressHandler" Type="System.Fabric.IImageStoreProgressHandler" />
      </Parameters>
      <Docs>
        <param name="appPackageRootDirectory">The application package root directory.</param>
        <param name="progressHandler">An optional handler for tracking progress of the uncompression operation.</param>
        <summary>
            Uncompresses all service package sub-directories (i.e. code/config/data packages) found under the application package root directory.
            </summary>
        <returns>
          <para>True if any compressed packages were found, false otherwise.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
