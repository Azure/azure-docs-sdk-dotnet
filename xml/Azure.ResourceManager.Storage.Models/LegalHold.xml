<Type Name="LegalHold" FullName="Azure.ResourceManager.Storage.Models.LegalHold">
  <TypeSignature Language="C#" Value="public class LegalHold" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LegalHold extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Storage.Models.LegalHold" />
  <TypeSignature Language="VB.NET" Value="Public Class LegalHold" />
  <TypeSignature Language="F#" Value="type LegalHold = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The LegalHold property of a blob container. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LegalHold (System.Collections.Generic.IEnumerable&lt;string&gt; tags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; tags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Storage.Models.LegalHold.#ctor(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tags As IEnumerable(Of String))" />
      <MemberSignature Language="F#" Value="new Azure.ResourceManager.Storage.Models.LegalHold : seq&lt;string&gt; -&gt; Azure.ResourceManager.Storage.Models.LegalHold" Usage="new Azure.ResourceManager.Storage.Models.LegalHold tags" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="tags"> Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP. </param>
        <summary> Initializes a new instance of LegalHold. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AllowProtectedAppendWritesAll">
      <MemberSignature Language="C#" Value="public bool? AllowProtectedAppendWritesAll { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; AllowProtectedAppendWritesAll" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Storage.Models.LegalHold.AllowProtectedAppendWritesAll" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowProtectedAppendWritesAll As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.AllowProtectedAppendWritesAll : Nullable&lt;bool&gt; with get, set" Usage="Azure.ResourceManager.Storage.Models.LegalHold.AllowProtectedAppendWritesAll" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> When enabled, new blocks can be written to both 'Append and Bock Blobs' while maintaining legal hold protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasLegalHold">
      <MemberSignature Language="C#" Value="public bool? HasLegalHold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; HasLegalHold" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Storage.Models.LegalHold.HasLegalHold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasLegalHold As Nullable(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.HasLegalHold : Nullable&lt;bool&gt;" Usage="Azure.ResourceManager.Storage.Models.LegalHold.HasLegalHold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The hasLegalHold public property is set to true by SRP if there are at least one existing tag. The hasLegalHold public property is set to false by SRP if all existing legal hold tags are cleared out. There can be a maximum of 1000 blob containers with hasLegalHold=true for a given account. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tags">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Tags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Tags" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Storage.Models.LegalHold.Tags" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tags As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.Tags : System.Collections.Generic.IList&lt;string&gt;" Usage="Azure.ResourceManager.Storage.Models.LegalHold.Tags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Storage</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Each tag should be 3 to 23 alphanumeric characters and is normalized to lower case at SRP. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
