<Type Name="MockableLabServicesSubscriptionResource" FullName="Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource">
  <TypeSignature Language="C#" Value="public class MockableLabServicesSubscriptionResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableLabServicesSubscriptionResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableLabServicesSubscriptionResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableLabServicesSubscriptionResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to SubscriptionResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableLabServicesSubscriptionResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLabPlans">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt; GetLabPlans (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.LabServices.LabPlanResource&gt; GetLabPlans(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetLabPlans(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLabPlans (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of LabPlanResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLabPlans : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt;&#xA;override this.GetLabPlans : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt;" Usage="mockableLabServicesSubscriptionResource.GetLabPlans (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of all lab plans within a subscription
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labPlans</description></item><item><term>Operation Id</term><description>LabPlans_ListBySubscription</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.LabServices.LabPlanResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.LabServices.LabPlanResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLabPlansAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt; GetLabPlansAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.LabServices.LabPlanResource&gt; GetLabPlansAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetLabPlansAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLabPlansAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of LabPlanResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLabPlansAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt;&#xA;override this.GetLabPlansAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt;" Usage="mockableLabServicesSubscriptionResource.GetLabPlansAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabPlanResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of all lab plans within a subscription
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labPlans</description></item><item><term>Operation Id</term><description>LabPlans_ListBySubscription</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.LabServices.LabPlanResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.LabServices.LabPlanResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLabs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabResource&gt; GetLabs (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.LabServices.LabResource&gt; GetLabs(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetLabs(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLabs (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of LabResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLabs : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabResource&gt;&#xA;override this.GetLabs : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabResource&gt;" Usage="mockableLabServicesSubscriptionResource.GetLabs (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.LabServices.LabResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of all labs for a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labs</description></item><item><term>Operation Id</term><description>Labs_ListBySubscription</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.LabServices.LabResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.LabServices.LabResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLabsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabResource&gt; GetLabsAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.LabServices.LabResource&gt; GetLabsAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetLabsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLabsAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of LabResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLabsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabResource&gt;&#xA;override this.GetLabsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabResource&gt;" Usage="mockableLabServicesSubscriptionResource.GetLabsAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.LabResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of all labs for a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/labs</description></item><item><term>Operation Id</term><description>Labs_ListBySubscription</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.LabServices.LabResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.LabServices.LabResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSkus">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt; GetSkus (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt; GetSkus(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetSkus(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSkus (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of AvailableLabServicesSku)" />
      <MemberSignature Language="F#" Value="abstract member GetSkus : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt;&#xA;override this.GetSkus : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt;" Usage="mockableLabServicesSubscriptionResource.GetSkus (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of Azure Lab Services resource SKUs.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/skus</description></item><item><term>Operation Id</term><description>Skus_List</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSkusAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt; GetSkusAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt; GetSkusAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetSkusAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSkusAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of AvailableLabServicesSku)" />
      <MemberSignature Language="F#" Value="abstract member GetSkusAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt;&#xA;override this.GetSkusAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt;" Usage="mockableLabServicesSubscriptionResource.GetSkusAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of Azure Lab Services resource SKUs.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/skus</description></item><item><term>Operation Id</term><description>Skus_List</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.LabServices.Models.AvailableLabServicesSku" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt; GetUsages (Azure.Core.AzureLocation location, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt; GetUsages(valuetype Azure.Core.AzureLocation location, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetUsages(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUsages (location As AzureLocation, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of LabServicesUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetUsages : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt;&#xA;override this.GetUsages : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt;" Usage="mockableLabServicesSubscriptionResource.GetUsages (location, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The location name. </param>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns list of usage per SKU family for the specified subscription in the specified region.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/locations/{location}/usages</description></item><item><term>Operation Id</term><description>Usages_ListByLocation</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.LabServices.Models.LabServicesUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt; GetUsagesAsync (Azure.Core.AzureLocation location, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt; GetUsagesAsync(valuetype Azure.Core.AzureLocation location, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.LabServices.Mocking.MockableLabServicesSubscriptionResource.GetUsagesAsync(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUsagesAsync (location As AzureLocation, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of LabServicesUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetUsagesAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt;&#xA;override this.GetUsagesAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt;" Usage="mockableLabServicesSubscriptionResource.GetUsagesAsync (location, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.LabServices</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.LabServices.Models.LabServicesUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The location name. </param>
        <param name="filter"> The filter to apply to the operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns list of usage per SKU family for the specified subscription in the specified region.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.LabServices/locations/{location}/usages</description></item><item><term>Operation Id</term><description>Usages_ListByLocation</description></item><item><term>Default Api Version</term><description>2022-08-01</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.LabServices.Models.LabServicesUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
