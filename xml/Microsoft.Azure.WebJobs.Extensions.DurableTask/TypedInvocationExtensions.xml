<Type Name="TypedInvocationExtensions" FullName="Microsoft.Azure.WebJobs.Extensions.DurableTask.TypedInvocationExtensions">
  <TypeSignature Language="C#" Value="public static class TypedInvocationExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TypedInvocationExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.TypedInvocationExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module TypedInvocationExtensions" />
  <TypeSignature Language="F#" Value="type TypedInvocationExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extends the durable entity context to support reflection-based invocation of entity operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DispatchAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DispatchAsync&lt;T&gt; (this Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext context, params object[] constructorParameters) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DispatchAsync&lt;class T&gt;(class Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext context, object[] constructorParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.TypedInvocationExtensions.DispatchAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DispatchAsync(Of T As Class) (context As IDurableEntityContext, ParamArray constructorParameters As Object()) As Task" />
      <MemberSignature Language="F#" Value="static member DispatchAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext * obj[] -&gt; System.Threading.Tasks.Task (requires 'T : null)" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.TypedInvocationExtensions.DispatchAsync (context, constructorParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableEntityContext" RefType="this" />
        <Parameter Name="constructorParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The class to use for entity instances.</typeparam>
        <param name="context">Context object to use to dispatch entity operations.</param>
        <param name="constructorParameters">Parameters to feed to the entity constructor. Should be primarily used for
            output bindings. Parameters must match the order in the constructor after ignoring parameters populated on
            constructor via dependency injection.</param>
        <summary>
            Dynamically dispatches the incoming entity operation using reflection.
            </summary>
        <returns>A task that completes when the dispatched operation has finished.</returns>
        <remarks>
            If the entity's state is null, an object of type <typeparamref name="T" /> is created first. Then, reflection
            is used to try to find a matching method. This match is based on the method name
            (which is the operation name) and the argument list (which is the operation content, deserialized into
            an object array).
            </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">If there is more than one method with the given operation name.</exception>
        <exception cref="T:System.MissingMethodException">If there is no method with the given operation name.</exception>
        <exception cref="T:System.InvalidOperationException">If the method has more than one argument.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
