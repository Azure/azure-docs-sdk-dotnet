<Type Name="IDurableOrchestrationContext" FullName="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext">
  <TypeSignature Language="C#" Value="public interface IDurableOrchestrationContext" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDurableOrchestrationContext" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDurableOrchestrationContext" />
  <TypeSignature Language="F#" Value="type IDurableOrchestrationContext = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Provides functionality available to orchestration code.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CallActivityAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; CallActivityAsync&lt;TResult&gt; (string functionName, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallActivityAsync&lt;TResult&gt;(string functionName, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallActivityAsync``1(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallActivityAsync(Of TResult) (functionName As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallActivityAsync : string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="iDurableOrchestrationContext.CallActivityAsync (functionName, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled activity function.</typeparam>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called activity function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallActivityWithRetryAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; CallActivityWithRetryAsync&lt;TResult&gt; (string functionName, Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallActivityWithRetryAsync&lt;TResult&gt;(string functionName, class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallActivityWithRetryAsync``1(System.String,Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallActivityWithRetryAsync(Of TResult) (functionName As String, retryOptions As RetryOptions, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallActivityWithRetryAsync : string * Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="iDurableOrchestrationContext.CallActivityWithRetryAsync (functionName, retryOptions, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled activity function.</typeparam>
        <param name="functionName">The name of the activity function to call.</param>
        <param name="retryOptions">The retry option for the activity function.</param>
        <param name="input">The JSON-serializeable input to pass to the activity function.</param>
        <summary>
            Schedules an activity function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called activity function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallEntityAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CallEntityAsync (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName, object operationInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CallEntityAsync(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName, object operationInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallEntityAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallEntityAsync (entityId As EntityId, operationName As String, operationInput As Object) As Task" />
      <MemberSignature Language="F#" Value="abstract member CallEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string * obj -&gt; System.Threading.Tasks.Task" Usage="iDurableOrchestrationContext.CallEntityAsync (entityId, operationName, operationInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="operationInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entityId">The target entity.</param>
        <param name="operationName">The name of the operation.</param>
        <param name="operationInput">The input for the operation.</param>
        <summary>
            Calls an operation on an entity, passing an argument, and waits for it to complete.
            </summary>
        <returns>A task representing the completion of the operation on the entity.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.LockingRulesViolationException">if the context already holds some locks, but not the one for <paramref name="entityId" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CallEntityAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; CallEntityAsync&lt;TResult&gt; (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName, object operationInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallEntityAsync&lt;TResult&gt;(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, string operationName, object operationInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallEntityAsync``1(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallEntityAsync(Of TResult) (entityId As EntityId, operationName As String, operationInput As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallEntityAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="iDurableOrchestrationContext.CallEntityAsync (entityId, operationName, operationInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="operationInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The JSON-serializable result type of the operation.</typeparam>
        <param name="entityId">The target entity.</param>
        <param name="operationName">The name of the operation.</param>
        <param name="operationInput">The input for the operation.</param>
        <summary>
            Calls an operation on an entity, passing an argument, and returns the result asynchronously.
            </summary>
        <returns>A task representing the result of the operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.LockingRulesViolationException">if the context already holds some locks, but not the one for <paramref name="entityId" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CallHttpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt; CallHttpAsync (Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest req);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt; CallHttpAsync(class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest req) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallHttpAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallHttpAsync (req As DurableHttpRequest) As Task(Of DurableHttpResponse)" />
      <MemberSignature Language="F#" Value="abstract member CallHttpAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt;" Usage="iDurableOrchestrationContext.CallHttpAsync req" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="req" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpRequest" />
      </Parameters>
      <Docs>
        <param name="req">The DurableHttpRequest used to make the HTTP call.</param>
        <summary>
            Makes an HTTP call using the information in the DurableHttpRequest.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" />Result of the HTTP call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallHttpAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt; CallHttpAsync (System.Net.Http.HttpMethod method, Uri uri, string content = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt; CallHttpAsync(class System.Net.Http.HttpMethod method, class System.Uri uri, string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallHttpAsync(System.Net.Http.HttpMethod,System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallHttpAsync (method As HttpMethod, uri As Uri, Optional content As String = Nothing) As Task(Of DurableHttpResponse)" />
      <MemberSignature Language="F#" Value="abstract member CallHttpAsync : System.Net.Http.HttpMethod * Uri * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt;" Usage="iDurableOrchestrationContext.CallHttpAsync (method, uri, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableHttpResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Net.Http.HttpMethod" />
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="method">HttpMethod used for api call.</param>
        <param name="uri">uri used to make the HTTP call.</param>
        <param name="content">Content passed in the HTTP request.</param>
        <summary>
            Makes an HTTP call to the specified uri.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" />Result of the HTTP call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt; (string functionName, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorAsync&lt;TResult&gt;(string functionName, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorAsync``1(System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallSubOrchestratorAsync(Of TResult) (functionName As String, instanceId As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorAsync : string * string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="iDurableOrchestrationContext.CallSubOrchestratorAsync (functionName, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestration function named <paramref name="functionName" /> for execution.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="CallSubOrchestratorWithRetryAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt; (string functionName, Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, string instanceId, object input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; CallSubOrchestratorWithRetryAsync&lt;TResult&gt;(string functionName, class Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions retryOptions, string instanceId, object input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CallSubOrchestratorWithRetryAsync``1(System.String,Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CallSubOrchestratorWithRetryAsync(Of TResult) (functionName As String, retryOptions As RetryOptions, instanceId As String, input As Object) As Task(Of TResult)" />
      <MemberSignature Language="F#" Value="abstract member CallSubOrchestratorWithRetryAsync : string * Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions * string * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="iDurableOrchestrationContext.CallSubOrchestratorWithRetryAsync (functionName, retryOptions, instanceId, input)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="retryOptions" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.RetryOptions" />
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the scheduled orchestrator function.</typeparam>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="retryOptions">The retry option for the orchestrator function.</param>
        <param name="instanceId">A unique ID to use for the sub-orchestration instance.</param>
        <param name="input">The JSON-serializeable input to pass to the orchestrator function.</param>
        <summary>
            Schedules an orchestrator function named <paramref name="functionName" /> for execution with retry options.
            </summary>
        <returns>A durable task that completes when the called orchestrator function completes or fails.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            The retry option object is null.
            </exception>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            The current thread is different than the thread which started the orchestrator execution.
            </exception>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.FunctionFailedException">
            The activity function failed with an unhandled exception.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueAsNew">
      <MemberSignature Language="C#" Value="public void ContinueAsNew (object input, bool preserveUnprocessedEvents = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContinueAsNew(object input, bool preserveUnprocessedEvents) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.ContinueAsNew(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ContinueAsNew (input As Object, Optional preserveUnprocessedEvents As Boolean = false)" />
      <MemberSignature Language="F#" Value="abstract member ContinueAsNew : obj * bool -&gt; unit" Usage="iDurableOrchestrationContext.ContinueAsNew (input, preserveUnprocessedEvents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Object" />
        <Parameter Name="preserveUnprocessedEvents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="input">The JSON-serializeable data to re-initialize the instance with.</param>
        <param name="preserveUnprocessedEvents">
            If set to <c>true</c>, re-adds any unprocessed external events into the new execution
            history when the orchestration instance restarts. If <c>false</c>, any unprocessed
            external events will be discarded when the orchestration instance restarts.
            </param>
        <summary>
            Restarts the orchestration by clearing its history.
            </summary>
        <remarks>
          <para>Large orchestration histories can consume a lot of memory and cause delays in
            instance load times. This method can be used to periodically truncate the stored
            history of an orchestration instance.</para>
          <para>Note that any unprocessed external events will be discarded when an orchestration
            instance restarts itself using this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; CreateTimer&lt;T&gt; (DateTime fireAt, T state, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; CreateTimer&lt;T&gt;(valuetype System.DateTime fireAt, !!T state, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CreateTimer``1(System.DateTime,``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTimer(Of T) (fireAt As DateTime, state As T, cancelToken As CancellationToken) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member CreateTimer : DateTime * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iDurableOrchestrationContext.CreateTimer (fireAt, state, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fireAt" Type="System.DateTime" />
        <Parameter Name="state" Type="T" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of <paramref name="state" />.</typeparam>
        <param name="fireAt">The time at which the timer should expire.</param>
        <param name="state">Any state to be preserved by the timer.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling the timer.</param>
        <summary>
            Creates a durable timer that expires at a specified time.
            </summary>
        <returns>A durable task that completes when the durable timer expires.</returns>
        <remarks>
            All durable timers created using this method must either expire or be cancelled
            using the <paramref name="cancelToken" /> before the orchestrator function completes.
            Otherwise the underlying framework will keep the instance alive until the timer expires.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime CurrentUtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime CurrentUtcDateTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CurrentUtcDateTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentUtcDateTime As DateTime" />
      <MemberSignature Language="F#" Value="member this.CurrentUtcDateTime : DateTime" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.CurrentUtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current date/time in a way that is safe for use in orchestrations and entity operations.
            </summary>
        <value>The orchestration or entity's current date/time in UTC.</value>
        <remarks>
            This date/time value is derived from the orchestration or entity history. It always returns the same value
            at specific points in the orchestrator function code, making it deterministic and safe for replay.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInput&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public TInput GetInput&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TInput GetInput&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.GetInput``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInput(Of TInput) () As TInput" />
      <MemberSignature Language="F#" Value="abstract member GetInput : unit -&gt; 'Input" Usage="iDurableOrchestrationContext.GetInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TInput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput">Any data contract type that matches the JSON input.</typeparam>
        <summary>
            Gets the input of the current orchestrator function as a deserialized value.
            </summary>
        <returns>The deserialized input value.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public string InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstanceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As String" />
      <MemberSignature Language="F#" Value="member this.InstanceId : string" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the instance ID of the currently executing orchestration.
            </summary>
        <value>
            The ID of the current orchestration instance.
            </value>
        <remarks>
            The instance ID is generated and fixed when the orchestrator function is scheduled. It can be either
            auto-generated, in which case it is formatted as a GUID, or it can be user-specified with any format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocked">
      <MemberSignature Language="C#" Value="public bool IsLocked (out System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId&gt; ownedLocks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsLocked([out] class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId&gt;&amp; ownedLocks) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.IsLocked(System.Collections.Generic.IReadOnlyList{Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId}@)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsLocked (ByRef ownedLocks As IReadOnlyList(Of EntityId)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsLocked : IReadOnlyList -&gt; bool" Usage="iDurableOrchestrationContext.IsLocked ownedLocks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownedLocks" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ownedLocks">The collection of owned locks.</param>
        <summary>
            Determines whether the current context is locked, and if so, what locks are currently owned.
            </summary>
        <returns>
          <c>true</c> if the context already holds some locks.</returns>
        <remarks>
            Note that the collection of owned locks can be empty even if the context is locked. This happens
            if an orchestration calls a suborchestration without lending any locks.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReplaying">
      <MemberSignature Language="C#" Value="public bool IsReplaying { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReplaying" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.IsReplaying" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReplaying As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsReplaying : bool" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.IsReplaying" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating whether the orchestration or operation is currently replaying itself.
            </summary>
        <value>
          <c>true</c> if the orchestration or operation is currently being replayed; otherwise <c>false</c>.
            </value>
        <remarks>
            This property is useful when there is logic that needs to run only when *not* replaying. For example, certain types of application logging may become too noisy when duplicated
            as part of replay. The application code could check to see whether the function is
            being replayed and then issue the log statements when this value is <c>false</c>.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;IDisposable&gt; LockAsync (params Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.IDisposable&gt; LockAsync(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.LockAsync(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LockAsync (ParamArray entities As EntityId()) As Task(Of IDisposable)" />
      <MemberSignature Language="F#" Value="abstract member LockAsync : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId[] -&gt; System.Threading.Tasks.Task&lt;IDisposable&gt;" Usage="iDurableOrchestrationContext.LockAsync entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IDisposable&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entities">The entities whose locks should be acquired.</param>
        <summary>
            Acquires one or more locks, for the specified entities.
            </summary>
        <returns>An IDisposable that releases the lock when disposed.</returns>
        <remarks>
            Locks can only be acquired if the current context does not hold any locks already.
            </remarks>
        <exception cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.LockingRulesViolationException">if the context already holds some locks.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the current orchestration function.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewGuid">
      <MemberSignature Language="C#" Value="public Guid NewGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Guid NewGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.NewGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function NewGuid () As Guid" />
      <MemberSignature Language="F#" Value="abstract member NewGuid : unit -&gt; Guid" Usage="iDurableOrchestrationContext.NewGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Creates a new GUID that is safe for replay within an orchestration or operation.
            </summary>
        <returns>The new <see cref="T:System.Guid" /> value.</returns>
        <remarks>
            The default implementation of this method creates a name-based UUID using the algorithm from
            RFC 4122 §4.3. The name input used to generate this value is a combination of the orchestration
            instance ID and an internally managed sequence number.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentInstanceId">
      <MemberSignature Language="C#" Value="public string ParentInstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParentInstanceId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.ParentInstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParentInstanceId As String" />
      <MemberSignature Language="F#" Value="member this.ParentInstanceId : string" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.ParentInstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the parent instance ID of the currently executing sub-orchestration.
            </summary>
        <value>
            The ID of the parent orchestration of the current sub-orchestration instance. The value will be available only in sub-orchestrations.
            </value>
        <remarks>
            The parent instance ID is generated and fixed when the parent orchestrator function is scheduled. It can be either
            auto-generated, in which case it is formatted as a GUID, or it can be user-specified with any format.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCustomStatus">
      <MemberSignature Language="C#" Value="public void SetCustomStatus (object customStatusObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCustomStatus(object customStatusObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SetCustomStatus(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCustomStatus (customStatusObject As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetCustomStatus : obj -&gt; unit" Usage="iDurableOrchestrationContext.SetCustomStatus customStatusObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customStatusObject" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="customStatusObject">The JSON-serializeable value to use as the orchestrator function's custom status.</param>
        <summary>
            Sets the JSON-serializeable status of the current orchestrator function.
            </summary>
        <remarks>
            The <paramref name="customStatusObject" /> value is serialized to JSON and will
            be made available to the orchestration status query APIs. The serialized JSON
            value must not exceed 16 KB of UTF-16 encoded text.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetOutput">
      <MemberSignature Language="C#" Value="public void SetOutput (object output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetOutput(object output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SetOutput(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOutput (output As Object)" />
      <MemberSignature Language="F#" Value="abstract member SetOutput : obj -&gt; unit" Usage="iDurableOrchestrationContext.SetOutput output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="output">The JSON-serializeable output of the orchestration.</param>
        <summary>
            Sets the output for the current orchestration.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntity">
      <MemberSignature Language="C#" Value="public void SignalEntity (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entity, string operationName, object operationInput = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignalEntity(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entity, string operationName, object operationInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SignalEntity(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignalEntity (entity As EntityId, operationName As String, Optional operationInput As Object = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member SignalEntity : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * string * obj -&gt; unit" Usage="iDurableOrchestrationContext.SignalEntity (entity, operationName, operationInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="operationInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">The target entity.</param>
        <param name="operationName">The name of the operation.</param>
        <param name="operationInput">The input for the operation.</param>
        <summary>
            Signals an entity to perform an operation, without waiting for a response. Any result or exception is ignored (fire and forget).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignalEntity">
      <MemberSignature Language="C#" Value="public void SignalEntity (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entity, DateTime scheduledTimeUtc, string operationName, object operationInput = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignalEntity(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entity, valuetype System.DateTime scheduledTimeUtc, string operationName, object operationInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.SignalEntity(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,System.DateTime,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SignalEntity (entity As EntityId, scheduledTimeUtc As DateTime, operationName As String, Optional operationInput As Object = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member SignalEntity : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * DateTime * string * obj -&gt; unit" Usage="iDurableOrchestrationContext.SignalEntity (entity, scheduledTimeUtc, operationName, operationInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="scheduledTimeUtc" Type="System.DateTime" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="operationInput" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">The target entity.</param>
        <param name="scheduledTimeUtc">The time at which to start the operation.</param>
        <param name="operationName">The name of the operation.</param>
        <param name="operationInput">The input for the operation.</param>
        <summary>
            Signals an operation to be performed by an entity at a specified time. Any result or exception is ignored (fire and forget).
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartNewOrchestration">
      <MemberSignature Language="C#" Value="public string StartNewOrchestration (string functionName, object input, string instanceId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string StartNewOrchestration(string functionName, object input, string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.StartNewOrchestration(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartNewOrchestration (functionName As String, input As Object, Optional instanceId As String = Nothing) As String" />
      <MemberSignature Language="F#" Value="abstract member StartNewOrchestration : string * obj * string -&gt; string" Usage="iDurableOrchestrationContext.StartNewOrchestration (functionName, input, instanceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="input" Type="System.Object" />
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="functionName">The name of the orchestrator function to call.</param>
        <param name="input">the input to pass to the orchestrator function.</param>
        <param name="instanceId">optionally, an instance id for the orchestration. By default, a random GUID is used.</param>
        <summary>
            Schedules a orchestration function named <paramref name="functionName" /> for execution./&gt;.
            Any result or exception is ignored (fire and forget).
            </summary>
        <returns>The instance id of the new orchestration.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
            The specified function does not exist, is disabled, or is not an orchestrator function.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExternalEvent(Of T) (name As String) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iDurableOrchestrationContext.WaitForExternalEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="name">The name of the event to wait for.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (string name, TimeSpan timeout, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(string name, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent``1(System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExternalEvent(Of T) (name As String, timeout As TimeSpan, cancelToken As CancellationToken) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iDurableOrchestrationContext.WaitForExternalEvent (name, timeout, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to throw a TimeoutException.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling <paramref name="timeout" />'s internal timer.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
        <exception cref="T:System.TimeoutException">
            The external event was not received before the timeout expired.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForExternalEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; WaitForExternalEvent&lt;T&gt; (string name, TimeSpan timeout, T defaultValue, System.Threading.CancellationToken cancelToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; WaitForExternalEvent&lt;T&gt;(string name, valuetype System.TimeSpan timeout, !!T defaultValue, valuetype System.Threading.CancellationToken cancelToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationContext.WaitForExternalEvent``1(System.String,System.TimeSpan,``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExternalEvent(Of T) (name As String, timeout As TimeSpan, defaultValue As T, cancelToken As CancellationToken) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member WaitForExternalEvent : string * TimeSpan * 'T * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iDurableOrchestrationContext.WaitForExternalEvent (name, timeout, defaultValue, cancelToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="defaultValue" Type="T" />
        <Parameter Name="cancelToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">Any serializeable type that represents the JSON event payload.</typeparam>
        <param name="name">The name of the event to wait for.</param>
        <param name="timeout">The duration after which to return the value in the <paramref name="defaultValue" /> parameter.</param>
        <param name="defaultValue">The default value to return if the timeout expires before the external event is received.</param>
        <param name="cancelToken">The <c>CancellationToken</c> to use for cancelling <paramref name="timeout" />'s internal timer.</param>
        <summary>
            Waits asynchronously for an event to be raised with name <paramref name="name" /> and returns the event data.
            </summary>
        <returns>A durable task that completes when the external event is received, or returns the value of <paramref name="defaultValue" />
            if the timeout expires.</returns>
        <remarks>
            External clients can raise events to a waiting orchestration instance using
            <see cref="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.IDurableOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object)" />.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
