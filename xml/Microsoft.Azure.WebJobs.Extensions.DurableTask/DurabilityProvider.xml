<Type Name="DurabilityProvider" FullName="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider">
  <TypeSignature Language="C#" Value="public class DurabilityProvider : DurableTask.Core.IOrchestrationService, DurableTask.Core.IOrchestrationServiceClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DurabilityProvider extends System.Object implements class DurableTask.Core.IOrchestrationService, class DurableTask.Core.IOrchestrationServiceClient" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class DurabilityProvider&#xA;Implements IOrchestrationService, IOrchestrationServiceClient" />
  <TypeSignature Language="F#" Value="type DurabilityProvider = class&#xA;    interface IOrchestrationService&#xA;    interface IOrchestrationServiceClient" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>DurableTask.Core.IOrchestrationService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>DurableTask.Core.IOrchestrationServiceClient</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The backend storage provider that provides the actual durability of Durable Functions.
            This is functionally a superset of <see cref="T:DurableTask.Core.IOrchestrationService" /> and <see cref="T:DurableTask.Core.IOrchestrationServiceClient" />.
            If the storage provider does not any of the Durable Functions specific operations, they can use this class
            directly with the expectation that only those interfaces will be implemented. All of the Durable Functions specific
            methods/operations are virtual and can be overwritten by creating a subclass.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DurabilityProvider (string storageProviderName, DurableTask.Core.IOrchestrationService service, DurableTask.Core.IOrchestrationServiceClient serviceClient, string connectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string storageProviderName, class DurableTask.Core.IOrchestrationService service, class DurableTask.Core.IOrchestrationServiceClient serviceClient, string connectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.#ctor(System.String,DurableTask.Core.IOrchestrationService,DurableTask.Core.IOrchestrationServiceClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (storageProviderName As String, service As IOrchestrationService, serviceClient As IOrchestrationServiceClient, connectionName As String)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider : string * DurableTask.Core.IOrchestrationService * DurableTask.Core.IOrchestrationServiceClient * string -&gt; Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider" Usage="new Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider (storageProviderName, service, serviceClient, connectionName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="storageProviderName" Type="System.String" />
        <Parameter Name="service" Type="DurableTask.Core.IOrchestrationService" />
        <Parameter Name="serviceClient" Type="DurableTask.Core.IOrchestrationServiceClient" />
        <Parameter Name="connectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="storageProviderName">The name of the storage backend providing the durability.</param>
        <param name="service">The internal <see cref="T:DurableTask.Core.IOrchestrationService" /> that provides functionality
            for this classes implementions of <see cref="T:DurableTask.Core.IOrchestrationService" />.</param>
        <param name="serviceClient">The internal <see cref="T:DurableTask.Core.IOrchestrationServiceClient" /> that provides functionality
            for this classes implementions of <see cref="T:DurableTask.Core.IOrchestrationServiceClient" />.</param>
        <param name="connectionName">The name of the app setting that stores connection details for the storage provider.</param>
        <summary>
            Creates the default <see cref="T:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbandonTaskActivityWorkItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AbandonTaskActivityWorkItemAsync (DurableTask.Core.TaskActivityWorkItem workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AbandonTaskActivityWorkItemAsync(class DurableTask.Core.TaskActivityWorkItem workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.AbandonTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function AbandonTaskActivityWorkItemAsync (workItem As TaskActivityWorkItem) As Task" />
      <MemberSignature Language="F#" Value="abstract member AbandonTaskActivityWorkItemAsync : DurableTask.Core.TaskActivityWorkItem -&gt; System.Threading.Tasks.Task&#xA;override this.AbandonTaskActivityWorkItemAsync : DurableTask.Core.TaskActivityWorkItem -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.AbandonTaskActivityWorkItemAsync workItem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.AbandonTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskActivityWorkItem" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="AbandonTaskOrchestrationWorkItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AbandonTaskOrchestrationWorkItemAsync (DurableTask.Core.TaskOrchestrationWorkItem workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AbandonTaskOrchestrationWorkItemAsync(class DurableTask.Core.TaskOrchestrationWorkItem workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.AbandonTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function AbandonTaskOrchestrationWorkItemAsync (workItem As TaskOrchestrationWorkItem) As Task" />
      <MemberSignature Language="F#" Value="abstract member AbandonTaskOrchestrationWorkItemAsync : DurableTask.Core.TaskOrchestrationWorkItem -&gt; System.Threading.Tasks.Task&#xA;override this.AbandonTaskOrchestrationWorkItemAsync : DurableTask.Core.TaskOrchestrationWorkItem -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.AbandonTaskOrchestrationWorkItemAsync workItem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.AbandonTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskOrchestrationWorkItem" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CompleteTaskActivityWorkItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CompleteTaskActivityWorkItemAsync (DurableTask.Core.TaskActivityWorkItem workItem, DurableTask.Core.TaskMessage responseMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CompleteTaskActivityWorkItemAsync(class DurableTask.Core.TaskActivityWorkItem workItem, class DurableTask.Core.TaskMessage responseMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CompleteTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem,DurableTask.Core.TaskMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompleteTaskActivityWorkItemAsync (workItem As TaskActivityWorkItem, responseMessage As TaskMessage) As Task" />
      <MemberSignature Language="F#" Value="abstract member CompleteTaskActivityWorkItemAsync : DurableTask.Core.TaskActivityWorkItem * DurableTask.Core.TaskMessage -&gt; System.Threading.Tasks.Task&#xA;override this.CompleteTaskActivityWorkItemAsync : DurableTask.Core.TaskActivityWorkItem * DurableTask.Core.TaskMessage -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CompleteTaskActivityWorkItemAsync (workItem, responseMessage)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.CompleteTaskActivityWorkItemAsync(DurableTask.Core.TaskActivityWorkItem,DurableTask.Core.TaskMessage)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskActivityWorkItem" />
        <Parameter Name="responseMessage" Type="DurableTask.Core.TaskMessage" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <param name="responseMessage">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CompleteTaskOrchestrationWorkItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CompleteTaskOrchestrationWorkItemAsync (DurableTask.Core.TaskOrchestrationWorkItem workItem, DurableTask.Core.OrchestrationRuntimeState newOrchestrationRuntimeState, System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; outboundMessages, System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; orchestratorMessages, System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; timerMessages, DurableTask.Core.TaskMessage continuedAsNewMessage, DurableTask.Core.OrchestrationState orchestrationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CompleteTaskOrchestrationWorkItemAsync(class DurableTask.Core.TaskOrchestrationWorkItem workItem, class DurableTask.Core.OrchestrationRuntimeState newOrchestrationRuntimeState, class System.Collections.Generic.IList`1&lt;class DurableTask.Core.TaskMessage&gt; outboundMessages, class System.Collections.Generic.IList`1&lt;class DurableTask.Core.TaskMessage&gt; orchestratorMessages, class System.Collections.Generic.IList`1&lt;class DurableTask.Core.TaskMessage&gt; timerMessages, class DurableTask.Core.TaskMessage continuedAsNewMessage, class DurableTask.Core.OrchestrationState orchestrationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CompleteTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem,DurableTask.Core.OrchestrationRuntimeState,System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationState)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompleteTaskOrchestrationWorkItemAsync (workItem As TaskOrchestrationWorkItem, newOrchestrationRuntimeState As OrchestrationRuntimeState, outboundMessages As IList(Of TaskMessage), orchestratorMessages As IList(Of TaskMessage), timerMessages As IList(Of TaskMessage), continuedAsNewMessage As TaskMessage, orchestrationState As OrchestrationState) As Task" />
      <MemberSignature Language="F#" Value="abstract member CompleteTaskOrchestrationWorkItemAsync : DurableTask.Core.TaskOrchestrationWorkItem * DurableTask.Core.OrchestrationRuntimeState * System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; * System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; * System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; * DurableTask.Core.TaskMessage * DurableTask.Core.OrchestrationState -&gt; System.Threading.Tasks.Task&#xA;override this.CompleteTaskOrchestrationWorkItemAsync : DurableTask.Core.TaskOrchestrationWorkItem * DurableTask.Core.OrchestrationRuntimeState * System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; * System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; * System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt; * DurableTask.Core.TaskMessage * DurableTask.Core.OrchestrationState -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CompleteTaskOrchestrationWorkItemAsync (workItem, newOrchestrationRuntimeState, outboundMessages, orchestratorMessages, timerMessages, continuedAsNewMessage, orchestrationState)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.CompleteTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem,DurableTask.Core.OrchestrationRuntimeState,System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},System.Collections.Generic.IList{DurableTask.Core.TaskMessage},DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationState)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskOrchestrationWorkItem" />
        <Parameter Name="newOrchestrationRuntimeState" Type="DurableTask.Core.OrchestrationRuntimeState" />
        <Parameter Name="outboundMessages" Type="System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt;" />
        <Parameter Name="orchestratorMessages" Type="System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt;" />
        <Parameter Name="timerMessages" Type="System.Collections.Generic.IList&lt;DurableTask.Core.TaskMessage&gt;" />
        <Parameter Name="continuedAsNewMessage" Type="DurableTask.Core.TaskMessage" />
        <Parameter Name="orchestrationState" Type="DurableTask.Core.OrchestrationState" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <param name="newOrchestrationRuntimeState">To be added.</param>
        <param name="outboundMessages">To be added.</param>
        <param name="orchestratorMessages">To be added.</param>
        <param name="timerMessages">To be added.</param>
        <param name="continuedAsNewMessage">To be added.</param>
        <param name="orchestrationState">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ConfigurationJson">
      <MemberSignature Language="C#" Value="public virtual Newtonsoft.Json.Linq.JObject ConfigurationJson { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Newtonsoft.Json.Linq.JObject ConfigurationJson" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ConfigurationJson" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConfigurationJson As JObject" />
      <MemberSignature Language="F#" Value="member this.ConfigurationJson : Newtonsoft.Json.Linq.JObject" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ConfigurationJson" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Newtonsoft.Json.Linq.JObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            JSON representation of configuration to emit in telemetry.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionName">
      <MemberSignature Language="C#" Value="public virtual string ConnectionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ConnectionName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ConnectionName As String" />
      <MemberSignature Language="F#" Value="member this.ConnectionName : string" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ConnectionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The name of the environment variable that contains connection details for how to connect to storage providers.
            Corresponds to the <see cref="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurableClientAttribute.ConnectionName" /> for binding data.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CreateAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.CreateAsync : unit -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CreateAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.CreateAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateAsync (bool recreateInstanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateAsync(bool recreateInstanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CreateAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateAsync (recreateInstanceStore As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : bool -&gt; System.Threading.Tasks.Task&#xA;override this.CreateAsync : bool -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CreateAsync recreateInstanceStore" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.CreateAsync(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recreateInstanceStore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recreateInstanceStore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateIfNotExistsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateIfNotExistsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CreateIfNotExistsAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateIfNotExistsAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateIfNotExistsAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.CreateIfNotExistsAsync : unit -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CreateIfNotExistsAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.CreateIfNotExistsAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateTaskOrchestrationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateTaskOrchestrationAsync (DurableTask.Core.TaskMessage creationMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateTaskOrchestrationAsync(class DurableTask.Core.TaskMessage creationMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTaskOrchestrationAsync (creationMessage As TaskMessage) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskOrchestrationAsync : DurableTask.Core.TaskMessage -&gt; System.Threading.Tasks.Task&#xA;override this.CreateTaskOrchestrationAsync : DurableTask.Core.TaskMessage -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CreateTaskOrchestrationAsync creationMessage" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creationMessage" Type="DurableTask.Core.TaskMessage" />
      </Parameters>
      <Docs>
        <param name="creationMessage">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="CreateTaskOrchestrationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CreateTaskOrchestrationAsync (DurableTask.Core.TaskMessage creationMessage, DurableTask.Core.OrchestrationStatus[] dedupeStatuses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CreateTaskOrchestrationAsync(class DurableTask.Core.TaskMessage creationMessage, valuetype DurableTask.Core.OrchestrationStatus[] dedupeStatuses) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationStatus[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateTaskOrchestrationAsync (creationMessage As TaskMessage, dedupeStatuses As OrchestrationStatus()) As Task" />
      <MemberSignature Language="F#" Value="abstract member CreateTaskOrchestrationAsync : DurableTask.Core.TaskMessage * DurableTask.Core.OrchestrationStatus[] -&gt; System.Threading.Tasks.Task&#xA;override this.CreateTaskOrchestrationAsync : DurableTask.Core.TaskMessage * DurableTask.Core.OrchestrationStatus[] -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.CreateTaskOrchestrationAsync (creationMessage, dedupeStatuses)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.CreateTaskOrchestrationAsync(DurableTask.Core.TaskMessage,DurableTask.Core.OrchestrationStatus[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="creationMessage" Type="DurableTask.Core.TaskMessage" />
        <Parameter Name="dedupeStatuses" Type="DurableTask.Core.OrchestrationStatus[]" />
      </Parameters>
      <Docs>
        <param name="creationMessage">To be added.</param>
        <param name="dedupeStatuses">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.DeleteAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAsync : unit -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.DeleteAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.DeleteAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DeleteAsync (bool deleteInstanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteAsync(bool deleteInstanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.DeleteAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteAsync (deleteInstanceStore As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : bool -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteAsync : bool -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.DeleteAsync deleteInstanceStore" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.DeleteAsync(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deleteInstanceStore" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deleteInstanceStore">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="EventBehaviourForContinueAsNew">
      <MemberSignature Language="C#" Value="public DurableTask.Core.BehaviorOnContinueAsNew EventBehaviourForContinueAsNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype DurableTask.Core.BehaviorOnContinueAsNew EventBehaviourForContinueAsNew" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.EventBehaviourForContinueAsNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventBehaviourForContinueAsNew As BehaviorOnContinueAsNew" />
      <MemberSignature Language="F#" Value="member this.EventBehaviourForContinueAsNew : DurableTask.Core.BehaviorOnContinueAsNew" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.EventBehaviourForContinueAsNew" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:DurableTask.Core.IOrchestrationService.EventBehaviourForContinueAsNew</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>DurableTask.Core.BehaviorOnContinueAsNew</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ForceTerminateTaskOrchestrationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ForceTerminateTaskOrchestrationAsync (string instanceId, string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ForceTerminateTaskOrchestrationAsync(string instanceId, string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ForceTerminateTaskOrchestrationAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ForceTerminateTaskOrchestrationAsync (instanceId As String, reason As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member ForceTerminateTaskOrchestrationAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.ForceTerminateTaskOrchestrationAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.ForceTerminateTaskOrchestrationAsync (instanceId, reason)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.ForceTerminateTaskOrchestrationAsync(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">To be added.</param>
        <param name="reason">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetAllOrchestrationStates">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt; GetAllOrchestrationStates (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class DurableTask.Core.OrchestrationState&gt;&gt; GetAllOrchestrationStates(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetAllOrchestrationStates(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllOrchestrationStates (cancellationToken As CancellationToken) As Task(Of IList(Of OrchestrationState))" />
      <MemberSignature Language="F#" Value="abstract member GetAllOrchestrationStates : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;&#xA;override this.GetAllOrchestrationStates : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;" Usage="durabilityProvider.GetAllOrchestrationStates cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A token to cancel the request.</param>
        <summary>
            Gets the status of all orchestration instances.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllOrchestrationStatesWithFilters">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt; GetAllOrchestrationStatesWithFilters (DateTime createdTimeFrom, DateTime? createdTimeTo, System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus&gt; runtimeStatus, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class DurableTask.Core.OrchestrationState&gt;&gt; GetAllOrchestrationStatesWithFilters(valuetype System.DateTime createdTimeFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; createdTimeTo, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus&gt; runtimeStatus, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetAllOrchestrationStatesWithFilters(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllOrchestrationStatesWithFilters (createdTimeFrom As DateTime, createdTimeTo As Nullable(Of DateTime), runtimeStatus As IEnumerable(Of OrchestrationRuntimeStatus), cancellationToken As CancellationToken) As Task(Of IList(Of OrchestrationState))" />
      <MemberSignature Language="F#" Value="abstract member GetAllOrchestrationStatesWithFilters : DateTime * Nullable&lt;DateTime&gt; * seq&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;&#xA;override this.GetAllOrchestrationStatesWithFilters : DateTime * Nullable&lt;DateTime&gt; * seq&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;" Usage="durabilityProvider.GetAllOrchestrationStatesWithFilters (createdTimeFrom, createdTimeTo, runtimeStatus, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createdTimeFrom" Type="System.DateTime" />
        <Parameter Name="createdTimeTo" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="runtimeStatus" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationRuntimeStatus&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="createdTimeFrom">Return orchestration instances which were created after this DateTime.</param>
        <param name="createdTimeTo">Return orchestration instances which were created before this DateTime.</param>
        <param name="runtimeStatus">Return orchestration instances which matches the runtimeStatus.</param>
        <param name="cancellationToken">A token to cancel the request.</param>
        <summary>
            Gets the status of all orchestration instances within the specified parameters.
            </summary>
        <returns>Returns a task which completes when the status has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDelayInSecondsAfterOnFetchException">
      <MemberSignature Language="C#" Value="public int GetDelayInSecondsAfterOnFetchException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetDelayInSecondsAfterOnFetchException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetDelayInSecondsAfterOnFetchException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDelayInSecondsAfterOnFetchException (exception As Exception) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetDelayInSecondsAfterOnFetchException : Exception -&gt; int&#xA;override this.GetDelayInSecondsAfterOnFetchException : Exception -&gt; int" Usage="durabilityProvider.GetDelayInSecondsAfterOnFetchException exception" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.GetDelayInSecondsAfterOnFetchException(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetDelayInSecondsAfterOnProcessException">
      <MemberSignature Language="C#" Value="public int GetDelayInSecondsAfterOnProcessException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetDelayInSecondsAfterOnProcessException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetDelayInSecondsAfterOnProcessException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDelayInSecondsAfterOnProcessException (exception As Exception) As Integer" />
      <MemberSignature Language="F#" Value="abstract member GetDelayInSecondsAfterOnProcessException : Exception -&gt; int&#xA;override this.GetDelayInSecondsAfterOnProcessException : Exception -&gt; int" Usage="durabilityProvider.GetDelayInSecondsAfterOnProcessException exception" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.GetDelayInSecondsAfterOnProcessException(System.Exception)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetOrchestrationHistoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetOrchestrationHistoryAsync (string instanceId, string executionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetOrchestrationHistoryAsync(string instanceId, string executionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetOrchestrationHistoryAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrchestrationHistoryAsync (instanceId As String, executionId As String) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestrationHistoryAsync : string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetOrchestrationHistoryAsync : string * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="durabilityProvider.GetOrchestrationHistoryAsync (instanceId, executionId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.GetOrchestrationHistoryAsync(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="executionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">To be added.</param>
        <param name="executionId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetOrchestrationStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt; GetOrchestrationStateAsync (string instanceId, bool allExecutions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class DurableTask.Core.OrchestrationState&gt;&gt; GetOrchestrationStateAsync(string instanceId, bool allExecutions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetOrchestrationStateAsync(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrchestrationStateAsync (instanceId As String, allExecutions As Boolean) As Task(Of IList(Of OrchestrationState))" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestrationStateAsync : string * bool -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;&#xA;override this.GetOrchestrationStateAsync : string * bool -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;" Usage="durabilityProvider.GetOrchestrationStateAsync (instanceId, allExecutions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.GetOrchestrationStateAsync(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="allExecutions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="instanceId">To be added.</param>
        <param name="allExecutions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetOrchestrationStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt; GetOrchestrationStateAsync (string instanceId, string executionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class DurableTask.Core.OrchestrationState&gt; GetOrchestrationStateAsync(string instanceId, string executionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetOrchestrationStateAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOrchestrationStateAsync (instanceId As String, executionId As String) As Task(Of OrchestrationState)" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestrationStateAsync : string * string -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt;&#xA;override this.GetOrchestrationStateAsync : string * string -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt;" Usage="durabilityProvider.GetOrchestrationStateAsync (instanceId, executionId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.GetOrchestrationStateAsync(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="executionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">To be added.</param>
        <param name="executionId">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetOrchestrationStateWithInputsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt; GetOrchestrationStateWithInputsAsync (string instanceId, bool showInput = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class DurableTask.Core.OrchestrationState&gt;&gt; GetOrchestrationStateWithInputsAsync(string instanceId, bool showInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetOrchestrationStateWithInputsAsync(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrchestrationStateWithInputsAsync (instanceId As String, Optional showInput As Boolean = true) As Task(Of IList(Of OrchestrationState))" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestrationStateWithInputsAsync : string * bool -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;&#xA;override this.GetOrchestrationStateWithInputsAsync : string * bool -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;" Usage="durabilityProvider.GetOrchestrationStateWithInputsAsync (instanceId, showInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;DurableTask.Core.OrchestrationState&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="showInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to query.</param>
        <param name="showInput">If set, fetch and return the input for the orchestration instance.</param>
        <summary>
            Gets the state of the specified orchestration instance.
            </summary>
        <returns>Returns a task which completes when the state has been fetched.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrchestrationStateWithPagination">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt; GetOrchestrationStateWithPagination (Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition condition, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt; GetOrchestrationStateWithPagination(class Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition condition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.GetOrchestrationStateWithPagination(Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrchestrationStateWithPagination (condition As OrchestrationStatusQueryCondition, cancellationToken As CancellationToken) As Task(Of OrchestrationStatusQueryResult)" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestrationStateWithPagination : Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt;&#xA;override this.GetOrchestrationStateWithPagination : Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt;" Usage="durabilityProvider.GetOrchestrationStateWithPagination (condition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.OrchestrationStatusQueryCondition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="condition">The filtering conditions of the query.</param>
        <param name="cancellationToken">A token to cancel the request.</param>
        <summary>
            Gets paginated result of all orchestration instances that match query status parameters.
            </summary>
        <returns>Paginated result of orchestration state.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMaxMessageCountExceeded">
      <MemberSignature Language="C#" Value="public bool IsMaxMessageCountExceeded (int currentMessageCount, DurableTask.Core.OrchestrationRuntimeState runtimeState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsMaxMessageCountExceeded(int32 currentMessageCount, class DurableTask.Core.OrchestrationRuntimeState runtimeState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.IsMaxMessageCountExceeded(System.Int32,DurableTask.Core.OrchestrationRuntimeState)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsMaxMessageCountExceeded (currentMessageCount As Integer, runtimeState As OrchestrationRuntimeState) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsMaxMessageCountExceeded : int * DurableTask.Core.OrchestrationRuntimeState -&gt; bool&#xA;override this.IsMaxMessageCountExceeded : int * DurableTask.Core.OrchestrationRuntimeState -&gt; bool" Usage="durabilityProvider.IsMaxMessageCountExceeded (currentMessageCount, runtimeState)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.IsMaxMessageCountExceeded(System.Int32,DurableTask.Core.OrchestrationRuntimeState)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="currentMessageCount" Type="System.Int32" />
        <Parameter Name="runtimeState" Type="DurableTask.Core.OrchestrationRuntimeState" />
      </Parameters>
      <Docs>
        <param name="currentMessageCount">To be added.</param>
        <param name="runtimeState">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="LockNextTaskActivityWorkItem">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt; LockNextTaskActivityWorkItem (TimeSpan receiveTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class DurableTask.Core.TaskActivityWorkItem&gt; LockNextTaskActivityWorkItem(valuetype System.TimeSpan receiveTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.LockNextTaskActivityWorkItem(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LockNextTaskActivityWorkItem (receiveTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TaskActivityWorkItem)" />
      <MemberSignature Language="F#" Value="abstract member LockNextTaskActivityWorkItem : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt;&#xA;override this.LockNextTaskActivityWorkItem : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt;" Usage="durabilityProvider.LockNextTaskActivityWorkItem (receiveTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.LockNextTaskActivityWorkItem(System.TimeSpan,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="receiveTimeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="LockNextTaskOrchestrationWorkItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;DurableTask.Core.TaskOrchestrationWorkItem&gt; LockNextTaskOrchestrationWorkItemAsync (TimeSpan receiveTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class DurableTask.Core.TaskOrchestrationWorkItem&gt; LockNextTaskOrchestrationWorkItemAsync(valuetype System.TimeSpan receiveTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.LockNextTaskOrchestrationWorkItemAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LockNextTaskOrchestrationWorkItemAsync (receiveTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TaskOrchestrationWorkItem)" />
      <MemberSignature Language="F#" Value="abstract member LockNextTaskOrchestrationWorkItemAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.TaskOrchestrationWorkItem&gt;&#xA;override this.LockNextTaskOrchestrationWorkItemAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.TaskOrchestrationWorkItem&gt;" Usage="durabilityProvider.LockNextTaskOrchestrationWorkItemAsync (receiveTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.LockNextTaskOrchestrationWorkItemAsync(System.TimeSpan,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;DurableTask.Core.TaskOrchestrationWorkItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveTimeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="receiveTimeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentTaskActivityWorkItems">
      <MemberSignature Language="C#" Value="public int MaxConcurrentTaskActivityWorkItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentTaskActivityWorkItems" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.MaxConcurrentTaskActivityWorkItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxConcurrentTaskActivityWorkItems As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentTaskActivityWorkItems : int" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.MaxConcurrentTaskActivityWorkItems" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:DurableTask.Core.IOrchestrationService.MaxConcurrentTaskActivityWorkItems</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="MaxConcurrentTaskOrchestrationWorkItems">
      <MemberSignature Language="C#" Value="public int MaxConcurrentTaskOrchestrationWorkItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxConcurrentTaskOrchestrationWorkItems" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.MaxConcurrentTaskOrchestrationWorkItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxConcurrentTaskOrchestrationWorkItems As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxConcurrentTaskOrchestrationWorkItems : int" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.MaxConcurrentTaskOrchestrationWorkItems" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:DurableTask.Core.IOrchestrationService.MaxConcurrentTaskOrchestrationWorkItems</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="PurgeHistoryByFilters">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; PurgeHistoryByFilters (DateTime createdTimeFrom, DateTime? createdTimeTo, System.Collections.Generic.IEnumerable&lt;DurableTask.Core.OrchestrationStatus&gt; runtimeStatus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; PurgeHistoryByFilters(valuetype System.DateTime createdTimeFrom, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; createdTimeTo, class System.Collections.Generic.IEnumerable`1&lt;valuetype DurableTask.Core.OrchestrationStatus&gt; runtimeStatus) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.PurgeHistoryByFilters(System.DateTime,System.Nullable{System.DateTime},System.Collections.Generic.IEnumerable{DurableTask.Core.OrchestrationStatus})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PurgeHistoryByFilters (createdTimeFrom As DateTime, createdTimeTo As Nullable(Of DateTime), runtimeStatus As IEnumerable(Of OrchestrationStatus)) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member PurgeHistoryByFilters : DateTime * Nullable&lt;DateTime&gt; * seq&lt;DurableTask.Core.OrchestrationStatus&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.PurgeHistoryByFilters : DateTime * Nullable&lt;DateTime&gt; * seq&lt;DurableTask.Core.OrchestrationStatus&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="durabilityProvider.PurgeHistoryByFilters (createdTimeFrom, createdTimeTo, runtimeStatus)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="createdTimeFrom" Type="System.DateTime" />
        <Parameter Name="createdTimeTo" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="runtimeStatus" Type="System.Collections.Generic.IEnumerable&lt;DurableTask.Core.OrchestrationStatus&gt;" />
      </Parameters>
      <Docs>
        <param name="createdTimeFrom">Purge the history of orchestration instances which were created after this DateTime.</param>
        <param name="createdTimeTo">Purge the history of orchestration instances which were created before this DateTime.</param>
        <param name="runtimeStatus">Purge the history of orchestration instances which matches the runtimeStatus.</param>
        <summary>
            Purges history that meet the required parameters.
            </summary>
        <returns>The number of instances purged.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeInstanceHistoryByInstanceId">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.PurgeHistoryResult&gt; PurgeInstanceHistoryByInstanceId (string instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.WebJobs.Extensions.DurableTask.PurgeHistoryResult&gt; PurgeInstanceHistoryByInstanceId(string instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.PurgeInstanceHistoryByInstanceId(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PurgeInstanceHistoryByInstanceId (instanceId As String) As Task(Of PurgeHistoryResult)" />
      <MemberSignature Language="F#" Value="abstract member PurgeInstanceHistoryByInstanceId : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.PurgeHistoryResult&gt;&#xA;override this.PurgeInstanceHistoryByInstanceId : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.PurgeHistoryResult&gt;" Usage="durabilityProvider.PurgeInstanceHistoryByInstanceId instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.WebJobs.Extensions.DurableTask.PurgeHistoryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The instance id for the instance history to purge.</param>
        <summary>
            Purges the instance history for the provided instance id.
            </summary>
        <returns>The number of instances purged.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurgeOrchestrationHistoryAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task PurgeOrchestrationHistoryAsync (DateTime thresholdDateTimeUtc, DurableTask.Core.OrchestrationStateTimeRangeFilterType timeRangeFilterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task PurgeOrchestrationHistoryAsync(valuetype System.DateTime thresholdDateTimeUtc, valuetype DurableTask.Core.OrchestrationStateTimeRangeFilterType timeRangeFilterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.PurgeOrchestrationHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)" />
      <MemberSignature Language="VB.NET" Value="Public Function PurgeOrchestrationHistoryAsync (thresholdDateTimeUtc As DateTime, timeRangeFilterType As OrchestrationStateTimeRangeFilterType) As Task" />
      <MemberSignature Language="F#" Value="abstract member PurgeOrchestrationHistoryAsync : DateTime * DurableTask.Core.OrchestrationStateTimeRangeFilterType -&gt; System.Threading.Tasks.Task&#xA;override this.PurgeOrchestrationHistoryAsync : DateTime * DurableTask.Core.OrchestrationStateTimeRangeFilterType -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.PurgeOrchestrationHistoryAsync (thresholdDateTimeUtc, timeRangeFilterType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.PurgeOrchestrationHistoryAsync(System.DateTime,DurableTask.Core.OrchestrationStateTimeRangeFilterType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thresholdDateTimeUtc" Type="System.DateTime" />
        <Parameter Name="timeRangeFilterType" Type="DurableTask.Core.OrchestrationStateTimeRangeFilterType" />
      </Parameters>
      <Docs>
        <param name="thresholdDateTimeUtc">To be added.</param>
        <param name="timeRangeFilterType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ReleaseTaskOrchestrationWorkItemAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ReleaseTaskOrchestrationWorkItemAsync (DurableTask.Core.TaskOrchestrationWorkItem workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReleaseTaskOrchestrationWorkItemAsync(class DurableTask.Core.TaskOrchestrationWorkItem workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ReleaseTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReleaseTaskOrchestrationWorkItemAsync (workItem As TaskOrchestrationWorkItem) As Task" />
      <MemberSignature Language="F#" Value="abstract member ReleaseTaskOrchestrationWorkItemAsync : DurableTask.Core.TaskOrchestrationWorkItem -&gt; System.Threading.Tasks.Task&#xA;override this.ReleaseTaskOrchestrationWorkItemAsync : DurableTask.Core.TaskOrchestrationWorkItem -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.ReleaseTaskOrchestrationWorkItemAsync workItem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.ReleaseTaskOrchestrationWorkItemAsync(DurableTask.Core.TaskOrchestrationWorkItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskOrchestrationWorkItem" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RenewTaskActivityWorkItemLockAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt; RenewTaskActivityWorkItemLockAsync (DurableTask.Core.TaskActivityWorkItem workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class DurableTask.Core.TaskActivityWorkItem&gt; RenewTaskActivityWorkItemLockAsync(class DurableTask.Core.TaskActivityWorkItem workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.RenewTaskActivityWorkItemLockAsync(DurableTask.Core.TaskActivityWorkItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function RenewTaskActivityWorkItemLockAsync (workItem As TaskActivityWorkItem) As Task(Of TaskActivityWorkItem)" />
      <MemberSignature Language="F#" Value="abstract member RenewTaskActivityWorkItemLockAsync : DurableTask.Core.TaskActivityWorkItem -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt;&#xA;override this.RenewTaskActivityWorkItemLockAsync : DurableTask.Core.TaskActivityWorkItem -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt;" Usage="durabilityProvider.RenewTaskActivityWorkItemLockAsync workItem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.RenewTaskActivityWorkItemLockAsync(DurableTask.Core.TaskActivityWorkItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;DurableTask.Core.TaskActivityWorkItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskActivityWorkItem" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RenewTaskOrchestrationWorkItemLockAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RenewTaskOrchestrationWorkItemLockAsync (DurableTask.Core.TaskOrchestrationWorkItem workItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RenewTaskOrchestrationWorkItemLockAsync(class DurableTask.Core.TaskOrchestrationWorkItem workItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.RenewTaskOrchestrationWorkItemLockAsync(DurableTask.Core.TaskOrchestrationWorkItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function RenewTaskOrchestrationWorkItemLockAsync (workItem As TaskOrchestrationWorkItem) As Task" />
      <MemberSignature Language="F#" Value="abstract member RenewTaskOrchestrationWorkItemLockAsync : DurableTask.Core.TaskOrchestrationWorkItem -&gt; System.Threading.Tasks.Task&#xA;override this.RenewTaskOrchestrationWorkItemLockAsync : DurableTask.Core.TaskOrchestrationWorkItem -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.RenewTaskOrchestrationWorkItemLockAsync workItem" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.RenewTaskOrchestrationWorkItemLockAsync(DurableTask.Core.TaskOrchestrationWorkItem)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workItem" Type="DurableTask.Core.TaskOrchestrationWorkItem" />
      </Parameters>
      <Docs>
        <param name="workItem">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="RetrieveSerializedEntityState">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; RetrieveSerializedEntityState (Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, Newtonsoft.Json.JsonSerializerSettings serializierSettings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; RetrieveSerializedEntityState(valuetype Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId entityId, class Newtonsoft.Json.JsonSerializerSettings serializierSettings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.RetrieveSerializedEntityState(Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId,Newtonsoft.Json.JsonSerializerSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RetrieveSerializedEntityState (entityId As EntityId, serializierSettings As JsonSerializerSettings) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member RetrieveSerializedEntityState : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * Newtonsoft.Json.JsonSerializerSettings -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.RetrieveSerializedEntityState : Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId * Newtonsoft.Json.JsonSerializerSettings -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="durabilityProvider.RetrieveSerializedEntityState (entityId, serializierSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityId" Type="Microsoft.Azure.WebJobs.Extensions.DurableTask.EntityId" />
        <Parameter Name="serializierSettings" Type="Newtonsoft.Json.JsonSerializerSettings" />
      </Parameters>
      <Docs>
        <param name="entityId">Entity id to fetch state for.</param>
        <param name="serializierSettings">JsonSerializerSettings for custom deserialization.</param>
        <summary>
            Retrieves the state for a serialized entity.
            </summary>
        <returns>State for the entity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RewindAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RewindAsync (string instanceId, string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RewindAsync(string instanceId, string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.RewindAsync(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RewindAsync (instanceId As String, reason As String) As Task" />
      <MemberSignature Language="F#" Value="abstract member RewindAsync : string * string -&gt; System.Threading.Tasks.Task&#xA;override this.RewindAsync : string * string -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.RewindAsync (instanceId, reason)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceId">The ID of the orchestration instance to rewind.</param>
        <param name="reason">The reason for rewinding the orchestration instance.</param>
        <summary>
            Rewinds the specified failed orchestration instance with a reason.
            </summary>
        <returns>A task that completes when the rewind message is enqueued.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendTaskOrchestrationMessageAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendTaskOrchestrationMessageAsync (DurableTask.Core.TaskMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SendTaskOrchestrationMessageAsync(class DurableTask.Core.TaskMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.SendTaskOrchestrationMessageAsync(DurableTask.Core.TaskMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendTaskOrchestrationMessageAsync (message As TaskMessage) As Task" />
      <MemberSignature Language="F#" Value="abstract member SendTaskOrchestrationMessageAsync : DurableTask.Core.TaskMessage -&gt; System.Threading.Tasks.Task&#xA;override this.SendTaskOrchestrationMessageAsync : DurableTask.Core.TaskMessage -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.SendTaskOrchestrationMessageAsync message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.SendTaskOrchestrationMessageAsync(DurableTask.Core.TaskMessage)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="DurableTask.Core.TaskMessage" />
      </Parameters>
      <Docs>
        <param name="message">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="SendTaskOrchestrationMessageBatchAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendTaskOrchestrationMessageBatchAsync (params DurableTask.Core.TaskMessage[] messages);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SendTaskOrchestrationMessageBatchAsync(class DurableTask.Core.TaskMessage[] messages) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.SendTaskOrchestrationMessageBatchAsync(DurableTask.Core.TaskMessage[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendTaskOrchestrationMessageBatchAsync (ParamArray messages As TaskMessage()) As Task" />
      <MemberSignature Language="F#" Value="abstract member SendTaskOrchestrationMessageBatchAsync : DurableTask.Core.TaskMessage[] -&gt; System.Threading.Tasks.Task&#xA;override this.SendTaskOrchestrationMessageBatchAsync : DurableTask.Core.TaskMessage[] -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.SendTaskOrchestrationMessageBatchAsync messages" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.SendTaskOrchestrationMessageBatchAsync(DurableTask.Core.TaskMessage[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messages" Type="DurableTask.Core.TaskMessage[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="messages">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StartAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.StartAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member StartAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.StartAsync : unit -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.StartAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.StartAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.StopAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function StopAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.StopAsync : unit -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.StopAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.StopAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync (bool isForced);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopAsync(bool isForced) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.StopAsync(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function StopAsync (isForced As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : bool -&gt; System.Threading.Tasks.Task&#xA;override this.StopAsync : bool -&gt; System.Threading.Tasks.Task" Usage="durabilityProvider.StopAsync isForced" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationService.StopAsync(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isForced" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isForced">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="SupportsEntities">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEntities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEntities" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.SupportsEntities" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEntities As Boolean" />
      <MemberSignature Language="F#" Value="member this.SupportsEntities : bool" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.SupportsEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Specifies whether the durability provider supports Durable Entities.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaskActivityDispatcherCount">
      <MemberSignature Language="C#" Value="public int TaskActivityDispatcherCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TaskActivityDispatcherCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.TaskActivityDispatcherCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TaskActivityDispatcherCount As Integer" />
      <MemberSignature Language="F#" Value="member this.TaskActivityDispatcherCount : int" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.TaskActivityDispatcherCount" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:DurableTask.Core.IOrchestrationService.TaskActivityDispatcherCount</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="TaskOrchestrationDispatcherCount">
      <MemberSignature Language="C#" Value="public int TaskOrchestrationDispatcherCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TaskOrchestrationDispatcherCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.TaskOrchestrationDispatcherCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TaskOrchestrationDispatcherCount As Integer" />
      <MemberSignature Language="F#" Value="member this.TaskOrchestrationDispatcherCount : int" Usage="Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.TaskOrchestrationDispatcherCount" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:DurableTask.Core.IOrchestrationService.TaskOrchestrationDispatcherCount</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ValidateDelayTime">
      <MemberSignature Language="C#" Value="public virtual bool ValidateDelayTime (TimeSpan timespan, out string errorMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ValidateDelayTime(valuetype System.TimeSpan timespan, [out] string&amp; errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.ValidateDelayTime(System.TimeSpan,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateDelayTime (timespan As TimeSpan, ByRef errorMessage As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member ValidateDelayTime : TimeSpan * string -&gt; bool&#xA;override this.ValidateDelayTime : TimeSpan * string -&gt; bool" Usage="durabilityProvider.ValidateDelayTime (timespan, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timespan" Type="System.TimeSpan" />
        <Parameter Name="errorMessage" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timespan">The timespan that the code will have to wait for.</param>
        <param name="errorMessage">The error message if the timespan is invalid.</param>
        <summary>
            Uses durability provider specific logic to verify whether a timespan for a timer, timeout
            or retry interval is allowed by the provider.
            </summary>
        <returns>A boolean indicating whether the time interval is valid.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForOrchestrationAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt; WaitForOrchestrationAsync (string instanceId, string executionId, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class DurableTask.Core.OrchestrationState&gt; WaitForOrchestrationAsync(string instanceId, string executionId, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.WebJobs.Extensions.DurableTask.DurabilityProvider.WaitForOrchestrationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForOrchestrationAsync (instanceId As String, executionId As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of OrchestrationState)" />
      <MemberSignature Language="F#" Value="abstract member WaitForOrchestrationAsync : string * string * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt;&#xA;override this.WaitForOrchestrationAsync : string * string * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt;" Usage="durabilityProvider.WaitForOrchestrationAsync (instanceId, executionId, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:DurableTask.Core.IOrchestrationServiceClient.WaitForOrchestrationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.WebJobs.Extensions.DurableTask</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;DurableTask.Core.OrchestrationState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.String" />
        <Parameter Name="executionId" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="instanceId">To be added.</param>
        <param name="executionId">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
