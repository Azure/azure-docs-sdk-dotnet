<Type Name="ArmNetAppModelFactory" FullName="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory">
  <TypeSignature Language="C#" Value="public static class ArmNetAppModelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ArmNetAppModelFactory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class ArmNetAppModelFactory" />
  <TypeSignature Language="F#" Value="type ArmNetAppModelFactory = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>1.6.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> Model factory for models. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AvailabilityZoneMapping">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping AvailabilityZoneMapping (string availabilityZone = default, bool? isAvailable = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping AvailabilityZoneMapping(string availabilityZone, valuetype System.Nullable`1&lt;bool&gt; isAvailable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.AvailabilityZoneMapping(System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AvailabilityZoneMapping (Optional availabilityZone As String = Nothing, Optional isAvailable As Nullable(Of Boolean) = Nothing) As AvailabilityZoneMapping" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member AvailabilityZoneMapping : string * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.AvailabilityZoneMapping (availabilityZone, isAvailable)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping AvailabilityZoneMapping (string availabilityZone, bool? isAvailable);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AvailabilityZoneMapping (availabilityZone As String, isAvailable As Nullable(Of Boolean)) As AvailabilityZoneMapping" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availabilityZone" Type="System.String" />
        <Parameter Name="isAvailable" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="availabilityZone"> Logical availability zone. </param>
        <param name="isAvailable"> Available availability zone. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapacityPoolData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.CapacityPoolData CapacityPoolData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, Guid? poolId = default, long size = 0, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel serviceLevel = default, string provisioningState = default, float? totalThroughputMibps = default, float? utilizedThroughputMibps = default, Azure.ResourceManager.NetApp.Models.CapacityPoolQosType? qosType = default, bool? isCoolAccessEnabled = default, Azure.ResourceManager.NetApp.Models.CapacityPoolEncryptionType? encryptionType = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.CapacityPoolData CapacityPoolData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; poolId, int64 size, valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel serviceLevel, string provisioningState, valuetype System.Nullable`1&lt;float32&gt; totalThroughputMibps, valuetype System.Nullable`1&lt;float32&gt; utilizedThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CapacityPoolQosType&gt; qosType, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CapacityPoolEncryptionType&gt; encryptionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.CapacityPoolData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},System.Nullable{System.Guid},System.Int64,Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel,System.String,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.CapacityPoolQosType},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.CapacityPoolEncryptionType})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CapacityPoolData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional poolId As Nullable(Of Guid) = Nothing, Optional size As Long = 0, Optional serviceLevel As NetAppFileServiceLevel = Nothing, Optional provisioningState As String = Nothing, Optional totalThroughputMibps As Nullable(Of Single) = Nothing, Optional utilizedThroughputMibps As Nullable(Of Single) = Nothing, Optional qosType As Nullable(Of CapacityPoolQosType) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional encryptionType As Nullable(Of CapacityPoolEncryptionType) = Nothing) As CapacityPoolData" />
      <MemberSignature Language="F#" Value="static member CapacityPoolData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * Nullable&lt;Guid&gt; * int64 * Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel * string * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CapacityPoolQosType&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CapacityPoolEncryptionType&gt; -&gt; Azure.ResourceManager.NetApp.CapacityPoolData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.CapacityPoolData (id, name, resourceType, systemData, tags, location, etag, poolId, size, serviceLevel, provisioningState, totalThroughputMibps, utilizedThroughputMibps, qosType, isCoolAccessEnabled, encryptionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.CapacityPoolData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="poolId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="size" Type="System.Int64" />
        <Parameter Name="serviceLevel" Type="Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="totalThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="utilizedThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="qosType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CapacityPoolQosType&gt;" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="encryptionType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CapacityPoolEncryptionType&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="poolId"> UUID v4 used to identify the Pool. </param>
        <param name="size"> Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 1099511627776). </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="totalThroughputMibps"> Total throughput of pool in MiB/s. </param>
        <param name="utilizedThroughputMibps"> Utilized throughput of pool in MiB/s. </param>
        <param name="qosType"> The qos type of the pool. </param>
        <param name="isCoolAccessEnabled"> If enabled (true) the pool can contain cool Access enabled volumes. </param>
        <param name="encryptionType"> Encryption type of the capacity pool, set encryption type for data at rest for this pool and all volumes in it. This value can only be set when creating new pool. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.CapacityPoolData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.CapacityPoolData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CapacityPoolPatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.CapacityPoolPatch CapacityPoolPatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, long? size = default, Azure.ResourceManager.NetApp.Models.CapacityPoolQosType? qosType = default, bool? isCoolAccessEnabled = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.CapacityPoolPatch CapacityPoolPatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;int64&gt; size, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CapacityPoolQosType&gt; qosType, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.CapacityPoolPatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{System.Int64},System.Nullable{Azure.ResourceManager.NetApp.Models.CapacityPoolQosType},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CapacityPoolPatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional size As Nullable(Of Long) = Nothing, Optional qosType As Nullable(Of CapacityPoolQosType) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing) As CapacityPoolPatch" />
      <MemberSignature Language="F#" Value="static member CapacityPoolPatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CapacityPoolQosType&gt; * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.CapacityPoolPatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.CapacityPoolPatch (id, name, resourceType, systemData, tags, location, size, qosType, isCoolAccessEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.CapacityPoolPatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="qosType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CapacityPoolQosType&gt;" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="size"> Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks (value must be multiply of 1099511627776). </param>
        <param name="qosType"> The qos type of the pool. </param>
        <param name="isCoolAccessEnabled"> If enabled (true) the pool can contain cool Access enabled volumes. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.CapacityPoolPatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.CapacityPoolPatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroupIdListForLdapUserResult">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.GetGroupIdListForLdapUserResult GetGroupIdListForLdapUserResult (System.Collections.Generic.IEnumerable&lt;string&gt; groupIdsForLdapUser = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.GetGroupIdListForLdapUserResult GetGroupIdListForLdapUserResult(class System.Collections.Generic.IEnumerable`1&lt;string&gt; groupIdsForLdapUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.GetGroupIdListForLdapUserResult(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGroupIdListForLdapUserResult (Optional groupIdsForLdapUser As IEnumerable(Of String) = Nothing) As GetGroupIdListForLdapUserResult" />
      <MemberSignature Language="F#" Value="static member GetGroupIdListForLdapUserResult : seq&lt;string&gt; -&gt; Azure.ResourceManager.NetApp.Models.GetGroupIdListForLdapUserResult" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.GetGroupIdListForLdapUserResult groupIdsForLdapUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.GetGroupIdListForLdapUserResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupIdsForLdapUser" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="groupIdsForLdapUser"> Group Id list. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.GetGroupIdListForLdapUserResult" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.GetGroupIdListForLdapUserResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppAccountActiveDirectory">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory NetAppAccountActiveDirectory (string activeDirectoryId = default, string username = default, string password = default, string domain = default, string dns = default, Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectoryStatus? status = default, string statusDetails = default, string smbServerName = default, string organizationalUnit = default, string site = default, System.Collections.Generic.IEnumerable&lt;string&gt; backupOperators = default, System.Collections.Generic.IEnumerable&lt;string&gt; administrators = default, System.Net.IPAddress kdcIP = default, string adName = default, string serverRootCACertificate = default, bool? isAesEncryptionEnabled = default, bool? isLdapSigningEnabled = default, System.Collections.Generic.IEnumerable&lt;string&gt; securityOperators = default, bool? isLdapOverTlsEnabled = default, bool? allowLocalNfsUsersWithLdap = default, bool? encryptDCConnections = default, Azure.ResourceManager.NetApp.Models.NetAppLdapSearchScopeConfiguration ldapSearchScope = default, string preferredServersForLdapClient = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory NetAppAccountActiveDirectory(string activeDirectoryId, string username, string password, string domain, string dns, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectoryStatus&gt; status, string statusDetails, string smbServerName, string organizationalUnit, string site, class System.Collections.Generic.IEnumerable`1&lt;string&gt; backupOperators, class System.Collections.Generic.IEnumerable`1&lt;string&gt; administrators, class System.Net.IPAddress kdcIP, string adName, string serverRootCACertificate, valuetype System.Nullable`1&lt;bool&gt; isAesEncryptionEnabled, valuetype System.Nullable`1&lt;bool&gt; isLdapSigningEnabled, class System.Collections.Generic.IEnumerable`1&lt;string&gt; securityOperators, valuetype System.Nullable`1&lt;bool&gt; isLdapOverTlsEnabled, valuetype System.Nullable`1&lt;bool&gt; allowLocalNfsUsersWithLdap, valuetype System.Nullable`1&lt;bool&gt; encryptDCConnections, class Azure.ResourceManager.NetApp.Models.NetAppLdapSearchScopeConfiguration ldapSearchScope, string preferredServersForLdapClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountActiveDirectory(System.String,System.String,System.String,System.String,System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectoryStatus},System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Net.IPAddress,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},Azure.ResourceManager.NetApp.Models.NetAppLdapSearchScopeConfiguration,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppAccountActiveDirectory (Optional activeDirectoryId As String = Nothing, Optional username As String = Nothing, Optional password As String = Nothing, Optional domain As String = Nothing, Optional dns As String = Nothing, Optional status As Nullable(Of NetAppAccountActiveDirectoryStatus) = Nothing, Optional statusDetails As String = Nothing, Optional smbServerName As String = Nothing, Optional organizationalUnit As String = Nothing, Optional site As String = Nothing, Optional backupOperators As IEnumerable(Of String) = Nothing, Optional administrators As IEnumerable(Of String) = Nothing, Optional kdcIP As IPAddress = Nothing, Optional adName As String = Nothing, Optional serverRootCACertificate As String = Nothing, Optional isAesEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional isLdapSigningEnabled As Nullable(Of Boolean) = Nothing, Optional securityOperators As IEnumerable(Of String) = Nothing, Optional isLdapOverTlsEnabled As Nullable(Of Boolean) = Nothing, Optional allowLocalNfsUsersWithLdap As Nullable(Of Boolean) = Nothing, Optional encryptDCConnections As Nullable(Of Boolean) = Nothing, Optional ldapSearchScope As NetAppLdapSearchScopeConfiguration = Nothing, Optional preferredServersForLdapClient As String = Nothing) As NetAppAccountActiveDirectory" />
      <MemberSignature Language="F#" Value="static member NetAppAccountActiveDirectory : string * string * string * string * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectoryStatus&gt; * string * string * string * string * seq&lt;string&gt; * seq&lt;string&gt; * System.Net.IPAddress * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * seq&lt;string&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Azure.ResourceManager.NetApp.Models.NetAppLdapSearchScopeConfiguration * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountActiveDirectory (activeDirectoryId, username, password, domain, dns, status, statusDetails, smbServerName, organizationalUnit, site, backupOperators, administrators, kdcIP, adName, serverRootCACertificate, isAesEncryptionEnabled, isLdapSigningEnabled, securityOperators, isLdapOverTlsEnabled, allowLocalNfsUsersWithLdap, encryptDCConnections, ldapSearchScope, preferredServersForLdapClient)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activeDirectoryId" Type="System.String" />
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="dns" Type="System.String" />
        <Parameter Name="status" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectoryStatus&gt;" />
        <Parameter Name="statusDetails" Type="System.String" />
        <Parameter Name="smbServerName" Type="System.String" />
        <Parameter Name="organizationalUnit" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
        <Parameter Name="backupOperators" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="administrators" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="kdcIP" Type="System.Net.IPAddress" />
        <Parameter Name="adName" Type="System.String" />
        <Parameter Name="serverRootCACertificate" Type="System.String" />
        <Parameter Name="isAesEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isLdapSigningEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="securityOperators" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="isLdapOverTlsEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="allowLocalNfsUsersWithLdap" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="encryptDCConnections" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="ldapSearchScope" Type="Azure.ResourceManager.NetApp.Models.NetAppLdapSearchScopeConfiguration" />
        <Parameter Name="preferredServersForLdapClient" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="activeDirectoryId"> Id of the Active Directory. </param>
        <param name="username"> A domain user account with permission to create machine accounts. </param>
        <param name="password"> Plain text password of Active Directory domain administrator, value is masked in the response. </param>
        <param name="domain"> Name of the Active Directory domain. </param>
        <param name="dns"> Comma separated list of DNS server IP addresses (IPv4 only) for the Active Directory domain. </param>
        <param name="status"> Status of the Active Directory. </param>
        <param name="statusDetails"> Any details in regards to the Status of the Active Directory. </param>
        <param name="smbServerName"> NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes. </param>
        <param name="organizationalUnit"> The Organizational Unit (OU) within the Windows Active Directory. </param>
        <param name="site"> The Active Directory site the service will limit Domain Controller discovery to. </param>
        <param name="backupOperators"> Users to be added to the Built-in Backup Operator active directory group. A list of unique usernames without domain specifier. </param>
        <param name="administrators"> Users to be added to the Built-in Administrators active directory group. A list of unique usernames without domain specifier. </param>
        <param name="kdcIP"> kdc server IP addresses for the active directory machine. This optional parameter is used only while creating kerberos volume. </param>
        <param name="adName"> Name of the active directory machine. This optional parameter is used only while creating kerberos volume. </param>
        <param name="serverRootCACertificate"> When LDAP over SSL/TLS is enabled, the LDAP client is required to have base64 encoded Active Directory Certificate Service's self-signed root CA certificate, this optional parameter is used only for dual protocol with LDAP user-mapping volumes. </param>
        <param name="isAesEncryptionEnabled"> If enabled, AES encryption will be enabled for SMB communication. </param>
        <param name="isLdapSigningEnabled"> Specifies whether or not the LDAP traffic needs to be signed. </param>
        <param name="securityOperators"> Domain Users in the Active directory to be given SeSecurityPrivilege privilege (Needed for SMB Continuously available shares for SQL). A list of unique usernames without domain specifier. </param>
        <param name="isLdapOverTlsEnabled"> Specifies whether or not the LDAP traffic needs to be secured via TLS. </param>
        <param name="allowLocalNfsUsersWithLdap"> If enabled, NFS client local users can also (in addition to LDAP users) access the NFS volumes. </param>
        <param name="encryptDCConnections"> If enabled, Traffic between the SMB server to Domain Controller (DC) will be encrypted. </param>
        <param name="ldapSearchScope"> LDAP Search scope options. </param>
        <param name="preferredServersForLdapClient"> Comma separated list of IPv4 addresses of preferred servers for LDAP client. At most two comma separated IPv4 addresses can be passed. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppAccountData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppAccountData NetAppAccountData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, Azure.ResourceManager.Models.ManagedServiceIdentity identity = default, string provisioningState = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories = default, Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption = default, bool? disableShowmount = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppAccountData NetAppAccountData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class Azure.ResourceManager.Models.ManagedServiceIdentity identity, string provisioningState, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories, class Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption, valuetype System.Nullable`1&lt;bool&gt; disableShowmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},Azure.ResourceManager.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory},Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppAccountData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional identity As ManagedServiceIdentity = Nothing, Optional provisioningState As String = Nothing, Optional activeDirectories As IEnumerable(Of NetAppAccountActiveDirectory) = Nothing, Optional encryption As NetAppAccountEncryption = Nothing, Optional disableShowmount As Nullable(Of Boolean) = Nothing) As NetAppAccountData" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppAccountData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * Azure.ResourceManager.Models.ManagedServiceIdentity * string * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; * Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.NetAppAccountData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountData (id, name, resourceType, systemData, tags, location, etag, identity, provisioningState, activeDirectories, encryption, disableShowmount)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppAccountData NetAppAccountData (Azure.Core.ResourceIdentifier id, string name, Azure.Core.ResourceType resourceType, Azure.ResourceManager.Models.SystemData systemData, System.Collections.Generic.IDictionary&lt;string,string&gt; tags, Azure.Core.AzureLocation location, Azure.ETag? etag, Azure.ResourceManager.Models.ManagedServiceIdentity identity, string provisioningState, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories, Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption, bool? disableShowmount);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppAccountData (id As ResourceIdentifier, name As String, resourceType As ResourceType, systemData As SystemData, tags As IDictionary(Of String, String), location As AzureLocation, etag As Nullable(Of ETag), identity As ManagedServiceIdentity, provisioningState As String, activeDirectories As IEnumerable(Of NetAppAccountActiveDirectory), encryption As NetAppAccountEncryption, disableShowmount As Nullable(Of Boolean)) As NetAppAccountData" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppAccountData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="identity" Type="Azure.ResourceManager.Models.ManagedServiceIdentity" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="activeDirectories" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt;" />
        <Parameter Name="encryption" Type="Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption" />
        <Parameter Name="disableShowmount" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="identity"> The identity used for the resource. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="activeDirectories"> Active Directories. </param>
        <param name="encryption"> Encryption settings. </param>
        <param name="disableShowmount"> Shows the status of disableShowmount for all volumes under the subscription, null equals false. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppAccountData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppAccountData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppAccountData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppAccountData NetAppAccountData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, Azure.ResourceManager.Models.ManagedServiceIdentity identity = default, string provisioningState = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories = default, Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption = default, bool? disableShowmount = default, string nfsV4IdDomain = default, bool? isMultiAdEnabled = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppAccountData NetAppAccountData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class Azure.ResourceManager.Models.ManagedServiceIdentity identity, string provisioningState, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories, class Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption, valuetype System.Nullable`1&lt;bool&gt; disableShowmount, string nfsV4IdDomain, valuetype System.Nullable`1&lt;bool&gt; isMultiAdEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},Azure.ResourceManager.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory},Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppAccountData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional identity As ManagedServiceIdentity = Nothing, Optional provisioningState As String = Nothing, Optional activeDirectories As IEnumerable(Of NetAppAccountActiveDirectory) = Nothing, Optional encryption As NetAppAccountEncryption = Nothing, Optional disableShowmount As Nullable(Of Boolean) = Nothing, Optional nfsV4IdDomain As String = Nothing, Optional isMultiAdEnabled As Nullable(Of Boolean) = Nothing) As NetAppAccountData" />
      <MemberSignature Language="F#" Value="static member NetAppAccountData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * Azure.ResourceManager.Models.ManagedServiceIdentity * string * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; * Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.NetAppAccountData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountData (id, name, resourceType, systemData, tags, location, etag, identity, provisioningState, activeDirectories, encryption, disableShowmount, nfsV4IdDomain, isMultiAdEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppAccountData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="identity" Type="Azure.ResourceManager.Models.ManagedServiceIdentity" Index="7" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="provisioningState" Type="System.String" Index="8" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="activeDirectories" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt;" Index="9" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="encryption" Type="Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption" Index="10" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="disableShowmount" Type="System.Nullable&lt;System.Boolean&gt;" Index="11" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="nfsV4IdDomain" Type="System.String" Index="12" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isMultiAdEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="13" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="identity"> The identity used for the resource. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="activeDirectories"> Active Directories. </param>
        <param name="encryption"> Encryption settings. </param>
        <param name="disableShowmount"> Shows the status of disableShowmount for all volumes under the subscription, null equals false. </param>
        <param name="nfsV4IdDomain"> Domain for NFSv4 user ID mapping. This property will be set for all NetApp accounts in the subscription and region and only affect non ldap NFSv4 volumes. </param>
        <param name="isMultiAdEnabled"> This will have true value only if account is Multiple AD enabled. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppAccountData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppAccountData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppAccountPatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppAccountPatch NetAppAccountPatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.Models.ManagedServiceIdentity identity = default, string provisioningState = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories = default, Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption = default, bool? disableShowmount = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppAccountPatch NetAppAccountPatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, class Azure.ResourceManager.Models.ManagedServiceIdentity identity, string provisioningState, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories, class Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption, valuetype System.Nullable`1&lt;bool&gt; disableShowmount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountPatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.ResourceManager.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory},Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppAccountPatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional identity As ManagedServiceIdentity = Nothing, Optional provisioningState As String = Nothing, Optional activeDirectories As IEnumerable(Of NetAppAccountActiveDirectory) = Nothing, Optional encryption As NetAppAccountEncryption = Nothing, Optional disableShowmount As Nullable(Of Boolean) = Nothing) As NetAppAccountPatch" />
      <MemberSignature Language="F#" Value="static member NetAppAccountPatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Azure.ResourceManager.Models.ManagedServiceIdentity * string * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; * Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppAccountPatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountPatch (id, name, resourceType, systemData, tags, location, identity, provisioningState, activeDirectories, encryption, disableShowmount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppAccountPatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="identity" Type="Azure.ResourceManager.Models.ManagedServiceIdentity" Index="6" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="provisioningState" Type="System.String" Index="7" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="activeDirectories" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt;" Index="8" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="encryption" Type="Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption" Index="9" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="disableShowmount" Type="System.Nullable&lt;System.Boolean&gt;" Index="10" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="identity"> The identity used for the resource. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="activeDirectories"> Active Directories. </param>
        <param name="encryption"> Encryption settings. </param>
        <param name="disableShowmount"> Shows the status of disableShowmount for all volumes under the subscription, null equals false. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppAccountPatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppAccountPatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppAccountPatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppAccountPatch NetAppAccountPatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.Models.ManagedServiceIdentity identity = default, string provisioningState = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories = default, Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption = default, bool? disableShowmount = default, string nfsV4IdDomain = default, bool? isMultiAdEnabled = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppAccountPatch NetAppAccountPatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, class Azure.ResourceManager.Models.ManagedServiceIdentity identity, string provisioningState, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; activeDirectories, class Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption encryption, valuetype System.Nullable`1&lt;bool&gt; disableShowmount, string nfsV4IdDomain, valuetype System.Nullable`1&lt;bool&gt; isMultiAdEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountPatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.ResourceManager.Models.ManagedServiceIdentity,System.String,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory},Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppAccountPatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional identity As ManagedServiceIdentity = Nothing, Optional provisioningState As String = Nothing, Optional activeDirectories As IEnumerable(Of NetAppAccountActiveDirectory) = Nothing, Optional encryption As NetAppAccountEncryption = Nothing, Optional disableShowmount As Nullable(Of Boolean) = Nothing, Optional nfsV4IdDomain As String = Nothing, Optional isMultiAdEnabled As Nullable(Of Boolean) = Nothing) As NetAppAccountPatch" />
      <MemberSignature Language="F#" Value="static member NetAppAccountPatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Azure.ResourceManager.Models.ManagedServiceIdentity * string * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt; * Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption * Nullable&lt;bool&gt; * string * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppAccountPatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppAccountPatch (id, name, resourceType, systemData, tags, location, identity, provisioningState, activeDirectories, encryption, disableShowmount, nfsV4IdDomain, isMultiAdEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppAccountPatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="identity" Type="Azure.ResourceManager.Models.ManagedServiceIdentity" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="provisioningState" Type="System.String" Index="7" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="activeDirectories" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppAccountActiveDirectory&gt;" Index="8" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="encryption" Type="Azure.ResourceManager.NetApp.Models.NetAppAccountEncryption" Index="9" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="disableShowmount" Type="System.Nullable&lt;System.Boolean&gt;" Index="10" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="nfsV4IdDomain" Type="System.String" Index="11" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isMultiAdEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="12" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="identity"> The identity used for the resource. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="activeDirectories"> Active Directories. </param>
        <param name="encryption"> Encryption settings. </param>
        <param name="disableShowmount"> Shows the status of disableShowmount for all volumes under the subscription, null equals false. </param>
        <param name="nfsV4IdDomain"> Domain for NFSv4 user ID mapping. This property will be set for all NetApp accounts in the subscription and region and only affect non ldap NFSv4 volumes. </param>
        <param name="isMultiAdEnabled"> This will have true value only if account is Multiple AD enabled. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppAccountPatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppAccountPatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppBackupData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppBackupData NetAppBackupData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, Azure.Core.AzureLocation location = default, string backupId = default, DateTimeOffset? createdOn = default, string provisioningState = default, long? size = default, string label = default, Azure.ResourceManager.NetApp.Models.NetAppBackupType? backupType = default, string failureReason = default, string volumeName = default, bool? useExistingSnapshot = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppBackupData NetAppBackupData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, valuetype Azure.Core.AzureLocation location, string backupId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createdOn, string provisioningState, valuetype System.Nullable`1&lt;int64&gt; size, string label, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppBackupType&gt; backupType, string failureReason, string volumeName, valuetype System.Nullable`1&lt;bool&gt; useExistingSnapshot) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,Azure.Core.AzureLocation,System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int64},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppBackupType},System.String,System.String,System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppBackupData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional location As AzureLocation = Nothing, Optional backupId As String = Nothing, Optional createdOn As Nullable(Of DateTimeOffset) = Nothing, Optional provisioningState As String = Nothing, Optional size As Nullable(Of Long) = Nothing, Optional label As String = Nothing, Optional backupType As Nullable(Of NetAppBackupType) = Nothing, Optional failureReason As String = Nothing, Optional volumeName As String = Nothing, Optional useExistingSnapshot As Nullable(Of Boolean) = Nothing) As NetAppBackupData" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppBackupData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * Azure.Core.AzureLocation * string * Nullable&lt;DateTimeOffset&gt; * string * Nullable&lt;int64&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppBackupType&gt; * string * string * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.NetAppBackupData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupData (id, name, resourceType, systemData, location, backupId, createdOn, provisioningState, size, label, backupType, failureReason, volumeName, useExistingSnapshot)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppBackupData NetAppBackupData (Azure.Core.ResourceIdentifier id, string name, Azure.Core.ResourceType resourceType, Azure.ResourceManager.Models.SystemData systemData, Azure.Core.AzureLocation location, string backupId, DateTimeOffset? createdOn, string provisioningState, long? size, string label, Azure.ResourceManager.NetApp.Models.NetAppBackupType? backupType, string failureReason, string volumeName, bool? useExistingSnapshot);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppBackupData (id As ResourceIdentifier, name As String, resourceType As ResourceType, systemData As SystemData, location As AzureLocation, backupId As String, createdOn As Nullable(Of DateTimeOffset), provisioningState As String, size As Nullable(Of Long), label As String, backupType As Nullable(Of NetAppBackupType), failureReason As String, volumeName As String, useExistingSnapshot As Nullable(Of Boolean)) As NetAppBackupData" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppBackupData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="backupId" Type="System.String" />
        <Parameter Name="createdOn" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="backupType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppBackupType&gt;" />
        <Parameter Name="failureReason" Type="System.String" />
        <Parameter Name="volumeName" Type="System.String" />
        <Parameter Name="useExistingSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="location"> Resource location. </param>
        <param name="backupId"> UUID v4 used to identify the Backup. </param>
        <param name="createdOn"> The creation date of the backup. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="size"> Size of backup. </param>
        <param name="label"> Label for backup. </param>
        <param name="backupType"> Type of backup Manual or Scheduled. </param>
        <param name="failureReason"> Failure reason. </param>
        <param name="volumeName"> Volume name. </param>
        <param name="useExistingSnapshot"> Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups. </param>
        <summary> Initializes a new instance of NetAppBackupData. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppBackupData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppBackupData NetAppBackupData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, string backupId = default, DateTimeOffset? createdOn = default, string provisioningState = default, long? size = default, string label = default, Azure.ResourceManager.NetApp.Models.NetAppBackupType? backupType = default, string failureReason = default, Azure.Core.ResourceIdentifier volumeResourceId = default, bool? useExistingSnapshot = default, string snapshotName = default, string backupPolicyResourceId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppBackupData NetAppBackupData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, string backupId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createdOn, string provisioningState, valuetype System.Nullable`1&lt;int64&gt; size, string label, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppBackupType&gt; backupType, string failureReason, class Azure.Core.ResourceIdentifier volumeResourceId, valuetype System.Nullable`1&lt;bool&gt; useExistingSnapshot, string snapshotName, string backupPolicyResourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.String,System.Nullable{System.DateTimeOffset},System.String,System.Nullable{System.Int64},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppBackupType},System.String,Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppBackupData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional backupId As String = Nothing, Optional createdOn As Nullable(Of DateTimeOffset) = Nothing, Optional provisioningState As String = Nothing, Optional size As Nullable(Of Long) = Nothing, Optional label As String = Nothing, Optional backupType As Nullable(Of NetAppBackupType) = Nothing, Optional failureReason As String = Nothing, Optional volumeResourceId As ResourceIdentifier = Nothing, Optional useExistingSnapshot As Nullable(Of Boolean) = Nothing, Optional snapshotName As String = Nothing, Optional backupPolicyResourceId As String = Nothing) As NetAppBackupData" />
      <MemberSignature Language="F#" Value="static member NetAppBackupData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * string * Nullable&lt;DateTimeOffset&gt; * string * Nullable&lt;int64&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppBackupType&gt; * string * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * string * string -&gt; Azure.ResourceManager.NetApp.NetAppBackupData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupData (id, name, resourceType, systemData, backupId, createdOn, provisioningState, size, label, backupType, failureReason, volumeResourceId, useExistingSnapshot, snapshotName, backupPolicyResourceId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppBackupData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="backupId" Type="System.String" />
        <Parameter Name="createdOn" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="label" Type="System.String" />
        <Parameter Name="backupType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppBackupType&gt;" />
        <Parameter Name="failureReason" Type="System.String" />
        <Parameter Name="volumeResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="useExistingSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="snapshotName" Type="System.String" />
        <Parameter Name="backupPolicyResourceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="backupId"> UUID v4 used to identify the Backup. </param>
        <param name="createdOn"> The creation date of the backup. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="size"> Size of backup in bytes. </param>
        <param name="label"> Label for backup. </param>
        <param name="backupType"> Type of backup Manual or Scheduled. </param>
        <param name="failureReason"> Failure reason. </param>
        <param name="volumeResourceId"> ResourceId used to identify the Volume. </param>
        <param name="useExistingSnapshot"> Manual backup an already existing snapshot. This will always be false for scheduled backups and true/false for manual backups. </param>
        <param name="snapshotName"> The name of the snapshot. </param>
        <param name="backupPolicyResourceId"> ResourceId used to identify the backup policy. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppBackupPolicyData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppBackupPolicyData NetAppBackupPolicyData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, Azure.Core.ResourceIdentifier backupPolicyId = default, string provisioningState = default, int? dailyBackupsToKeep = default, int? weeklyBackupsToKeep = default, int? monthlyBackupsToKeep = default, int? volumesAssigned = default, bool? isEnabled = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt; volumeBackups = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppBackupPolicyData NetAppBackupPolicyData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class Azure.Core.ResourceIdentifier backupPolicyId, string provisioningState, valuetype System.Nullable`1&lt;int32&gt; dailyBackupsToKeep, valuetype System.Nullable`1&lt;int32&gt; weeklyBackupsToKeep, valuetype System.Nullable`1&lt;int32&gt; monthlyBackupsToKeep, valuetype System.Nullable`1&lt;int32&gt; volumesAssigned, valuetype System.Nullable`1&lt;bool&gt; isEnabled, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt; volumeBackups) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupPolicyData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},Azure.Core.ResourceIdentifier,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppBackupPolicyData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional backupPolicyId As ResourceIdentifier = Nothing, Optional provisioningState As String = Nothing, Optional dailyBackupsToKeep As Nullable(Of Integer) = Nothing, Optional weeklyBackupsToKeep As Nullable(Of Integer) = Nothing, Optional monthlyBackupsToKeep As Nullable(Of Integer) = Nothing, Optional volumesAssigned As Nullable(Of Integer) = Nothing, Optional isEnabled As Nullable(Of Boolean) = Nothing, Optional volumeBackups As IEnumerable(Of NetAppVolumeBackupDetail) = Nothing) As NetAppBackupPolicyData" />
      <MemberSignature Language="F#" Value="static member NetAppBackupPolicyData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * Azure.Core.ResourceIdentifier * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt; -&gt; Azure.ResourceManager.NetApp.NetAppBackupPolicyData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupPolicyData (id, name, resourceType, systemData, tags, location, etag, backupPolicyId, provisioningState, dailyBackupsToKeep, weeklyBackupsToKeep, monthlyBackupsToKeep, volumesAssigned, isEnabled, volumeBackups)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppBackupPolicyData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="backupPolicyId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="dailyBackupsToKeep" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="weeklyBackupsToKeep" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="monthlyBackupsToKeep" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="volumesAssigned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="isEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="volumeBackups" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="backupPolicyId"> Backup Policy Resource ID. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="dailyBackupsToKeep"> Daily backups count to keep. </param>
        <param name="weeklyBackupsToKeep"> Weekly backups count to keep. </param>
        <param name="monthlyBackupsToKeep"> Monthly backups count to keep. </param>
        <param name="volumesAssigned"> Volumes using current backup policy. </param>
        <param name="isEnabled"> The property to decide policy is enabled or not. </param>
        <param name="volumeBackups"> A list of volumes assigned to this policy. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupPolicyData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupPolicyData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppBackupPolicyPatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppBackupPolicyPatch NetAppBackupPolicyPatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.Core.ResourceIdentifier backupPolicyId = default, string provisioningState = default, int? dailyBackupsToKeep = default, int? weeklyBackupsToKeep = default, int? monthlyBackupsToKeep = default, int? volumesAssigned = default, bool? isEnabled = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt; volumeBackups = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppBackupPolicyPatch NetAppBackupPolicyPatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, class Azure.Core.ResourceIdentifier backupPolicyId, string provisioningState, valuetype System.Nullable`1&lt;int32&gt; dailyBackupsToKeep, valuetype System.Nullable`1&lt;int32&gt; weeklyBackupsToKeep, valuetype System.Nullable`1&lt;int32&gt; monthlyBackupsToKeep, valuetype System.Nullable`1&lt;int32&gt; volumesAssigned, valuetype System.Nullable`1&lt;bool&gt; isEnabled, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt; volumeBackups) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupPolicyPatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.Core.ResourceIdentifier,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppBackupPolicyPatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional backupPolicyId As ResourceIdentifier = Nothing, Optional provisioningState As String = Nothing, Optional dailyBackupsToKeep As Nullable(Of Integer) = Nothing, Optional weeklyBackupsToKeep As Nullable(Of Integer) = Nothing, Optional monthlyBackupsToKeep As Nullable(Of Integer) = Nothing, Optional volumesAssigned As Nullable(Of Integer) = Nothing, Optional isEnabled As Nullable(Of Boolean) = Nothing, Optional volumeBackups As IEnumerable(Of NetAppVolumeBackupDetail) = Nothing) As NetAppBackupPolicyPatch" />
      <MemberSignature Language="F#" Value="static member NetAppBackupPolicyPatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Azure.Core.ResourceIdentifier * string * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppBackupPolicyPatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupPolicyPatch (id, name, resourceType, systemData, tags, location, backupPolicyId, provisioningState, dailyBackupsToKeep, weeklyBackupsToKeep, monthlyBackupsToKeep, volumesAssigned, isEnabled, volumeBackups)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppBackupPolicyPatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="backupPolicyId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="dailyBackupsToKeep" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="weeklyBackupsToKeep" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="monthlyBackupsToKeep" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="volumesAssigned" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="isEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="volumeBackups" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="backupPolicyId"> Backup Policy Resource ID. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="dailyBackupsToKeep"> Daily backups count to keep. </param>
        <param name="weeklyBackupsToKeep"> Weekly backups count to keep. </param>
        <param name="monthlyBackupsToKeep"> Monthly backups count to keep. </param>
        <param name="volumesAssigned"> Volumes using current backup policy. </param>
        <param name="isEnabled"> The property to decide policy is enabled or not. </param>
        <param name="volumeBackups"> A list of volumes assigned to this policy. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppBackupPolicyPatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppBackupPolicyPatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppBackupVaultData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppBackupVaultData NetAppBackupVaultData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, string provisioningState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppBackupVaultData NetAppBackupVaultData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, string provisioningState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupVaultData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppBackupVaultData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional provisioningState As String = Nothing) As NetAppBackupVaultData" />
      <MemberSignature Language="F#" Value="static member NetAppBackupVaultData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * string -&gt; Azure.ResourceManager.NetApp.NetAppBackupVaultData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppBackupVaultData (id, name, resourceType, systemData, tags, location, provisioningState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppBackupVaultData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="provisioningState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupVaultData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppBackupVaultData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppCheckAvailabilityResult">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppCheckAvailabilityResult NetAppCheckAvailabilityResult (bool? isAvailable = default, Azure.ResourceManager.NetApp.Models.NetAppNameUnavailableReason? reason = default, string message = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppCheckAvailabilityResult NetAppCheckAvailabilityResult(valuetype System.Nullable`1&lt;bool&gt; isAvailable, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNameUnavailableReason&gt; reason, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppCheckAvailabilityResult(System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNameUnavailableReason},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppCheckAvailabilityResult (Optional isAvailable As Nullable(Of Boolean) = Nothing, Optional reason As Nullable(Of NetAppNameUnavailableReason) = Nothing, Optional message As String = Nothing) As NetAppCheckAvailabilityResult" />
      <MemberSignature Language="F#" Value="static member NetAppCheckAvailabilityResult : Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNameUnavailableReason&gt; * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppCheckAvailabilityResult" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppCheckAvailabilityResult (isAvailable, reason, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppCheckAvailabilityResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isAvailable" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="reason" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNameUnavailableReason&gt;" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="isAvailable"> &lt;code&gt;true&lt;/code&gt; indicates name is valid and available. &lt;code&gt;false&lt;/code&gt; indicates the name is invalid, unavailable, or both. </param>
        <param name="reason"> &lt;code&gt;Invalid&lt;/code&gt; indicates the name provided does not match Azure App Service naming requirements. &lt;code&gt;AlreadyExists&lt;/code&gt; indicates that the name is already in use and is therefore unavailable. </param>
        <param name="message"> If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppCheckAvailabilityResult" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppCheckAvailabilityResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppEncryptionIdentity">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppEncryptionIdentity NetAppEncryptionIdentity (string principalId = default, string userAssignedIdentity = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppEncryptionIdentity NetAppEncryptionIdentity(string principalId, string userAssignedIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppEncryptionIdentity(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppEncryptionIdentity (Optional principalId As String = Nothing, Optional userAssignedIdentity As String = Nothing) As NetAppEncryptionIdentity" />
      <MemberSignature Language="F#" Value="static member NetAppEncryptionIdentity : string * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppEncryptionIdentity" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppEncryptionIdentity (principalId, userAssignedIdentity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppEncryptionIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalId" Type="System.String" />
        <Parameter Name="userAssignedIdentity" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="principalId"> The principal ID (object ID) of the identity used to authenticate with key vault. Read-only. </param>
        <param name="userAssignedIdentity"> The ARM resource identifier of the user assigned identity used to authenticate with key vault. Applicable if identity.type has 'UserAssigned'. It should match key of identity.userAssignedIdentities. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppEncryptionIdentity" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppEncryptionIdentity" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppKeyVaultProperties">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppKeyVaultProperties NetAppKeyVaultProperties (string keyVaultId = default, Uri keyVaultUri = default, string keyName = default, string keyVaultResourceId = default, Azure.ResourceManager.NetApp.Models.NetAppKeyVaultStatus? status = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppKeyVaultProperties NetAppKeyVaultProperties(string keyVaultId, class System.Uri keyVaultUri, string keyName, string keyVaultResourceId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppKeyVaultStatus&gt; status) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppKeyVaultProperties(System.String,System.Uri,System.String,System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppKeyVaultStatus})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppKeyVaultProperties (Optional keyVaultId As String = Nothing, Optional keyVaultUri As Uri = Nothing, Optional keyName As String = Nothing, Optional keyVaultResourceId As String = Nothing, Optional status As Nullable(Of NetAppKeyVaultStatus) = Nothing) As NetAppKeyVaultProperties" />
      <MemberSignature Language="F#" Value="static member NetAppKeyVaultProperties : string * Uri * string * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppKeyVaultStatus&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppKeyVaultProperties" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppKeyVaultProperties (keyVaultId, keyVaultUri, keyName, keyVaultResourceId, status)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppKeyVaultProperties</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVaultId" Type="System.String" />
        <Parameter Name="keyVaultUri" Type="System.Uri" />
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="keyVaultResourceId" Type="System.String" />
        <Parameter Name="status" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppKeyVaultStatus&gt;" />
      </Parameters>
      <Docs>
        <param name="keyVaultId"> UUID v4 used to identify the Azure Key Vault configuration. </param>
        <param name="keyVaultUri"> The Uri of KeyVault. </param>
        <param name="keyName"> The name of KeyVault key. </param>
        <param name="keyVaultResourceId"> The resource ID of KeyVault. </param>
        <param name="status"> Status of the KeyVault connection. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppKeyVaultProperties" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppKeyVaultProperties" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppRegionInfo">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppRegionInfo NetAppRegionInfo (Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt; availabilityZoneMappings = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppRegionInfo NetAppRegionInfo(valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt; availabilityZoneMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppRegionInfo(System.Nullable{Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppRegionInfo (Optional storageToNetworkProximity As Nullable(Of RegionStorageToNetworkProximity) = Nothing, Optional availabilityZoneMappings As IEnumerable(Of AvailabilityZoneMapping) = Nothing) As NetAppRegionInfo" />
      <MemberSignature Language="F#" Value="static member NetAppRegionInfo : Nullable&lt;Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppRegionInfo" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppRegionInfo (storageToNetworkProximity, availabilityZoneMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppRegionInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity&gt;" />
        <Parameter Name="availabilityZoneMappings" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt;" />
      </Parameters>
      <Docs>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information in the region. </param>
        <param name="availabilityZoneMappings"> Provides logical availability zone mappings for the subscription for a region. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppRegionInfo" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppRegionInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppReplicationObject">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppReplicationObject NetAppReplicationObject (string replicationId = default, Azure.ResourceManager.NetApp.Models.NetAppEndpointType? endpointType = default, Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule? replicationSchedule = default, Azure.Core.ResourceIdentifier remoteVolumeResourceId = default, string remoteVolumeRegion = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppReplicationObject NetAppReplicationObject(string replicationId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt; endpointType, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt; replicationSchedule, class Azure.Core.ResourceIdentifier remoteVolumeResourceId, string remoteVolumeRegion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppReplicationObject(System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEndpointType},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule},Azure.Core.ResourceIdentifier,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppReplicationObject (Optional replicationId As String = Nothing, Optional endpointType As Nullable(Of NetAppEndpointType) = Nothing, Optional replicationSchedule As Nullable(Of NetAppReplicationSchedule) = Nothing, Optional remoteVolumeResourceId As ResourceIdentifier = Nothing, Optional remoteVolumeRegion As String = Nothing) As NetAppReplicationObject" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppReplicationObject : string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt; * Azure.Core.ResourceIdentifier * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppReplicationObject" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppReplicationObject (replicationId, endpointType, replicationSchedule, remoteVolumeResourceId, remoteVolumeRegion)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppReplicationObject NetAppReplicationObject (string replicationId, Azure.ResourceManager.NetApp.Models.NetAppEndpointType? endpointType, Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule? replicationSchedule, Azure.Core.ResourceIdentifier remoteVolumeResourceId, string remoteVolumeRegion);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppReplicationObject (replicationId As String, endpointType As Nullable(Of NetAppEndpointType), replicationSchedule As Nullable(Of NetAppReplicationSchedule), remoteVolumeResourceId As ResourceIdentifier, remoteVolumeRegion As String) As NetAppReplicationObject" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppReplicationObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicationId" Type="System.String" />
        <Parameter Name="endpointType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt;" />
        <Parameter Name="replicationSchedule" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt;" />
        <Parameter Name="remoteVolumeResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="remoteVolumeRegion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replicationId"> Id. </param>
        <param name="endpointType"> Indicates whether the local volume is the source or destination for the Volume Replication. </param>
        <param name="replicationSchedule"> Schedule. </param>
        <param name="remoteVolumeResourceId"> The resource ID of the remote volume. </param>
        <param name="remoteVolumeRegion"> The remote region for the other end of the Volume Replication. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppReplicationObject" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppReplicationObject" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppReplicationObject">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppReplicationObject NetAppReplicationObject (string replicationId = default, Azure.ResourceManager.NetApp.Models.NetAppEndpointType? endpointType = default, Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule? replicationSchedule = default, Azure.Core.ResourceIdentifier remoteVolumeResourceId = default, Azure.ResourceManager.NetApp.Models.RemotePath remotePath = default, string remoteVolumeRegion = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppReplicationObject NetAppReplicationObject(string replicationId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt; endpointType, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt; replicationSchedule, class Azure.Core.ResourceIdentifier remoteVolumeResourceId, class Azure.ResourceManager.NetApp.Models.RemotePath remotePath, string remoteVolumeRegion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppReplicationObject(System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEndpointType},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule},Azure.Core.ResourceIdentifier,Azure.ResourceManager.NetApp.Models.RemotePath,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppReplicationObject (Optional replicationId As String = Nothing, Optional endpointType As Nullable(Of NetAppEndpointType) = Nothing, Optional replicationSchedule As Nullable(Of NetAppReplicationSchedule) = Nothing, Optional remoteVolumeResourceId As ResourceIdentifier = Nothing, Optional remotePath As RemotePath = Nothing, Optional remoteVolumeRegion As String = Nothing) As NetAppReplicationObject" />
      <MemberSignature Language="F#" Value="static member NetAppReplicationObject : string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt; * Azure.Core.ResourceIdentifier * Azure.ResourceManager.NetApp.Models.RemotePath * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppReplicationObject" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppReplicationObject (replicationId, endpointType, replicationSchedule, remoteVolumeResourceId, remotePath, remoteVolumeRegion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppReplicationObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replicationId" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="endpointType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt;" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="replicationSchedule" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt;" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="remoteVolumeResourceId" Type="Azure.Core.ResourceIdentifier" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="remotePath" Type="Azure.ResourceManager.NetApp.Models.RemotePath" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="remoteVolumeRegion" Type="System.String" Index="5" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="replicationId"> Id. </param>
        <param name="endpointType"> Indicates whether the local volume is the source or destination for the Volume Replication. </param>
        <param name="replicationSchedule"> Schedule. </param>
        <param name="remoteVolumeResourceId"> The resource ID of the remote volume. Required for cross region and cross zone replication. </param>
        <param name="remotePath"> The full path to a volume that is to be migrated into ANF. Required for Migration volumes. </param>
        <param name="remoteVolumeRegion"> The remote region for the other end of the Volume Replication. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppReplicationObject" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppReplicationObject" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppRestoreStatus">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppRestoreStatus NetAppRestoreStatus (bool? isHealthy = default, Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus? relationshipStatus = default, Azure.ResourceManager.NetApp.Models.NetAppMirrorState? mirrorState = default, string unhealthyReason = default, string errorMessage = default, long? totalTransferBytes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppRestoreStatus NetAppRestoreStatus(valuetype System.Nullable`1&lt;bool&gt; isHealthy, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; relationshipStatus, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; mirrorState, string unhealthyReason, string errorMessage, valuetype System.Nullable`1&lt;int64&gt; totalTransferBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppRestoreStatus(System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppMirrorState},System.String,System.String,System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppRestoreStatus (Optional isHealthy As Nullable(Of Boolean) = Nothing, Optional relationshipStatus As Nullable(Of NetAppRelationshipStatus) = Nothing, Optional mirrorState As Nullable(Of NetAppMirrorState) = Nothing, Optional unhealthyReason As String = Nothing, Optional errorMessage As String = Nothing, Optional totalTransferBytes As Nullable(Of Long) = Nothing) As NetAppRestoreStatus" />
      <MemberSignature Language="F#" Value="static member NetAppRestoreStatus : Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; * string * string * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppRestoreStatus" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppRestoreStatus (isHealthy, relationshipStatus, mirrorState, unhealthyReason, errorMessage, totalTransferBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppRestoreStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isHealthy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="relationshipStatus" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt;" />
        <Parameter Name="mirrorState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt;" />
        <Parameter Name="unhealthyReason" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
        <Parameter Name="totalTransferBytes" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="isHealthy"> Restore health status. </param>
        <param name="relationshipStatus"> Status of the restore SnapMirror relationship. </param>
        <param name="mirrorState"> The status of the restore. </param>
        <param name="unhealthyReason"> Reason for the unhealthy restore relationship. </param>
        <param name="errorMessage"> Displays error message if the restore is in an error state. </param>
        <param name="totalTransferBytes"> Displays the total bytes transferred. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppRestoreStatus" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppRestoreStatus" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppSubscriptionQuotaItem">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppSubscriptionQuotaItem NetAppSubscriptionQuotaItem (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, int? current = default, int? default = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppSubscriptionQuotaItem NetAppSubscriptionQuotaItem(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, valuetype System.Nullable`1&lt;int32&gt; current, valuetype System.Nullable`1&lt;int32&gt; default) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppSubscriptionQuotaItem(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{System.Int32},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppSubscriptionQuotaItem (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional current As Nullable(Of Integer) = Nothing, Optional default As Nullable(Of Integer) = Nothing) As NetAppSubscriptionQuotaItem" />
      <MemberSignature Language="F#" Value="static member NetAppSubscriptionQuotaItem : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * Nullable&lt;int&gt; * Nullable&lt;int&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppSubscriptionQuotaItem" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppSubscriptionQuotaItem (id, name, resourceType, systemData, current, default)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppSubscriptionQuotaItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="current" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="default" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="current"> The current quota value. </param>
        <param name="default"> The default quota value. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppSubscriptionQuotaItem" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppSubscriptionQuotaItem" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppSubvolumeInfoData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppSubvolumeInfoData NetAppSubvolumeInfoData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, string path = default, long? size = default, string parentPath = default, string provisioningState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppSubvolumeInfoData NetAppSubvolumeInfoData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, string path, valuetype System.Nullable`1&lt;int64&gt; size, string parentPath, string provisioningState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppSubvolumeInfoData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.String,System.Nullable{System.Int64},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppSubvolumeInfoData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional path As String = Nothing, Optional size As Nullable(Of Long) = Nothing, Optional parentPath As String = Nothing, Optional provisioningState As String = Nothing) As NetAppSubvolumeInfoData" />
      <MemberSignature Language="F#" Value="static member NetAppSubvolumeInfoData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * string * Nullable&lt;int64&gt; * string * string -&gt; Azure.ResourceManager.NetApp.NetAppSubvolumeInfoData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppSubvolumeInfoData (id, name, resourceType, systemData, path, size, parentPath, provisioningState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppSubvolumeInfoData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="parentPath" Type="System.String" />
        <Parameter Name="provisioningState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="path"> Path to the subvolume. </param>
        <param name="size"> Truncate subvolume to the provided size in bytes. </param>
        <param name="parentPath"> parent path to the subvolume. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppSubvolumeInfoData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppSubvolumeInfoData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppSubvolumeMetadata">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppSubvolumeMetadata NetAppSubvolumeMetadata (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, string path = default, string parentPath = default, long? size = default, long? bytesUsed = default, string permissions = default, DateTimeOffset? createdOn = default, DateTimeOffset? accessedOn = default, DateTimeOffset? modifiedOn = default, DateTimeOffset? changedOn = default, string provisioningState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppSubvolumeMetadata NetAppSubvolumeMetadata(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, string path, string parentPath, valuetype System.Nullable`1&lt;int64&gt; size, valuetype System.Nullable`1&lt;int64&gt; bytesUsed, string permissions, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; createdOn, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; accessedOn, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; modifiedOn, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; changedOn, string provisioningState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppSubvolumeMetadata(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppSubvolumeMetadata (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional path As String = Nothing, Optional parentPath As String = Nothing, Optional size As Nullable(Of Long) = Nothing, Optional bytesUsed As Nullable(Of Long) = Nothing, Optional permissions As String = Nothing, Optional createdOn As Nullable(Of DateTimeOffset) = Nothing, Optional accessedOn As Nullable(Of DateTimeOffset) = Nothing, Optional modifiedOn As Nullable(Of DateTimeOffset) = Nothing, Optional changedOn As Nullable(Of DateTimeOffset) = Nothing, Optional provisioningState As String = Nothing) As NetAppSubvolumeMetadata" />
      <MemberSignature Language="F#" Value="static member NetAppSubvolumeMetadata : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * string * string * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppSubvolumeMetadata" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppSubvolumeMetadata (id, name, resourceType, systemData, path, parentPath, size, bytesUsed, permissions, createdOn, accessedOn, modifiedOn, changedOn, provisioningState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppSubvolumeMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="parentPath" Type="System.String" />
        <Parameter Name="size" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="bytesUsed" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="createdOn" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="accessedOn" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="modifiedOn" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="changedOn" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="path"> Path to the subvolume. </param>
        <param name="parentPath"> Path to the parent subvolume. </param>
        <param name="size"> Size of subvolume. </param>
        <param name="bytesUsed"> Bytes used. </param>
        <param name="permissions"> Permissions of the subvolume. </param>
        <param name="createdOn"> Creation time and date. </param>
        <param name="accessedOn"> Most recent access time and date. </param>
        <param name="modifiedOn"> Most recent modification time and date. </param>
        <param name="changedOn"> Most recent change time and date. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppSubvolumeMetadata" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppSubvolumeMetadata" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeBackupBackupRestoreFilesContent">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupBackupRestoreFilesContent NetAppVolumeBackupBackupRestoreFilesContent (System.Collections.Generic.IEnumerable&lt;string&gt; fileList = default, string restoreFilePath = default, Azure.Core.ResourceIdentifier destinationVolumeId = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupBackupRestoreFilesContent NetAppVolumeBackupBackupRestoreFilesContent(class System.Collections.Generic.IEnumerable`1&lt;string&gt; fileList, string restoreFilePath, class Azure.Core.ResourceIdentifier destinationVolumeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupBackupRestoreFilesContent(System.Collections.Generic.IEnumerable{System.String},System.String,Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupBackupRestoreFilesContent (Optional fileList As IEnumerable(Of String) = Nothing, Optional restoreFilePath As String = Nothing, Optional destinationVolumeId As ResourceIdentifier = Nothing) As NetAppVolumeBackupBackupRestoreFilesContent" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeBackupBackupRestoreFilesContent : seq&lt;string&gt; * string * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupBackupRestoreFilesContent" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupBackupRestoreFilesContent (fileList, restoreFilePath, destinationVolumeId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupBackupRestoreFilesContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileList" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="restoreFilePath" Type="System.String" />
        <Parameter Name="destinationVolumeId" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="fileList"> List of files to be restored. </param>
        <param name="restoreFilePath"> Destination folder where the files will be restored. The path name should start with a forward slash. If it is omitted from request then restore is done at the root folder of the destination volume by default. </param>
        <param name="destinationVolumeId"> Resource Id of the destination volume on which the files need to be restored. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupBackupRestoreFilesContent" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupBackupRestoreFilesContent" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeBackupDetail">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail NetAppVolumeBackupDetail (string volumeName, int? backupsCount, bool? isPolicyEnabled);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail NetAppVolumeBackupDetail(string volumeName, valuetype System.Nullable`1&lt;int32&gt; backupsCount, valuetype System.Nullable`1&lt;bool&gt; isPolicyEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupDetail(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupDetail (volumeName As String, backupsCount As Nullable(Of Integer), isPolicyEnabled As Nullable(Of Boolean)) As NetAppVolumeBackupDetail" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeBackupDetail : string * Nullable&lt;int&gt; * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupDetail (volumeName, backupsCount, isPolicyEnabled)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail NetAppVolumeBackupDetail (string volumeName = default, int? backupsCount = default, bool? isPolicyEnabled = default);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupDetail (Optional volumeName As String = Nothing, Optional backupsCount As Nullable(Of Integer) = Nothing, Optional isPolicyEnabled As Nullable(Of Boolean) = Nothing) As NetAppVolumeBackupDetail" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="volumeName" Type="System.String" />
        <Parameter Name="backupsCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="isPolicyEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="volumeName"> Volume name. </param>
        <param name="backupsCount"> Total count of backups for volume. </param>
        <param name="isPolicyEnabled"> Policy enabled. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeBackupDetail">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail NetAppVolumeBackupDetail (string volumeName = default, Azure.Core.ResourceIdentifier volumeResourceId = default, int? backupsCount = default, bool? isPolicyEnabled = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail NetAppVolumeBackupDetail(string volumeName, class Azure.Core.ResourceIdentifier volumeResourceId, valuetype System.Nullable`1&lt;int32&gt; backupsCount, valuetype System.Nullable`1&lt;bool&gt; isPolicyEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupDetail(System.String,Azure.Core.ResourceIdentifier,System.Nullable{System.Int32},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupDetail (Optional volumeName As String = Nothing, Optional volumeResourceId As ResourceIdentifier = Nothing, Optional backupsCount As Nullable(Of Integer) = Nothing, Optional isPolicyEnabled As Nullable(Of Boolean) = Nothing) As NetAppVolumeBackupDetail" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeBackupDetail : string * Azure.Core.ResourceIdentifier * Nullable&lt;int&gt; * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupDetail (volumeName, volumeResourceId, backupsCount, isPolicyEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="volumeName" Type="System.String" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="volumeResourceId" Type="Azure.Core.ResourceIdentifier" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="backupsCount" Type="System.Nullable&lt;System.Int32&gt;" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isPolicyEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="3" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="volumeName"> Volume name. </param>
        <param name="volumeResourceId"> ResourceId used to identify the Volume. </param>
        <param name="backupsCount"> Total count of backups for volume. </param>
        <param name="isPolicyEnabled"> Policy enabled. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupDetail" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeBackupStatus">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus NetAppVolumeBackupStatus (bool? isHealthy = default, Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus? relationshipStatus = default, Azure.ResourceManager.NetApp.Models.NetAppMirrorState? mirrorState = default, string unhealthyReason = default, string errorMessage = default, long? lastTransferSize = default, string lastTransferType = default, long? totalTransferBytes = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus NetAppVolumeBackupStatus(valuetype System.Nullable`1&lt;bool&gt; isHealthy, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; relationshipStatus, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; mirrorState, string unhealthyReason, string errorMessage, valuetype System.Nullable`1&lt;int64&gt; lastTransferSize, string lastTransferType, valuetype System.Nullable`1&lt;int64&gt; totalTransferBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupStatus(System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppMirrorState},System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupStatus (Optional isHealthy As Nullable(Of Boolean) = Nothing, Optional relationshipStatus As Nullable(Of NetAppRelationshipStatus) = Nothing, Optional mirrorState As Nullable(Of NetAppMirrorState) = Nothing, Optional unhealthyReason As String = Nothing, Optional errorMessage As String = Nothing, Optional lastTransferSize As Nullable(Of Long) = Nothing, Optional lastTransferType As String = Nothing, Optional totalTransferBytes As Nullable(Of Long) = Nothing) As NetAppVolumeBackupStatus" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeBackupStatus : Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; * string * string * Nullable&lt;int64&gt; * string * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupStatus (isHealthy, relationshipStatus, mirrorState, unhealthyReason, errorMessage, lastTransferSize, lastTransferType, totalTransferBytes)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus NetAppVolumeBackupStatus (bool? isHealthy, Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus? relationshipStatus, Azure.ResourceManager.NetApp.Models.NetAppMirrorState? mirrorState, string unhealthyReason, string errorMessage, long? lastTransferSize, string lastTransferType, long? totalTransferBytes);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupStatus (isHealthy As Nullable(Of Boolean), relationshipStatus As Nullable(Of NetAppRelationshipStatus), mirrorState As Nullable(Of NetAppMirrorState), unhealthyReason As String, errorMessage As String, lastTransferSize As Nullable(Of Long), lastTransferType As String, totalTransferBytes As Nullable(Of Long)) As NetAppVolumeBackupStatus" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isHealthy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="relationshipStatus" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt;" />
        <Parameter Name="mirrorState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt;" />
        <Parameter Name="unhealthyReason" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
        <Parameter Name="lastTransferSize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="lastTransferType" Type="System.String" />
        <Parameter Name="totalTransferBytes" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="isHealthy"> Backup health status. </param>
        <param name="relationshipStatus"> Status of the backup mirror relationship. </param>
        <param name="mirrorState"> The status of the backup. </param>
        <param name="unhealthyReason"> Reason for the unhealthy backup relationship. </param>
        <param name="errorMessage"> Displays error message if the backup is in an error state. </param>
        <param name="lastTransferSize"> Displays the last transfer size. </param>
        <param name="lastTransferType"> Displays the last transfer type. </param>
        <param name="totalTransferBytes"> Displays the total bytes transferred. </param>
        <summary> Initializes a new instance of NetAppVolumeBackupStatus. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeBackupStatus">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus NetAppVolumeBackupStatus (bool? isHealthy = default, Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus? relationshipStatus = default, Azure.ResourceManager.NetApp.Models.NetAppMirrorState? mirrorState = default, string unhealthyReason = default, string errorMessage = default, long? lastTransferSize = default, string lastTransferType = default, long? totalTransferBytes = default, long? transferProgressBytes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus NetAppVolumeBackupStatus(valuetype System.Nullable`1&lt;bool&gt; isHealthy, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; relationshipStatus, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; mirrorState, string unhealthyReason, string errorMessage, valuetype System.Nullable`1&lt;int64&gt; lastTransferSize, string lastTransferType, valuetype System.Nullable`1&lt;int64&gt; totalTransferBytes, valuetype System.Nullable`1&lt;int64&gt; transferProgressBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupStatus(System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppMirrorState},System.String,System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeBackupStatus (Optional isHealthy As Nullable(Of Boolean) = Nothing, Optional relationshipStatus As Nullable(Of NetAppRelationshipStatus) = Nothing, Optional mirrorState As Nullable(Of NetAppMirrorState) = Nothing, Optional unhealthyReason As String = Nothing, Optional errorMessage As String = Nothing, Optional lastTransferSize As Nullable(Of Long) = Nothing, Optional lastTransferType As String = Nothing, Optional totalTransferBytes As Nullable(Of Long) = Nothing, Optional transferProgressBytes As Nullable(Of Long) = Nothing) As NetAppVolumeBackupStatus" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeBackupStatus : Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; * string * string * Nullable&lt;int64&gt; * string * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeBackupStatus (isHealthy, relationshipStatus, mirrorState, unhealthyReason, errorMessage, lastTransferSize, lastTransferType, totalTransferBytes, transferProgressBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isHealthy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="relationshipStatus" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt;" />
        <Parameter Name="mirrorState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt;" />
        <Parameter Name="unhealthyReason" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
        <Parameter Name="lastTransferSize" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="lastTransferType" Type="System.String" />
        <Parameter Name="totalTransferBytes" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="transferProgressBytes" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="isHealthy"> Backup health status. </param>
        <param name="relationshipStatus"> Status of the backup mirror relationship. </param>
        <param name="mirrorState"> The status of the backup. </param>
        <param name="unhealthyReason"> Reason for the unhealthy backup relationship. </param>
        <param name="errorMessage"> Displays error message if the backup is in an error state. </param>
        <param name="lastTransferSize"> Displays the last transfer size. </param>
        <param name="lastTransferType"> Displays the last transfer type. </param>
        <param name="totalTransferBytes"> Displays the total bytes transferred. </param>
        <param name="transferProgressBytes"> Displays the total number of bytes transferred for the ongoing operation. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeBackupStatus" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, System.Collections.Generic.IEnumerable&lt;string&gt; zones = default, Guid? fileSystemId = default, string creationToken = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long usageThreshold = 0, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, string provisioningState = default, string snapshotId = default, bool? deleteBaseSnapshot = default, string backupId = default, string baremetalTenantId = default, Azure.Core.ResourceIdentifier subnetId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Guid? networkSiblingSetId = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets = default, string volumeType = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection = default, bool? isRestoring = default, bool? isSnapshotDirectoryVisible = default, bool? isKerberosEnabled = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle = default, bool? isSmbEncryptionEnabled = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default, bool? isSmbContinuouslyAvailable = default, float? throughputMibps = default, float? actualThroughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource = default, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId = default, bool? isLdapEnabled = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, string unixPermissions = default, int? cloneProgress = default, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs = default, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, long? maximumNumberOfFiles = default, string volumeGroupName = default, Azure.Core.ResourceIdentifier capacityPoolResourceId = default, Azure.Core.ResourceIdentifier proximityPlacementGroupId = default, string t2Network = default, string volumeSpecName = default, bool? isEncrypted = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules = default, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes = default, string provisionedAvailabilityZone = default, bool? isLargeVolume = default, Azure.Core.ResourceIdentifier originatingResourceId = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class System.Collections.Generic.IEnumerable`1&lt;string&gt; zones, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; fileSystemId, string creationToken, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, int64 usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, valuetype System.Nullable`1&lt;bool&gt; deleteBaseSnapshot, string backupId, string baremetalTenantId, class Azure.Core.ResourceIdentifier subnetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; networkSiblingSetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, class Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isRestoring, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;bool&gt; isKerberosEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; securityStyle, valuetype System.Nullable`1&lt;bool&gt; isSmbEncryptionEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable, valuetype System.Nullable`1&lt;bool&gt; isSmbContinuouslyAvailable, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, valuetype System.Nullable`1&lt;float32&gt; actualThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; encryptionKeySource, class Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, valuetype System.Nullable`1&lt;bool&gt; isLdapEnabled, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, string unixPermissions, valuetype System.Nullable`1&lt;int32&gt; cloneProgress, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; fileAccessLogs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; avsDataStore, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; maximumNumberOfFiles, string volumeGroupName, class Azure.Core.ResourceIdentifier capacityPoolResourceId, class Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, valuetype System.Nullable`1&lt;bool&gt; isEncrypted, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; enableSubvolumes, string provisionedAvailabilityZone, valuetype System.Nullable`1&lt;bool&gt; isLargeVolume, class Azure.Core.ResourceIdentifier originatingResourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Guid},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Int64,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Azure.Core.ResourceIdentifier,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore},System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume},System.String,System.Nullable{System.Boolean},Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional zones As IEnumerable(Of String) = Nothing, Optional fileSystemId As Nullable(Of Guid) = Nothing, Optional creationToken As String = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Long = 0, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional provisioningState As String = Nothing, Optional snapshotId As String = Nothing, Optional deleteBaseSnapshot As Nullable(Of Boolean) = Nothing, Optional backupId As String = Nothing, Optional baremetalTenantId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional networkSiblingSetId As Nullable(Of Guid) = Nothing, Optional storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity) = Nothing, Optional mountTargets As IEnumerable(Of NetAppVolumeMountTarget) = Nothing, Optional volumeType As String = Nothing, Optional dataProtection As NetAppVolumeDataProtection = Nothing, Optional isRestoring As Nullable(Of Boolean) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional isKerberosEnabled As Nullable(Of Boolean) = Nothing, Optional securityStyle As Nullable(Of NetAppVolumeSecurityStyle) = Nothing, Optional isSmbEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing, Optional isSmbContinuouslyAvailable As Nullable(Of Boolean) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional actualThroughputMibps As Nullable(Of Single) = Nothing, Optional encryptionKeySource As Nullable(Of NetAppEncryptionKeySource) = Nothing, Optional keyVaultPrivateEndpointResourceId As ResourceIdentifier = Nothing, Optional isLdapEnabled As Nullable(Of Boolean) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional unixPermissions As String = Nothing, Optional cloneProgress As Nullable(Of Integer) = Nothing, Optional fileAccessLogs As Nullable(Of NetAppFileAccessLog) = Nothing, Optional avsDataStore As Nullable(Of NetAppAvsDataStore) = Nothing, Optional dataStoreResourceId As IEnumerable(Of ResourceIdentifier) = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional maximumNumberOfFiles As Nullable(Of Long) = Nothing, Optional volumeGroupName As String = Nothing, Optional capacityPoolResourceId As ResourceIdentifier = Nothing, Optional proximityPlacementGroupId As ResourceIdentifier = Nothing, Optional t2Network As String = Nothing, Optional volumeSpecName As String = Nothing, Optional isEncrypted As Nullable(Of Boolean) = Nothing, Optional placementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional enableSubvolumes As Nullable(Of EnableNetAppSubvolume) = Nothing, Optional provisionedAvailabilityZone As String = Nothing, Optional isLargeVolume As Nullable(Of Boolean) = Nothing, Optional originatingResourceId As ResourceIdentifier = Nothing) As NetAppVolumeData" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * seq&lt;string&gt; * Nullable&lt;Guid&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * int64 * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * string * string * Nullable&lt;bool&gt; * string * string * Azure.Core.ResourceIdentifier * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Guid&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * string * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; * seq&lt;Azure.Core.ResourceIdentifier&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * string * string * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; * string * Nullable&lt;bool&gt; * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.NetApp.NetAppVolumeData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeData (id, name, resourceType, systemData, tags, location, etag, zones, fileSystemId, creationToken, serviceLevel, usageThreshold, exportRules, protocolTypes, provisioningState, snapshotId, deleteBaseSnapshot, backupId, baremetalTenantId, subnetId, networkFeatures, networkSiblingSetId, storageToNetworkProximity, mountTargets, volumeType, dataProtection, isRestoring, isSnapshotDirectoryVisible, isKerberosEnabled, securityStyle, isSmbEncryptionEnabled, smbAccessBasedEnumeration, smbNonBrowsable, isSmbContinuouslyAvailable, throughputMibps, actualThroughputMibps, encryptionKeySource, keyVaultPrivateEndpointResourceId, isLdapEnabled, isCoolAccessEnabled, coolnessPeriod, unixPermissions, cloneProgress, fileAccessLogs, avsDataStore, dataStoreResourceId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, maximumNumberOfFiles, volumeGroupName, capacityPoolResourceId, proximityPlacementGroupId, t2Network, volumeSpecName, isEncrypted, placementRules, enableSubvolumes, provisionedAvailabilityZone, isLargeVolume, originatingResourceId)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData (Azure.Core.ResourceIdentifier id, string name, Azure.Core.ResourceType resourceType, Azure.ResourceManager.Models.SystemData systemData, System.Collections.Generic.IDictionary&lt;string,string&gt; tags, Azure.Core.AzureLocation location, Azure.ETag? etag, System.Collections.Generic.IEnumerable&lt;string&gt; zones, Guid? fileSystemId, string creationToken, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel, long usageThreshold, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, bool? deleteBaseSnapshot, string backupId, string baremetalTenantId, Azure.Core.ResourceIdentifier subnetId, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures, Guid? networkSiblingSetId, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, bool? isRestoring, bool? isSnapshotDirectoryVisible, bool? isKerberosEnabled, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle, bool? isSmbEncryptionEnabled, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable, bool? isSmbContinuouslyAvailable, float? throughputMibps, float? actualThroughputMibps, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, bool? isLdapEnabled, bool? isCoolAccessEnabled, int? coolnessPeriod, string unixPermissions, int? cloneProgress, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, bool? isDefaultQuotaEnabled, long? defaultUserQuotaInKiBs, long? defaultGroupQuotaInKiBs, long? maximumNumberOfFiles, string volumeGroupName, Azure.Core.ResourceIdentifier capacityPoolResourceId, Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, bool? isEncrypted, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes, string provisionedAvailabilityZone, bool? isLargeVolume, Azure.Core.ResourceIdentifier originatingResourceId);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeData (id As ResourceIdentifier, name As String, resourceType As ResourceType, systemData As SystemData, tags As IDictionary(Of String, String), location As AzureLocation, etag As Nullable(Of ETag), zones As IEnumerable(Of String), fileSystemId As Nullable(Of Guid), creationToken As String, serviceLevel As Nullable(Of NetAppFileServiceLevel), usageThreshold As Long, exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule), protocolTypes As IEnumerable(Of String), provisioningState As String, snapshotId As String, deleteBaseSnapshot As Nullable(Of Boolean), backupId As String, baremetalTenantId As String, subnetId As ResourceIdentifier, networkFeatures As Nullable(Of NetAppNetworkFeature), networkSiblingSetId As Nullable(Of Guid), storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity), mountTargets As IEnumerable(Of NetAppVolumeMountTarget), volumeType As String, dataProtection As NetAppVolumeDataProtection, isRestoring As Nullable(Of Boolean), isSnapshotDirectoryVisible As Nullable(Of Boolean), isKerberosEnabled As Nullable(Of Boolean), securityStyle As Nullable(Of NetAppVolumeSecurityStyle), isSmbEncryptionEnabled As Nullable(Of Boolean), smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration), smbNonBrowsable As Nullable(Of SmbNonBrowsable), isSmbContinuouslyAvailable As Nullable(Of Boolean), throughputMibps As Nullable(Of Single), actualThroughputMibps As Nullable(Of Single), encryptionKeySource As Nullable(Of NetAppEncryptionKeySource), keyVaultPrivateEndpointResourceId As ResourceIdentifier, isLdapEnabled As Nullable(Of Boolean), isCoolAccessEnabled As Nullable(Of Boolean), coolnessPeriod As Nullable(Of Integer), unixPermissions As String, cloneProgress As Nullable(Of Integer), fileAccessLogs As Nullable(Of NetAppFileAccessLog), avsDataStore As Nullable(Of NetAppAvsDataStore), dataStoreResourceId As IEnumerable(Of ResourceIdentifier), isDefaultQuotaEnabled As Nullable(Of Boolean), defaultUserQuotaInKiBs As Nullable(Of Long), defaultGroupQuotaInKiBs As Nullable(Of Long), maximumNumberOfFiles As Nullable(Of Long), volumeGroupName As String, capacityPoolResourceId As ResourceIdentifier, proximityPlacementGroupId As ResourceIdentifier, t2Network As String, volumeSpecName As String, isEncrypted As Nullable(Of Boolean), placementRules As IEnumerable(Of NetAppVolumePlacementRule), enableSubvolumes As Nullable(Of EnableNetAppSubvolume), provisionedAvailabilityZone As String, isLargeVolume As Nullable(Of Boolean), originatingResourceId As ResourceIdentifier) As NetAppVolumeData" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppVolumeData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="zones" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="fileSystemId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="creationToken" Type="System.String" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" />
        <Parameter Name="usageThreshold" Type="System.Int64" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="snapshotId" Type="System.String" />
        <Parameter Name="deleteBaseSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="backupId" Type="System.String" />
        <Parameter Name="baremetalTenantId" Type="System.String" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" />
        <Parameter Name="networkSiblingSetId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt;" />
        <Parameter Name="mountTargets" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt;" />
        <Parameter Name="volumeType" Type="System.String" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection" />
        <Parameter Name="isRestoring" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isKerberosEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="securityStyle" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt;" />
        <Parameter Name="isSmbEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" />
        <Parameter Name="isSmbContinuouslyAvailable" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="actualThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="encryptionKeySource" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt;" />
        <Parameter Name="keyVaultPrivateEndpointResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="isLdapEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="unixPermissions" Type="System.String" />
        <Parameter Name="cloneProgress" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fileAccessLogs" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt;" />
        <Parameter Name="avsDataStore" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt;" />
        <Parameter Name="dataStoreResourceId" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="volumeGroupName" Type="System.String" />
        <Parameter Name="capacityPoolResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="proximityPlacementGroupId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="t2Network" Type="System.String" />
        <Parameter Name="volumeSpecName" Type="System.String" />
        <Parameter Name="isEncrypted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="placementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" />
        <Parameter Name="enableSubvolumes" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt;" />
        <Parameter Name="provisionedAvailabilityZone" Type="System.String" />
        <Parameter Name="isLargeVolume" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="originatingResourceId" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="zones"> Availability Zone. </param>
        <param name="fileSystemId"> Unique FileSystem Identifier. </param>
        <param name="creationToken"> A unique file path for the volume. Used when creating mount targets. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="snapshotId"> UUID v4 or resource identifier used to identify the Snapshot. </param>
        <param name="deleteBaseSnapshot"> If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false. </param>
        <param name="backupId"> UUID v4 or resource identifier used to identify the Backup. </param>
        <param name="baremetalTenantId"> Unique Baremetal Tenant Identifier. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. </param>
        <param name="networkFeatures"> Basic network, or Standard features available to the volume. </param>
        <param name="networkSiblingSetId"> Network Sibling Set ID for the the group of volumes sharing networking resources. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information for the volume. </param>
        <param name="mountTargets"> List of mount targets. </param>
        <param name="volumeType"> What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isRestoring"> Restoring. </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). </param>
        <param name="isKerberosEnabled"> Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later. </param>
        <param name="securityStyle"> The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol. </param>
        <param name="isSmbEncryptionEnabled"> Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later. </param>
        <param name="smbAccessBasedEnumeration"> Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="isSmbContinuouslyAvailable"> Enables continuously available share property for smb volume. Only applicable for SMB volume. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="actualThroughputMibps"> Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel. </param>
        <param name="encryptionKeySource"> Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'. </param>
        <param name="keyVaultPrivateEndpointResourceId"> The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. </param>
        <param name="isLdapEnabled"> Specifies whether LDAP is enabled or not for a given NFS volume. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="cloneProgress"> When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning. </param>
        <param name="fileAccessLogs"> Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume. </param>
        <param name="avsDataStore"> Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose. </param>
        <param name="dataStoreResourceId"> Data store resource unique identifier. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="maximumNumberOfFiles"> Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB. </param>
        <param name="volumeGroupName"> Volume Group Name. </param>
        <param name="capacityPoolResourceId"> Pool Resource Id used in case of creating a volume through volume group. </param>
        <param name="proximityPlacementGroupId"> Proximity placement group associated with the volume. </param>
        <param name="t2Network"> T2 network information. </param>
        <param name="volumeSpecName"> Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log. </param>
        <param name="isEncrypted"> Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01. </param>
        <param name="placementRules"> Application specific placement rules for the particular volume. </param>
        <param name="enableSubvolumes"> Flag indicating whether subvolume operations are enabled on the volume. </param>
        <param name="provisionedAvailabilityZone"> The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides. </param>
        <param name="isLargeVolume"> Specifies whether volume is a Large Volume or Regular Volume. </param>
        <param name="originatingResourceId"> Id of the snapshot or backup that the volume is restored from. </param>
        <summary> Initializes a new instance of NetAppVolumeData. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, System.Collections.Generic.IEnumerable&lt;string&gt; zones = default, Guid? fileSystemId = default, string creationToken = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long usageThreshold = 0, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, string provisioningState = default, string snapshotId = default, bool? deleteBaseSnapshot = default, string backupId = default, string baremetalTenantId = default, Azure.Core.ResourceIdentifier subnetId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Guid? networkSiblingSetId = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets = default, string volumeType = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection = default, bool? isRestoring = default, bool? isSnapshotDirectoryVisible = default, bool? isKerberosEnabled = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle = default, bool? isSmbEncryptionEnabled = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default, bool? isSmbContinuouslyAvailable = default, float? throughputMibps = default, float? actualThroughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource = default, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId = default, bool? isLdapEnabled = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, string unixPermissions = default, int? cloneProgress = default, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs = default, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, long? maximumNumberOfFiles = default, string volumeGroupName = default, Azure.Core.ResourceIdentifier capacityPoolResourceId = default, Azure.Core.ResourceIdentifier proximityPlacementGroupId = default, string t2Network = default, string volumeSpecName = default, bool? isEncrypted = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules = default, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes = default, string provisionedAvailabilityZone = default, bool? isLargeVolume = default, Azure.Core.ResourceIdentifier originatingResourceId = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class System.Collections.Generic.IEnumerable`1&lt;string&gt; zones, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; fileSystemId, string creationToken, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, int64 usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, valuetype System.Nullable`1&lt;bool&gt; deleteBaseSnapshot, string backupId, string baremetalTenantId, class Azure.Core.ResourceIdentifier subnetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; networkSiblingSetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, class Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isRestoring, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;bool&gt; isKerberosEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; securityStyle, valuetype System.Nullable`1&lt;bool&gt; isSmbEncryptionEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable, valuetype System.Nullable`1&lt;bool&gt; isSmbContinuouslyAvailable, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, valuetype System.Nullable`1&lt;float32&gt; actualThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; encryptionKeySource, class Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, valuetype System.Nullable`1&lt;bool&gt; isLdapEnabled, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, string unixPermissions, valuetype System.Nullable`1&lt;int32&gt; cloneProgress, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; fileAccessLogs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; avsDataStore, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; maximumNumberOfFiles, string volumeGroupName, class Azure.Core.ResourceIdentifier capacityPoolResourceId, class Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, valuetype System.Nullable`1&lt;bool&gt; isEncrypted, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; enableSubvolumes, string provisionedAvailabilityZone, valuetype System.Nullable`1&lt;bool&gt; isLargeVolume, class Azure.Core.ResourceIdentifier originatingResourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Guid},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Int64,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Azure.Core.ResourceIdentifier,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.String,System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore},System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume},System.String,System.Nullable{System.Boolean},Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional zones As IEnumerable(Of String) = Nothing, Optional fileSystemId As Nullable(Of Guid) = Nothing, Optional creationToken As String = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Long = 0, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional provisioningState As String = Nothing, Optional snapshotId As String = Nothing, Optional deleteBaseSnapshot As Nullable(Of Boolean) = Nothing, Optional backupId As String = Nothing, Optional baremetalTenantId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional networkSiblingSetId As Nullable(Of Guid) = Nothing, Optional storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity) = Nothing, Optional mountTargets As IEnumerable(Of NetAppVolumeMountTarget) = Nothing, Optional volumeType As String = Nothing, Optional dataProtection As NetAppVolumeDataProtection = Nothing, Optional isRestoring As Nullable(Of Boolean) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional isKerberosEnabled As Nullable(Of Boolean) = Nothing, Optional securityStyle As Nullable(Of NetAppVolumeSecurityStyle) = Nothing, Optional isSmbEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing, Optional isSmbContinuouslyAvailable As Nullable(Of Boolean) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional actualThroughputMibps As Nullable(Of Single) = Nothing, Optional encryptionKeySource As Nullable(Of NetAppEncryptionKeySource) = Nothing, Optional keyVaultPrivateEndpointResourceId As ResourceIdentifier = Nothing, Optional isLdapEnabled As Nullable(Of Boolean) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional unixPermissions As String = Nothing, Optional cloneProgress As Nullable(Of Integer) = Nothing, Optional fileAccessLogs As Nullable(Of NetAppFileAccessLog) = Nothing, Optional avsDataStore As Nullable(Of NetAppAvsDataStore) = Nothing, Optional dataStoreResourceId As IEnumerable(Of ResourceIdentifier) = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional maximumNumberOfFiles As Nullable(Of Long) = Nothing, Optional volumeGroupName As String = Nothing, Optional capacityPoolResourceId As ResourceIdentifier = Nothing, Optional proximityPlacementGroupId As ResourceIdentifier = Nothing, Optional t2Network As String = Nothing, Optional volumeSpecName As String = Nothing, Optional isEncrypted As Nullable(Of Boolean) = Nothing, Optional placementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional enableSubvolumes As Nullable(Of EnableNetAppSubvolume) = Nothing, Optional provisionedAvailabilityZone As String = Nothing, Optional isLargeVolume As Nullable(Of Boolean) = Nothing, Optional originatingResourceId As ResourceIdentifier = Nothing) As NetAppVolumeData" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * seq&lt;string&gt; * Nullable&lt;Guid&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * int64 * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * string * string * Nullable&lt;bool&gt; * string * string * Azure.Core.ResourceIdentifier * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Guid&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * string * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; * seq&lt;Azure.Core.ResourceIdentifier&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * string * string * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; * string * Nullable&lt;bool&gt; * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.NetApp.NetAppVolumeData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeData (id, name, resourceType, systemData, tags, location, etag, zones, fileSystemId, creationToken, serviceLevel, usageThreshold, exportRules, protocolTypes, provisioningState, snapshotId, deleteBaseSnapshot, backupId, baremetalTenantId, subnetId, networkFeatures, networkSiblingSetId, storageToNetworkProximity, mountTargets, volumeType, dataProtection, isRestoring, isSnapshotDirectoryVisible, isKerberosEnabled, securityStyle, isSmbEncryptionEnabled, smbAccessBasedEnumeration, smbNonBrowsable, isSmbContinuouslyAvailable, throughputMibps, actualThroughputMibps, encryptionKeySource, keyVaultPrivateEndpointResourceId, isLdapEnabled, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, unixPermissions, cloneProgress, fileAccessLogs, avsDataStore, dataStoreResourceId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, maximumNumberOfFiles, volumeGroupName, capacityPoolResourceId, proximityPlacementGroupId, t2Network, volumeSpecName, isEncrypted, placementRules, enableSubvolumes, provisionedAvailabilityZone, isLargeVolume, originatingResourceId)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData (Azure.Core.ResourceIdentifier id, string name, Azure.Core.ResourceType resourceType, Azure.ResourceManager.Models.SystemData systemData, System.Collections.Generic.IDictionary&lt;string,string&gt; tags, Azure.Core.AzureLocation location, Azure.ETag? etag, System.Collections.Generic.IEnumerable&lt;string&gt; zones, Guid? fileSystemId, string creationToken, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel, long usageThreshold, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, bool? deleteBaseSnapshot, string backupId, string baremetalTenantId, Azure.Core.ResourceIdentifier subnetId, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures, Guid? networkSiblingSetId, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, bool? isRestoring, bool? isSnapshotDirectoryVisible, bool? isKerberosEnabled, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle, bool? isSmbEncryptionEnabled, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable, bool? isSmbContinuouslyAvailable, float? throughputMibps, float? actualThroughputMibps, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, bool? isLdapEnabled, bool? isCoolAccessEnabled, int? coolnessPeriod, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy, string unixPermissions, int? cloneProgress, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, bool? isDefaultQuotaEnabled, long? defaultUserQuotaInKiBs, long? defaultGroupQuotaInKiBs, long? maximumNumberOfFiles, string volumeGroupName, Azure.Core.ResourceIdentifier capacityPoolResourceId, Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, bool? isEncrypted, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes, string provisionedAvailabilityZone, bool? isLargeVolume, Azure.Core.ResourceIdentifier originatingResourceId);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeData (id As ResourceIdentifier, name As String, resourceType As ResourceType, systemData As SystemData, tags As IDictionary(Of String, String), location As AzureLocation, etag As Nullable(Of ETag), zones As IEnumerable(Of String), fileSystemId As Nullable(Of Guid), creationToken As String, serviceLevel As Nullable(Of NetAppFileServiceLevel), usageThreshold As Long, exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule), protocolTypes As IEnumerable(Of String), provisioningState As String, snapshotId As String, deleteBaseSnapshot As Nullable(Of Boolean), backupId As String, baremetalTenantId As String, subnetId As ResourceIdentifier, networkFeatures As Nullable(Of NetAppNetworkFeature), networkSiblingSetId As Nullable(Of Guid), storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity), mountTargets As IEnumerable(Of NetAppVolumeMountTarget), volumeType As String, dataProtection As NetAppVolumeDataProtection, isRestoring As Nullable(Of Boolean), isSnapshotDirectoryVisible As Nullable(Of Boolean), isKerberosEnabled As Nullable(Of Boolean), securityStyle As Nullable(Of NetAppVolumeSecurityStyle), isSmbEncryptionEnabled As Nullable(Of Boolean), smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration), smbNonBrowsable As Nullable(Of SmbNonBrowsable), isSmbContinuouslyAvailable As Nullable(Of Boolean), throughputMibps As Nullable(Of Single), actualThroughputMibps As Nullable(Of Single), encryptionKeySource As Nullable(Of NetAppEncryptionKeySource), keyVaultPrivateEndpointResourceId As ResourceIdentifier, isLdapEnabled As Nullable(Of Boolean), isCoolAccessEnabled As Nullable(Of Boolean), coolnessPeriod As Nullable(Of Integer), coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy), unixPermissions As String, cloneProgress As Nullable(Of Integer), fileAccessLogs As Nullable(Of NetAppFileAccessLog), avsDataStore As Nullable(Of NetAppAvsDataStore), dataStoreResourceId As IEnumerable(Of ResourceIdentifier), isDefaultQuotaEnabled As Nullable(Of Boolean), defaultUserQuotaInKiBs As Nullable(Of Long), defaultGroupQuotaInKiBs As Nullable(Of Long), maximumNumberOfFiles As Nullable(Of Long), volumeGroupName As String, capacityPoolResourceId As ResourceIdentifier, proximityPlacementGroupId As ResourceIdentifier, t2Network As String, volumeSpecName As String, isEncrypted As Nullable(Of Boolean), placementRules As IEnumerable(Of NetAppVolumePlacementRule), enableSubvolumes As Nullable(Of EnableNetAppSubvolume), provisionedAvailabilityZone As String, isLargeVolume As Nullable(Of Boolean), originatingResourceId As ResourceIdentifier) As NetAppVolumeData" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppVolumeData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="zones" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="fileSystemId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="creationToken" Type="System.String" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" />
        <Parameter Name="usageThreshold" Type="System.Int64" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="snapshotId" Type="System.String" />
        <Parameter Name="deleteBaseSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="backupId" Type="System.String" />
        <Parameter Name="baremetalTenantId" Type="System.String" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" />
        <Parameter Name="networkSiblingSetId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt;" />
        <Parameter Name="mountTargets" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt;" />
        <Parameter Name="volumeType" Type="System.String" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection" />
        <Parameter Name="isRestoring" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isKerberosEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="securityStyle" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt;" />
        <Parameter Name="isSmbEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" />
        <Parameter Name="isSmbContinuouslyAvailable" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="actualThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="encryptionKeySource" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt;" />
        <Parameter Name="keyVaultPrivateEndpointResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="isLdapEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" />
        <Parameter Name="unixPermissions" Type="System.String" />
        <Parameter Name="cloneProgress" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fileAccessLogs" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt;" />
        <Parameter Name="avsDataStore" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt;" />
        <Parameter Name="dataStoreResourceId" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="volumeGroupName" Type="System.String" />
        <Parameter Name="capacityPoolResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="proximityPlacementGroupId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="t2Network" Type="System.String" />
        <Parameter Name="volumeSpecName" Type="System.String" />
        <Parameter Name="isEncrypted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="placementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" />
        <Parameter Name="enableSubvolumes" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt;" />
        <Parameter Name="provisionedAvailabilityZone" Type="System.String" />
        <Parameter Name="isLargeVolume" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="originatingResourceId" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="zones"> Availability Zone. </param>
        <param name="fileSystemId"> Unique FileSystem Identifier. </param>
        <param name="creationToken"> A unique file path for the volume. Used when creating mount targets. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="snapshotId"> Resource identifier used to identify the Snapshot. </param>
        <param name="deleteBaseSnapshot"> If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false. </param>
        <param name="backupId"> Resource identifier used to identify the Backup. </param>
        <param name="baremetalTenantId"> Unique Baremetal Tenant Identifier. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. </param>
        <param name="networkFeatures"> Network features available to the volume, or current state of update. </param>
        <param name="networkSiblingSetId"> Network Sibling Set ID for the the group of volumes sharing networking resources. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information for the volume. </param>
        <param name="mountTargets"> List of mount targets. </param>
        <param name="volumeType"> What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isRestoring"> Restoring. </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). </param>
        <param name="isKerberosEnabled"> Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later. </param>
        <param name="securityStyle"> The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol. </param>
        <param name="isSmbEncryptionEnabled"> Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="isSmbContinuouslyAvailable"> Enables continuously available share property for smb volume. Only applicable for SMB volume. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="actualThroughputMibps"> Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel. </param>
        <param name="encryptionKeySource"> Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'. </param>
        <param name="keyVaultPrivateEndpointResourceId"> The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. </param>
        <param name="isLdapEnabled"> Specifies whether LDAP is enabled or not for a given NFS volume. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="cloneProgress"> When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning. </param>
        <param name="fileAccessLogs"> Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume. </param>
        <param name="avsDataStore"> Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose. </param>
        <param name="dataStoreResourceId"> Data store resource unique identifier. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="maximumNumberOfFiles"> Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB. </param>
        <param name="volumeGroupName"> Volume Group Name. </param>
        <param name="capacityPoolResourceId"> Pool Resource Id used in case of creating a volume through volume group. </param>
        <param name="proximityPlacementGroupId"> Proximity placement group associated with the volume. </param>
        <param name="t2Network"> T2 network information. </param>
        <param name="volumeSpecName"> Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log. </param>
        <param name="isEncrypted"> Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01. </param>
        <param name="placementRules"> Application specific placement rules for the particular volume. </param>
        <param name="enableSubvolumes"> Flag indicating whether subvolume operations are enabled on the volume. </param>
        <param name="provisionedAvailabilityZone"> The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides. </param>
        <param name="isLargeVolume"> Specifies whether volume is a Large Volume or Regular Volume. </param>
        <param name="originatingResourceId"> Id of the snapshot or backup that the volume is restored from. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, System.Collections.Generic.IEnumerable&lt;string&gt; zones = default, Guid? fileSystemId = default, string creationToken = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long usageThreshold = 0, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, string provisioningState = default, string snapshotId = default, bool? deleteBaseSnapshot = default, string backupId = default, string baremetalTenantId = default, Azure.Core.ResourceIdentifier subnetId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Guid? networkSiblingSetId = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets = default, string volumeType = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection = default, bool? isRestoring = default, bool? isSnapshotDirectoryVisible = default, bool? isKerberosEnabled = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle = default, bool? isSmbEncryptionEnabled = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default, bool? isSmbContinuouslyAvailable = default, float? throughputMibps = default, float? actualThroughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource = default, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId = default, bool? isLdapEnabled = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, string unixPermissions = default, int? cloneProgress = default, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs = default, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, long? maximumNumberOfFiles = default, string volumeGroupName = default, Azure.Core.ResourceIdentifier capacityPoolResourceId = default, Azure.Core.ResourceIdentifier proximityPlacementGroupId = default, string t2Network = default, string volumeSpecName = default, bool? isEncrypted = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules = default, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes = default, string provisionedAvailabilityZone = default, bool? isLargeVolume = default, Azure.Core.ResourceIdentifier originatingResourceId = default, long? inheritedSizeInBytes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppVolumeData NetAppVolumeData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class System.Collections.Generic.IEnumerable`1&lt;string&gt; zones, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; fileSystemId, string creationToken, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, int64 usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, valuetype System.Nullable`1&lt;bool&gt; deleteBaseSnapshot, string backupId, string baremetalTenantId, class Azure.Core.ResourceIdentifier subnetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; networkSiblingSetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, class Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isRestoring, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;bool&gt; isKerberosEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; securityStyle, valuetype System.Nullable`1&lt;bool&gt; isSmbEncryptionEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable, valuetype System.Nullable`1&lt;bool&gt; isSmbContinuouslyAvailable, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, valuetype System.Nullable`1&lt;float32&gt; actualThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; encryptionKeySource, class Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, valuetype System.Nullable`1&lt;bool&gt; isLdapEnabled, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, string unixPermissions, valuetype System.Nullable`1&lt;int32&gt; cloneProgress, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; fileAccessLogs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; avsDataStore, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; maximumNumberOfFiles, string volumeGroupName, class Azure.Core.ResourceIdentifier capacityPoolResourceId, class Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, valuetype System.Nullable`1&lt;bool&gt; isEncrypted, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; enableSubvolumes, string provisionedAvailabilityZone, valuetype System.Nullable`1&lt;bool&gt; isLargeVolume, class Azure.Core.ResourceIdentifier originatingResourceId, valuetype System.Nullable`1&lt;int64&gt; inheritedSizeInBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Guid},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Int64,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Azure.Core.ResourceIdentifier,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.String,System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore},System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume},System.String,System.Nullable{System.Boolean},Azure.Core.ResourceIdentifier,System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional zones As IEnumerable(Of String) = Nothing, Optional fileSystemId As Nullable(Of Guid) = Nothing, Optional creationToken As String = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Long = 0, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional provisioningState As String = Nothing, Optional snapshotId As String = Nothing, Optional deleteBaseSnapshot As Nullable(Of Boolean) = Nothing, Optional backupId As String = Nothing, Optional baremetalTenantId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional networkSiblingSetId As Nullable(Of Guid) = Nothing, Optional storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity) = Nothing, Optional mountTargets As IEnumerable(Of NetAppVolumeMountTarget) = Nothing, Optional volumeType As String = Nothing, Optional dataProtection As NetAppVolumeDataProtection = Nothing, Optional isRestoring As Nullable(Of Boolean) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional isKerberosEnabled As Nullable(Of Boolean) = Nothing, Optional securityStyle As Nullable(Of NetAppVolumeSecurityStyle) = Nothing, Optional isSmbEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing, Optional isSmbContinuouslyAvailable As Nullable(Of Boolean) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional actualThroughputMibps As Nullable(Of Single) = Nothing, Optional encryptionKeySource As Nullable(Of NetAppEncryptionKeySource) = Nothing, Optional keyVaultPrivateEndpointResourceId As ResourceIdentifier = Nothing, Optional isLdapEnabled As Nullable(Of Boolean) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional unixPermissions As String = Nothing, Optional cloneProgress As Nullable(Of Integer) = Nothing, Optional fileAccessLogs As Nullable(Of NetAppFileAccessLog) = Nothing, Optional avsDataStore As Nullable(Of NetAppAvsDataStore) = Nothing, Optional dataStoreResourceId As IEnumerable(Of ResourceIdentifier) = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional maximumNumberOfFiles As Nullable(Of Long) = Nothing, Optional volumeGroupName As String = Nothing, Optional capacityPoolResourceId As ResourceIdentifier = Nothing, Optional proximityPlacementGroupId As ResourceIdentifier = Nothing, Optional t2Network As String = Nothing, Optional volumeSpecName As String = Nothing, Optional isEncrypted As Nullable(Of Boolean) = Nothing, Optional placementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional enableSubvolumes As Nullable(Of EnableNetAppSubvolume) = Nothing, Optional provisionedAvailabilityZone As String = Nothing, Optional isLargeVolume As Nullable(Of Boolean) = Nothing, Optional originatingResourceId As ResourceIdentifier = Nothing, Optional inheritedSizeInBytes As Nullable(Of Long) = Nothing) As NetAppVolumeData" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * seq&lt;string&gt; * Nullable&lt;Guid&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * int64 * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * string * string * Nullable&lt;bool&gt; * string * string * Azure.Core.ResourceIdentifier * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Guid&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * string * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; * seq&lt;Azure.Core.ResourceIdentifier&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * string * string * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; * string * Nullable&lt;bool&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.NetAppVolumeData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeData (id, name, resourceType, systemData, tags, location, etag, zones, fileSystemId, creationToken, serviceLevel, usageThreshold, exportRules, protocolTypes, provisioningState, snapshotId, deleteBaseSnapshot, backupId, baremetalTenantId, subnetId, networkFeatures, networkSiblingSetId, storageToNetworkProximity, mountTargets, volumeType, dataProtection, isRestoring, isSnapshotDirectoryVisible, isKerberosEnabled, securityStyle, isSmbEncryptionEnabled, smbAccessBasedEnumeration, smbNonBrowsable, isSmbContinuouslyAvailable, throughputMibps, actualThroughputMibps, encryptionKeySource, keyVaultPrivateEndpointResourceId, isLdapEnabled, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, unixPermissions, cloneProgress, fileAccessLogs, avsDataStore, dataStoreResourceId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, maximumNumberOfFiles, volumeGroupName, capacityPoolResourceId, proximityPlacementGroupId, t2Network, volumeSpecName, isEncrypted, placementRules, enableSubvolumes, provisionedAvailabilityZone, isLargeVolume, originatingResourceId, inheritedSizeInBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppVolumeData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="zones" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="7" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="fileSystemId" Type="System.Nullable&lt;System.Guid&gt;" Index="8" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="creationToken" Type="System.String" Index="9" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" Index="10" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="usageThreshold" Type="System.Int64" Index="11" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" Index="12" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="13" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="provisioningState" Type="System.String" Index="14" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="snapshotId" Type="System.String" Index="15" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="deleteBaseSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" Index="16" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="backupId" Type="System.String" Index="17" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="baremetalTenantId" Type="System.String" Index="18" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" Index="19" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" Index="20" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="networkSiblingSetId" Type="System.Nullable&lt;System.Guid&gt;" Index="21" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt;" Index="22" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="mountTargets" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt;" Index="23" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="volumeType" Type="System.String" Index="24" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection" Index="25" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isRestoring" Type="System.Nullable&lt;System.Boolean&gt;" Index="26" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" Index="27" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isKerberosEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="28" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="securityStyle" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt;" Index="29" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSmbEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="30" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" Index="31" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" Index="32" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSmbContinuouslyAvailable" Type="System.Nullable&lt;System.Boolean&gt;" Index="33" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="34" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="actualThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="35" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="encryptionKeySource" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt;" Index="36" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="keyVaultPrivateEndpointResourceId" Type="Azure.Core.ResourceIdentifier" Index="37" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isLdapEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="38" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="39" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" Index="40" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" Index="41" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="unixPermissions" Type="System.String" Index="42" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cloneProgress" Type="System.Nullable&lt;System.Int32&gt;" Index="43" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="fileAccessLogs" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt;" Index="44" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="avsDataStore" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt;" Index="45" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="dataStoreResourceId" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" Index="46" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="47" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="48" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="49" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Nullable&lt;System.Int64&gt;" Index="50" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="volumeGroupName" Type="System.String" Index="51" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="capacityPoolResourceId" Type="Azure.Core.ResourceIdentifier" Index="52" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="proximityPlacementGroupId" Type="Azure.Core.ResourceIdentifier" Index="53" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="t2Network" Type="System.String" Index="54" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="volumeSpecName" Type="System.String" Index="55" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isEncrypted" Type="System.Nullable&lt;System.Boolean&gt;" Index="56" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="placementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" Index="57" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="enableSubvolumes" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt;" Index="58" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="provisionedAvailabilityZone" Type="System.String" Index="59" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isLargeVolume" Type="System.Nullable&lt;System.Boolean&gt;" Index="60" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="originatingResourceId" Type="Azure.Core.ResourceIdentifier" Index="61" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="inheritedSizeInBytes" Type="System.Nullable&lt;System.Int64&gt;" Index="62" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="zones"> Availability Zone. </param>
        <param name="fileSystemId"> Unique FileSystem Identifier. </param>
        <param name="creationToken"> A unique file path for the volume. Used when creating mount targets. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="snapshotId"> UUID v4 or resource identifier used to identify the Snapshot. </param>
        <param name="deleteBaseSnapshot"> If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false. </param>
        <param name="backupId"> UUID v4 or resource identifier used to identify the Backup. </param>
        <param name="baremetalTenantId"> Unique Baremetal Tenant Identifier. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. </param>
        <param name="networkFeatures"> Network features available to the volume, or current state of update. </param>
        <param name="networkSiblingSetId"> Network Sibling Set ID for the the group of volumes sharing networking resources. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information for the volume. </param>
        <param name="mountTargets"> List of mount targets. </param>
        <param name="volumeType"> What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. For creating clone volume, set type to ShortTermClone. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isRestoring"> Restoring. </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). </param>
        <param name="isKerberosEnabled"> Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later. </param>
        <param name="securityStyle"> The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol. </param>
        <param name="isSmbEncryptionEnabled"> Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="isSmbContinuouslyAvailable"> Enables continuously available share property for smb volume. Only applicable for SMB volume. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="actualThroughputMibps"> Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel. </param>
        <param name="encryptionKeySource"> Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'. </param>
        <param name="keyVaultPrivateEndpointResourceId"> The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. </param>
        <param name="isLdapEnabled"> Specifies whether LDAP is enabled or not for a given NFS volume. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="cloneProgress"> When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning. </param>
        <param name="fileAccessLogs"> Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume. </param>
        <param name="avsDataStore"> Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose. </param>
        <param name="dataStoreResourceId"> Data store resource unique identifier. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="maximumNumberOfFiles"> Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB. </param>
        <param name="volumeGroupName"> Volume Group Name. </param>
        <param name="capacityPoolResourceId"> Pool Resource Id used in case of creating a volume through volume group. </param>
        <param name="proximityPlacementGroupId"> Proximity placement group associated with the volume. </param>
        <param name="t2Network"> T2 network information. </param>
        <param name="volumeSpecName"> Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log. </param>
        <param name="isEncrypted"> Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01. </param>
        <param name="placementRules"> Application specific placement rules for the particular volume. </param>
        <param name="enableSubvolumes"> Flag indicating whether subvolume operations are enabled on the volume. </param>
        <param name="provisionedAvailabilityZone"> The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides. </param>
        <param name="isLargeVolume"> Specifies whether volume is a Large Volume or Regular Volume. </param>
        <param name="originatingResourceId"> Id of the snapshot or backup that the volume is restored from. </param>
        <param name="inheritedSizeInBytes"> Space shared by short term clone volume with parent volume in bytes. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeGroupData NetAppVolumeGroupData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, Azure.Core.AzureLocation? location = default, string provisioningState = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata groupMetaData = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume&gt; volumes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppVolumeGroupData NetAppVolumeGroupData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, valuetype System.Nullable`1&lt;valuetype Azure.Core.AzureLocation&gt; location, string provisioningState, class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata groupMetaData, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume&gt; volumes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{Azure.Core.AzureLocation},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional location As Nullable(Of AzureLocation) = Nothing, Optional provisioningState As String = Nothing, Optional groupMetaData As NetAppVolumeGroupMetadata = Nothing, Optional volumes As IEnumerable(Of NetAppVolumeGroupVolume) = Nothing) As NetAppVolumeGroupData" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * Nullable&lt;Azure.Core.AzureLocation&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume&gt; -&gt; Azure.ResourceManager.NetApp.NetAppVolumeGroupData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupData (id, name, resourceType, systemData, location, provisioningState, groupMetaData, volumes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppVolumeGroupData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="location" Type="System.Nullable&lt;Azure.Core.AzureLocation&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="groupMetaData" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" />
        <Parameter Name="volumes" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="location"> Resource location. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="groupMetaData"> Volume group details. </param>
        <param name="volumes"> List of volumes from group. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeGroupData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeGroupData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupMetadata">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata NetAppVolumeGroupMetadata (string groupDescription = default, Azure.ResourceManager.NetApp.Models.NetAppApplicationType? applicationType = default, string applicationIdentifier = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; globalPlacementRules = default, long? volumesCount = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata NetAppVolumeGroupMetadata(string groupDescription, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppApplicationType&gt; applicationType, string applicationIdentifier, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; globalPlacementRules, valuetype System.Nullable`1&lt;int64&gt; volumesCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupMetadata(System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppApplicationType},System.String,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupMetadata (Optional groupDescription As String = Nothing, Optional applicationType As Nullable(Of NetAppApplicationType) = Nothing, Optional applicationIdentifier As String = Nothing, Optional globalPlacementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional volumesCount As Nullable(Of Long) = Nothing) As NetAppVolumeGroupMetadata" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupMetadata : string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppApplicationType&gt; * string * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupMetadata (groupDescription, applicationType, applicationIdentifier, globalPlacementRules, volumesCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupDescription" Type="System.String" />
        <Parameter Name="applicationType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppApplicationType&gt;" />
        <Parameter Name="applicationIdentifier" Type="System.String" />
        <Parameter Name="globalPlacementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" />
        <Parameter Name="volumesCount" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="groupDescription"> Group Description. </param>
        <param name="applicationType"> Application Type. </param>
        <param name="applicationIdentifier"> Application specific identifier. </param>
        <param name="globalPlacementRules"> Application specific placement rules for the volume group. </param>
        <param name="volumesCount"> Number of volumes in volume group. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupMetadata">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata NetAppVolumeGroupMetadata (string groupDescription, Azure.ResourceManager.NetApp.Models.NetAppApplicationType? applicationType, string applicationIdentifier, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; globalPlacementRules, string deploymentSpecId, long? volumesCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata NetAppVolumeGroupMetadata(string groupDescription, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppApplicationType&gt; applicationType, string applicationIdentifier, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; globalPlacementRules, string deploymentSpecId, valuetype System.Nullable`1&lt;int64&gt; volumesCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupMetadata(System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppApplicationType},System.String,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.String,System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupMetadata (groupDescription As String, applicationType As Nullable(Of NetAppApplicationType), applicationIdentifier As String, globalPlacementRules As IEnumerable(Of NetAppVolumePlacementRule), deploymentSpecId As String, volumesCount As Nullable(Of Long)) As NetAppVolumeGroupMetadata" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupMetadata : string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppApplicationType&gt; * string * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * string * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupMetadata (groupDescription, applicationType, applicationIdentifier, globalPlacementRules, deploymentSpecId, volumesCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupDescription" Type="System.String" />
        <Parameter Name="applicationType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppApplicationType&gt;" />
        <Parameter Name="applicationIdentifier" Type="System.String" />
        <Parameter Name="globalPlacementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" />
        <Parameter Name="deploymentSpecId" Type="System.String" />
        <Parameter Name="volumesCount" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="groupDescription"> Group Description. </param>
        <param name="applicationType"> Application Type. </param>
        <param name="applicationIdentifier"> Application specific identifier. </param>
        <param name="globalPlacementRules"> Application specific placement rules for the volume group. </param>
        <param name="deploymentSpecId"> Application specific identifier of deployment rules for the volume group. </param>
        <param name="volumesCount"> Number of volumes in volume group. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupResult">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupResult NetAppVolumeGroupResult (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, Azure.Core.AzureLocation? location = default, string provisioningState = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata groupMetaData = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupResult NetAppVolumeGroupResult(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, valuetype System.Nullable`1&lt;valuetype Azure.Core.AzureLocation&gt; location, string provisioningState, class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata groupMetaData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupResult(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{Azure.Core.AzureLocation},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupResult (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional location As Nullable(Of AzureLocation) = Nothing, Optional provisioningState As String = Nothing, Optional groupMetaData As NetAppVolumeGroupMetadata = Nothing) As NetAppVolumeGroupResult" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupResult : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * Nullable&lt;Azure.Core.AzureLocation&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupResult" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupResult (id, name, resourceType, systemData, location, provisioningState, groupMetaData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="location" Type="System.Nullable&lt;Azure.Core.AzureLocation&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="groupMetaData" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupMetadata" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="location"> Resource location. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="groupMetaData"> Volume group details. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupResult" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupResult" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupVolume">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType? resourceType = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Guid? fileSystemId = default, string creationToken = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long usageThreshold = 0, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, string provisioningState = default, string snapshotId = default, bool? deleteBaseSnapshot = default, string backupId = default, string baremetalTenantId = default, Azure.Core.ResourceIdentifier subnetId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Guid? networkSiblingSetId = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets = default, string volumeType = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection = default, bool? isRestoring = default, bool? isSnapshotDirectoryVisible = default, bool? isKerberosEnabled = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle = default, bool? isSmbEncryptionEnabled = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default, bool? isSmbContinuouslyAvailable = default, float? throughputMibps = default, float? actualThroughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource = default, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId = default, bool? isLdapEnabled = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, string unixPermissions = default, int? cloneProgress = default, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs = default, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, long? maximumNumberOfFiles = default, string volumeGroupName = default, Azure.Core.ResourceIdentifier capacityPoolResourceId = default, Azure.Core.ResourceIdentifier proximityPlacementGroupId = default, string t2Network = default, string volumeSpecName = default, bool? isEncrypted = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules = default, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes = default, string provisionedAvailabilityZone = default, bool? isLargeVolume = default, Azure.Core.ResourceIdentifier originatingResourceId = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume(class Azure.Core.ResourceIdentifier id, string name, valuetype System.Nullable`1&lt;valuetype Azure.Core.ResourceType&gt; resourceType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; fileSystemId, string creationToken, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, int64 usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, valuetype System.Nullable`1&lt;bool&gt; deleteBaseSnapshot, string backupId, string baremetalTenantId, class Azure.Core.ResourceIdentifier subnetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; networkSiblingSetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, class Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isRestoring, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;bool&gt; isKerberosEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; securityStyle, valuetype System.Nullable`1&lt;bool&gt; isSmbEncryptionEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable, valuetype System.Nullable`1&lt;bool&gt; isSmbContinuouslyAvailable, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, valuetype System.Nullable`1&lt;float32&gt; actualThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; encryptionKeySource, class Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, valuetype System.Nullable`1&lt;bool&gt; isLdapEnabled, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, string unixPermissions, valuetype System.Nullable`1&lt;int32&gt; cloneProgress, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; fileAccessLogs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; avsDataStore, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; maximumNumberOfFiles, string volumeGroupName, class Azure.Core.ResourceIdentifier capacityPoolResourceId, class Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, valuetype System.Nullable`1&lt;bool&gt; isEncrypted, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; enableSubvolumes, string provisionedAvailabilityZone, valuetype System.Nullable`1&lt;bool&gt; isLargeVolume, class Azure.Core.ResourceIdentifier originatingResourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupVolume(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{System.Guid},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Int64,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Azure.Core.ResourceIdentifier,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore},System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume},System.String,System.Nullable{System.Boolean},Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupVolume (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As Nullable(Of ResourceType) = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional fileSystemId As Nullable(Of Guid) = Nothing, Optional creationToken As String = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Long = 0, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional provisioningState As String = Nothing, Optional snapshotId As String = Nothing, Optional deleteBaseSnapshot As Nullable(Of Boolean) = Nothing, Optional backupId As String = Nothing, Optional baremetalTenantId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional networkSiblingSetId As Nullable(Of Guid) = Nothing, Optional storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity) = Nothing, Optional mountTargets As IEnumerable(Of NetAppVolumeMountTarget) = Nothing, Optional volumeType As String = Nothing, Optional dataProtection As NetAppVolumeDataProtection = Nothing, Optional isRestoring As Nullable(Of Boolean) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional isKerberosEnabled As Nullable(Of Boolean) = Nothing, Optional securityStyle As Nullable(Of NetAppVolumeSecurityStyle) = Nothing, Optional isSmbEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing, Optional isSmbContinuouslyAvailable As Nullable(Of Boolean) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional actualThroughputMibps As Nullable(Of Single) = Nothing, Optional encryptionKeySource As Nullable(Of NetAppEncryptionKeySource) = Nothing, Optional keyVaultPrivateEndpointResourceId As ResourceIdentifier = Nothing, Optional isLdapEnabled As Nullable(Of Boolean) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional unixPermissions As String = Nothing, Optional cloneProgress As Nullable(Of Integer) = Nothing, Optional fileAccessLogs As Nullable(Of NetAppFileAccessLog) = Nothing, Optional avsDataStore As Nullable(Of NetAppAvsDataStore) = Nothing, Optional dataStoreResourceId As IEnumerable(Of ResourceIdentifier) = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional maximumNumberOfFiles As Nullable(Of Long) = Nothing, Optional volumeGroupName As String = Nothing, Optional capacityPoolResourceId As ResourceIdentifier = Nothing, Optional proximityPlacementGroupId As ResourceIdentifier = Nothing, Optional t2Network As String = Nothing, Optional volumeSpecName As String = Nothing, Optional isEncrypted As Nullable(Of Boolean) = Nothing, Optional placementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional enableSubvolumes As Nullable(Of EnableNetAppSubvolume) = Nothing, Optional provisionedAvailabilityZone As String = Nothing, Optional isLargeVolume As Nullable(Of Boolean) = Nothing, Optional originatingResourceId As ResourceIdentifier = Nothing) As NetAppVolumeGroupVolume" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupVolume : Azure.Core.ResourceIdentifier * string * Nullable&lt;Azure.Core.ResourceType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Guid&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * int64 * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * string * string * Nullable&lt;bool&gt; * string * string * Azure.Core.ResourceIdentifier * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Guid&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * string * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; * seq&lt;Azure.Core.ResourceIdentifier&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * string * string * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; * string * Nullable&lt;bool&gt; * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupVolume (id, name, resourceType, tags, fileSystemId, creationToken, serviceLevel, usageThreshold, exportRules, protocolTypes, provisioningState, snapshotId, deleteBaseSnapshot, backupId, baremetalTenantId, subnetId, networkFeatures, networkSiblingSetId, storageToNetworkProximity, mountTargets, volumeType, dataProtection, isRestoring, isSnapshotDirectoryVisible, isKerberosEnabled, securityStyle, isSmbEncryptionEnabled, smbAccessBasedEnumeration, smbNonBrowsable, isSmbContinuouslyAvailable, throughputMibps, actualThroughputMibps, encryptionKeySource, keyVaultPrivateEndpointResourceId, isLdapEnabled, isCoolAccessEnabled, coolnessPeriod, unixPermissions, cloneProgress, fileAccessLogs, avsDataStore, dataStoreResourceId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, maximumNumberOfFiles, volumeGroupName, capacityPoolResourceId, proximityPlacementGroupId, t2Network, volumeSpecName, isEncrypted, placementRules, enableSubvolumes, provisionedAvailabilityZone, isLargeVolume, originatingResourceId)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume (Azure.Core.ResourceIdentifier id, string name, Azure.Core.ResourceType? resourceType, System.Collections.Generic.IDictionary&lt;string,string&gt; tags, Guid? fileSystemId, string creationToken, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel, long usageThreshold, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, bool? deleteBaseSnapshot, string backupId, string baremetalTenantId, Azure.Core.ResourceIdentifier subnetId, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures, Guid? networkSiblingSetId, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, bool? isRestoring, bool? isSnapshotDirectoryVisible, bool? isKerberosEnabled, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle, bool? isSmbEncryptionEnabled, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable, bool? isSmbContinuouslyAvailable, float? throughputMibps, float? actualThroughputMibps, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, bool? isLdapEnabled, bool? isCoolAccessEnabled, int? coolnessPeriod, string unixPermissions, int? cloneProgress, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, bool? isDefaultQuotaEnabled, long? defaultUserQuotaInKiBs, long? defaultGroupQuotaInKiBs, long? maximumNumberOfFiles, string volumeGroupName, Azure.Core.ResourceIdentifier capacityPoolResourceId, Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, bool? isEncrypted, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes, string provisionedAvailabilityZone, bool? isLargeVolume, Azure.Core.ResourceIdentifier originatingResourceId);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupVolume (id As ResourceIdentifier, name As String, resourceType As Nullable(Of ResourceType), tags As IDictionary(Of String, String), fileSystemId As Nullable(Of Guid), creationToken As String, serviceLevel As Nullable(Of NetAppFileServiceLevel), usageThreshold As Long, exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule), protocolTypes As IEnumerable(Of String), provisioningState As String, snapshotId As String, deleteBaseSnapshot As Nullable(Of Boolean), backupId As String, baremetalTenantId As String, subnetId As ResourceIdentifier, networkFeatures As Nullable(Of NetAppNetworkFeature), networkSiblingSetId As Nullable(Of Guid), storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity), mountTargets As IEnumerable(Of NetAppVolumeMountTarget), volumeType As String, dataProtection As NetAppVolumeDataProtection, isRestoring As Nullable(Of Boolean), isSnapshotDirectoryVisible As Nullable(Of Boolean), isKerberosEnabled As Nullable(Of Boolean), securityStyle As Nullable(Of NetAppVolumeSecurityStyle), isSmbEncryptionEnabled As Nullable(Of Boolean), smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration), smbNonBrowsable As Nullable(Of SmbNonBrowsable), isSmbContinuouslyAvailable As Nullable(Of Boolean), throughputMibps As Nullable(Of Single), actualThroughputMibps As Nullable(Of Single), encryptionKeySource As Nullable(Of NetAppEncryptionKeySource), keyVaultPrivateEndpointResourceId As ResourceIdentifier, isLdapEnabled As Nullable(Of Boolean), isCoolAccessEnabled As Nullable(Of Boolean), coolnessPeriod As Nullable(Of Integer), unixPermissions As String, cloneProgress As Nullable(Of Integer), fileAccessLogs As Nullable(Of NetAppFileAccessLog), avsDataStore As Nullable(Of NetAppAvsDataStore), dataStoreResourceId As IEnumerable(Of ResourceIdentifier), isDefaultQuotaEnabled As Nullable(Of Boolean), defaultUserQuotaInKiBs As Nullable(Of Long), defaultGroupQuotaInKiBs As Nullable(Of Long), maximumNumberOfFiles As Nullable(Of Long), volumeGroupName As String, capacityPoolResourceId As ResourceIdentifier, proximityPlacementGroupId As ResourceIdentifier, t2Network As String, volumeSpecName As String, isEncrypted As Nullable(Of Boolean), placementRules As IEnumerable(Of NetAppVolumePlacementRule), enableSubvolumes As Nullable(Of EnableNetAppSubvolume), provisionedAvailabilityZone As String, isLargeVolume As Nullable(Of Boolean), originatingResourceId As ResourceIdentifier) As NetAppVolumeGroupVolume" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="System.Nullable&lt;Azure.Core.ResourceType&gt;" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="fileSystemId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="creationToken" Type="System.String" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" />
        <Parameter Name="usageThreshold" Type="System.Int64" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="snapshotId" Type="System.String" />
        <Parameter Name="deleteBaseSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="backupId" Type="System.String" />
        <Parameter Name="baremetalTenantId" Type="System.String" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" />
        <Parameter Name="networkSiblingSetId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt;" />
        <Parameter Name="mountTargets" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt;" />
        <Parameter Name="volumeType" Type="System.String" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection" />
        <Parameter Name="isRestoring" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isKerberosEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="securityStyle" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt;" />
        <Parameter Name="isSmbEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" />
        <Parameter Name="isSmbContinuouslyAvailable" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="actualThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="encryptionKeySource" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt;" />
        <Parameter Name="keyVaultPrivateEndpointResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="isLdapEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="unixPermissions" Type="System.String" />
        <Parameter Name="cloneProgress" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fileAccessLogs" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt;" />
        <Parameter Name="avsDataStore" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt;" />
        <Parameter Name="dataStoreResourceId" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="volumeGroupName" Type="System.String" />
        <Parameter Name="capacityPoolResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="proximityPlacementGroupId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="t2Network" Type="System.String" />
        <Parameter Name="volumeSpecName" Type="System.String" />
        <Parameter Name="isEncrypted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="placementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" />
        <Parameter Name="enableSubvolumes" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt;" />
        <Parameter Name="provisionedAvailabilityZone" Type="System.String" />
        <Parameter Name="isLargeVolume" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="originatingResourceId" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> Resource Id. </param>
        <param name="name"> Resource name. </param>
        <param name="resourceType"> Resource type. </param>
        <param name="tags"> Resource tags. </param>
        <param name="fileSystemId"> Unique FileSystem Identifier. </param>
        <param name="creationToken"> A unique file path for the volume. Used when creating mount targets. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="snapshotId"> UUID v4 or resource identifier used to identify the Snapshot. </param>
        <param name="deleteBaseSnapshot"> If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false. </param>
        <param name="backupId"> UUID v4 or resource identifier used to identify the Backup. </param>
        <param name="baremetalTenantId"> Unique Baremetal Tenant Identifier. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. </param>
        <param name="networkFeatures"> Basic network, or Standard features available to the volume. </param>
        <param name="networkSiblingSetId"> Network Sibling Set ID for the the group of volumes sharing networking resources. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information for the volume. </param>
        <param name="mountTargets"> List of mount targets. </param>
        <param name="volumeType"> What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isRestoring"> Restoring. </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). </param>
        <param name="isKerberosEnabled"> Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later. </param>
        <param name="securityStyle"> The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol. </param>
        <param name="isSmbEncryptionEnabled"> Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later. </param>
        <param name="smbAccessBasedEnumeration"> Enables access based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="isSmbContinuouslyAvailable"> Enables continuously available share property for smb volume. Only applicable for SMB volume. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="actualThroughputMibps"> Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel. </param>
        <param name="encryptionKeySource"> Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'. </param>
        <param name="keyVaultPrivateEndpointResourceId"> The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. </param>
        <param name="isLdapEnabled"> Specifies whether LDAP is enabled or not for a given NFS volume. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="cloneProgress"> When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning. </param>
        <param name="fileAccessLogs"> Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume. </param>
        <param name="avsDataStore"> Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose. </param>
        <param name="dataStoreResourceId"> Data store resource unique identifier. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="maximumNumberOfFiles"> Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB. </param>
        <param name="volumeGroupName"> Volume Group Name. </param>
        <param name="capacityPoolResourceId"> Pool Resource Id used in case of creating a volume through volume group. </param>
        <param name="proximityPlacementGroupId"> Proximity placement group associated with the volume. </param>
        <param name="t2Network"> T2 network information. </param>
        <param name="volumeSpecName"> Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log. </param>
        <param name="isEncrypted"> Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01. </param>
        <param name="placementRules"> Application specific placement rules for the particular volume. </param>
        <param name="enableSubvolumes"> Flag indicating whether subvolume operations are enabled on the volume. </param>
        <param name="provisionedAvailabilityZone"> The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides. </param>
        <param name="isLargeVolume"> Specifies whether volume is a Large Volume or Regular Volume. </param>
        <param name="originatingResourceId"> Id of the snapshot or backup that the volume is restored from. </param>
        <summary> Initializes a new instance of NetAppVolumeGroupVolume. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupVolume">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType? resourceType = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, System.Collections.Generic.IEnumerable&lt;string&gt; zones = default, Guid? fileSystemId = default, string creationToken = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long usageThreshold = 0, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, string provisioningState = default, string snapshotId = default, bool? deleteBaseSnapshot = default, string backupId = default, string baremetalTenantId = default, Azure.Core.ResourceIdentifier subnetId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Guid? networkSiblingSetId = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets = default, string volumeType = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection = default, bool? isRestoring = default, bool? isSnapshotDirectoryVisible = default, bool? isKerberosEnabled = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle = default, bool? isSmbEncryptionEnabled = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default, bool? isSmbContinuouslyAvailable = default, float? throughputMibps = default, float? actualThroughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource = default, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId = default, bool? isLdapEnabled = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, string unixPermissions = default, int? cloneProgress = default, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs = default, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, long? maximumNumberOfFiles = default, string volumeGroupName = default, Azure.Core.ResourceIdentifier capacityPoolResourceId = default, Azure.Core.ResourceIdentifier proximityPlacementGroupId = default, string t2Network = default, string volumeSpecName = default, bool? isEncrypted = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules = default, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes = default, string provisionedAvailabilityZone = default, bool? isLargeVolume = default, Azure.Core.ResourceIdentifier originatingResourceId = default);" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume(class Azure.Core.ResourceIdentifier id, string name, valuetype System.Nullable`1&lt;valuetype Azure.Core.ResourceType&gt; resourceType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, class System.Collections.Generic.IEnumerable`1&lt;string&gt; zones, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; fileSystemId, string creationToken, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, int64 usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, valuetype System.Nullable`1&lt;bool&gt; deleteBaseSnapshot, string backupId, string baremetalTenantId, class Azure.Core.ResourceIdentifier subnetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; networkSiblingSetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, class Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isRestoring, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;bool&gt; isKerberosEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; securityStyle, valuetype System.Nullable`1&lt;bool&gt; isSmbEncryptionEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable, valuetype System.Nullable`1&lt;bool&gt; isSmbContinuouslyAvailable, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, valuetype System.Nullable`1&lt;float32&gt; actualThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; encryptionKeySource, class Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, valuetype System.Nullable`1&lt;bool&gt; isLdapEnabled, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, string unixPermissions, valuetype System.Nullable`1&lt;int32&gt; cloneProgress, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; fileAccessLogs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; avsDataStore, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; maximumNumberOfFiles, string volumeGroupName, class Azure.Core.ResourceIdentifier capacityPoolResourceId, class Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, valuetype System.Nullable`1&lt;bool&gt; isEncrypted, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; enableSubvolumes, string provisionedAvailabilityZone, valuetype System.Nullable`1&lt;bool&gt; isLargeVolume, class Azure.Core.ResourceIdentifier originatingResourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupVolume(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Guid},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Int64,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Azure.Core.ResourceIdentifier,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.String,System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore},System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume},System.String,System.Nullable{System.Boolean},Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupVolume (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As Nullable(Of ResourceType) = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional zones As IEnumerable(Of String) = Nothing, Optional fileSystemId As Nullable(Of Guid) = Nothing, Optional creationToken As String = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Long = 0, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional provisioningState As String = Nothing, Optional snapshotId As String = Nothing, Optional deleteBaseSnapshot As Nullable(Of Boolean) = Nothing, Optional backupId As String = Nothing, Optional baremetalTenantId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional networkSiblingSetId As Nullable(Of Guid) = Nothing, Optional storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity) = Nothing, Optional mountTargets As IEnumerable(Of NetAppVolumeMountTarget) = Nothing, Optional volumeType As String = Nothing, Optional dataProtection As NetAppVolumeDataProtection = Nothing, Optional isRestoring As Nullable(Of Boolean) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional isKerberosEnabled As Nullable(Of Boolean) = Nothing, Optional securityStyle As Nullable(Of NetAppVolumeSecurityStyle) = Nothing, Optional isSmbEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing, Optional isSmbContinuouslyAvailable As Nullable(Of Boolean) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional actualThroughputMibps As Nullable(Of Single) = Nothing, Optional encryptionKeySource As Nullable(Of NetAppEncryptionKeySource) = Nothing, Optional keyVaultPrivateEndpointResourceId As ResourceIdentifier = Nothing, Optional isLdapEnabled As Nullable(Of Boolean) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional unixPermissions As String = Nothing, Optional cloneProgress As Nullable(Of Integer) = Nothing, Optional fileAccessLogs As Nullable(Of NetAppFileAccessLog) = Nothing, Optional avsDataStore As Nullable(Of NetAppAvsDataStore) = Nothing, Optional dataStoreResourceId As IEnumerable(Of ResourceIdentifier) = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional maximumNumberOfFiles As Nullable(Of Long) = Nothing, Optional volumeGroupName As String = Nothing, Optional capacityPoolResourceId As ResourceIdentifier = Nothing, Optional proximityPlacementGroupId As ResourceIdentifier = Nothing, Optional t2Network As String = Nothing, Optional volumeSpecName As String = Nothing, Optional isEncrypted As Nullable(Of Boolean) = Nothing, Optional placementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional enableSubvolumes As Nullable(Of EnableNetAppSubvolume) = Nothing, Optional provisionedAvailabilityZone As String = Nothing, Optional isLargeVolume As Nullable(Of Boolean) = Nothing, Optional originatingResourceId As ResourceIdentifier = Nothing) As NetAppVolumeGroupVolume" FrameworkAlternate="azure-dotnet" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupVolume : Azure.Core.ResourceIdentifier * string * Nullable&lt;Azure.Core.ResourceType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * seq&lt;string&gt; * Nullable&lt;Guid&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * int64 * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * string * string * Nullable&lt;bool&gt; * string * string * Azure.Core.ResourceIdentifier * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Guid&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * string * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; * seq&lt;Azure.Core.ResourceIdentifier&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * string * string * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; * string * Nullable&lt;bool&gt; * Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupVolume (id, name, resourceType, tags, zones, fileSystemId, creationToken, serviceLevel, usageThreshold, exportRules, protocolTypes, provisioningState, snapshotId, deleteBaseSnapshot, backupId, baremetalTenantId, subnetId, networkFeatures, networkSiblingSetId, storageToNetworkProximity, mountTargets, volumeType, dataProtection, isRestoring, isSnapshotDirectoryVisible, isKerberosEnabled, securityStyle, isSmbEncryptionEnabled, smbAccessBasedEnumeration, smbNonBrowsable, isSmbContinuouslyAvailable, throughputMibps, actualThroughputMibps, encryptionKeySource, keyVaultPrivateEndpointResourceId, isLdapEnabled, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, unixPermissions, cloneProgress, fileAccessLogs, avsDataStore, dataStoreResourceId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, maximumNumberOfFiles, volumeGroupName, capacityPoolResourceId, proximityPlacementGroupId, t2Network, volumeSpecName, isEncrypted, placementRules, enableSubvolumes, provisionedAvailabilityZone, isLargeVolume, originatingResourceId)" />
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume (Azure.Core.ResourceIdentifier id, string name, Azure.Core.ResourceType? resourceType, System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Collections.Generic.IEnumerable&lt;string&gt; zones, Guid? fileSystemId, string creationToken, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel, long usageThreshold, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, bool? deleteBaseSnapshot, string backupId, string baremetalTenantId, Azure.Core.ResourceIdentifier subnetId, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures, Guid? networkSiblingSetId, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, bool? isRestoring, bool? isSnapshotDirectoryVisible, bool? isKerberosEnabled, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle, bool? isSmbEncryptionEnabled, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable, bool? isSmbContinuouslyAvailable, float? throughputMibps, float? actualThroughputMibps, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, bool? isLdapEnabled, bool? isCoolAccessEnabled, int? coolnessPeriod, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy, string unixPermissions, int? cloneProgress, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, bool? isDefaultQuotaEnabled, long? defaultUserQuotaInKiBs, long? defaultGroupQuotaInKiBs, long? maximumNumberOfFiles, string volumeGroupName, Azure.Core.ResourceIdentifier capacityPoolResourceId, Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, bool? isEncrypted, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes, string provisionedAvailabilityZone, bool? isLargeVolume, Azure.Core.ResourceIdentifier originatingResourceId);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupVolume (id As ResourceIdentifier, name As String, resourceType As Nullable(Of ResourceType), tags As IDictionary(Of String, String), zones As IEnumerable(Of String), fileSystemId As Nullable(Of Guid), creationToken As String, serviceLevel As Nullable(Of NetAppFileServiceLevel), usageThreshold As Long, exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule), protocolTypes As IEnumerable(Of String), provisioningState As String, snapshotId As String, deleteBaseSnapshot As Nullable(Of Boolean), backupId As String, baremetalTenantId As String, subnetId As ResourceIdentifier, networkFeatures As Nullable(Of NetAppNetworkFeature), networkSiblingSetId As Nullable(Of Guid), storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity), mountTargets As IEnumerable(Of NetAppVolumeMountTarget), volumeType As String, dataProtection As NetAppVolumeDataProtection, isRestoring As Nullable(Of Boolean), isSnapshotDirectoryVisible As Nullable(Of Boolean), isKerberosEnabled As Nullable(Of Boolean), securityStyle As Nullable(Of NetAppVolumeSecurityStyle), isSmbEncryptionEnabled As Nullable(Of Boolean), smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration), smbNonBrowsable As Nullable(Of SmbNonBrowsable), isSmbContinuouslyAvailable As Nullable(Of Boolean), throughputMibps As Nullable(Of Single), actualThroughputMibps As Nullable(Of Single), encryptionKeySource As Nullable(Of NetAppEncryptionKeySource), keyVaultPrivateEndpointResourceId As ResourceIdentifier, isLdapEnabled As Nullable(Of Boolean), isCoolAccessEnabled As Nullable(Of Boolean), coolnessPeriod As Nullable(Of Integer), coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy), unixPermissions As String, cloneProgress As Nullable(Of Integer), fileAccessLogs As Nullable(Of NetAppFileAccessLog), avsDataStore As Nullable(Of NetAppAvsDataStore), dataStoreResourceId As IEnumerable(Of ResourceIdentifier), isDefaultQuotaEnabled As Nullable(Of Boolean), defaultUserQuotaInKiBs As Nullable(Of Long), defaultGroupQuotaInKiBs As Nullable(Of Long), maximumNumberOfFiles As Nullable(Of Long), volumeGroupName As String, capacityPoolResourceId As ResourceIdentifier, proximityPlacementGroupId As ResourceIdentifier, t2Network As String, volumeSpecName As String, isEncrypted As Nullable(Of Boolean), placementRules As IEnumerable(Of NetAppVolumePlacementRule), enableSubvolumes As Nullable(Of EnableNetAppSubvolume), provisionedAvailabilityZone As String, isLargeVolume As Nullable(Of Boolean), originatingResourceId As ResourceIdentifier) As NetAppVolumeGroupVolume" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet-preview">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="System.Nullable&lt;Azure.Core.ResourceType&gt;" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="zones" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="fileSystemId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="creationToken" Type="System.String" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" />
        <Parameter Name="usageThreshold" Type="System.Int64" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
        <Parameter Name="snapshotId" Type="System.String" />
        <Parameter Name="deleteBaseSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="backupId" Type="System.String" />
        <Parameter Name="baremetalTenantId" Type="System.String" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" />
        <Parameter Name="networkSiblingSetId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt;" />
        <Parameter Name="mountTargets" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt;" />
        <Parameter Name="volumeType" Type="System.String" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection" />
        <Parameter Name="isRestoring" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isKerberosEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="securityStyle" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt;" />
        <Parameter Name="isSmbEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" />
        <Parameter Name="isSmbContinuouslyAvailable" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="actualThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="encryptionKeySource" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt;" />
        <Parameter Name="keyVaultPrivateEndpointResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="isLdapEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" />
        <Parameter Name="unixPermissions" Type="System.String" />
        <Parameter Name="cloneProgress" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="fileAccessLogs" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt;" />
        <Parameter Name="avsDataStore" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt;" />
        <Parameter Name="dataStoreResourceId" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="volumeGroupName" Type="System.String" />
        <Parameter Name="capacityPoolResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="proximityPlacementGroupId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="t2Network" Type="System.String" />
        <Parameter Name="volumeSpecName" Type="System.String" />
        <Parameter Name="isEncrypted" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="placementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" />
        <Parameter Name="enableSubvolumes" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt;" />
        <Parameter Name="provisionedAvailabilityZone" Type="System.String" />
        <Parameter Name="isLargeVolume" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="originatingResourceId" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> Resource Id. </param>
        <param name="name"> Resource name. </param>
        <param name="resourceType"> Resource type. </param>
        <param name="tags"> Resource tags. </param>
        <param name="zones"> Availability Zone. </param>
        <param name="fileSystemId"> Unique FileSystem Identifier. </param>
        <param name="creationToken"> A unique file path for the volume. Used when creating mount targets. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="snapshotId"> Resource identifier used to identify the Snapshot. </param>
        <param name="deleteBaseSnapshot"> If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false. </param>
        <param name="backupId"> Resource identifier used to identify the Backup. </param>
        <param name="baremetalTenantId"> Unique Baremetal Tenant Identifier. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. </param>
        <param name="networkFeatures"> Network features available to the volume, or current state of update. </param>
        <param name="networkSiblingSetId"> Network Sibling Set ID for the the group of volumes sharing networking resources. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information for the volume. </param>
        <param name="mountTargets"> List of mount targets. </param>
        <param name="volumeType"> What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isRestoring"> Restoring. </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). </param>
        <param name="isKerberosEnabled"> Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later. </param>
        <param name="securityStyle"> The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol. </param>
        <param name="isSmbEncryptionEnabled"> Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="isSmbContinuouslyAvailable"> Enables continuously available share property for smb volume. Only applicable for SMB volume. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="actualThroughputMibps"> Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel. </param>
        <param name="encryptionKeySource"> Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'. </param>
        <param name="keyVaultPrivateEndpointResourceId"> The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. </param>
        <param name="isLdapEnabled"> Specifies whether LDAP is enabled or not for a given NFS volume. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="cloneProgress"> When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning. </param>
        <param name="fileAccessLogs"> Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume. </param>
        <param name="avsDataStore"> Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose. </param>
        <param name="dataStoreResourceId"> Data store resource unique identifier. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="maximumNumberOfFiles"> Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB. </param>
        <param name="volumeGroupName"> Volume Group Name. </param>
        <param name="capacityPoolResourceId"> Pool Resource Id used in case of creating a volume through volume group. </param>
        <param name="proximityPlacementGroupId"> Proximity placement group associated with the volume. </param>
        <param name="t2Network"> T2 network information. </param>
        <param name="volumeSpecName"> Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log. </param>
        <param name="isEncrypted"> Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01. </param>
        <param name="placementRules"> Application specific placement rules for the particular volume. </param>
        <param name="enableSubvolumes"> Flag indicating whether subvolume operations are enabled on the volume. </param>
        <param name="provisionedAvailabilityZone"> The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides. </param>
        <param name="isLargeVolume"> Specifies whether volume is a Large Volume or Regular Volume. </param>
        <param name="originatingResourceId"> Id of the snapshot or backup that the volume is restored from. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeGroupVolume">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType? resourceType = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, System.Collections.Generic.IEnumerable&lt;string&gt; zones = default, Guid? fileSystemId = default, string creationToken = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long usageThreshold = 0, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, string provisioningState = default, string snapshotId = default, bool? deleteBaseSnapshot = default, string backupId = default, string baremetalTenantId = default, Azure.Core.ResourceIdentifier subnetId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Guid? networkSiblingSetId = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets = default, string volumeType = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection = default, bool? isRestoring = default, bool? isSnapshotDirectoryVisible = default, bool? isKerberosEnabled = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle? securityStyle = default, bool? isSmbEncryptionEnabled = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default, bool? isSmbContinuouslyAvailable = default, float? throughputMibps = default, float? actualThroughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource? encryptionKeySource = default, Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId = default, bool? isLdapEnabled = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, string unixPermissions = default, int? cloneProgress = default, Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog? fileAccessLogs = default, Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore? avsDataStore = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; dataStoreResourceId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, long? maximumNumberOfFiles = default, string volumeGroupName = default, Azure.Core.ResourceIdentifier capacityPoolResourceId = default, Azure.Core.ResourceIdentifier proximityPlacementGroupId = default, string t2Network = default, string volumeSpecName = default, bool? isEncrypted = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules = default, Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume? enableSubvolumes = default, string provisionedAvailabilityZone = default, bool? isLargeVolume = default, Azure.Core.ResourceIdentifier originatingResourceId = default, long? inheritedSizeInBytes = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume NetAppVolumeGroupVolume(class Azure.Core.ResourceIdentifier id, string name, valuetype System.Nullable`1&lt;valuetype Azure.Core.ResourceType&gt; resourceType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, class System.Collections.Generic.IEnumerable`1&lt;string&gt; zones, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; fileSystemId, string creationToken, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, int64 usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, string provisioningState, string snapshotId, valuetype System.Nullable`1&lt;bool&gt; deleteBaseSnapshot, string backupId, string baremetalTenantId, class Azure.Core.ResourceIdentifier subnetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype System.Guid&gt; networkSiblingSetId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; mountTargets, string volumeType, class Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isRestoring, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;bool&gt; isKerberosEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; securityStyle, valuetype System.Nullable`1&lt;bool&gt; isSmbEncryptionEnabled, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable, valuetype System.Nullable`1&lt;bool&gt; isSmbContinuouslyAvailable, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, valuetype System.Nullable`1&lt;float32&gt; actualThroughputMibps, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; encryptionKeySource, class Azure.Core.ResourceIdentifier keyVaultPrivateEndpointResourceId, valuetype System.Nullable`1&lt;bool&gt; isLdapEnabled, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, string unixPermissions, valuetype System.Nullable`1&lt;int32&gt; cloneProgress, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; fileAccessLogs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; avsDataStore, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; dataStoreResourceId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; maximumNumberOfFiles, string volumeGroupName, class Azure.Core.ResourceIdentifier capacityPoolResourceId, class Azure.Core.ResourceIdentifier proximityPlacementGroupId, string t2Network, string volumeSpecName, valuetype System.Nullable`1&lt;bool&gt; isEncrypted, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; placementRules, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; enableSubvolumes, string provisionedAvailabilityZone, valuetype System.Nullable`1&lt;bool&gt; isLargeVolume, class Azure.Core.ResourceIdentifier originatingResourceId, valuetype System.Nullable`1&lt;int64&gt; inheritedSizeInBytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupVolume(Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.Core.ResourceType},System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Guid},System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Int64,System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,Azure.Core.ResourceIdentifier,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{System.Guid},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget},System.String,Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable},System.Nullable{System.Boolean},System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.String,System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore},System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,Azure.Core.ResourceIdentifier,Azure.Core.ResourceIdentifier,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule},System.Nullable{Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume},System.String,System.Nullable{System.Boolean},Azure.Core.ResourceIdentifier,System.Nullable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeGroupVolume (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As Nullable(Of ResourceType) = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional zones As IEnumerable(Of String) = Nothing, Optional fileSystemId As Nullable(Of Guid) = Nothing, Optional creationToken As String = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Long = 0, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional provisioningState As String = Nothing, Optional snapshotId As String = Nothing, Optional deleteBaseSnapshot As Nullable(Of Boolean) = Nothing, Optional backupId As String = Nothing, Optional baremetalTenantId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional networkSiblingSetId As Nullable(Of Guid) = Nothing, Optional storageToNetworkProximity As Nullable(Of NetAppVolumeStorageToNetworkProximity) = Nothing, Optional mountTargets As IEnumerable(Of NetAppVolumeMountTarget) = Nothing, Optional volumeType As String = Nothing, Optional dataProtection As NetAppVolumeDataProtection = Nothing, Optional isRestoring As Nullable(Of Boolean) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional isKerberosEnabled As Nullable(Of Boolean) = Nothing, Optional securityStyle As Nullable(Of NetAppVolumeSecurityStyle) = Nothing, Optional isSmbEncryptionEnabled As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing, Optional isSmbContinuouslyAvailable As Nullable(Of Boolean) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional actualThroughputMibps As Nullable(Of Single) = Nothing, Optional encryptionKeySource As Nullable(Of NetAppEncryptionKeySource) = Nothing, Optional keyVaultPrivateEndpointResourceId As ResourceIdentifier = Nothing, Optional isLdapEnabled As Nullable(Of Boolean) = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional unixPermissions As String = Nothing, Optional cloneProgress As Nullable(Of Integer) = Nothing, Optional fileAccessLogs As Nullable(Of NetAppFileAccessLog) = Nothing, Optional avsDataStore As Nullable(Of NetAppAvsDataStore) = Nothing, Optional dataStoreResourceId As IEnumerable(Of ResourceIdentifier) = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional maximumNumberOfFiles As Nullable(Of Long) = Nothing, Optional volumeGroupName As String = Nothing, Optional capacityPoolResourceId As ResourceIdentifier = Nothing, Optional proximityPlacementGroupId As ResourceIdentifier = Nothing, Optional t2Network As String = Nothing, Optional volumeSpecName As String = Nothing, Optional isEncrypted As Nullable(Of Boolean) = Nothing, Optional placementRules As IEnumerable(Of NetAppVolumePlacementRule) = Nothing, Optional enableSubvolumes As Nullable(Of EnableNetAppSubvolume) = Nothing, Optional provisionedAvailabilityZone As String = Nothing, Optional isLargeVolume As Nullable(Of Boolean) = Nothing, Optional originatingResourceId As ResourceIdentifier = Nothing, Optional inheritedSizeInBytes As Nullable(Of Long) = Nothing) As NetAppVolumeGroupVolume" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeGroupVolume : Azure.Core.ResourceIdentifier * string * Nullable&lt;Azure.Core.ResourceType&gt; * System.Collections.Generic.IDictionary&lt;string, string&gt; * seq&lt;string&gt; * Nullable&lt;Guid&gt; * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * int64 * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * string * string * Nullable&lt;bool&gt; * string * string * Azure.Core.ResourceIdentifier * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Guid&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt; * string * Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; * Nullable&lt;bool&gt; * Nullable&lt;single&gt; * Nullable&lt;single&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * string * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt; * seq&lt;Azure.Core.ResourceIdentifier&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Azure.Core.ResourceIdentifier * Azure.Core.ResourceIdentifier * string * string * Nullable&lt;bool&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt; * string * Nullable&lt;bool&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;int64&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeGroupVolume (id, name, resourceType, tags, zones, fileSystemId, creationToken, serviceLevel, usageThreshold, exportRules, protocolTypes, provisioningState, snapshotId, deleteBaseSnapshot, backupId, baremetalTenantId, subnetId, networkFeatures, networkSiblingSetId, storageToNetworkProximity, mountTargets, volumeType, dataProtection, isRestoring, isSnapshotDirectoryVisible, isKerberosEnabled, securityStyle, isSmbEncryptionEnabled, smbAccessBasedEnumeration, smbNonBrowsable, isSmbContinuouslyAvailable, throughputMibps, actualThroughputMibps, encryptionKeySource, keyVaultPrivateEndpointResourceId, isLdapEnabled, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, unixPermissions, cloneProgress, fileAccessLogs, avsDataStore, dataStoreResourceId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, maximumNumberOfFiles, volumeGroupName, capacityPoolResourceId, proximityPlacementGroupId, t2Network, volumeSpecName, isEncrypted, placementRules, enableSubvolumes, provisionedAvailabilityZone, isLargeVolume, originatingResourceId, inheritedSizeInBytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="resourceType" Type="System.Nullable&lt;Azure.Core.ResourceType&gt;" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="zones" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="fileSystemId" Type="System.Nullable&lt;System.Guid&gt;" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="creationToken" Type="System.String" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" Index="7" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="usageThreshold" Type="System.Int64" Index="8" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" Index="9" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="10" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="provisioningState" Type="System.String" Index="11" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="snapshotId" Type="System.String" Index="12" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="deleteBaseSnapshot" Type="System.Nullable&lt;System.Boolean&gt;" Index="13" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="backupId" Type="System.String" Index="14" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="baremetalTenantId" Type="System.String" Index="15" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" Index="16" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" Index="17" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="networkSiblingSetId" Type="System.Nullable&lt;System.Guid&gt;" Index="18" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeStorageToNetworkProximity&gt;" Index="19" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="mountTargets" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget&gt;" Index="20" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="volumeType" Type="System.String" Index="21" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumeDataProtection" Index="22" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isRestoring" Type="System.Nullable&lt;System.Boolean&gt;" Index="23" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" Index="24" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isKerberosEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="25" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="securityStyle" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeSecurityStyle&gt;" Index="26" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSmbEncryptionEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="27" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" Index="28" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" Index="29" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSmbContinuouslyAvailable" Type="System.Nullable&lt;System.Boolean&gt;" Index="30" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="31" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="actualThroughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="32" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="encryptionKeySource" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEncryptionKeySource&gt;" Index="33" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="keyVaultPrivateEndpointResourceId" Type="Azure.Core.ResourceIdentifier" Index="34" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isLdapEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="35" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="36" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" Index="37" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" Index="38" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="unixPermissions" Type="System.String" Index="39" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="cloneProgress" Type="System.Nullable&lt;System.Int32&gt;" Index="40" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="fileAccessLogs" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileAccessLog&gt;" Index="41" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="avsDataStore" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppAvsDataStore&gt;" Index="42" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="dataStoreResourceId" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" Index="43" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="44" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="45" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="46" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Nullable&lt;System.Int64&gt;" Index="47" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="volumeGroupName" Type="System.String" Index="48" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="capacityPoolResourceId" Type="Azure.Core.ResourceIdentifier" Index="49" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="proximityPlacementGroupId" Type="Azure.Core.ResourceIdentifier" Index="50" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="t2Network" Type="System.String" Index="51" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="volumeSpecName" Type="System.String" Index="52" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isEncrypted" Type="System.Nullable&lt;System.Boolean&gt;" Index="53" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="placementRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumePlacementRule&gt;" Index="54" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="enableSubvolumes" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.EnableNetAppSubvolume&gt;" Index="55" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="provisionedAvailabilityZone" Type="System.String" Index="56" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isLargeVolume" Type="System.Nullable&lt;System.Boolean&gt;" Index="57" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="originatingResourceId" Type="Azure.Core.ResourceIdentifier" Index="58" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="inheritedSizeInBytes" Type="System.Nullable&lt;System.Int64&gt;" Index="59" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> Resource Id. </param>
        <param name="name"> Resource name. </param>
        <param name="resourceType"> Resource type. </param>
        <param name="tags"> Resource tags. </param>
        <param name="zones"> Availability Zone. </param>
        <param name="fileSystemId"> Unique FileSystem Identifier. </param>
        <param name="creationToken"> A unique file path for the volume. Used when creating mount targets. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <param name="snapshotId"> UUID v4 or resource identifier used to identify the Snapshot. </param>
        <param name="deleteBaseSnapshot"> If enabled (true) the snapshot the volume was created from will be automatically deleted after the volume create operation has finished.  Defaults to false. </param>
        <param name="backupId"> UUID v4 or resource identifier used to identify the Backup. </param>
        <param name="baremetalTenantId"> Unique Baremetal Tenant Identifier. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. </param>
        <param name="networkFeatures"> Network features available to the volume, or current state of update. </param>
        <param name="networkSiblingSetId"> Network Sibling Set ID for the the group of volumes sharing networking resources. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information for the volume. </param>
        <param name="mountTargets"> List of mount targets. </param>
        <param name="volumeType"> What type of volume is this. For destination volumes in Cross Region Replication, set type to DataProtection. For creating clone volume, set type to ShortTermClone. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isRestoring"> Restoring. </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots (defaults to true). </param>
        <param name="isKerberosEnabled"> Describe if a volume is KerberosEnabled. To be use with swagger version 2020-05-01 or later. </param>
        <param name="securityStyle"> The security style of volume, default unix, defaults to ntfs for dual protocol or CIFS protocol. </param>
        <param name="isSmbEncryptionEnabled"> Enables encryption for in-flight smb3 data. Only applicable for SMB/DualProtocol volume. To be used with swagger version 2020-08-01 or later. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="isSmbContinuouslyAvailable"> Enables continuously available share property for smb volume. Only applicable for SMB volume. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="actualThroughputMibps"> Actual throughput in MiB/s for auto qosType volumes calculated based on size and serviceLevel. </param>
        <param name="encryptionKeySource"> Source of key used to encrypt data in volume. Applicable if NetApp account has encryption.keySource = 'Microsoft.KeyVault'. Possible values (case-insensitive) are: 'Microsoft.NetApp, Microsoft.KeyVault'. </param>
        <param name="keyVaultPrivateEndpointResourceId"> The resource ID of private endpoint for KeyVault. It must reside in the same VNET as the volume. Only applicable if encryptionKeySource = 'Microsoft.KeyVault'. </param>
        <param name="isLdapEnabled"> Specifies whether LDAP is enabled or not for a given NFS volume. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="cloneProgress"> When a volume is being restored from another volume's snapshot, will show the percentage completion of this cloning process. When this value is empty/null there is no cloning process currently happening on this volume. This value will update every 5 minutes during cloning. </param>
        <param name="fileAccessLogs"> Flag indicating whether file access logs are enabled for the volume, based on active diagnostic settings present on the volume. </param>
        <param name="avsDataStore"> Specifies whether the volume is enabled for Azure VMware Solution (AVS) datastore purpose. </param>
        <param name="dataStoreResourceId"> Data store resource unique identifier. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="maximumNumberOfFiles"> Maximum number of files allowed. Needs a service request in order to be changed. Only allowed to be changed if volume quota is more than 4TiB. </param>
        <param name="volumeGroupName"> Volume Group Name. </param>
        <param name="capacityPoolResourceId"> Pool Resource Id used in case of creating a volume through volume group. </param>
        <param name="proximityPlacementGroupId"> Proximity placement group associated with the volume. </param>
        <param name="t2Network"> T2 network information. </param>
        <param name="volumeSpecName"> Volume spec name is the application specific designation or identifier for the particular volume in a volume group for e.g. data, log. </param>
        <param name="isEncrypted"> Specifies if the volume is encrypted or not. Only available on volumes created or updated after 2022-01-01. </param>
        <param name="placementRules"> Application specific placement rules for the particular volume. </param>
        <param name="enableSubvolumes"> Flag indicating whether subvolume operations are enabled on the volume. </param>
        <param name="provisionedAvailabilityZone"> The availability zone where the volume is provisioned. This refers to the logical availability zone where the volume resides. </param>
        <param name="isLargeVolume"> Specifies whether volume is a Large Volume or Regular Volume. </param>
        <param name="originatingResourceId"> Id of the snapshot or backup that the volume is restored from. </param>
        <param name="inheritedSizeInBytes"> Space shared by short term clone volume with parent volume in bytes. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeGroupVolume" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeMountTarget">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget NetAppVolumeMountTarget (Guid? mountTargetId = default, Guid fileSystemId = default, System.Net.IPAddress ipAddress = default, string smbServerFqdn = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget NetAppVolumeMountTarget(valuetype System.Nullable`1&lt;valuetype System.Guid&gt; mountTargetId, valuetype System.Guid fileSystemId, class System.Net.IPAddress ipAddress, string smbServerFqdn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeMountTarget(System.Nullable{System.Guid},System.Guid,System.Net.IPAddress,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeMountTarget (Optional mountTargetId As Nullable(Of Guid) = Nothing, Optional fileSystemId As Guid = Nothing, Optional ipAddress As IPAddress = Nothing, Optional smbServerFqdn As String = Nothing) As NetAppVolumeMountTarget" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeMountTarget : Nullable&lt;Guid&gt; * Guid * System.Net.IPAddress * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeMountTarget (mountTargetId, fileSystemId, ipAddress, smbServerFqdn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mountTargetId" Type="System.Nullable&lt;System.Guid&gt;" />
        <Parameter Name="fileSystemId" Type="System.Guid" />
        <Parameter Name="ipAddress" Type="System.Net.IPAddress" />
        <Parameter Name="smbServerFqdn" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mountTargetId"> UUID v4 used to identify the MountTarget. </param>
        <param name="fileSystemId"> UUID v4 used to identify the MountTarget. </param>
        <param name="ipAddress"> The mount target's IPv4 address. </param>
        <param name="smbServerFqdn"> The SMB server's Fully Qualified Domain Name, FQDN. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeMountTarget" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumePatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumePatch NetAppVolumePatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long? usageThreshold = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, float? throughputMibps = default, Azure.Core.ResourceIdentifier snapshotPolicyId = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, string unixPermissions = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, bool? isSnapshotDirectoryVisible = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumePatch NetAppVolumePatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, valuetype System.Nullable`1&lt;int64&gt; usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, class Azure.Core.ResourceIdentifier snapshotPolicyId, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, string unixPermissions, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumePatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Nullable{System.Single},Azure.Core.ResourceIdentifier,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumePatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Nullable(Of Long) = Nothing, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional snapshotPolicyId As ResourceIdentifier = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional unixPermissions As String = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing) As NetAppVolumePatch" />
      <MemberSignature Language="F#" Value="static member NetAppVolumePatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * Nullable&lt;int64&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * Nullable&lt;single&gt; * Azure.Core.ResourceIdentifier * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumePatch (id, name, resourceType, systemData, tags, location, serviceLevel, usageThreshold, exportRules, throughputMibps, snapshotPolicyId, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, unixPermissions, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, isSnapshotDirectoryVisible, smbAccessBasedEnumeration, smbNonBrowsable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="azure-dotnet">
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumePatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" Index="6" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="usageThreshold" Type="System.Nullable&lt;System.Int64&gt;" Index="7" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" Index="8" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="9" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="snapshotPolicyId" Type="Azure.Core.ResourceIdentifier" Index="10" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="11" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="12" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="13" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="unixPermissions" Type="System.String" Index="14" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="15" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" Index="16" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" Index="17" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" Index="18" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" Index="19" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" Index="20" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="snapshotPolicyId"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumePatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumePatch NetAppVolumePatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long? usageThreshold = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, float? throughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection dataProtection = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, string unixPermissions = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, bool? isSnapshotDirectoryVisible = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumePatch NetAppVolumePatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, valuetype System.Nullable`1&lt;int64&gt; usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, class Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, string unixPermissions, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumePatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Nullable{System.Single},Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumePatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Nullable(Of Long) = Nothing, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional dataProtection As NetAppVolumePatchDataProtection = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional unixPermissions As String = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing) As NetAppVolumePatch" />
      <MemberSignature Language="F#" Value="static member NetAppVolumePatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * Nullable&lt;int64&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * Nullable&lt;single&gt; * Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumePatch (id, name, resourceType, systemData, tags, location, serviceLevel, usageThreshold, exportRules, throughputMibps, dataProtection, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, unixPermissions, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, isSnapshotDirectoryVisible, smbAccessBasedEnumeration, smbNonBrowsable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumePatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" Index="6" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="usageThreshold" Type="System.Nullable&lt;System.Int64&gt;" Index="7" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" Index="8" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="9" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection" Index="10" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="11" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="12" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="13" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="unixPermissions" Type="System.String" Index="14" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="15" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" Index="16" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" Index="17" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" Index="18" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" Index="19" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" Index="20" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumePatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumePatch NetAppVolumePatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel? serviceLevel = default, long? usageThreshold = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules = default, System.Collections.Generic.IEnumerable&lt;string&gt; protocolTypes = default, float? throughputMibps = default, Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection dataProtection = default, bool? isDefaultQuotaEnabled = default, long? defaultUserQuotaInKiBs = default, long? defaultGroupQuotaInKiBs = default, string unixPermissions = default, bool? isCoolAccessEnabled = default, int? coolnessPeriod = default, Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy? coolAccessRetrievalPolicy = default, bool? isSnapshotDirectoryVisible = default, Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration? smbAccessBasedEnumeration = default, Azure.ResourceManager.NetApp.Models.SmbNonBrowsable? smbNonBrowsable = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumePatch NetAppVolumePatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; serviceLevel, valuetype System.Nullable`1&lt;int64&gt; usageThreshold, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; exportRules, class System.Collections.Generic.IEnumerable`1&lt;string&gt; protocolTypes, valuetype System.Nullable`1&lt;float32&gt; throughputMibps, class Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection dataProtection, valuetype System.Nullable`1&lt;bool&gt; isDefaultQuotaEnabled, valuetype System.Nullable`1&lt;int64&gt; defaultUserQuotaInKiBs, valuetype System.Nullable`1&lt;int64&gt; defaultGroupQuotaInKiBs, string unixPermissions, valuetype System.Nullable`1&lt;bool&gt; isCoolAccessEnabled, valuetype System.Nullable`1&lt;int32&gt; coolnessPeriod, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; coolAccessRetrievalPolicy, valuetype System.Nullable`1&lt;bool&gt; isSnapshotDirectoryVisible, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; smbAccessBasedEnumeration, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; smbNonBrowsable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumePatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel},System.Nullable{System.Int64},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule},System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Single},Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy},System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration},System.Nullable{Azure.ResourceManager.NetApp.Models.SmbNonBrowsable})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumePatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional serviceLevel As Nullable(Of NetAppFileServiceLevel) = Nothing, Optional usageThreshold As Nullable(Of Long) = Nothing, Optional exportRules As IEnumerable(Of NetAppVolumeExportPolicyRule) = Nothing, Optional protocolTypes As IEnumerable(Of String) = Nothing, Optional throughputMibps As Nullable(Of Single) = Nothing, Optional dataProtection As NetAppVolumePatchDataProtection = Nothing, Optional isDefaultQuotaEnabled As Nullable(Of Boolean) = Nothing, Optional defaultUserQuotaInKiBs As Nullable(Of Long) = Nothing, Optional defaultGroupQuotaInKiBs As Nullable(Of Long) = Nothing, Optional unixPermissions As String = Nothing, Optional isCoolAccessEnabled As Nullable(Of Boolean) = Nothing, Optional coolnessPeriod As Nullable(Of Integer) = Nothing, Optional coolAccessRetrievalPolicy As Nullable(Of CoolAccessRetrievalPolicy) = Nothing, Optional isSnapshotDirectoryVisible As Nullable(Of Boolean) = Nothing, Optional smbAccessBasedEnumeration As Nullable(Of SmbAccessBasedEnumeration) = Nothing, Optional smbNonBrowsable As Nullable(Of SmbNonBrowsable) = Nothing) As NetAppVolumePatch" />
      <MemberSignature Language="F#" Value="static member NetAppVolumePatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt; * Nullable&lt;int64&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt; * seq&lt;string&gt; * Nullable&lt;single&gt; * Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; * string * Nullable&lt;bool&gt; * Nullable&lt;int&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt; * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumePatch (id, name, resourceType, systemData, tags, location, serviceLevel, usageThreshold, exportRules, protocolTypes, throughputMibps, dataProtection, isDefaultQuotaEnabled, defaultUserQuotaInKiBs, defaultGroupQuotaInKiBs, unixPermissions, isCoolAccessEnabled, coolnessPeriod, coolAccessRetrievalPolicy, isSnapshotDirectoryVisible, smbAccessBasedEnumeration, smbNonBrowsable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumePatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="name" Type="System.String" Index="1" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" Index="2" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" Index="3" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" Index="4" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" Index="5" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="serviceLevel" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppFileServiceLevel&gt;" Index="6" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="usageThreshold" Type="System.Nullable&lt;System.Int64&gt;" Index="7" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="exportRules" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeExportPolicyRule&gt;" Index="8" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="protocolTypes" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="9" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="throughputMibps" Type="System.Nullable&lt;System.Single&gt;" Index="10" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="dataProtection" Type="Azure.ResourceManager.NetApp.Models.NetAppVolumePatchDataProtection" Index="11" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isDefaultQuotaEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="12" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="defaultUserQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="13" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="defaultGroupQuotaInKiBs" Type="System.Nullable&lt;System.Int64&gt;" Index="14" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="unixPermissions" Type="System.String" Index="15" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isCoolAccessEnabled" Type="System.Nullable&lt;System.Boolean&gt;" Index="16" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="coolnessPeriod" Type="System.Nullable&lt;System.Int32&gt;" Index="17" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="coolAccessRetrievalPolicy" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.CoolAccessRetrievalPolicy&gt;" Index="18" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="isSnapshotDirectoryVisible" Type="System.Nullable&lt;System.Boolean&gt;" Index="19" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="smbAccessBasedEnumeration" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbAccessBasedEnumeration&gt;" Index="20" FrameworkAlternate="azure-dotnet" />
        <Parameter Name="smbNonBrowsable" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.SmbNonBrowsable&gt;" Index="21" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="serviceLevel"> The service level of the file system. </param>
        <param name="usageThreshold"> Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional basis. Specified in bytes. </param>
        <param name="exportRules"> Set of export policy rules. </param>
        <param name="protocolTypes"> Set of protocol types, default NFSv3, CIFS for SMB protocol. </param>
        <param name="throughputMibps"> Maximum throughput in MiB/s that can be achieved by this volume and this will be accepted as input only for manual qosType volume. </param>
        <param name="dataProtection"> DataProtection type volumes include an object containing details of the replication. </param>
        <param name="isDefaultQuotaEnabled"> Specifies if default quota is enabled for the volume. </param>
        <param name="defaultUserQuotaInKiBs"> Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies . </param>
        <param name="defaultGroupQuotaInKiBs"> Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies. </param>
        <param name="unixPermissions"> UNIX permissions for NFS volume accepted in octal 4 digit format. First digit selects the set user ID(4), set group ID (2) and sticky (1) attributes. Second digit selects permission for the owner of the file: read (4), write (2) and execute (1). Third selects permissions for other users in the same group. the fourth for other users not in the group. 0755 - gives read/write/execute permissions to owner and read/execute to group and other users. </param>
        <param name="isCoolAccessEnabled"> Specifies whether Cool Access(tiering) is enabled for the volume. </param>
        <param name="coolnessPeriod"> Specifies the number of days after which data that is not accessed by clients will be tiered. </param>
        <param name="coolAccessRetrievalPolicy">
            coolAccessRetrievalPolicy determines the data retrieval behavior from the cool tier to standard storage based on the read pattern for cool access enabled volumes. The possible values for this field are:
             Default - Data will be pulled from cool tier to standard storage on random reads. This policy is the default.
             OnRead - All client-driven data read is pulled from cool tier to standard storage on both sequential and random reads.
             Never - No client-driven data is pulled from cool tier to standard storage.
            </param>
        <param name="isSnapshotDirectoryVisible"> If enabled (true) the volume will contain a read-only snapshot directory which provides access to each of the volume's snapshots. </param>
        <param name="smbAccessBasedEnumeration"> Enables access-based enumeration share property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <param name="smbNonBrowsable"> Enables non-browsable property for SMB Shares. Only applicable for SMB/DualProtocol volume. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumePatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeQuotaRuleData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeQuotaRuleData NetAppVolumeQuotaRuleData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.NetApp.Models.NetAppProvisioningState? provisioningState = default, long? quotaSizeInKiBs = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType? quotaType = default, string quotaTarget = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppVolumeQuotaRuleData NetAppVolumeQuotaRuleData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppProvisioningState&gt; provisioningState, valuetype System.Nullable`1&lt;int64&gt; quotaSizeInKiBs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType&gt; quotaType, string quotaTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeQuotaRuleData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppProvisioningState},System.Nullable{System.Int64},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeQuotaRuleData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional provisioningState As Nullable(Of NetAppProvisioningState) = Nothing, Optional quotaSizeInKiBs As Nullable(Of Long) = Nothing, Optional quotaType As Nullable(Of NetAppVolumeQuotaType) = Nothing, Optional quotaTarget As String = Nothing) As NetAppVolumeQuotaRuleData" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeQuotaRuleData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppProvisioningState&gt; * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType&gt; * string -&gt; Azure.ResourceManager.NetApp.NetAppVolumeQuotaRuleData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeQuotaRuleData (id, name, resourceType, systemData, tags, location, provisioningState, quotaSizeInKiBs, quotaType, quotaTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppVolumeQuotaRuleData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="provisioningState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppProvisioningState&gt;" />
        <Parameter Name="quotaSizeInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="quotaType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType&gt;" />
        <Parameter Name="quotaTarget" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="provisioningState"> Gets the status of the VolumeQuotaRule at the time the operation was called. </param>
        <param name="quotaSizeInKiBs"> Size of quota. </param>
        <param name="quotaType"> Type of quota. </param>
        <param name="quotaTarget"> UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name='user-name' get sid&gt;. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeQuotaRuleData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeQuotaRuleData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeQuotaRulePatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaRulePatch NetAppVolumeQuotaRulePatch (System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.ResourceManager.NetApp.Models.NetAppProvisioningState? provisioningState = default, long? quotaSizeInKiBs = default, Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType? quotaType = default, string quotaTarget = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaRulePatch NetAppVolumeQuotaRulePatch(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppProvisioningState&gt; provisioningState, valuetype System.Nullable`1&lt;int64&gt; quotaSizeInKiBs, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType&gt; quotaType, string quotaTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeQuotaRulePatch(System.Collections.Generic.IDictionary{System.String,System.String},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppProvisioningState},System.Nullable{System.Int64},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeQuotaRulePatch (Optional tags As IDictionary(Of String, String) = Nothing, Optional provisioningState As Nullable(Of NetAppProvisioningState) = Nothing, Optional quotaSizeInKiBs As Nullable(Of Long) = Nothing, Optional quotaType As Nullable(Of NetAppVolumeQuotaType) = Nothing, Optional quotaTarget As String = Nothing) As NetAppVolumeQuotaRulePatch" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeQuotaRulePatch : System.Collections.Generic.IDictionary&lt;string, string&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppProvisioningState&gt; * Nullable&lt;int64&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType&gt; * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaRulePatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeQuotaRulePatch (tags, provisioningState, quotaSizeInKiBs, quotaType, quotaTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaRulePatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="provisioningState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppProvisioningState&gt;" />
        <Parameter Name="quotaSizeInKiBs" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="quotaType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaType&gt;" />
        <Parameter Name="quotaTarget" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tags"> Resource tags. </param>
        <param name="provisioningState"> Gets the status of the VolumeQuotaRule at the time the operation was called. </param>
        <param name="quotaSizeInKiBs"> Size of quota. </param>
        <param name="quotaType"> Type of quota. </param>
        <param name="quotaTarget"> UserID/GroupID/SID based on the quota target type. UserID and groupID can be found by running ‘id’ or ‘getent’ command for the user or group and SID can be found by running &lt;wmic useraccount where name='user-name' get sid&gt;. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaRulePatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeQuotaRulePatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeRelocationProperties">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeRelocationProperties NetAppVolumeRelocationProperties (bool? isRelocationRequested = default, bool? isReadyToBeFinalized = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeRelocationProperties NetAppVolumeRelocationProperties(valuetype System.Nullable`1&lt;bool&gt; isRelocationRequested, valuetype System.Nullable`1&lt;bool&gt; isReadyToBeFinalized) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeRelocationProperties(System.Nullable{System.Boolean},System.Nullable{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeRelocationProperties (Optional isRelocationRequested As Nullable(Of Boolean) = Nothing, Optional isReadyToBeFinalized As Nullable(Of Boolean) = Nothing) As NetAppVolumeRelocationProperties" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeRelocationProperties : Nullable&lt;bool&gt; * Nullable&lt;bool&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeRelocationProperties" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeRelocationProperties (isRelocationRequested, isReadyToBeFinalized)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeRelocationProperties</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isRelocationRequested" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="isReadyToBeFinalized" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="isRelocationRequested"> Has relocation been requested for this volume. </param>
        <param name="isReadyToBeFinalized"> Has relocation finished and is ready to be cleaned up. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeRelocationProperties" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeRelocationProperties" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeReplication">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeReplication NetAppVolumeReplication (Azure.ResourceManager.NetApp.Models.NetAppEndpointType? endpointType = default, Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule? replicationSchedule = default, Azure.Core.ResourceIdentifier remoteVolumeResourceId = default, string remoteVolumeRegion = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeReplication NetAppVolumeReplication(valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt; endpointType, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt; replicationSchedule, class Azure.Core.ResourceIdentifier remoteVolumeResourceId, string remoteVolumeRegion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeReplication(System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppEndpointType},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule},Azure.Core.ResourceIdentifier,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeReplication (Optional endpointType As Nullable(Of NetAppEndpointType) = Nothing, Optional replicationSchedule As Nullable(Of NetAppReplicationSchedule) = Nothing, Optional remoteVolumeResourceId As ResourceIdentifier = Nothing, Optional remoteVolumeRegion As String = Nothing) As NetAppVolumeReplication" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeReplication : Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt; * Azure.Core.ResourceIdentifier * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeReplication" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeReplication (endpointType, replicationSchedule, remoteVolumeResourceId, remoteVolumeRegion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeReplication</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpointType" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppEndpointType&gt;" />
        <Parameter Name="replicationSchedule" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppReplicationSchedule&gt;" />
        <Parameter Name="remoteVolumeResourceId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="remoteVolumeRegion" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="endpointType"> Indicates whether the local volume is the source or destination for the Volume Replication. </param>
        <param name="replicationSchedule"> Schedule. </param>
        <param name="remoteVolumeResourceId"> The resource ID of the remote volume. </param>
        <param name="remoteVolumeRegion"> The remote region for the other end of the Volume Replication. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeReplication" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeReplication" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeReplicationStatus">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetAppVolumeReplicationStatus NetAppVolumeReplicationStatus (bool? isHealthy = default, Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus? relationshipStatus = default, Azure.ResourceManager.NetApp.Models.NetAppMirrorState? mirrorState = default, string totalProgress = default, string errorMessage = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetAppVolumeReplicationStatus NetAppVolumeReplicationStatus(valuetype System.Nullable`1&lt;bool&gt; isHealthy, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; relationshipStatus, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; mirrorState, string totalProgress, string errorMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeReplicationStatus(System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus},System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppMirrorState},System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeReplicationStatus (Optional isHealthy As Nullable(Of Boolean) = Nothing, Optional relationshipStatus As Nullable(Of NetAppRelationshipStatus) = Nothing, Optional mirrorState As Nullable(Of NetAppMirrorState) = Nothing, Optional totalProgress As String = Nothing, Optional errorMessage As String = Nothing) As NetAppVolumeReplicationStatus" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeReplicationStatus : Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt; * string * string -&gt; Azure.ResourceManager.NetApp.Models.NetAppVolumeReplicationStatus" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeReplicationStatus (isHealthy, relationshipStatus, mirrorState, totalProgress, errorMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetAppVolumeReplicationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isHealthy" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="relationshipStatus" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppRelationshipStatus&gt;" />
        <Parameter Name="mirrorState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppMirrorState&gt;" />
        <Parameter Name="totalProgress" Type="System.String" />
        <Parameter Name="errorMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="isHealthy"> Replication health check. </param>
        <param name="relationshipStatus"> Status of the mirror relationship. </param>
        <param name="mirrorState"> The status of the replication. </param>
        <param name="totalProgress"> The progress of the replication. </param>
        <param name="errorMessage"> Displays error message if the replication is in an error state. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeReplicationStatus" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetAppVolumeReplicationStatus" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetAppVolumeSnapshotData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.NetAppVolumeSnapshotData NetAppVolumeSnapshotData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, Azure.Core.AzureLocation location = default, string snapshotId = default, DateTimeOffset? created = default, string provisioningState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.NetAppVolumeSnapshotData NetAppVolumeSnapshotData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, valuetype Azure.Core.AzureLocation location, string snapshotId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; created, string provisioningState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeSnapshotData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,Azure.Core.AzureLocation,System.String,System.Nullable{System.DateTimeOffset},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetAppVolumeSnapshotData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional location As AzureLocation = Nothing, Optional snapshotId As String = Nothing, Optional created As Nullable(Of DateTimeOffset) = Nothing, Optional provisioningState As String = Nothing) As NetAppVolumeSnapshotData" />
      <MemberSignature Language="F#" Value="static member NetAppVolumeSnapshotData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * Azure.Core.AzureLocation * string * Nullable&lt;DateTimeOffset&gt; * string -&gt; Azure.ResourceManager.NetApp.NetAppVolumeSnapshotData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetAppVolumeSnapshotData (id, name, resourceType, systemData, location, snapshotId, created, provisioningState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.NetAppVolumeSnapshotData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="snapshotId" Type="System.String" />
        <Parameter Name="created" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="location"> Resource location. </param>
        <param name="snapshotId"> UUID v4 used to identify the Snapshot. </param>
        <param name="created"> The creation date of the snapshot. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeSnapshotData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.NetAppVolumeSnapshotData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NetworkSiblingSet">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NetworkSiblingSet NetworkSiblingSet (string networkSiblingSetId = default, Azure.Core.ResourceIdentifier subnetId = default, string networkSiblingSetStateId = default, Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature? networkFeatures = default, Azure.ResourceManager.NetApp.Models.NetworkSiblingSetProvisioningState? provisioningState = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NicInfo&gt; nicInfoList = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NetworkSiblingSet NetworkSiblingSet(string networkSiblingSetId, class Azure.Core.ResourceIdentifier subnetId, string networkSiblingSetStateId, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; networkFeatures, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.NetworkSiblingSetProvisioningState&gt; provisioningState, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.NicInfo&gt; nicInfoList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetworkSiblingSet(System.String,Azure.Core.ResourceIdentifier,System.String,System.Nullable{Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature},System.Nullable{Azure.ResourceManager.NetApp.Models.NetworkSiblingSetProvisioningState},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.NicInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NetworkSiblingSet (Optional networkSiblingSetId As String = Nothing, Optional subnetId As ResourceIdentifier = Nothing, Optional networkSiblingSetStateId As String = Nothing, Optional networkFeatures As Nullable(Of NetAppNetworkFeature) = Nothing, Optional provisioningState As Nullable(Of NetworkSiblingSetProvisioningState) = Nothing, Optional nicInfoList As IEnumerable(Of NicInfo) = Nothing) As NetworkSiblingSet" />
      <MemberSignature Language="F#" Value="static member NetworkSiblingSet : string * Azure.Core.ResourceIdentifier * string * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt; * Nullable&lt;Azure.ResourceManager.NetApp.Models.NetworkSiblingSetProvisioningState&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.NicInfo&gt; -&gt; Azure.ResourceManager.NetApp.Models.NetworkSiblingSet" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NetworkSiblingSet (networkSiblingSetId, subnetId, networkSiblingSetStateId, networkFeatures, provisioningState, nicInfoList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NetworkSiblingSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="networkSiblingSetId" Type="System.String" />
        <Parameter Name="subnetId" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="networkSiblingSetStateId" Type="System.String" />
        <Parameter Name="networkFeatures" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetAppNetworkFeature&gt;" />
        <Parameter Name="provisioningState" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.NetworkSiblingSetProvisioningState&gt;" />
        <Parameter Name="nicInfoList" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.NicInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="networkSiblingSetId"> Network Sibling Set ID for a group of volumes sharing networking resources in a subnet. </param>
        <param name="subnetId"> The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes. Example /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}. </param>
        <param name="networkSiblingSetStateId"> Network sibling set state Id identifying the current state of the sibling set. </param>
        <param name="networkFeatures"> Network features available to the volume, or current state of update. </param>
        <param name="provisioningState"> Gets the status of the NetworkSiblingSet at the time the operation was called. </param>
        <param name="nicInfoList"> List of NIC information. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NetworkSiblingSet" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NetworkSiblingSet" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NicInfo">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.NicInfo NicInfo (string ipAddress = default, System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt; volumeResourceIds = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.NicInfo NicInfo(string ipAddress, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Core.ResourceIdentifier&gt; volumeResourceIds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NicInfo(System.String,System.Collections.Generic.IEnumerable{Azure.Core.ResourceIdentifier})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NicInfo (Optional ipAddress As String = Nothing, Optional volumeResourceIds As IEnumerable(Of ResourceIdentifier) = Nothing) As NicInfo" />
      <MemberSignature Language="F#" Value="static member NicInfo : string * seq&lt;Azure.Core.ResourceIdentifier&gt; -&gt; Azure.ResourceManager.NetApp.Models.NicInfo" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.NicInfo (ipAddress, volumeResourceIds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.NicInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ipAddress" Type="System.String" />
        <Parameter Name="volumeResourceIds" Type="System.Collections.Generic.IEnumerable&lt;Azure.Core.ResourceIdentifier&gt;" />
      </Parameters>
      <Docs>
        <param name="ipAddress"> ipAddress. </param>
        <param name="volumeResourceIds"> Volume resource Ids. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.NicInfo" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.NicInfo" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionInfoResourceData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.RegionInfoResourceData RegionInfoResourceData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity? storageToNetworkProximity = default, System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt; availabilityZoneMappings = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.RegionInfoResourceData RegionInfoResourceData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity&gt; storageToNetworkProximity, class System.Collections.Generic.IEnumerable`1&lt;class Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt; availabilityZoneMappings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.RegionInfoResourceData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Nullable{Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity},System.Collections.Generic.IEnumerable{Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegionInfoResourceData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional storageToNetworkProximity As Nullable(Of RegionStorageToNetworkProximity) = Nothing, Optional availabilityZoneMappings As IEnumerable(Of AvailabilityZoneMapping) = Nothing) As RegionInfoResourceData" />
      <MemberSignature Language="F#" Value="static member RegionInfoResourceData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * Nullable&lt;Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity&gt; * seq&lt;Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt; -&gt; Azure.ResourceManager.NetApp.RegionInfoResourceData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.RegionInfoResourceData (id, name, resourceType, systemData, storageToNetworkProximity, availabilityZoneMappings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.RegionInfoResourceData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="storageToNetworkProximity" Type="System.Nullable&lt;Azure.ResourceManager.NetApp.Models.RegionStorageToNetworkProximity&gt;" />
        <Parameter Name="availabilityZoneMappings" Type="System.Collections.Generic.IEnumerable&lt;Azure.ResourceManager.NetApp.Models.AvailabilityZoneMapping&gt;" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="storageToNetworkProximity"> Provides storage to network proximity information in the region. </param>
        <param name="availabilityZoneMappings"> Provides logical availability zone mappings for the subscription for a region. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.RegionInfoResourceData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.RegionInfoResourceData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapshotPolicyData">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.SnapshotPolicyData SnapshotPolicyData (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ETag? etag = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule hourlySchedule = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule dailySchedule = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule weeklySchedule = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule monthlySchedule = default, bool? isEnabled = default, string provisioningState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.SnapshotPolicyData SnapshotPolicyData(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, valuetype System.Nullable`1&lt;valuetype Azure.ETag&gt; etag, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule hourlySchedule, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule dailySchedule, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule weeklySchedule, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule monthlySchedule, valuetype System.Nullable`1&lt;bool&gt; isEnabled, string provisioningState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.SnapshotPolicyData(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,System.Nullable{Azure.ETag},Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule,Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule,Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule,Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SnapshotPolicyData (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional etag As Nullable(Of ETag) = Nothing, Optional hourlySchedule As SnapshotPolicyHourlySchedule = Nothing, Optional dailySchedule As SnapshotPolicyDailySchedule = Nothing, Optional weeklySchedule As SnapshotPolicyWeeklySchedule = Nothing, Optional monthlySchedule As SnapshotPolicyMonthlySchedule = Nothing, Optional isEnabled As Nullable(Of Boolean) = Nothing, Optional provisioningState As String = Nothing) As SnapshotPolicyData" />
      <MemberSignature Language="F#" Value="static member SnapshotPolicyData : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Nullable&lt;Azure.ETag&gt; * Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule * Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule * Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule * Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule * Nullable&lt;bool&gt; * string -&gt; Azure.ResourceManager.NetApp.SnapshotPolicyData" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.SnapshotPolicyData (id, name, resourceType, systemData, tags, location, etag, hourlySchedule, dailySchedule, weeklySchedule, monthlySchedule, isEnabled, provisioningState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.SnapshotPolicyData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="etag" Type="System.Nullable&lt;Azure.ETag&gt;" />
        <Parameter Name="hourlySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule" />
        <Parameter Name="dailySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule" />
        <Parameter Name="weeklySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule" />
        <Parameter Name="monthlySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule" />
        <Parameter Name="isEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        <param name="hourlySchedule"> Schedule for hourly snapshots. </param>
        <param name="dailySchedule"> Schedule for daily snapshots. </param>
        <param name="weeklySchedule"> Schedule for weekly snapshots. </param>
        <param name="monthlySchedule"> Schedule for monthly snapshots. </param>
        <param name="isEnabled"> The property to decide policy is enabled or not. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.SnapshotPolicyData" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.SnapshotPolicyData" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SnapshotPolicyPatch">
      <MemberSignature Language="C#" Value="public static Azure.ResourceManager.NetApp.Models.SnapshotPolicyPatch SnapshotPolicyPatch (Azure.Core.ResourceIdentifier id = default, string name = default, Azure.Core.ResourceType resourceType = default, Azure.ResourceManager.Models.SystemData systemData = default, System.Collections.Generic.IDictionary&lt;string,string&gt; tags = default, Azure.Core.AzureLocation location = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule hourlySchedule = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule dailySchedule = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule weeklySchedule = default, Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule monthlySchedule = default, bool? isEnabled = default, string provisioningState = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.ResourceManager.NetApp.Models.SnapshotPolicyPatch SnapshotPolicyPatch(class Azure.Core.ResourceIdentifier id, string name, valuetype Azure.Core.ResourceType resourceType, class Azure.ResourceManager.Models.SystemData systemData, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype Azure.Core.AzureLocation location, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule hourlySchedule, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule dailySchedule, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule weeklySchedule, class Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule monthlySchedule, valuetype System.Nullable`1&lt;bool&gt; isEnabled, string provisioningState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.SnapshotPolicyPatch(Azure.Core.ResourceIdentifier,System.String,Azure.Core.ResourceType,Azure.ResourceManager.Models.SystemData,System.Collections.Generic.IDictionary{System.String,System.String},Azure.Core.AzureLocation,Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule,Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule,Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule,Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule,System.Nullable{System.Boolean},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SnapshotPolicyPatch (Optional id As ResourceIdentifier = Nothing, Optional name As String = Nothing, Optional resourceType As ResourceType = Nothing, Optional systemData As SystemData = Nothing, Optional tags As IDictionary(Of String, String) = Nothing, Optional location As AzureLocation = Nothing, Optional hourlySchedule As SnapshotPolicyHourlySchedule = Nothing, Optional dailySchedule As SnapshotPolicyDailySchedule = Nothing, Optional weeklySchedule As SnapshotPolicyWeeklySchedule = Nothing, Optional monthlySchedule As SnapshotPolicyMonthlySchedule = Nothing, Optional isEnabled As Nullable(Of Boolean) = Nothing, Optional provisioningState As String = Nothing) As SnapshotPolicyPatch" />
      <MemberSignature Language="F#" Value="static member SnapshotPolicyPatch : Azure.Core.ResourceIdentifier * string * Azure.Core.ResourceType * Azure.ResourceManager.Models.SystemData * System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Core.AzureLocation * Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule * Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule * Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule * Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule * Nullable&lt;bool&gt; * string -&gt; Azure.ResourceManager.NetApp.Models.SnapshotPolicyPatch" Usage="Azure.ResourceManager.NetApp.Models.ArmNetAppModelFactory.SnapshotPolicyPatch (id, name, resourceType, systemData, tags, location, hourlySchedule, dailySchedule, weeklySchedule, monthlySchedule, isEnabled, provisioningState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.NetApp</AssemblyName>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.NetApp.Models.SnapshotPolicyPatch</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resourceType" Type="Azure.Core.ResourceType" />
        <Parameter Name="systemData" Type="Azure.ResourceManager.Models.SystemData" />
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="hourlySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyHourlySchedule" />
        <Parameter Name="dailySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyDailySchedule" />
        <Parameter Name="weeklySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyWeeklySchedule" />
        <Parameter Name="monthlySchedule" Type="Azure.ResourceManager.NetApp.Models.SnapshotPolicyMonthlySchedule" />
        <Parameter Name="isEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="provisioningState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id"> The id. </param>
        <param name="name"> The name. </param>
        <param name="resourceType"> The resourceType. </param>
        <param name="systemData"> The systemData. </param>
        <param name="tags"> The tags. </param>
        <param name="location"> The location. </param>
        <param name="hourlySchedule"> Schedule for hourly snapshots. </param>
        <param name="dailySchedule"> Schedule for daily snapshots. </param>
        <param name="weeklySchedule"> Schedule for weekly snapshots. </param>
        <param name="monthlySchedule"> Schedule for monthly snapshots. </param>
        <param name="isEnabled"> The property to decide policy is enabled or not. </param>
        <param name="provisioningState"> Azure lifecycle management. </param>
        <summary> Initializes a new instance of <see cref="T:Azure.ResourceManager.NetApp.Models.SnapshotPolicyPatch" />. </summary>
        <returns> A new <see cref="T:Azure.ResourceManager.NetApp.Models.SnapshotPolicyPatch" /> instance for mocking. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
