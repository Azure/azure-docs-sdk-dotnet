<Type Name="MockableCostManagementArmClient" FullName="Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient">
  <TypeSignature Language="C#" Value="public class MockableCostManagementArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableCostManagementArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableCostManagementArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableCostManagementArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableCostManagementArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCostManagementNameAvailabilityByScopeScheduledAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt; CheckCostManagementNameAvailabilityByScopeScheduledAction (Azure.Core.ResourceIdentifier scope, Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt; CheckCostManagementNameAvailabilityByScopeScheduledAction(class Azure.Core.ResourceIdentifier scope, class Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.CheckCostManagementNameAvailabilityByScopeScheduledAction(Azure.Core.ResourceIdentifier,Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckCostManagementNameAvailabilityByScopeScheduledAction (scope As ResourceIdentifier, content As CostManagementNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CostManagementNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckCostManagementNameAvailabilityByScopeScheduledAction : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;&#xA;override this.CheckCostManagementNameAvailabilityByScopeScheduledAction : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;" Usage="mockableCostManagementArmClient.CheckCostManagementNameAvailabilityByScopeScheduledAction (scope, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="content" Type="Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="content"> Scheduled action to be created or updated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks availability and correctness of the name for a scheduled action within the given scope.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/checkNameAvailability</description></item><item><term>Operation Id</term><description>ScheduledActions_CheckNameAvailabilityByScope</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckCostManagementNameAvailabilityByScopeScheduledActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;&gt; CheckCostManagementNameAvailabilityByScopeScheduledActionAsync (Azure.Core.ResourceIdentifier scope, Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;&gt; CheckCostManagementNameAvailabilityByScopeScheduledActionAsync(class Azure.Core.ResourceIdentifier scope, class Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.CheckCostManagementNameAvailabilityByScopeScheduledActionAsync(Azure.Core.ResourceIdentifier,Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckCostManagementNameAvailabilityByScopeScheduledActionAsync (scope As ResourceIdentifier, content As CostManagementNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CostManagementNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckCostManagementNameAvailabilityByScopeScheduledActionAsync : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;&gt;&#xA;override this.CheckCostManagementNameAvailabilityByScopeScheduledActionAsync : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;&gt;" Usage="mockableCostManagementArmClient.CheckCostManagementNameAvailabilityByScopeScheduledActionAsync (scope, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="content" Type="Azure.ResourceManager.CostManagement.Models.CostManagementNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="content"> Scheduled action to be created or updated. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks availability and correctness of the name for a scheduled action within the given scope.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/checkNameAvailability</description></item><item><term>Operation Id</term><description>ScheduledActions_CheckNameAvailabilityByScope</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllCostManagementViews">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.CostManagementViewsCollection GetAllCostManagementViews (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.CostManagementViewsCollection GetAllCostManagementViews(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetAllCostManagementViews(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllCostManagementViews (scope As ResourceIdentifier) As CostManagementViewsCollection" />
      <MemberSignature Language="F#" Value="abstract member GetAllCostManagementViews : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementViewsCollection&#xA;override this.GetAllCostManagementViews : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementViewsCollection" Usage="mockableCostManagementArmClient.GetAllCostManagementViews scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.CostManagementViewsCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of CostManagementViewsResources in the ArmClient. </summary>
        <returns> An object representing collection of CostManagementViewsResources and their operations over a CostManagementViewsResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBenefitRecommendations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt; GetBenefitRecommendations (Azure.Core.ResourceIdentifier scope, string filter = default, string orderby = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt; GetBenefitRecommendations(class Azure.Core.ResourceIdentifier scope, string filter, string orderby, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetBenefitRecommendations(Azure.Core.ResourceIdentifier,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBenefitRecommendations (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional orderby As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of BenefitRecommendationModel)" />
      <MemberSignature Language="F#" Value="abstract member GetBenefitRecommendations : Azure.Core.ResourceIdentifier * string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt;&#xA;override this.GetBenefitRecommendations : Azure.Core.ResourceIdentifier * string * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt;" Usage="mockableCostManagementArmClient.GetBenefitRecommendations (scope, filter, orderby, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> Can be used to filter benefitRecommendations by: properties/scope with allowed values ['Single', 'Shared'] and default value 'Shared'; and properties/lookBackPeriod with allowed values ['Last7Days', 'Last30Days', 'Last60Days'] and default value 'Last60Days'; properties/term with allowed values ['P1Y', 'P3Y'] and default value 'P3Y'; properties/subscriptionId; properties/resourceGroup. </param>
        <param name="orderby"> May be used to order the recommendations by: properties/armSkuName. For the savings plan, the results are in order by default. There is no need to use this clause. </param>
        <param name="expand"> May be used to expand the properties by: properties/usage, properties/allRecommendationDetails. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List of recommendations for purchasing savings plan.
            <list type="bullet"><item><term>Request Path</term><description>/{billingScope}/providers/Microsoft.CostManagement/benefitRecommendations</description></item><item><term>Operation Id</term><description>BenefitRecommendations_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBenefitRecommendationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt; GetBenefitRecommendationsAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string orderby = default, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt; GetBenefitRecommendationsAsync(class Azure.Core.ResourceIdentifier scope, string filter, string orderby, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetBenefitRecommendationsAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBenefitRecommendationsAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional orderby As String = Nothing, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of BenefitRecommendationModel)" />
      <MemberSignature Language="F#" Value="abstract member GetBenefitRecommendationsAsync : Azure.Core.ResourceIdentifier * string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt;&#xA;override this.GetBenefitRecommendationsAsync : Azure.Core.ResourceIdentifier * string * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt;" Usage="mockableCostManagementArmClient.GetBenefitRecommendationsAsync (scope, filter, orderby, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="orderby" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> Can be used to filter benefitRecommendations by: properties/scope with allowed values ['Single', 'Shared'] and default value 'Shared'; and properties/lookBackPeriod with allowed values ['Last7Days', 'Last30Days', 'Last60Days'] and default value 'Last60Days'; properties/term with allowed values ['P1Y', 'P3Y'] and default value 'P3Y'; properties/subscriptionId; properties/resourceGroup. </param>
        <param name="orderby"> May be used to order the recommendations by: properties/armSkuName. For the savings plan, the results are in order by default. There is no need to use this clause. </param>
        <param name="expand"> May be used to expand the properties by: properties/usage, properties/allRecommendationDetails. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            List of recommendations for purchasing savings plan.
            <list type="bullet"><item><term>Request Path</term><description>/{billingScope}/providers/Microsoft.CostManagement/benefitRecommendations</description></item><item><term>Operation Id</term><description>BenefitRecommendations_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.CostManagement.Models.BenefitRecommendationModel" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementAlert">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt; GetCostManagementAlert (Azure.Core.ResourceIdentifier scope, string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt; GetCostManagementAlert(class Azure.Core.ResourceIdentifier scope, string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementAlert(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementAlert (scope As ResourceIdentifier, alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CostManagementAlertResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementAlert : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;&#xA;override this.GetCostManagementAlert : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;" Usage="mockableCostManagementArmClient.GetCostManagementAlert (scope, alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="alertId"> Alert ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the alert for the scope by alert ID.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description></item><item><term>Operation Id</term><description>Alerts_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="alertId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementAlertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;&gt; GetCostManagementAlertAsync (Azure.Core.ResourceIdentifier scope, string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;&gt; GetCostManagementAlertAsync(class Azure.Core.ResourceIdentifier scope, string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementAlertAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementAlertAsync (scope As ResourceIdentifier, alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CostManagementAlertResource))" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementAlertAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;&gt;&#xA;override this.GetCostManagementAlertAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;&gt;" Usage="mockableCostManagementArmClient.GetCostManagementAlertAsync (scope, alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementAlertResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="alertId"> Alert ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the alert for the scope by alert ID.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description></item><item><term>Operation Id</term><description>Alerts_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="alertId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementAlertResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.CostManagementAlertResource GetCostManagementAlertResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.CostManagementAlertResource GetCostManagementAlertResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementAlertResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementAlertResource (id As ResourceIdentifier) As CostManagementAlertResource" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementAlertResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementAlertResource&#xA;override this.GetCostManagementAlertResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementAlertResource" Usage="mockableCostManagementArmClient.GetCostManagementAlertResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.CostManagementAlertResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementAlertResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.CostManagement.CostManagementAlertResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementAlertResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementAlertResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementAlerts">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.CostManagementAlertCollection GetCostManagementAlerts (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.CostManagementAlertCollection GetCostManagementAlerts(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementAlerts(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementAlerts (scope As ResourceIdentifier) As CostManagementAlertCollection" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementAlerts : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementAlertCollection&#xA;override this.GetCostManagementAlerts : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementAlertCollection" Usage="mockableCostManagementArmClient.GetCostManagementAlerts scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.CostManagementAlertCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of CostManagementAlertResources in the ArmClient. </summary>
        <returns> An object representing collection of CostManagementAlertResources and their operations over a CostManagementAlertResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementExport">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt; GetCostManagementExport (Azure.Core.ResourceIdentifier scope, string exportName, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.CostManagementExportResource&gt; GetCostManagementExport(class Azure.Core.ResourceIdentifier scope, string exportName, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementExport(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementExport (scope As ResourceIdentifier, exportName As String, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CostManagementExportResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementExport : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;&#xA;override this.GetCostManagementExport : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;" Usage="mockableCostManagementArmClient.GetCostManagementExport (scope, exportName, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="exportName" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="exportName"> Export Name. </param>
        <param name="expand"> May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to get the export for the defined scope by export name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/exports/{exportName}</description></item><item><term>Operation Id</term><description>Exports_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exportName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exportName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementExportAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;&gt; GetCostManagementExportAsync (Azure.Core.ResourceIdentifier scope, string exportName, string expand = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;&gt; GetCostManagementExportAsync(class Azure.Core.ResourceIdentifier scope, string exportName, string expand, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementExportAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementExportAsync (scope As ResourceIdentifier, exportName As String, Optional expand As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CostManagementExportResource))" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementExportAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;&gt;&#xA;override this.GetCostManagementExportAsync : Azure.Core.ResourceIdentifier * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;&gt;" Usage="mockableCostManagementArmClient.GetCostManagementExportAsync (scope, exportName, expand, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementExportResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="exportName" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="exportName"> Export Name. </param>
        <param name="expand"> May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to get the export for the defined scope by export name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/exports/{exportName}</description></item><item><term>Operation Id</term><description>Exports_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exportName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exportName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementExportResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.CostManagementExportResource GetCostManagementExportResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.CostManagementExportResource GetCostManagementExportResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementExportResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementExportResource (id As ResourceIdentifier) As CostManagementExportResource" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementExportResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementExportResource&#xA;override this.GetCostManagementExportResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementExportResource" Usage="mockableCostManagementArmClient.GetCostManagementExportResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.CostManagementExportResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementExportResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.CostManagement.CostManagementExportResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementExportResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementExportResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementExports">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.CostManagementExportCollection GetCostManagementExports (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.CostManagementExportCollection GetCostManagementExports(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementExports(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementExports (scope As ResourceIdentifier) As CostManagementExportCollection" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementExports : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementExportCollection&#xA;override this.GetCostManagementExports : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementExportCollection" Usage="mockableCostManagementArmClient.GetCostManagementExports scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.CostManagementExportCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of CostManagementExportResources in the ArmClient. </summary>
        <returns> An object representing collection of CostManagementExportResources and their operations over a CostManagementExportResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementViews">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt; GetCostManagementViews (Azure.Core.ResourceIdentifier scope, string viewName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt; GetCostManagementViews(class Azure.Core.ResourceIdentifier scope, string viewName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementViews(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementViews (scope As ResourceIdentifier, viewName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CostManagementViewsResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementViews : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;&#xA;override this.GetCostManagementViews : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;" Usage="mockableCostManagementArmClient.GetCostManagementViews (scope, viewName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="viewName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="viewName"> View name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the view for the defined scope by view name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/views/{viewName}</description></item><item><term>Operation Id</term><description>Views_GetByScope</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="viewName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementViewsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;&gt; GetCostManagementViewsAsync (Azure.Core.ResourceIdentifier scope, string viewName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;&gt; GetCostManagementViewsAsync(class Azure.Core.ResourceIdentifier scope, string viewName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementViewsAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementViewsAsync (scope As ResourceIdentifier, viewName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CostManagementViewsResource))" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementViewsAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;&gt;&#xA;override this.GetCostManagementViewsAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;&gt;" Usage="mockableCostManagementArmClient.GetCostManagementViewsAsync (scope, viewName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.CostManagementViewsResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="viewName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="viewName"> View name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the view for the defined scope by view name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/views/{viewName}</description></item><item><term>Operation Id</term><description>Views_GetByScope</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="viewName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="viewName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCostManagementViewsResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.CostManagementViewsResource GetCostManagementViewsResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.CostManagementViewsResource GetCostManagementViewsResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetCostManagementViewsResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCostManagementViewsResource (id As ResourceIdentifier) As CostManagementViewsResource" />
      <MemberSignature Language="F#" Value="abstract member GetCostManagementViewsResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementViewsResource&#xA;override this.GetCostManagementViewsResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.CostManagementViewsResource" Usage="mockableCostManagementArmClient.GetCostManagementViewsResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.CostManagementViewsResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementViewsResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.CostManagement.CostManagementViewsResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementViewsResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.CostManagement.CostManagementViewsResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDimensions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt; GetDimensions (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, string skiptoken = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt; GetDimensions(class Azure.Core.ResourceIdentifier scope, string filter, string expand, string skiptoken, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetDimensions(Azure.Core.ResourceIdentifier,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDimensions (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional skiptoken As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of CostManagementDimension)" />
      <MemberSignature Language="F#" Value="abstract member GetDimensions : Azure.Core.ResourceIdentifier * string * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt;&#xA;override this.GetDimensions : Azure.Core.ResourceIdentifier * string * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt;" Usage="mockableCostManagementArmClient.GetDimensions (scope, filter, expand, skiptoken, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> May be used to filter dimensions by properties/category, properties/usageStart, properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'. </param>
        <param name="expand"> May be used to expand the properties/data within a dimension category. By default, data is not included when listing dimensions. </param>
        <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        <param name="top"> May be used to limit the number of results to the most recent N dimension data. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the dimensions by the defined scope.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/dimensions</description></item><item><term>Operation Id</term><description>Dimensions_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.CostManagement.Models.CostManagementDimension" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDimensionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt; GetDimensionsAsync (Azure.Core.ResourceIdentifier scope, string filter = default, string expand = default, string skiptoken = default, int? top = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt; GetDimensionsAsync(class Azure.Core.ResourceIdentifier scope, string filter, string expand, string skiptoken, valuetype System.Nullable`1&lt;int32&gt; top, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetDimensionsAsync(Azure.Core.ResourceIdentifier,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDimensionsAsync (scope As ResourceIdentifier, Optional filter As String = Nothing, Optional expand As String = Nothing, Optional skiptoken As String = Nothing, Optional top As Nullable(Of Integer) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of CostManagementDimension)" />
      <MemberSignature Language="F#" Value="abstract member GetDimensionsAsync : Azure.Core.ResourceIdentifier * string * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt;&#xA;override this.GetDimensionsAsync : Azure.Core.ResourceIdentifier * string * string * string * Nullable&lt;int&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt;" Usage="mockableCostManagementArmClient.GetDimensionsAsync (scope, filter, expand, skiptoken, top, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.CostManagement.Models.CostManagementDimension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="expand" Type="System.String" />
        <Parameter Name="skiptoken" Type="System.String" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="filter"> May be used to filter dimensions by properties/category, properties/usageStart, properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'. </param>
        <param name="expand"> May be used to expand the properties/data within a dimension category. By default, data is not included when listing dimensions. </param>
        <param name="skiptoken"> Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. </param>
        <param name="top"> May be used to limit the number of results to the most recent N dimension data. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the dimensions by the defined scope.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/dimensions</description></item><item><term>Operation Id</term><description>Dimensions_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.CostManagement.Models.CostManagementDimension" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledAction">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt; GetScheduledAction (Azure.Core.ResourceIdentifier scope, string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.ScheduledActionResource&gt; GetScheduledAction(class Azure.Core.ResourceIdentifier scope, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetScheduledAction(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledAction (scope As ResourceIdentifier, name As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ScheduledActionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledAction : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;&#xA;override this.GetScheduledAction : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;" Usage="mockableCostManagementArmClient.GetScheduledAction (scope, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="name"> Scheduled action name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the shared scheduled action from the given scope by name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}</description></item><item><term>Operation Id</term><description>ScheduledActions_GetByScope</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledActionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;&gt; GetScheduledActionAsync (Azure.Core.ResourceIdentifier scope, string name, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;&gt; GetScheduledActionAsync(class Azure.Core.ResourceIdentifier scope, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetScheduledActionAsync(Azure.Core.ResourceIdentifier,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledActionAsync (scope As ResourceIdentifier, name As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ScheduledActionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledActionAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;&gt;&#xA;override this.GetScheduledActionAsync : Azure.Core.ResourceIdentifier * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;&gt;" Usage="mockableCostManagementArmClient.GetScheduledActionAsync (scope, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.ScheduledActionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="name"> Scheduled action name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the shared scheduled action from the given scope by name.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}</description></item><item><term>Operation Id</term><description>ScheduledActions_GetByScope</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledActionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.ScheduledActionResource GetScheduledActionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.ScheduledActionResource GetScheduledActionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetScheduledActionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledActionResource (id As ResourceIdentifier) As ScheduledActionResource" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledActionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.ScheduledActionResource&#xA;override this.GetScheduledActionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.ScheduledActionResource" Usage="mockableCostManagementArmClient.GetScheduledActionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.ScheduledActionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.CostManagement.ScheduledActionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.CostManagement.ScheduledActionResource.CreateResourceIdentifier(System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.CostManagement.ScheduledActionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.CostManagement.ScheduledActionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledActions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.ScheduledActionCollection GetScheduledActions (Azure.Core.ResourceIdentifier scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.ScheduledActionCollection GetScheduledActions(class Azure.Core.ResourceIdentifier scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetScheduledActions(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledActions (scope As ResourceIdentifier) As ScheduledActionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledActions : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.ScheduledActionCollection&#xA;override this.GetScheduledActions : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.ScheduledActionCollection" Usage="mockableCostManagementArmClient.GetScheduledActions scope" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.ScheduledActionCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <summary> Gets a collection of ScheduledActionResources in the ArmClient. </summary>
        <returns> An object representing collection of ScheduledActionResources and their operations over a ScheduledActionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTenantScheduledActionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.TenantScheduledActionResource GetTenantScheduledActionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.TenantScheduledActionResource GetTenantScheduledActionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetTenantScheduledActionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantScheduledActionResource (id As ResourceIdentifier) As TenantScheduledActionResource" />
      <MemberSignature Language="F#" Value="abstract member GetTenantScheduledActionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.TenantScheduledActionResource&#xA;override this.GetTenantScheduledActionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.TenantScheduledActionResource" Usage="mockableCostManagementArmClient.GetTenantScheduledActionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.TenantScheduledActionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.CostManagement.TenantScheduledActionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.CostManagement.TenantScheduledActionResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.CostManagement.TenantScheduledActionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.CostManagement.TenantScheduledActionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTenantsCostManagementViewsResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource GetTenantsCostManagementViewsResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource GetTenantsCostManagementViewsResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.GetTenantsCostManagementViewsResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTenantsCostManagementViewsResource (id As ResourceIdentifier) As TenantsCostManagementViewsResource" />
      <MemberSignature Language="F#" Value="abstract member GetTenantsCostManagementViewsResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource&#xA;override this.GetTenantsCostManagementViewsResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource" Usage="mockableCostManagementArmClient.GetTenantsCostManagementViewsResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource.CreateResourceIdentifier(System.String)" /> to create a <see cref="T:Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.CostManagement.TenantsCostManagementViewsResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsageForecast">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt; UsageForecast (Azure.Core.ResourceIdentifier scope, Azure.ResourceManager.CostManagement.Models.ForecastDefinition forecastDefinition, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.Models.ForecastResult&gt; UsageForecast(class Azure.Core.ResourceIdentifier scope, class Azure.ResourceManager.CostManagement.Models.ForecastDefinition forecastDefinition, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.UsageForecast(Azure.Core.ResourceIdentifier,Azure.ResourceManager.CostManagement.Models.ForecastDefinition,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsageForecast (scope As ResourceIdentifier, forecastDefinition As ForecastDefinition, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ForecastResult)" />
      <MemberSignature Language="F#" Value="abstract member UsageForecast : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.ForecastDefinition * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;&#xA;override this.UsageForecast : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.ForecastDefinition * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;" Usage="mockableCostManagementArmClient.UsageForecast (scope, forecastDefinition, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="forecastDefinition" Type="Azure.ResourceManager.CostManagement.Models.ForecastDefinition" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="forecastDefinition"> Parameters supplied to the CreateOrUpdate Forecast Config operation. </param>
        <param name="filter"> May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the forecast charges for scope defined.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/forecast</description></item><item><term>Operation Id</term><description>Forecast_Usage</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> or <paramref name="forecastDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UsageForecastAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;&gt; UsageForecastAsync (Azure.Core.ResourceIdentifier scope, Azure.ResourceManager.CostManagement.Models.ForecastDefinition forecastDefinition, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;&gt; UsageForecastAsync(class Azure.Core.ResourceIdentifier scope, class Azure.ResourceManager.CostManagement.Models.ForecastDefinition forecastDefinition, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.UsageForecastAsync(Azure.Core.ResourceIdentifier,Azure.ResourceManager.CostManagement.Models.ForecastDefinition,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsageForecastAsync (scope As ResourceIdentifier, forecastDefinition As ForecastDefinition, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ForecastResult))" />
      <MemberSignature Language="F#" Value="abstract member UsageForecastAsync : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.ForecastDefinition * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;&gt;&#xA;override this.UsageForecastAsync : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.ForecastDefinition * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;&gt;" Usage="mockableCostManagementArmClient.UsageForecastAsync (scope, forecastDefinition, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.ForecastResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="forecastDefinition" Type="Azure.ResourceManager.CostManagement.Models.ForecastDefinition" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="forecastDefinition"> Parameters supplied to the CreateOrUpdate Forecast Config operation. </param>
        <param name="filter"> May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the forecast charges for scope defined.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/forecast</description></item><item><term>Operation Id</term><description>Forecast_Usage</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> or <paramref name="forecastDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UsageQuery">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt; UsageQuery (Azure.Core.ResourceIdentifier scope, Azure.ResourceManager.CostManagement.Models.QueryDefinition queryDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.Models.QueryResult&gt; UsageQuery(class Azure.Core.ResourceIdentifier scope, class Azure.ResourceManager.CostManagement.Models.QueryDefinition queryDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.UsageQuery(Azure.Core.ResourceIdentifier,Azure.ResourceManager.CostManagement.Models.QueryDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsageQuery (scope As ResourceIdentifier, queryDefinition As QueryDefinition, Optional cancellationToken As CancellationToken = Nothing) As Response(Of QueryResult)" />
      <MemberSignature Language="F#" Value="abstract member UsageQuery : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.QueryDefinition * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;&#xA;override this.UsageQuery : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.QueryDefinition * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;" Usage="mockableCostManagementArmClient.UsageQuery (scope, queryDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="queryDefinition" Type="Azure.ResourceManager.CostManagement.Models.QueryDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="queryDefinition"> Parameters supplied to the CreateOrUpdate Query Config operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query the usage data for scope defined.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/query</description></item><item><term>Operation Id</term><description>Query_Usage</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> or <paramref name="queryDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UsageQueryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;&gt; UsageQueryAsync (Azure.Core.ResourceIdentifier scope, Azure.ResourceManager.CostManagement.Models.QueryDefinition queryDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.CostManagement.Models.QueryResult&gt;&gt; UsageQueryAsync(class Azure.Core.ResourceIdentifier scope, class Azure.ResourceManager.CostManagement.Models.QueryDefinition queryDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.CostManagement.Mocking.MockableCostManagementArmClient.UsageQueryAsync(Azure.Core.ResourceIdentifier,Azure.ResourceManager.CostManagement.Models.QueryDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UsageQueryAsync (scope As ResourceIdentifier, queryDefinition As QueryDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of QueryResult))" />
      <MemberSignature Language="F#" Value="abstract member UsageQueryAsync : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.QueryDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;&gt;&#xA;override this.UsageQueryAsync : Azure.Core.ResourceIdentifier * Azure.ResourceManager.CostManagement.Models.QueryDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;&gt;" Usage="mockableCostManagementArmClient.UsageQueryAsync (scope, queryDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.CostManagement</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.CostManagement.Models.QueryResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="queryDefinition" Type="Azure.ResourceManager.CostManagement.Models.QueryDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope that the resource will apply against. </param>
        <param name="queryDefinition"> Parameters supplied to the CreateOrUpdate Query Config operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Query the usage data for scope defined.
            <list type="bullet"><item><term>Request Path</term><description>/{scope}/providers/Microsoft.CostManagement/query</description></item><item><term>Operation Id</term><description>Query_Usage</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scope" /> or <paramref name="queryDefinition" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
