<Type Name="BlobCheckpointStore" FullName="Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore">
  <TypeSignature Language="C#" Value="public class BlobCheckpointStore : Azure.Messaging.EventHubs.Primitives.CheckpointStore" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlobCheckpointStore extends Azure.Messaging.EventHubs.Primitives.CheckpointStore" />
  <TypeSignature Language="DocId" Value="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore" />
  <TypeSignature Language="VB.NET" Value="Public Class BlobCheckpointStore&#xA;Inherits CheckpointStore" />
  <TypeSignature Language="F#" Value="type BlobCheckpointStore = class&#xA;    inherit CheckpointStore" />
  <AssemblyInfo>
    <AssemblyName>Azure.Messaging.EventHubs.Processor</AssemblyName>
    <AssemblyVersion>5.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.7.1.0</AssemblyVersion>
    <AssemblyVersion>5.7.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Messaging.EventHubs.Primitives.CheckpointStore</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
               Allows interaction with checkpoint and ownership data needed for event processor operation,
               using Azure Storage blobs for persistence.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlobCheckpointStore (Azure.Storage.Blobs.BlobContainerClient blobContainerClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Storage.Blobs.BlobContainerClient blobContainerClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.#ctor(Azure.Storage.Blobs.BlobContainerClient)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (blobContainerClient As BlobContainerClient)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore : Azure.Storage.Blobs.BlobContainerClient -&gt; Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore" Usage="new Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore blobContainerClient" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>5.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.7.1.0</AssemblyVersion>
        <AssemblyVersion>5.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="blobContainerClient" Type="Azure.Storage.Blobs.BlobContainerClient" />
      </Parameters>
      <Docs>
        <param name="blobContainerClient">The client responsible for persisting data to Azure Storage.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore" /> class.
             </summary>
        <remarks>
               The blob container referenced by the <paramref name="blobContainerClient" /> is expected to exist.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClaimOwnershipAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt; ClaimOwnershipAsync (System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt; desiredOwnership, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt; ClaimOwnershipAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt; desiredOwnership, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.ClaimOwnershipAsync(System.Collections.Generic.IEnumerable{Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ClaimOwnershipAsync (desiredOwnership As IEnumerable(Of EventProcessorPartitionOwnership), cancellationToken As CancellationToken) As Task(Of IEnumerable(Of EventProcessorPartitionOwnership))" />
      <MemberSignature Language="F#" Value="override this.ClaimOwnershipAsync : seq&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt;" Usage="blobCheckpointStore.ClaimOwnershipAsync (desiredOwnership, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>5.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.7.1.0</AssemblyVersion>
        <AssemblyVersion>5.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="desiredOwnership" Type="System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="desiredOwnership">The set of partition ownership desired by the event processor instance; this is the set of partitions that it will attempt to request responsibility for processing.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
        <summary>
               Attempts to claim ownership of the specified partitions for processing.  This operation is used by
               load balancing to enable distributing the responsibility for processing partitions for an
               Event Hub and consumer group pairing amongst the active event processors.
             </summary>
        <returns>The set of ownership records for the partitions that were successfully claimed; this is expected to be the <paramref name="desiredOwnership" /> or a subset of those partitions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCheckpointAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint&gt; GetCheckpointAsync (string fullyQualifiedNamespace, string eventHubName, string consumerGroup, string partitionId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint&gt; GetCheckpointAsync(string fullyQualifiedNamespace, string eventHubName, string consumerGroup, string partitionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.GetCheckpointAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCheckpointAsync (fullyQualifiedNamespace As String, eventHubName As String, consumerGroup As String, partitionId As String, cancellationToken As CancellationToken) As Task(Of EventProcessorCheckpoint)" />
      <MemberSignature Language="F#" Value="override this.GetCheckpointAsync : string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint&gt;" Usage="blobCheckpointStore.GetCheckpointAsync (fullyQualifiedNamespace, eventHubName, consumerGroup, partitionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>5.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.7.1.0</AssemblyVersion>
        <AssemblyVersion>5.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fullyQualifiedNamespace" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="consumerGroup" Type="System.String" />
        <Parameter Name="partitionId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
        <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
        <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
        <param name="partitionId">The identifier of the partition to read a checkpoint for.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
        <summary>
               Requests checkpoint information for a specific partition, allowing an event processor to resume reading
               from the next event in the stream.
             </summary>
        <returns>An <see cref="T:Azure.Messaging.EventHubs.Primitives.EventProcessorCheckpoint" /> instance, if a checkpoint was found for the requested partition; otherwise, <c>null</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListOwnershipAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt; ListOwnershipAsync (string fullyQualifiedNamespace, string eventHubName, string consumerGroup, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt; ListOwnershipAsync(string fullyQualifiedNamespace, string eventHubName, string consumerGroup, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.ListOwnershipAsync(System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ListOwnershipAsync (fullyQualifiedNamespace As String, eventHubName As String, consumerGroup As String, cancellationToken As CancellationToken) As Task(Of IEnumerable(Of EventProcessorPartitionOwnership))" />
      <MemberSignature Language="F#" Value="override this.ListOwnershipAsync : string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;seq&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt;" Usage="blobCheckpointStore.ListOwnershipAsync (fullyQualifiedNamespace, eventHubName, consumerGroup, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>5.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.7.1.0</AssemblyVersion>
        <AssemblyVersion>5.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Azure.Messaging.EventHubs.Primitives.EventProcessorPartitionOwnership&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fullyQualifiedNamespace" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="consumerGroup" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
        <param name="eventHubName">The name of the specific Event Hub the ownership is associated with, relative to the Event Hubs namespace that contains it.</param>
        <param name="consumerGroup">The name of the consumer group the ownership are associated with.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the processing.  This is most likely to occur when the processor is shutting down.</param>
        <summary>
               Requests a list of the ownership assignments for partitions between each of the cooperating event processor
               instances for a given Event Hub and consumer group pairing.  This operation is used during load balancing to allow
               the processor to discover other active collaborators and to make decisions about how to best balance work
               between them.
             </summary>
        <returns>The set of ownership data to take into account when making load balancing decisions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCheckpointAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task UpdateCheckpointAsync (string fullyQualifiedNamespace, string eventHubName, string consumerGroup, string partitionId, long offset, long? sequenceNumber, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task UpdateCheckpointAsync(string fullyQualifiedNamespace, string eventHubName, string consumerGroup, string partitionId, int64 offset, valuetype System.Nullable`1&lt;int64&gt; sequenceNumber, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Primitives.BlobCheckpointStore.UpdateCheckpointAsync(System.String,System.String,System.String,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateCheckpointAsync (fullyQualifiedNamespace As String, eventHubName As String, consumerGroup As String, partitionId As String, offset As Long, sequenceNumber As Nullable(Of Long), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="override this.UpdateCheckpointAsync : string * string * string * string * int64 * Nullable&lt;int64&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="blobCheckpointStore.UpdateCheckpointAsync (fullyQualifiedNamespace, eventHubName, consumerGroup, partitionId, offset, sequenceNumber, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Processor</AssemblyName>
        <AssemblyVersion>5.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.7.1.0</AssemblyVersion>
        <AssemblyVersion>5.7.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fullyQualifiedNamespace" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="consumerGroup" Type="System.String" />
        <Parameter Name="partitionId" Type="System.String" />
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="sequenceNumber" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace the ownership are associated with.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
        <param name="eventHubName">The name of the specific Event Hub the ownership are associated with, relative to the Event Hubs namespace that contains it.</param>
        <param name="consumerGroup">The name of the consumer group the checkpoint is associated with.</param>
        <param name="partitionId">The identifier of the partition the checkpoint is for.</param>
        <param name="offset">The offset to associate with the checkpoint, indicating that a processor should begin reading form the next event in the stream.</param>
        <param name="sequenceNumber">An optional sequence number to associate with the checkpoint, intended as informational metadata.  The <paramref name="offset" /> will be used for positioning when events are read.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> instance to signal a request to cancel the operation.</param>
        <summary>
               Creates or updates a checkpoint for a specific partition, identifying a position in the partition's event stream
               that an event processor should begin reading from.
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
