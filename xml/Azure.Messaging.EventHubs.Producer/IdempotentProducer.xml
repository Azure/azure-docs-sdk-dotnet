<Type Name="IdempotentProducer" FullName="Azure.Messaging.EventHubs.Producer.IdempotentProducer">
  <TypeSignature Language="C#" Value="public class IdempotentProducer : Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IdempotentProducer extends Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />
  <TypeSignature Language="DocId" Value="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" />
  <TypeSignature Language="VB.NET" Value="Public Class IdempotentProducer&#xA;Inherits EventHubProducerClient" />
  <TypeSignature Language="F#" Value="type IdempotentProducer = class&#xA;    inherit EventHubProducerClient" />
  <AssemblyInfo>
    <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Messaging.EventHubs.Producer.EventHubProducerClient</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
               A client responsible for publishing <see cref="T:Azure.Messaging.EventHubs.EventData" /> to a specific Event Hub,
               grouped together in batches.  Depending on the options specified when sending, events may
               be automatically assigned an available partition or may request a specific partition.
             </summary>
    <remarks>
      <list type="bullet">
        <listheader>
          <description>Allowing automatic routing of partitions is recommended when:</description>
        </listheader>
        <item>
          <description>The sending of events needs to be highly available.</description>
        </item>
        <item>
          <description>The event data should be evenly distributed among all available partitions.</description>
        </item>
      </list>
      <list type="number">
        <listheader>
          <description>If no partition is specified, the following rules are used for automatically selecting one:</description>
        </listheader>
        <item>
          <description>Distribute the events equally amongst all available partitions using a round-robin approach.</description>
        </item>
        <item>
          <description>If a partition becomes unavailable, the Event Hubs service will automatically detect it and forward the message to another available partition.</description>
        </item>
      </list>
      <para>
                 The <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> is safe to cache and use for the lifetime of an application, and that is best practice when the application
                 publishes events regularly or semi-regularly.  The producer holds responsibility for efficient resource management, working to keep resource usage low during
                 periods of inactivity and manage health during periods of higher use.  Calling either the <see cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.CloseAsync(System.Threading.CancellationToken)" /> or <see cref="M:Azure.Messaging.EventHubs.Producer.EventHubProducerClient.DisposeAsync" />
                 method as the application is shutting down will ensure that network resources and other unmanaged objects are properly cleaned up.
               </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IdempotentProducer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (Azure.Messaging.EventHubs.EventHubConnection connection, Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Messaging.EventHubs.EventHubConnection connection, class Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(Azure.Messaging.EventHubs.EventHubConnection,Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EventHubConnection, Optional clientOptions As IdempotentProducerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : Azure.Messaging.EventHubs.EventHubConnection * Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (connection, clientOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="Azure.Messaging.EventHubs.EventHubConnection" />
        <Parameter Name="clientOptions" Type="Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions" />
      </Parameters>
      <Docs>
        <param name="connection">The <see cref="T:Azure.Messaging.EventHubs.EventHubConnection" /> connection to use for communication with the Event Hubs service.</param>
        <param name="clientOptions">A set of options to apply when configuring the producer.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string connectionString, Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String,Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, clientOptions As IdempotentProducerOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string * Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (connectionString, clientOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="clientOptions" Type="Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the Event Hub name and the shared key properties are contained in this connection string.</param>
        <param name="clientOptions">The set of options to use for this consumer.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>
               If the connection string is copied from the Event Hubs namespace, it will likely not contain the name of the desired Event Hub,
               which is needed.  In this case, the name can be added manually by adding ";EntityPath=[[ EVENT HUB NAME ]]" to the end of the
               connection string.  For example, ";EntityPath=telemetry-hub".
            
               If you have defined a shared access policy directly on the Event Hub itself, then copying the connection string from that
               Event Hub will result in a connection string that contains the name.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string connectionString, string eventHubName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string eventHubName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, eventHubName As String)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string * string -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (connectionString, eventHubName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
        <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string connectionString, string eventHubName, Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, string eventHubName, class Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String,System.String,Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, eventHubName As String, clientOptions As IdempotentProducerOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string * string * Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (connectionString, eventHubName, clientOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="clientOptions" Type="Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string to use for connecting to the Event Hubs namespace; it is expected that the shared key properties are contained in this connection string, but not the Event Hub name.</param>
        <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
        <param name="clientOptions">A set of options to apply when configuring the producer.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>
               If the connection string is copied from the Event Hub itself, it will contain the name of the desired Event Hub,
               and can be used directly without passing the <paramref name="eventHubName" />.  The name of the Event Hub should be
               passed only once, either as part of the connection string or separately.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string fullyQualifiedNamespace, string eventHubName, Azure.AzureNamedKeyCredential credential, Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullyQualifiedNamespace, string eventHubName, class Azure.AzureNamedKeyCredential credential, class Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String,System.String,Azure.AzureNamedKeyCredential,Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullyQualifiedNamespace As String, eventHubName As String, credential As AzureNamedKeyCredential, Optional clientOptions As IdempotentProducerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string * string * Azure.AzureNamedKeyCredential * Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (fullyQualifiedNamespace, eventHubName, credential, clientOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullyQualifiedNamespace" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.AzureNamedKeyCredential" />
        <Parameter Name="clientOptions" Type="Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions" />
      </Parameters>
      <Docs>
        <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
        <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
        <param name="credential">The shared access key credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
        <param name="clientOptions">A set of options to apply when configuring the producer.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string fullyQualifiedNamespace, string eventHubName, Azure.AzureSasCredential credential, Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullyQualifiedNamespace, string eventHubName, class Azure.AzureSasCredential credential, class Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String,System.String,Azure.AzureSasCredential,Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullyQualifiedNamespace As String, eventHubName As String, credential As AzureSasCredential, Optional clientOptions As IdempotentProducerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string * string * Azure.AzureSasCredential * Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (fullyQualifiedNamespace, eventHubName, credential, clientOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullyQualifiedNamespace" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.AzureSasCredential" />
        <Parameter Name="clientOptions" Type="Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions" />
      </Parameters>
      <Docs>
        <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
        <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
        <param name="credential">The shared access signature credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
        <param name="clientOptions">A set of options to apply when configuring the producer.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdempotentProducer (string fullyQualifiedNamespace, string eventHubName, Azure.Core.TokenCredential credential, Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullyQualifiedNamespace, string eventHubName, class Azure.Core.TokenCredential credential, class Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions clientOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.#ctor(System.String,System.String,Azure.Core.TokenCredential,Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullyQualifiedNamespace As String, eventHubName As String, credential As TokenCredential, Optional clientOptions As IdempotentProducerOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Messaging.EventHubs.Producer.IdempotentProducer : string * string * Azure.Core.TokenCredential * Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions -&gt; Azure.Messaging.EventHubs.Producer.IdempotentProducer" Usage="new Azure.Messaging.EventHubs.Producer.IdempotentProducer (fullyQualifiedNamespace, eventHubName, credential, clientOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullyQualifiedNamespace" Type="System.String" />
        <Parameter Name="eventHubName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="clientOptions" Type="Azure.Messaging.EventHubs.Producer.IdempotentProducerOptions" />
      </Parameters>
      <Docs>
        <param name="fullyQualifiedNamespace">The fully qualified Event Hubs namespace to connect to.  This is likely to be similar to <c>{yournamespace}.servicebus.windows.net</c>.</param>
        <param name="eventHubName">The name of the specific Event Hub to associate the producer with.</param>
        <param name="credential">The Azure managed identity credential to use for authorization.  Access controls may be specified by the Event Hubs namespace or the requested Event Hub, depending on Azure configuration.</param>
        <param name="clientOptions">A set of options to apply when configuring the producer.</param>
        <summary>
               Initializes a new instance of the <see cref="T:Azure.Messaging.EventHubs.Producer.IdempotentProducer" /> class.
             </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPartitionPublishingPropertiesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties&gt; GetPartitionPublishingPropertiesAsync (string partitionId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties&gt; GetPartitionPublishingPropertiesAsync(string partitionId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Messaging.EventHubs.Producer.IdempotentProducer.GetPartitionPublishingPropertiesAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPartitionPublishingPropertiesAsync (partitionId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of PartitionPublishingProperties)" />
      <MemberSignature Language="F#" Value="override this.GetPartitionPublishingPropertiesAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties&gt;" Usage="idempotentProducer.GetPartitionPublishingPropertiesAsync (partitionId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Messaging.EventHubs.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Messaging.EventHubs.Producer.PartitionPublishingProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionId">The unique identifier of a partition associated with the Event Hub.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> instance to signal the request to cancel the operation.</param>
        <summary>
               A set of information about the state of publishing for a partition, as observed by the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" />.  This
               data can always be read, but will only be populated with information relevant to the active features for the producer client.
             </summary>
        <returns>The set of information about the publishing state of the requested partition, within the context of this producer.</returns>
        <remarks>
               The state of a partition is only understood by the <see cref="T:Azure.Messaging.EventHubs.Producer.EventHubProducerClient" /> after events have been published to that
               partition; calling this method for a partition before events have been published to it will return an empty set of properties.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
