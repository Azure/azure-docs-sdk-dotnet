<Type Name="MockableContainerRegistryArmClient" FullName="Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient">
  <TypeSignature Language="C#" Value="public class MockableContainerRegistryArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableContainerRegistryArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableContainerRegistryArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableContainerRegistryArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableContainerRegistryArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryAgentPoolResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource GetContainerRegistryAgentPoolResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource GetContainerRegistryAgentPoolResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryAgentPoolResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryAgentPoolResource (id As ResourceIdentifier) As ContainerRegistryAgentPoolResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryAgentPoolResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource&#xA;override this.GetContainerRegistryAgentPoolResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryAgentPoolResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryAgentPoolResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource GetContainerRegistryPrivateEndpointConnectionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource GetContainerRegistryPrivateEndpointConnectionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryPrivateEndpointConnectionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateEndpointConnectionResource (id As ResourceIdentifier) As ContainerRegistryPrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource&#xA;override this.GetContainerRegistryPrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryPrivateEndpointConnectionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryPrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource GetContainerRegistryPrivateLinkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource GetContainerRegistryPrivateLinkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryPrivateLinkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryPrivateLinkResource (id As ResourceIdentifier) As ContainerRegistryPrivateLinkResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource&#xA;override this.GetContainerRegistryPrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryPrivateLinkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryPrivateLinkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryReplicationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource GetContainerRegistryReplicationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource GetContainerRegistryReplicationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryReplicationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryReplicationResource (id As ResourceIdentifier) As ContainerRegistryReplicationResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryReplicationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource&#xA;override this.GetContainerRegistryReplicationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryReplicationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryReplicationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource GetContainerRegistryResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource GetContainerRegistryResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryResource (id As ResourceIdentifier) As ContainerRegistryResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource&#xA;override this.GetContainerRegistryResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryRunResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource GetContainerRegistryRunResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource GetContainerRegistryRunResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryRunResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryRunResource (id As ResourceIdentifier) As ContainerRegistryRunResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryRunResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource&#xA;override this.GetContainerRegistryRunResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryRunResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryRunResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTaskResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource GetContainerRegistryTaskResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource GetContainerRegistryTaskResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryTaskResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTaskResource (id As ResourceIdentifier) As ContainerRegistryTaskResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTaskResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource&#xA;override this.GetContainerRegistryTaskResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryTaskResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTaskRunResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource GetContainerRegistryTaskRunResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource GetContainerRegistryTaskRunResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryTaskRunResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTaskRunResource (id As ResourceIdentifier) As ContainerRegistryTaskRunResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTaskRunResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource&#xA;override this.GetContainerRegistryTaskRunResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryTaskRunResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTaskRunResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryTokenResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource GetContainerRegistryTokenResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource GetContainerRegistryTokenResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryTokenResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryTokenResource (id As ResourceIdentifier) As ContainerRegistryTokenResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryTokenResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource&#xA;override this.GetContainerRegistryTokenResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryTokenResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryTokenResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerRegistryWebhookResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource GetContainerRegistryWebhookResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource GetContainerRegistryWebhookResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetContainerRegistryWebhookResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetContainerRegistryWebhookResource (id As ResourceIdentifier) As ContainerRegistryWebhookResource" />
      <MemberSignature Language="F#" Value="abstract member GetContainerRegistryWebhookResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource&#xA;override this.GetContainerRegistryWebhookResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource" Usage="mockableContainerRegistryArmClient.GetContainerRegistryWebhookResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ContainerRegistryWebhookResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScopeMapResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ContainerRegistry.ScopeMapResource GetScopeMapResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ContainerRegistry.ScopeMapResource GetScopeMapResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ContainerRegistry.Mocking.MockableContainerRegistryArmClient.GetScopeMapResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScopeMapResource (id As ResourceIdentifier) As ScopeMapResource" />
      <MemberSignature Language="F#" Value="abstract member GetScopeMapResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ScopeMapResource&#xA;override this.GetScopeMapResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ContainerRegistry.ScopeMapResource" Usage="mockableContainerRegistryArmClient.GetScopeMapResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ContainerRegistry</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ContainerRegistry.ScopeMapResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ContainerRegistry.ScopeMapResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ContainerRegistry.ScopeMapResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ContainerRegistry.ScopeMapResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ContainerRegistry.ScopeMapResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
