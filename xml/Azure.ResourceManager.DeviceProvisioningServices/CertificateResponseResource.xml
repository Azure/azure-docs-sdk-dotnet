<Type Name="CertificateResponseResource" FullName="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource">
  <TypeSignature Language="C#" Value="public class CertificateResponseResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CertificateResponseResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource" />
  <TypeSignature Language="VB.NET" Value="Public Class CertificateResponseResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type CertificateResponseResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a CertificateResponse along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetCertificateResponseResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.DeviceProvisioningServices.ProvisioningServiceDescriptionResource" /> using the GetCertificateResponse method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CertificateResponseResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string provisioningServiceName, string certificateName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string provisioningServiceName, string certificateName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, provisioningServiceName As String, certificateName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, provisioningServiceName, certificateName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="provisioningServiceName" Type="System.String" />
        <Parameter Name="certificateName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="provisioningServiceName">To be added.</param>
        <param name="certificateName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As CertificateResponseData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData" Usage="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, string ifMatch, string certificateName1 = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreated = default, DateTimeOffset? certificateLastUpdated = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, string ifMatch, string certificateName1, unsigned int8[] certificateRawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateIsVerified, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; certificatePurpose, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateCreated, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateLastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificateHasPrivateKey, string certificateNonce, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.Delete(Azure.WaitUntil,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, ifMatch As String, Optional certificateName1 As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of CertificatePurpose) = Nothing, Optional certificateCreated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="certificateResponseResource.Delete (waitUntil, ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="certificateName1" Type="System.String" />
        <Parameter Name="certificateRawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateIsVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatePurpose" Type="System.Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt;" />
        <Parameter Name="certificateCreated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateLastUpdated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateHasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificateNonce" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="ifMatch"> ETag of the certificate. </param>
        <param name="certificateName1"> This is optional, and it is the Common Name of the certificate. </param>
        <param name="certificateRawBytes"> Raw data within the certificate. </param>
        <param name="certificateIsVerified"> Indicates if certificate has been verified by owner of the private key. </param>
        <param name="certificatePurpose"> A description that mentions the purpose of the certificate. </param>
        <param name="certificateCreated"> Time the certificate is created. </param>
        <param name="certificateLastUpdated"> Time the certificate is last updated. </param>
        <param name="certificateHasPrivateKey"> Indicates if the certificate contains a private key. </param>
        <param name="certificateNonce"> Random number generated to indicate Proof of Possession. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes the specified certificate associated with the Provisioning Service
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
            Operation Id: DpsCertificate_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ifMatch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, string ifMatch, string certificateName1 = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreated = default, DateTimeOffset? certificateLastUpdated = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, string ifMatch, string certificateName1, unsigned int8[] certificateRawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateIsVerified, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; certificatePurpose, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateCreated, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateLastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificateHasPrivateKey, string certificateNonce, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.DeleteAsync(Azure.WaitUntil,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, ifMatch As String, Optional certificateName1 As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of CertificatePurpose) = Nothing, Optional certificateCreated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="certificateResponseResource.DeleteAsync (waitUntil, ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="certificateName1" Type="System.String" />
        <Parameter Name="certificateRawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateIsVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatePurpose" Type="System.Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt;" />
        <Parameter Name="certificateCreated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateLastUpdated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateHasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificateNonce" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="ifMatch"> ETag of the certificate. </param>
        <param name="certificateName1"> This is optional, and it is the Common Name of the certificate. </param>
        <param name="certificateRawBytes"> Raw data within the certificate. </param>
        <param name="certificateIsVerified"> Indicates if certificate has been verified by owner of the private key. </param>
        <param name="certificatePurpose"> A description that mentions the purpose of the certificate. </param>
        <param name="certificateCreated"> Time the certificate is created. </param>
        <param name="certificateLastUpdated"> Time the certificate is last updated. </param>
        <param name="certificateHasPrivateKey"> Indicates if the certificate contains a private key. </param>
        <param name="certificateNonce"> Random number generated to indicate Proof of Possession. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes the specified certificate associated with the Provisioning Service
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
            Operation Id: DpsCertificate_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ifMatch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateVerificationCode">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt; GenerateVerificationCode (string ifMatch, string certificateName1 = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreated = default, DateTimeOffset? certificateLastUpdated = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt; GenerateVerificationCode(string ifMatch, string certificateName1, unsigned int8[] certificateRawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateIsVerified, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; certificatePurpose, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateCreated, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateLastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificateHasPrivateKey, string certificateNonce, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.GenerateVerificationCode(System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateVerificationCode (ifMatch As String, Optional certificateName1 As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of CertificatePurpose) = Nothing, Optional certificateCreated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VerificationCodeResponse)" />
      <MemberSignature Language="F#" Value="abstract member GenerateVerificationCode : string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&#xA;override this.GenerateVerificationCode : string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;" Usage="certificateResponseResource.GenerateVerificationCode (ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="certificateName1" Type="System.String" />
        <Parameter Name="certificateRawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateIsVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatePurpose" Type="System.Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt;" />
        <Parameter Name="certificateCreated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateLastUpdated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateHasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificateNonce" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifMatch"> ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. </param>
        <param name="certificateName1"> Common Name for the certificate. </param>
        <param name="certificateRawBytes"> Raw data of certificate. </param>
        <param name="certificateIsVerified"> Indicates if the certificate has been verified by owner of the private key. </param>
        <param name="certificatePurpose"> Description mentioning the purpose of the certificate. </param>
        <param name="certificateCreated"> Certificate creation time. </param>
        <param name="certificateLastUpdated"> Certificate last updated time. </param>
        <param name="certificateHasPrivateKey"> Indicates if the certificate contains private key. </param>
        <param name="certificateNonce"> Random number generated to indicate Proof of Possession. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generate verification code for Proof of Possession.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode
            Operation Id: DpsCertificate_GenerateVerificationCode
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ifMatch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateVerificationCodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt; GenerateVerificationCodeAsync (string ifMatch, string certificateName1 = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreated = default, DateTimeOffset? certificateLastUpdated = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt; GenerateVerificationCodeAsync(string ifMatch, string certificateName1, unsigned int8[] certificateRawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateIsVerified, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; certificatePurpose, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateCreated, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateLastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificateHasPrivateKey, string certificateNonce, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.GenerateVerificationCodeAsync(System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GenerateVerificationCodeAsync (ifMatch As String, Optional certificateName1 As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of CertificatePurpose) = Nothing, Optional certificateCreated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VerificationCodeResponse))" />
      <MemberSignature Language="F#" Value="abstract member GenerateVerificationCodeAsync : string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt;&#xA;override this.GenerateVerificationCodeAsync : string * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt;" Usage="certificateResponseResource.GenerateVerificationCodeAsync (ifMatch, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="certificateName1" Type="System.String" />
        <Parameter Name="certificateRawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateIsVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatePurpose" Type="System.Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt;" />
        <Parameter Name="certificateCreated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateLastUpdated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateHasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificateNonce" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifMatch"> ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. </param>
        <param name="certificateName1"> Common Name for the certificate. </param>
        <param name="certificateRawBytes"> Raw data of certificate. </param>
        <param name="certificateIsVerified"> Indicates if the certificate has been verified by owner of the private key. </param>
        <param name="certificatePurpose"> Description mentioning the purpose of the certificate. </param>
        <param name="certificateCreated"> Certificate creation time. </param>
        <param name="certificateLastUpdated"> Certificate last updated time. </param>
        <param name="certificateHasPrivateKey"> Indicates if the certificate contains private key. </param>
        <param name="certificateNonce"> Random number generated to indicate Proof of Possession. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Generate verification code for Proof of Possession.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/generateVerificationCode
            Operation Id: DpsCertificate_GenerateVerificationCode
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ifMatch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt; Get (string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt; Get(string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.Get(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CertificateResponseResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&#xA;override this.Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;" Usage="certificateResponseResource.Get (ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifMatch"> ETag of the certificate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the certificate from the provisioning service.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
            Operation Id: DpsCertificate_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt; GetAsync (string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt; GetAsync(string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CertificateResponseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;&#xA;override this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;" Usage="certificateResponseResource.GetAsync (ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifMatch"> ETag of the certificate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the certificate from the provisioning service.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
            Operation Id: DpsCertificate_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData data, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData data, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.Update(Azure.WaitUntil,Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, data As CertificateResponseData, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of CertificateResponseResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;" Usage="certificateResponseResource.Update (waitUntil, data, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="data" Type="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="data"> The certificate body. </param>
        <param name="ifMatch"> ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add new certificate or update an existing certificate.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
            Operation Id: DpsCertificate_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData data, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData data, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, data As CertificateResponseData, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of CertificateResponseResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;" Usage="certificateResponseResource.UpdateAsync (waitUntil, data, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="data" Type="Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseData" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="data"> The certificate body. </param>
        <param name="ifMatch"> ETag of the certificate. This is required to update an existing certificate, and ignored while creating a brand new certificate. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add new certificate or update an existing certificate.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}
            Operation Id: DpsCertificate_CreateOrUpdate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="data" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt; VerifyCertificate (string ifMatch, Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent content, string certificateName1 = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreated = default, DateTimeOffset? certificateLastUpdated = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt; VerifyCertificate(string ifMatch, class Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent content, string certificateName1, unsigned int8[] certificateRawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateIsVerified, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; certificatePurpose, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateCreated, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateLastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificateHasPrivateKey, string certificateNonce, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.VerifyCertificate(System.String,Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyCertificate (ifMatch As String, content As VerificationCodeContent, Optional certificateName1 As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of CertificatePurpose) = Nothing, Optional certificateCreated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of CertificateResponseResource)" />
      <MemberSignature Language="F#" Value="abstract member VerifyCertificate : string * Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&#xA;override this.VerifyCertificate : string * Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;" Usage="certificateResponseResource.VerifyCertificate (ifMatch, content, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="content" Type="Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent" />
        <Parameter Name="certificateName1" Type="System.String" />
        <Parameter Name="certificateRawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateIsVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatePurpose" Type="System.Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt;" />
        <Parameter Name="certificateCreated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateLastUpdated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateHasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificateNonce" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifMatch"> ETag of the certificate. </param>
        <param name="content"> The name of the certificate. </param>
        <param name="certificateName1"> Common Name for the certificate. </param>
        <param name="certificateRawBytes"> Raw data of certificate. </param>
        <param name="certificateIsVerified"> Indicates if the certificate has been verified by owner of the private key. </param>
        <param name="certificatePurpose"> Describe the purpose of the certificate. </param>
        <param name="certificateCreated"> Certificate creation time. </param>
        <param name="certificateLastUpdated"> Certificate last updated time. </param>
        <param name="certificateHasPrivateKey"> Indicates if the certificate contains private key. </param>
        <param name="certificateNonce"> Random number generated to indicate Proof of Possession. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify
            Operation Id: DpsCertificate_VerifyCertificate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ifMatch" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt; VerifyCertificateAsync (string ifMatch, Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent content, string certificateName1 = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreated = default, DateTimeOffset? certificateLastUpdated = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt; VerifyCertificateAsync(string ifMatch, class Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent content, string certificateName1, unsigned int8[] certificateRawBytes, valuetype System.Nullable`1&lt;bool&gt; certificateIsVerified, valuetype System.Nullable`1&lt;valuetype Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; certificatePurpose, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateCreated, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; certificateLastUpdated, valuetype System.Nullable`1&lt;bool&gt; certificateHasPrivateKey, string certificateNonce, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource.VerifyCertificateAsync(System.String,Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function VerifyCertificateAsync (ifMatch As String, content As VerificationCodeContent, Optional certificateName1 As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of CertificatePurpose) = Nothing, Optional certificateCreated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdated As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of CertificateResponseResource))" />
      <MemberSignature Language="F#" Value="abstract member VerifyCertificateAsync : string * Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;&#xA;override this.VerifyCertificateAsync : string * Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent * string * byte[] * Nullable&lt;bool&gt; * Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;bool&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;" Usage="certificateResponseResource.VerifyCertificateAsync (ifMatch, content, certificateName1, certificateRawBytes, certificateIsVerified, certificatePurpose, certificateCreated, certificateLastUpdated, certificateHasPrivateKey, certificateNonce, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.DeviceProvisioningServices</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.DeviceProvisioningServices.CertificateResponseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="content" Type="Azure.ResourceManager.DeviceProvisioningServices.Models.VerificationCodeContent" />
        <Parameter Name="certificateName1" Type="System.String" />
        <Parameter Name="certificateRawBytes" Type="System.Byte[]" />
        <Parameter Name="certificateIsVerified" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificatePurpose" Type="System.Nullable&lt;Azure.ResourceManager.DeviceProvisioningServices.Models.CertificatePurpose&gt;" />
        <Parameter Name="certificateCreated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateLastUpdated" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="certificateHasPrivateKey" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="certificateNonce" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ifMatch"> ETag of the certificate. </param>
        <param name="content"> The name of the certificate. </param>
        <param name="certificateName1"> Common Name for the certificate. </param>
        <param name="certificateRawBytes"> Raw data of certificate. </param>
        <param name="certificateIsVerified"> Indicates if the certificate has been verified by owner of the private key. </param>
        <param name="certificatePurpose"> Describe the purpose of the certificate. </param>
        <param name="certificateCreated"> Certificate creation time. </param>
        <param name="certificateLastUpdated"> Certificate last updated time. </param>
        <param name="certificateHasPrivateKey"> Indicates if the certificate contains private key. </param>
        <param name="certificateNonce"> Random number generated to indicate Proof of Possession. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}/verify
            Operation Id: DpsCertificate_VerifyCertificate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ifMatch" /> or <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
