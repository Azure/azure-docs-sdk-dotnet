<Type Name="JobRouterAdministrationClient" FullName="Azure.Communication.JobRouter.JobRouterAdministrationClient">
  <TypeSignature Language="C#" Value="public class JobRouterAdministrationClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JobRouterAdministrationClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Communication.JobRouter.JobRouterAdministrationClient" />
  <TypeSignature Language="VB.NET" Value="Public Class JobRouterAdministrationClient" />
  <TypeSignature Language="F#" Value="type JobRouterAdministrationClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The JobRouterAdministration service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JobRouterAdministrationClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterAdministrationClient" /> for mocking.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterAdministrationClient (string connectionString, Azure.Communication.JobRouter.JobRouterClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class Azure.Communication.JobRouter.JobRouterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.#ctor(System.String,Azure.Communication.JobRouter.JobRouterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, Optional options As JobRouterClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterAdministrationClient : string * Azure.Communication.JobRouter.JobRouterClientOptions -&gt; Azure.Communication.JobRouter.JobRouterAdministrationClient" Usage="new Azure.Communication.JobRouter.JobRouterAdministrationClient (connectionString, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.JobRouterClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Connection string acquired from the Azure Communication Services resource.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterAdministrationClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterAdministrationClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Communication.JobRouter.JobRouterClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Communication.JobRouter.JobRouterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Communication.JobRouter.JobRouterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, Optional options As JobRouterClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterAdministrationClient : Uri * Azure.AzureKeyCredential * Azure.Communication.JobRouter.JobRouterClientOptions -&gt; Azure.Communication.JobRouter.JobRouterAdministrationClient" Usage="new Azure.Communication.JobRouter.JobRouterAdministrationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.JobRouterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The <see cref="T:System.Uri" /> endpoint of the Azure Communication Services resource. </param>
        <param name="credential">The <see cref="T:Azure.AzureKeyCredential" /> used to authenticate requests.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterAdministrationClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterAdministrationClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Communication.JobRouter.JobRouterClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Communication.JobRouter.JobRouterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Communication.JobRouter.JobRouterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, Optional options As JobRouterClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterAdministrationClient : Uri * Azure.Core.TokenCredential * Azure.Communication.JobRouter.JobRouterClientOptions -&gt; Azure.Communication.JobRouter.JobRouterAdministrationClient" Usage="new Azure.Communication.JobRouter.JobRouterAdministrationClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.JobRouterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint"> The <see cref="T:System.Uri" /> endpoint of the Azure Communication Services resource. </param>
        <param name="credential">The <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests, such as DefaultAzureCredential. </param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterAdministrationClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt; CreateClassificationPolicy (Azure.Communication.JobRouter.CreateClassificationPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt; CreateClassificationPolicy(class Azure.Communication.JobRouter.CreateClassificationPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateClassificationPolicy(Azure.Communication.JobRouter.CreateClassificationPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateClassificationPolicy (options As CreateClassificationPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ClassificationPolicy)" />
      <MemberSignature Language="F#" Value="abstract member CreateClassificationPolicy : Azure.Communication.JobRouter.CreateClassificationPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&#xA;override this.CreateClassificationPolicy : Azure.Communication.JobRouter.CreateClassificationPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;" Usage="jobRouterAdministrationClient.CreateClassificationPolicy (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateClassificationPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating classification policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or updates a classification policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt; CreateClassificationPolicyAsync (Azure.Communication.JobRouter.CreateClassificationPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt; CreateClassificationPolicyAsync(class Azure.Communication.JobRouter.CreateClassificationPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateClassificationPolicyAsync(Azure.Communication.JobRouter.CreateClassificationPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateClassificationPolicyAsync (options As CreateClassificationPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ClassificationPolicy))" />
      <MemberSignature Language="F#" Value="abstract member CreateClassificationPolicyAsync : Azure.Communication.JobRouter.CreateClassificationPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;&#xA;override this.CreateClassificationPolicyAsync : Azure.Communication.JobRouter.CreateClassificationPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.CreateClassificationPolicyAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateClassificationPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating classification policy. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a classification policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDistributionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt; CreateDistributionPolicy (Azure.Communication.JobRouter.CreateDistributionPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt; CreateDistributionPolicy(class Azure.Communication.JobRouter.CreateDistributionPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateDistributionPolicy(Azure.Communication.JobRouter.CreateDistributionPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDistributionPolicy (options As CreateDistributionPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DistributionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member CreateDistributionPolicy : Azure.Communication.JobRouter.CreateDistributionPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&#xA;override this.CreateDistributionPolicy : Azure.Communication.JobRouter.CreateDistributionPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;" Usage="jobRouterAdministrationClient.CreateDistributionPolicy (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateDistributionPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating a distribution policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a distribution policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDistributionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt; CreateDistributionPolicyAsync (Azure.Communication.JobRouter.CreateDistributionPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt;&gt; CreateDistributionPolicyAsync(class Azure.Communication.JobRouter.CreateDistributionPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateDistributionPolicyAsync(Azure.Communication.JobRouter.CreateDistributionPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateDistributionPolicyAsync (options As CreateDistributionPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DistributionPolicy))" />
      <MemberSignature Language="F#" Value="abstract member CreateDistributionPolicyAsync : Azure.Communication.JobRouter.CreateDistributionPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;&#xA;override this.CreateDistributionPolicyAsync : Azure.Communication.JobRouter.CreateDistributionPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.CreateDistributionPolicyAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateDistributionPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Additional options that can be used while creating distribution policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a distribution policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateExceptionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt; CreateExceptionPolicy (Azure.Communication.JobRouter.CreateExceptionPolicyOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt; CreateExceptionPolicy(class Azure.Communication.JobRouter.CreateExceptionPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateExceptionPolicy(Azure.Communication.JobRouter.CreateExceptionPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateExceptionPolicy (Optional options As CreateExceptionPolicyOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExceptionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member CreateExceptionPolicy : Azure.Communication.JobRouter.CreateExceptionPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&#xA;override this.CreateExceptionPolicy : Azure.Communication.JobRouter.CreateExceptionPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;" Usage="jobRouterAdministrationClient.CreateExceptionPolicy (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateExceptionPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating an exception policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates or updates a exception policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateExceptionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt; CreateExceptionPolicyAsync (Azure.Communication.JobRouter.CreateExceptionPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt; CreateExceptionPolicyAsync(class Azure.Communication.JobRouter.CreateExceptionPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateExceptionPolicyAsync(Azure.Communication.JobRouter.CreateExceptionPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateExceptionPolicyAsync (options As CreateExceptionPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExceptionPolicy))" />
      <MemberSignature Language="F#" Value="abstract member CreateExceptionPolicyAsync : Azure.Communication.JobRouter.CreateExceptionPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;&#xA;override this.CreateExceptionPolicyAsync : Azure.Communication.JobRouter.CreateExceptionPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.CreateExceptionPolicyAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateExceptionPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating an exception policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new exception policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateQueue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt; CreateQueue (Azure.Communication.JobRouter.CreateQueueOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt; CreateQueue(class Azure.Communication.JobRouter.CreateQueueOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateQueue(Azure.Communication.JobRouter.CreateQueueOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateQueue (options As CreateQueueOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterQueue)" />
      <MemberSignature Language="F#" Value="abstract member CreateQueue : Azure.Communication.JobRouter.CreateQueueOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&#xA;override this.CreateQueue : Azure.Communication.JobRouter.CreateQueueOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;" Usage="jobRouterAdministrationClient.CreateQueue (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateQueueOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating a queue. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a queue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateQueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt; CreateQueueAsync (Azure.Communication.JobRouter.CreateQueueOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt;&gt; CreateQueueAsync(class Azure.Communication.JobRouter.CreateQueueOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.CreateQueueAsync(Azure.Communication.JobRouter.CreateQueueOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateQueueAsync (options As CreateQueueOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterQueue))" />
      <MemberSignature Language="F#" Value="abstract member CreateQueueAsync : Azure.Communication.JobRouter.CreateQueueOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;&#xA;override this.CreateQueueAsync : Azure.Communication.JobRouter.CreateQueueOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;" Usage="jobRouterAdministrationClient.CreateQueueAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateQueueOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating a queue. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a queue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteClassificationPolicy (string classificationPolicyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteClassificationPolicy(string classificationPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteClassificationPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClassificationPolicy (classificationPolicyId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteClassificationPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteClassificationPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.DeleteClassificationPolicy (classificationPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a classification policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteClassificationPolicyAsync (string classificationPolicyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteClassificationPolicyAsync(string classificationPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteClassificationPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteClassificationPolicyAsync (classificationPolicyId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteClassificationPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteClassificationPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.DeleteClassificationPolicyAsync (classificationPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a classification policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDistributionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteDistributionPolicy (string distributionPolicyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteDistributionPolicy(string distributionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteDistributionPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDistributionPolicy (distributionPolicyId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteDistributionPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteDistributionPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.DeleteDistributionPolicy (distributionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a distribution policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDistributionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteDistributionPolicyAsync (string distributionPolicyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteDistributionPolicyAsync(string distributionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteDistributionPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDistributionPolicyAsync (distributionPolicyId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDistributionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteDistributionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.DeleteDistributionPolicyAsync (distributionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Delete a distribution policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteExceptionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteExceptionPolicy (string exceptionPolicyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteExceptionPolicy(string exceptionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteExceptionPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteExceptionPolicy (exceptionPolicyId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteExceptionPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteExceptionPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.DeleteExceptionPolicy (exceptionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a exception policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteExceptionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteExceptionPolicyAsync (string exceptionPolicyId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteExceptionPolicyAsync(string exceptionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteExceptionPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteExceptionPolicyAsync (exceptionPolicyId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteExceptionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteExceptionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.DeleteExceptionPolicyAsync (exceptionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a exception policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteQueue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteQueue (string queueId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteQueue(string queueId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteQueue(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteQueue (queueId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteQueue : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteQueue : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.DeleteQueue (queueId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a queue by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteQueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteQueueAsync (string queueId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteQueueAsync(string queueId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.DeleteQueueAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteQueueAsync (queueId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteQueueAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteQueueAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.DeleteQueueAsync (queueId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a queue by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetClassificationPolicies (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetClassificationPolicies(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicies(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPolicies (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetClassificationPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetClassificationPolicies context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing classification policies.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicies(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt; GetClassificationPolicies (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt; GetClassificationPolicies(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicies(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPolicies (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ClassificationPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPolicies : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&#xA;override this.GetClassificationPolicies : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;" Usage="jobRouterAdministrationClient.GetClassificationPolicies cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing classification policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetClassificationPoliciesAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetClassificationPoliciesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPoliciesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPoliciesAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetClassificationPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetClassificationPoliciesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing classification policies.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPoliciesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt; GetClassificationPoliciesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt; GetClassificationPoliciesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPoliciesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPoliciesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ClassificationPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPoliciesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&#xA;override this.GetClassificationPoliciesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;" Usage="jobRouterAdministrationClient.GetClassificationPoliciesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing classification policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetClassificationPolicy (string classificationPolicyId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetClassificationPolicy(string classificationPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPolicy (classificationPolicyId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetClassificationPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.GetClassificationPolicy (classificationPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing classification policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicy(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt; GetClassificationPolicy (string classificationPolicyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt; GetClassificationPolicy(string classificationPolicyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicy(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPolicy (classificationPolicyId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ClassificationPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&#xA;override this.GetClassificationPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;" Usage="jobRouterAdministrationClient.GetClassificationPolicy (classificationPolicyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing classification policy by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetClassificationPolicyAsync (string classificationPolicyId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetClassificationPolicyAsync(string classificationPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPolicyAsync (classificationPolicyId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetClassificationPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.GetClassificationPolicyAsync (classificationPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing classification policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicyAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt; GetClassificationPolicyAsync (string classificationPolicyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt; GetClassificationPolicyAsync(string classificationPolicyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetClassificationPolicyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClassificationPolicyAsync (classificationPolicyId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ClassificationPolicy))" />
      <MemberSignature Language="F#" Value="abstract member GetClassificationPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;&#xA;override this.GetClassificationPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.GetClassificationPolicyAsync (classificationPolicyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing classification policy by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetDistributionPolicies (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetDistributionPolicies(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicies(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPolicies (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetDistributionPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetDistributionPolicies context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing distribution policies.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicies(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt; GetDistributionPolicies (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt; GetDistributionPolicies(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicies(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPolicies (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of DistributionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPolicies : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&#xA;override this.GetDistributionPolicies : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;" Usage="jobRouterAdministrationClient.GetDistributionPolicies cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing distribution policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetDistributionPoliciesAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetDistributionPoliciesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPoliciesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPoliciesAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetDistributionPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetDistributionPoliciesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing distribution policies.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPoliciesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt; GetDistributionPoliciesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt; GetDistributionPoliciesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPoliciesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPoliciesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of DistributionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPoliciesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&#xA;override this.GetDistributionPoliciesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;" Usage="jobRouterAdministrationClient.GetDistributionPoliciesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing distribution policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetDistributionPolicy (string distributionPolicyId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetDistributionPolicy(string distributionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPolicy (distributionPolicyId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetDistributionPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.GetDistributionPolicy (distributionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing distribution policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicy(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt; GetDistributionPolicy (string distributionPolicyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt; GetDistributionPolicy(string distributionPolicyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicy(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPolicy (distributionPolicyId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DistributionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&#xA;override this.GetDistributionPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;" Usage="jobRouterAdministrationClient.GetDistributionPolicy (distributionPolicyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing distribution policy by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetDistributionPolicyAsync (string distributionPolicyId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetDistributionPolicyAsync(string distributionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPolicyAsync (distributionPolicyId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetDistributionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.GetDistributionPolicyAsync (distributionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing distribution policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicyAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDistributionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt; GetDistributionPolicyAsync (string distributionPolicyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt;&gt; GetDistributionPolicyAsync(string distributionPolicyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetDistributionPolicyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDistributionPolicyAsync (distributionPolicyId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DistributionPolicy))" />
      <MemberSignature Language="F#" Value="abstract member GetDistributionPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;&#xA;override this.GetDistributionPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.GetDistributionPolicyAsync (distributionPolicyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing distribution policy by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetExceptionPolicies (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetExceptionPolicies(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicies(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPolicies (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetExceptionPolicies : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetExceptionPolicies context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing exception policies.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicies(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt; GetExceptionPolicies (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt; GetExceptionPolicies(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicies(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPolicies (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ExceptionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPolicies : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&#xA;override this.GetExceptionPolicies : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;" Usage="jobRouterAdministrationClient.GetExceptionPolicies cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing exception policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetExceptionPoliciesAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetExceptionPoliciesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPoliciesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPoliciesAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetExceptionPoliciesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetExceptionPoliciesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing exception policies.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPoliciesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPoliciesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt; GetExceptionPoliciesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt; GetExceptionPoliciesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPoliciesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPoliciesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ExceptionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPoliciesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&#xA;override this.GetExceptionPoliciesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;" Usage="jobRouterAdministrationClient.GetExceptionPoliciesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing exception policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetExceptionPolicy (string exceptionPolicyId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetExceptionPolicy(string exceptionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicy(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPolicy (exceptionPolicyId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPolicy : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetExceptionPolicy : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.GetExceptionPolicy (exceptionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing exception policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicy(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt; GetExceptionPolicy (string exceptionPolicyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt; GetExceptionPolicy(string exceptionPolicyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicy(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPolicy (exceptionPolicyId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExceptionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&#xA;override this.GetExceptionPolicy : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;" Usage="jobRouterAdministrationClient.GetExceptionPolicy (exceptionPolicyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing exception policy by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetExceptionPolicyAsync (string exceptionPolicyId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetExceptionPolicyAsync(string exceptionPolicyId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicyAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPolicyAsync (exceptionPolicyId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetExceptionPolicyAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.GetExceptionPolicyAsync (exceptionPolicyId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing exception policy by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicyAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt; GetExceptionPolicyAsync (string exceptionPolicyId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt; GetExceptionPolicyAsync(string exceptionPolicyId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetExceptionPolicyAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExceptionPolicyAsync (exceptionPolicyId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExceptionPolicy))" />
      <MemberSignature Language="F#" Value="abstract member GetExceptionPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;&#xA;override this.GetExceptionPolicyAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.GetExceptionPolicyAsync (exceptionPolicyId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing exception policy by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetQueue (string queueId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetQueue(string queueId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueue(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueue (queueId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetQueue : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetQueue : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.GetQueue (queueId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing queue by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueue(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt; GetQueue (string queueId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt; GetQueue(string queueId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueue(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueue (queueId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterQueue)" />
      <MemberSignature Language="F#" Value="abstract member GetQueue : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&#xA;override this.GetQueue : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;" Usage="jobRouterAdministrationClient.GetQueue (queueId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing queue by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetQueueAsync (string queueId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetQueueAsync(string queueId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueueAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueueAsync (queueId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetQueueAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetQueueAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.GetQueueAsync (queueId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing queue by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueueAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt; GetQueueAsync (string queueId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt;&gt; GetQueueAsync(string queueId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueueAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueueAsync (queueId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterQueue))" />
      <MemberSignature Language="F#" Value="abstract member GetQueueAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;&#xA;override this.GetQueueAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;" Usage="jobRouterAdministrationClient.GetQueueAsync (queueId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing queue by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueues">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetQueues (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetQueues(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueues(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueues (context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetQueues : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetQueues : Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetQueues context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing queues.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueues(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueues">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Communication.JobRouter.RouterQueue&gt; GetQueues (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt; GetQueues(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueues(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueues (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of RouterQueue)" />
      <MemberSignature Language="F#" Value="abstract member GetQueues : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.RouterQueue&gt;&#xA;override this.GetQueues : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.RouterQueue&gt;" Usage="jobRouterAdministrationClient.GetQueues cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Communication.JobRouter.RouterQueue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing exception policies. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueuesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetQueuesAsync (Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetQueuesAsync(class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueuesAsync(Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueuesAsync (context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetQueuesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetQueuesAsync : Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="jobRouterAdministrationClient.GetQueuesAsync context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing queues.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueuesAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueuesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterQueue&gt; GetQueuesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt; GetQueuesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.GetQueuesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueuesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of RouterQueue)" />
      <MemberSignature Language="F#" Value="abstract member GetQueuesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterQueue&gt;&#xA;override this.GetQueuesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterQueue&gt;" Usage="jobRouterAdministrationClient.GetQueuesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterQueue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing queues. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Communication.JobRouter.JobRouterAdministrationClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Communication.JobRouter.JobRouterAdministrationClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt; UpdateClassificationPolicy (Azure.Communication.JobRouter.ClassificationPolicy classificationPolicy, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt; UpdateClassificationPolicy(class Azure.Communication.JobRouter.ClassificationPolicy classificationPolicy, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateClassificationPolicy(Azure.Communication.JobRouter.ClassificationPolicy,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationPolicy (classificationPolicy As ClassificationPolicy, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ClassificationPolicy)" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationPolicy : Azure.Communication.JobRouter.ClassificationPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&#xA;override this.UpdateClassificationPolicy : Azure.Communication.JobRouter.ClassificationPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;" Usage="jobRouterAdministrationClient.UpdateClassificationPolicy (classificationPolicy, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicy" Type="Azure.Communication.JobRouter.ClassificationPolicy" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="classificationPolicy"> Classification policy to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates classification policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateClassificationPolicy (string classificationPolicyId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateClassificationPolicy(string classificationPolicyId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateClassificationPolicy(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationPolicy (classificationPolicyId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationPolicy : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateClassificationPolicy : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.UpdateClassificationPolicy (classificationPolicyId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a classification policy.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt; UpdateClassificationPolicyAsync (Azure.Communication.JobRouter.ClassificationPolicy classificationPolicy, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt; UpdateClassificationPolicyAsync(class Azure.Communication.JobRouter.ClassificationPolicy classificationPolicy, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateClassificationPolicyAsync(Azure.Communication.JobRouter.ClassificationPolicy,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationPolicyAsync (classificationPolicy As ClassificationPolicy, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ClassificationPolicy))" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationPolicyAsync : Azure.Communication.JobRouter.ClassificationPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;&#xA;override this.UpdateClassificationPolicyAsync : Azure.Communication.JobRouter.ClassificationPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.UpdateClassificationPolicyAsync (classificationPolicy, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ClassificationPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicy" Type="Azure.Communication.JobRouter.ClassificationPolicy" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="classificationPolicy"> Classification policy to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates classification policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateClassificationPolicyAsync (string classificationPolicyId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateClassificationPolicyAsync(string classificationPolicyId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateClassificationPolicyAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateClassificationPolicyAsync (classificationPolicyId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateClassificationPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateClassificationPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.UpdateClassificationPolicyAsync (classificationPolicyId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="classificationPolicyId"> Id of a classification policy. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a classification policy.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="classificationPolicyId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="classificationPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateDistributionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt; UpdateDistributionPolicy (Azure.Communication.JobRouter.DistributionPolicy distributionPolicy, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt; UpdateDistributionPolicy(class Azure.Communication.JobRouter.DistributionPolicy distributionPolicy, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateDistributionPolicy(Azure.Communication.JobRouter.DistributionPolicy,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateDistributionPolicy (distributionPolicy As DistributionPolicy, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DistributionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member UpdateDistributionPolicy : Azure.Communication.JobRouter.DistributionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&#xA;override this.UpdateDistributionPolicy : Azure.Communication.JobRouter.DistributionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;" Usage="jobRouterAdministrationClient.UpdateDistributionPolicy (distributionPolicy, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicy" Type="Azure.Communication.JobRouter.DistributionPolicy" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="distributionPolicy"> The distribution policy to update. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates a distribution policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateDistributionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateDistributionPolicy (string distributionPolicyId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateDistributionPolicy(string distributionPolicyId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateDistributionPolicy(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateDistributionPolicy (distributionPolicyId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateDistributionPolicy : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateDistributionPolicy : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.UpdateDistributionPolicy (distributionPolicyId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a distribution policy.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateDistributionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt; UpdateDistributionPolicyAsync (Azure.Communication.JobRouter.DistributionPolicy distributionPolicy, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.DistributionPolicy&gt;&gt; UpdateDistributionPolicyAsync(class Azure.Communication.JobRouter.DistributionPolicy distributionPolicy, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateDistributionPolicyAsync(Azure.Communication.JobRouter.DistributionPolicy,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateDistributionPolicyAsync (distributionPolicy As DistributionPolicy, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DistributionPolicy))" />
      <MemberSignature Language="F#" Value="abstract member UpdateDistributionPolicyAsync : Azure.Communication.JobRouter.DistributionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;&#xA;override this.UpdateDistributionPolicyAsync : Azure.Communication.JobRouter.DistributionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.UpdateDistributionPolicyAsync (distributionPolicy, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.DistributionPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicy" Type="Azure.Communication.JobRouter.DistributionPolicy" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="distributionPolicy"> The distribution policy to update. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates a distribution policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateDistributionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateDistributionPolicyAsync (string distributionPolicyId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateDistributionPolicyAsync(string distributionPolicyId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateDistributionPolicyAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateDistributionPolicyAsync (distributionPolicyId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateDistributionPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateDistributionPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.UpdateDistributionPolicyAsync (distributionPolicyId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distributionPolicyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="distributionPolicyId"> Id of a distribution policy. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a distribution policy.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="distributionPolicyId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="distributionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateExceptionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt; UpdateExceptionPolicy (Azure.Communication.JobRouter.ExceptionPolicy exceptionPolicy, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt; UpdateExceptionPolicy(class Azure.Communication.JobRouter.ExceptionPolicy exceptionPolicy, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateExceptionPolicy(Azure.Communication.JobRouter.ExceptionPolicy,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExceptionPolicy (exceptionPolicy As ExceptionPolicy, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExceptionPolicy)" />
      <MemberSignature Language="F#" Value="abstract member UpdateExceptionPolicy : Azure.Communication.JobRouter.ExceptionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&#xA;override this.UpdateExceptionPolicy : Azure.Communication.JobRouter.ExceptionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;" Usage="jobRouterAdministrationClient.UpdateExceptionPolicy (exceptionPolicy, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicy" Type="Azure.Communication.JobRouter.ExceptionPolicy" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicy"> Exception policy to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new exception policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateExceptionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateExceptionPolicy (string exceptionPolicyId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateExceptionPolicy(string exceptionPolicyId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateExceptionPolicy(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExceptionPolicy (exceptionPolicyId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateExceptionPolicy : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateExceptionPolicy : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.UpdateExceptionPolicy (exceptionPolicyId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a exception policy.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateExceptionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt; UpdateExceptionPolicyAsync (Azure.Communication.JobRouter.ExceptionPolicy exceptionPolicy, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt; UpdateExceptionPolicyAsync(class Azure.Communication.JobRouter.ExceptionPolicy exceptionPolicy, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateExceptionPolicyAsync(Azure.Communication.JobRouter.ExceptionPolicy,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExceptionPolicyAsync (exceptionPolicy As ExceptionPolicy, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExceptionPolicy))" />
      <MemberSignature Language="F#" Value="abstract member UpdateExceptionPolicyAsync : Azure.Communication.JobRouter.ExceptionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;&#xA;override this.UpdateExceptionPolicyAsync : Azure.Communication.JobRouter.ExceptionPolicy * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;" Usage="jobRouterAdministrationClient.UpdateExceptionPolicyAsync (exceptionPolicy, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.ExceptionPolicy&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicy" Type="Azure.Communication.JobRouter.ExceptionPolicy" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicy"> Exception policy to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new exception policy. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateExceptionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateExceptionPolicyAsync (string exceptionPolicyId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateExceptionPolicyAsync(string exceptionPolicyId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateExceptionPolicyAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExceptionPolicyAsync (exceptionPolicyId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateExceptionPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateExceptionPolicyAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.UpdateExceptionPolicyAsync (exceptionPolicyId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptionPolicyId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="exceptionPolicyId"> Id of an exception policy. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a exception policy.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exceptionPolicyId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exceptionPolicyId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt; UpdateQueue (Azure.Communication.JobRouter.RouterQueue queue, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt; UpdateQueue(class Azure.Communication.JobRouter.RouterQueue queue, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateQueue(Azure.Communication.JobRouter.RouterQueue,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQueue (queue As RouterQueue, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterQueue)" />
      <MemberSignature Language="F#" Value="abstract member UpdateQueue : Azure.Communication.JobRouter.RouterQueue * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&#xA;override this.UpdateQueue : Azure.Communication.JobRouter.RouterQueue * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;" Usage="jobRouterAdministrationClient.UpdateQueue (queue, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="Azure.Communication.JobRouter.RouterQueue" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queue"> Queue to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates a queue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queue" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateQueue (string queueId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateQueue(string queueId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateQueue(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQueue (queueId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateQueue : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateQueue : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterAdministrationClient.UpdateQueue (queueId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a queue.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt; UpdateQueueAsync (Azure.Communication.JobRouter.RouterQueue queue, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueue&gt;&gt; UpdateQueueAsync(class Azure.Communication.JobRouter.RouterQueue queue, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateQueueAsync(Azure.Communication.JobRouter.RouterQueue,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQueueAsync (queue As RouterQueue, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterQueue))" />
      <MemberSignature Language="F#" Value="abstract member UpdateQueueAsync : Azure.Communication.JobRouter.RouterQueue * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;&#xA;override this.UpdateQueueAsync : Azure.Communication.JobRouter.RouterQueue * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;" Usage="jobRouterAdministrationClient.UpdateQueueAsync (queue, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="Azure.Communication.JobRouter.RouterQueue" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queue"> Queue to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Updates a queue. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queue" /> is null. </exception>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateQueueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateQueueAsync (string queueId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateQueueAsync(string queueId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterAdministrationClient.UpdateQueueAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateQueueAsync (queueId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateQueueAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateQueueAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterAdministrationClient.UpdateQueueAsync (queueId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of a queue. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a queue.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
