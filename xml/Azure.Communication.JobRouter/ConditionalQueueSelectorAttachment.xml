<Type Name="ConditionalQueueSelectorAttachment" FullName="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment">
  <TypeSignature Language="C#" Value="public class ConditionalQueueSelectorAttachment : Azure.Communication.JobRouter.QueueSelectorAttachment" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConditionalQueueSelectorAttachment extends Azure.Communication.JobRouter.QueueSelectorAttachment" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="DocId" Value="T:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" />
  <TypeSignature Language="VB.NET" Value="Public Class ConditionalQueueSelectorAttachment&#xA;Inherits QueueSelectorAttachment" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="F#" Value="type ConditionalQueueSelectorAttachment = class&#xA;    inherit QueueSelectorAttachment" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="C#" Value="public class ConditionalQueueSelectorAttachment : Azure.Communication.JobRouter.QueueSelectorAttachment, System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;, System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConditionalQueueSelectorAttachment extends Azure.Communication.JobRouter.QueueSelectorAttachment implements class System.ClientModel.Primitives.IJsonModel`1&lt;class Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;, class System.ClientModel.Primitives.IPersistableModel`1&lt;class Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="VB.NET" Value="Public Class ConditionalQueueSelectorAttachment&#xA;Inherits QueueSelectorAttachment&#xA;Implements IJsonModel(Of ConditionalQueueSelectorAttachment), IPersistableModel(Of ConditionalQueueSelectorAttachment)" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="F#" Value="type ConditionalQueueSelectorAttachment = class&#xA;    inherit QueueSelectorAttachment&#xA;    interface IJsonModel&lt;ConditionalQueueSelectorAttachment&gt;&#xA;    interface IPersistableModel&lt;ConditionalQueueSelectorAttachment&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <AssemblyInfo>
    <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Communication.JobRouter.QueueSelectorAttachment</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary> Describes a set of queue selectors that will be attached if the given condition resolves to true. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalQueueSelectorAttachment (Azure.Communication.JobRouter.RouterRule condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Communication.JobRouter.RouterRule condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.#ctor(Azure.Communication.JobRouter.RouterRule)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As RouterRule)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment : Azure.Communication.JobRouter.RouterRule -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" Usage="new Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment condition" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="Azure.Communication.JobRouter.RouterRule" />
      </Parameters>
      <Docs>
        <param name="condition">
             A rule of one of the following types:
            
             StaticRule:  A rule
             providing static rules that always return the same result, regardless of
             input.
             DirectMapRule:  A rule that return the same labels as the input
             labels.
             ExpressionRule: A rule providing inline expression
             rules.
             FunctionRule: A rule providing a binding to an HTTP Triggered Azure
             Function.
             WebhookRule: A rule providing a binding to a webserver following
             OAuth2.0 authentication protocol.
             </param>
        <summary> Initializes a new instance of ConditionalQueueSelectorAttachment. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConditionalQueueSelectorAttachment (Azure.Communication.JobRouter.RouterRule condition, System.Collections.Generic.IEnumerable&lt;Azure.Communication.JobRouter.RouterQueueSelector&gt; queueSelectors);" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Communication.JobRouter.RouterRule condition, class System.Collections.Generic.IEnumerable`1&lt;class Azure.Communication.JobRouter.RouterQueueSelector&gt; queueSelectors) cil managed" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.#ctor(Azure.Communication.JobRouter.RouterRule,System.Collections.Generic.IEnumerable{Azure.Communication.JobRouter.RouterQueueSelector})" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As RouterRule, queueSelectors As IEnumerable(Of RouterQueueSelector))" FrameworkAlternate="azure-dotnet-preview" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment : Azure.Communication.JobRouter.RouterRule * seq&lt;Azure.Communication.JobRouter.RouterQueueSelector&gt; -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" Usage="new Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment (condition, queueSelectors)" FrameworkAlternate="azure-dotnet-preview" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="Azure.Communication.JobRouter.RouterRule" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="queueSelectors" Type="System.Collections.Generic.IEnumerable&lt;Azure.Communication.JobRouter.RouterQueueSelector&gt;" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="condition">
             A rule of one of the following types:
            
             StaticRule:  A rule providing static rules that always return the same result, regardless of input.
             DirectMapRule:  A rule that return the same labels as the input labels.
             ExpressionRule: A rule providing inline expression rules.
             AzureFunctionRule: A rule providing a binding to an HTTP Triggered Azure Function.
             WebhookRule: A rule providing a binding to a webserver following OAuth2.0 authentication protocol.
             Please note <see cref="T:Azure.Communication.JobRouter.RouterRule" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
             The available derived classes include <see cref="T:Azure.Communication.JobRouter.FunctionRouterRule" />, <see cref="T:Azure.Communication.JobRouter.DirectMapRouterRule" />, <see cref="T:Azure.Communication.JobRouter.ExpressionRouterRule" />, <see cref="T:Azure.Communication.JobRouter.StaticRouterRule" /> and <see cref="T:Azure.Communication.JobRouter.WebhookRouterRule" />.
             </param>
        <param name="queueSelectors"> The queue selectors to attach. </param>
        <summary> Initializes a new instance of ConditionalQueueSelectorAttachment. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="condition" /> or <paramref name="queueSelectors" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public Azure.Communication.JobRouter.RouterRule Condition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Communication.JobRouter.RouterRule Condition" />
      <MemberSignature Language="DocId" Value="P:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.Condition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Condition As RouterRule" />
      <MemberSignature Language="F#" Value="member this.Condition : Azure.Communication.JobRouter.RouterRule" Usage="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.Condition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.JobRouter.RouterRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The condition that must be true for the queue selectors to be attached.
            Please note <see cref="T:Azure.Communication.JobRouter.RouterRule" /> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
            The available derived classes include <see cref="T:Azure.Communication.JobRouter.DirectMapRouterRule" />, <see cref="T:Azure.Communication.JobRouter.ExpressionRouterRule" />, <see cref="T:Azure.Communication.JobRouter.FunctionRouterRule" />, <see cref="T:Azure.Communication.JobRouter.StaticRouterRule" /> and <see cref="T:Azure.Communication.JobRouter.WebhookRouterRule" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueSelectors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Azure.Communication.JobRouter.RouterQueueSelector&gt; QueueSelectors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Azure.Communication.JobRouter.RouterQueueSelector&gt; QueueSelectors" />
      <MemberSignature Language="DocId" Value="P:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.QueueSelectors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueSelectors As IList(Of RouterQueueSelector)" />
      <MemberSignature Language="F#" Value="member this.QueueSelectors : System.Collections.Generic.IList&lt;Azure.Communication.JobRouter.RouterQueueSelector&gt;" Usage="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.QueueSelectors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Azure.Communication.JobRouter.RouterQueueSelector&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The queue selectors to attach. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment IJsonModel&lt;ConditionalQueueSelectorAttachment&gt;.Create (ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.System#ClientModel#Primitives#IJsonModel&lt;Azure#Communication#JobRouter#ConditionalQueueSelectorAttachment&gt;#Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (ByRef reader As Utf8JsonReader, options As ModelReaderWriterOptions) As ConditionalQueueSelectorAttachment Implements IJsonModel(Of ConditionalQueueSelectorAttachment).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" Usage="conditionalQueueSelectorAttachment.System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create (reader, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Reads one JSON value (including objects or arrays) from the provided reader and converts it to a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the JSON value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write">
      <MemberSignature Language="C#" Value="void IJsonModel&lt;ConditionalQueueSelectorAttachment&gt;.Write (System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write(class System.Text.Json.Utf8JsonWriter writer, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.System#ClientModel#Primitives#IJsonModel&lt;Azure#Communication#JobRouter#ConditionalQueueSelectorAttachment&gt;#Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub Write (writer As Utf8JsonWriter, options As ModelReaderWriterOptions) Implements IJsonModel(Of ConditionalQueueSelectorAttachment).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit" Usage="conditionalQueueSelectorAttachment.System.ClientModel.Primitives.IJsonModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write (writer, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write into.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model to the provided <see cref="T:System.Text.Json.Utf8JsonWriter" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment IPersistableModel&lt;ConditionalQueueSelectorAttachment&gt;.Create (BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create(class System.BinaryData data, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.System#ClientModel#Primitives#IPersistableModel&lt;Azure#Communication#JobRouter#ConditionalQueueSelectorAttachment&gt;#Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (data As BinaryData, options As ModelReaderWriterOptions) As ConditionalQueueSelectorAttachment Implements IPersistableModel(Of ConditionalQueueSelectorAttachment).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment" Usage="conditionalQueueSelectorAttachment.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Create (data, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.BinaryData" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.BinaryData" /> to parse.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Converts the provided <see cref="T:System.BinaryData" /> into a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.GetFormatFromOptions">
      <MemberSignature Language="C#" Value="string IPersistableModel&lt;ConditionalQueueSelectorAttachment&gt;.GetFormatFromOptions (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.GetFormatFromOptions(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.System#ClientModel#Primitives#IPersistableModel&lt;Azure#Communication#JobRouter#ConditionalQueueSelectorAttachment&gt;#GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function GetFormatFromOptions (options As ModelReaderWriterOptions) As String Implements IPersistableModel(Of ConditionalQueueSelectorAttachment).GetFormatFromOptions" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string" Usage="conditionalQueueSelectorAttachment.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.GetFormatFromOptions options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
            Gets the data interchange format (JSON, Xml, etc) that the model uses when communicating with the service.
            <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param></summary>
        <returns>The format that the model uses when communicating with the serivce.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write">
      <MemberSignature Language="C#" Value="BinaryData IPersistableModel&lt;ConditionalQueueSelectorAttachment&gt;.Write (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.BinaryData System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment.System#ClientModel#Primitives#IPersistableModel&lt;Azure#Communication#JobRouter#ConditionalQueueSelectorAttachment&gt;#Write(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Write (options As ModelReaderWriterOptions) As BinaryData Implements IPersistableModel(Of ConditionalQueueSelectorAttachment).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData" Usage="conditionalQueueSelectorAttachment.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Communication.JobRouter.ConditionalQueueSelectorAttachment&gt;.Write options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Write(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model into a <see cref="T:System.BinaryData" />.
            </summary>
        <returns>A binary representation of the written model.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
