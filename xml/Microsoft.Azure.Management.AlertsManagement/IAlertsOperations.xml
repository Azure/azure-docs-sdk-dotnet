<Type Name="IAlertsOperations" FullName="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations">
  <TypeSignature Language="C#" Value="public interface IAlertsOperations" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAlertsOperations" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAlertsOperations" />
  <TypeSignature Language="F#" Value="type IAlertsOperations = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            AlertsOperations operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ChangeStateWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; ChangeStateWithHttpMessagesAsync (string alertId, string newState, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; ChangeStateWithHttpMessagesAsync(string alertId, string newState, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.ChangeStateWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeStateWithHttpMessagesAsync (alertId As String, newState As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of Alert))" />
      <MemberSignature Language="F#" Value="abstract member ChangeStateWithHttpMessagesAsync : string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;" Usage="iAlertsOperations.ChangeStateWithHttpMessagesAsync (alertId, newState, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="newState" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="newState">
            New state of the alert. Possible values include: 'New',
            'Acknowledged', 'Closed'
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Change the state of an alert.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllNextWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt; GetAllNextWithHttpMessagesAsync (string nextPageLink, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt; GetAllNextWithHttpMessagesAsync(string nextPageLink, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.GetAllNextWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllNextWithHttpMessagesAsync (nextPageLink As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of IPage(Of Alert)))" />
      <MemberSignature Language="F#" Value="abstract member GetAllNextWithHttpMessagesAsync : string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt;" Usage="iAlertsOperations.GetAllNextWithHttpMessagesAsync (nextPageLink, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            List all existing alerts, where the results can be filtered on the
            basis of multiple parameters (e.g. time range). The results can
            then be sorted on the basis specific fields, with the default being
            lastModifiedDateTime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt; GetAllWithHttpMessagesAsync (string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, string monitorService = default, string monitorCondition = default, string severity = default, string alertState = default, string alertRule = default, string smartGroupId = default, bool? includeContext = default, bool? includeEgressConfig = default, long? pageCount = default, string sortBy = default, string sortOrder = default, string select = default, string timeRange = default, string customTimeRange = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt; GetAllWithHttpMessagesAsync(string targetResource, string targetResourceType, string targetResourceGroup, string monitorService, string monitorCondition, string severity, string alertState, string alertRule, string smartGroupId, valuetype System.Nullable`1&lt;bool&gt; includeContext, valuetype System.Nullable`1&lt;bool&gt; includeEgressConfig, valuetype System.Nullable`1&lt;int64&gt; pageCount, string sortBy, string sortOrder, string select, string timeRange, string customTimeRange, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.GetAllWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllWithHttpMessagesAsync (Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional alertState As String = Nothing, Optional alertRule As String = Nothing, Optional smartGroupId As String = Nothing, Optional includeContext As Nullable(Of Boolean) = Nothing, Optional includeEgressConfig As Nullable(Of Boolean) = Nothing, Optional pageCount As Nullable(Of Long) = Nothing, Optional sortBy As String = Nothing, Optional sortOrder As String = Nothing, Optional select As String = Nothing, Optional timeRange As String = Nothing, Optional customTimeRange As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of IPage(Of Alert)))" />
      <MemberSignature Language="F#" Value="abstract member GetAllWithHttpMessagesAsync : string * string * string * string * string * string * string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * string * string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt;" Usage="iAlertsOperations.GetAllWithHttpMessagesAsync (targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="alertState" Type="System.String" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="includeContext" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeEgressConfig" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pageCount" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="select" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is
            select all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance.
            Default value is select all. Possible values include: 'Application
            Insights', 'ActivityLog Administrative', 'ActivityLog Security',
            'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            Autoscale', 'Log Analytics', 'Nagios', 'Platform', 'SCOM',
            'ServiceHealth', 'SmartDetector', 'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'.
            Default value is to select all. Possible values include: 'Fired',
            'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values
            include: 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="alertState">
            Filter by state of the alert instance. Default value is to select
            all. Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="alertRule">
            Filter by specific alert rule.  Default value is to select all.
            </param>
        <param name="smartGroupId">
            Filter the alerts list by the Smart Group Id. Default value is
            none.
            </param>
        <param name="includeContext">
            Include context which has contextual data specific to the monitor
            service. Default value is false'
            </param>
        <param name="includeEgressConfig">
            Include egress config which would be used for displaying the
            content in portal.  Default value is 'false'.
            </param>
        <param name="pageCount">
            Determines number of alerts returned per page in response.
            Permissible value is between 1 to 250. When the "includeContent"
            filter is selected, maximum value allowed is 25. Default value is
            25.
            </param>
        <param name="sortBy">
            Sort the query results by input field,  Default value is
            'lastModifiedDateTime'. Possible values include: 'name',
            'severity', 'alertState', 'monitorCondition', 'targetResource',
            'targetResourceName', 'targetResourceGroup', 'targetResourceType',
            'startDateTime', 'lastModifiedDateTime'
            </param>
        <param name="sortOrder">
            Sort the query results order in either ascending or descending.
            Default value is 'desc' for time fields and 'asc' for others.
            Possible values include: 'asc', 'desc'
            </param>
        <param name="select">
            This filter allows to selection of the fields(comma separated)
            which would  be part of the essential section. This would allow to
            project only the  required fields rather than getting entire
            content.  Default is to fetch all the fields in the essentials
            section.
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1
            day. Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="customTimeRange">
            Filter by custom time range in the format
            &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601
            format)'. Permissible values is within 30 days from  query time.
            Either timeRange or customTimeRange could be used but not both.
            Default is none.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            List all existing alerts, where the results can be filtered on the
            basis of multiple parameters (e.g. time range). The results can
            then be sorted on the basis specific fields, with the default being
            lastModifiedDateTime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByIdWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; GetByIdWithHttpMessagesAsync (string alertId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; GetByIdWithHttpMessagesAsync(string alertId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.GetByIdWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByIdWithHttpMessagesAsync (alertId As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of Alert))" />
      <MemberSignature Language="F#" Value="abstract member GetByIdWithHttpMessagesAsync : string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;" Usage="iAlertsOperations.GetByIdWithHttpMessagesAsync (alertId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get a specific alert.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Get information related to a specific alert
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHistoryWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt;&gt; GetHistoryWithHttpMessagesAsync (string alertId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt;&gt; GetHistoryWithHttpMessagesAsync(string alertId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.GetHistoryWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHistoryWithHttpMessagesAsync (alertId As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of AlertModification))" />
      <MemberSignature Language="F#" Value="abstract member GetHistoryWithHttpMessagesAsync : string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt;&gt;" Usage="iAlertsOperations.GetHistoryWithHttpMessagesAsync (alertId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get the history of an alert, which captures any monitor condition
            changes (Fired/Resolved) and alert state changes
            (New/Acknowledged/Closed).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSummaryWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt;&gt; GetSummaryWithHttpMessagesAsync (string groupby, bool? includeSmartGroupsCount = default, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, string monitorService = default, string monitorCondition = default, string severity = default, string alertState = default, string alertRule = default, string timeRange = default, string customTimeRange = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt;&gt; GetSummaryWithHttpMessagesAsync(string groupby, valuetype System.Nullable`1&lt;bool&gt; includeSmartGroupsCount, string targetResource, string targetResourceType, string targetResourceGroup, string monitorService, string monitorCondition, string severity, string alertState, string alertRule, string timeRange, string customTimeRange, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.GetSummaryWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSummaryWithHttpMessagesAsync (groupby As String, Optional includeSmartGroupsCount As Nullable(Of Boolean) = Nothing, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional alertState As String = Nothing, Optional alertRule As String = Nothing, Optional timeRange As String = Nothing, Optional customTimeRange As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of AlertsSummary))" />
      <MemberSignature Language="F#" Value="abstract member GetSummaryWithHttpMessagesAsync : string * Nullable&lt;bool&gt; * string * string * string * string * string * string * string * string * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt;&gt;" Usage="iAlertsOperations.GetSummaryWithHttpMessagesAsync (groupby, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupby" Type="System.String" />
        <Parameter Name="includeSmartGroupsCount" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="alertState" Type="System.String" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="groupby">
            This parameter allows the result set to be grouped by input fields
            (Maximum 2 comma separated fields supported). For example,
            groupby=severity or groupby=severity,alertstate. Possible values
            include: 'severity', 'alertState', 'monitorCondition',
            'monitorService', 'signalType', 'alertRule'
            </param>
        <param name="includeSmartGroupsCount">
            Include count of the SmartGroups as part of the summary. Default
            value is 'false'.
            </param>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is
            select all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance.
            Default value is select all. Possible values include: 'Application
            Insights', 'ActivityLog Administrative', 'ActivityLog Security',
            'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            Autoscale', 'Log Analytics', 'Nagios', 'Platform', 'SCOM',
            'ServiceHealth', 'SmartDetector', 'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'.
            Default value is to select all. Possible values include: 'Fired',
            'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values
            include: 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="alertState">
            Filter by state of the alert instance. Default value is to select
            all. Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="alertRule">
            Filter by specific alert rule.  Default value is to select all.
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1
            day. Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="customTimeRange">
            Filter by custom time range in the format
            &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601
            format)'. Permissible values is within 30 days from  query time.
            Either timeRange or customTimeRange could be used but not both.
            Default is none.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters
            (e.g. grouping by 'Severity' returns the count of alerts for each
            severity).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MetaDataWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt;&gt; MetaDataWithHttpMessagesAsync (System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt;&gt; MetaDataWithHttpMessagesAsync(class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.IAlertsOperations.MetaDataWithHttpMessagesAsync(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function MetaDataWithHttpMessagesAsync (Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of AlertsMetaData))" />
      <MemberSignature Language="F#" Value="abstract member MetaDataWithHttpMessagesAsync : System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt;&gt;" Usage="iAlertsOperations.MetaDataWithHttpMessagesAsync (customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            List alerts meta data information based on value of identifier
            parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
