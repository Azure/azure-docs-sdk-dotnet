<Type Name="ISmartGroupsOperations" FullName="Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations">
  <TypeSignature Language="C#" Value="public interface ISmartGroupsOperations" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISmartGroupsOperations" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISmartGroupsOperations" />
  <TypeSignature Language="F#" Value="type ISmartGroupsOperations = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            SmartGroupsOperations operations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ChangeStateWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup,Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsChangeStateHeaders&gt;&gt; ChangeStateWithHttpMessagesAsync (string smartGroupId, string newState, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`2&lt;class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup, class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsChangeStateHeaders&gt;&gt; ChangeStateWithHttpMessagesAsync(string smartGroupId, string newState, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations.ChangeStateWithHttpMessagesAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChangeStateWithHttpMessagesAsync (smartGroupId As String, newState As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of SmartGroup, SmartGroupsChangeStateHeaders))" />
      <MemberSignature Language="F#" Value="abstract member ChangeStateWithHttpMessagesAsync : string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup, Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsChangeStateHeaders&gt;&gt;" Usage="iSmartGroupsOperations.ChangeStateWithHttpMessagesAsync (smartGroupId, newState, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup,Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsChangeStateHeaders&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="newState" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="smartGroupId">
            Smart group unique id.
            </param>
        <param name="newState">
            New state of the alert. Possible values include: 'New',
            'Acknowledged', 'Closed'
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Change the state of a Smart Group.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllNextWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt; GetAllNextWithHttpMessagesAsync (string nextPageLink, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt; GetAllNextWithHttpMessagesAsync(string nextPageLink, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations.GetAllNextWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllNextWithHttpMessagesAsync (nextPageLink As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of IPage(Of SmartGroup)))" />
      <MemberSignature Language="F#" Value="abstract member GetAllNextWithHttpMessagesAsync : string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt;" Usage="iSmartGroupsOperations.GetAllNextWithHttpMessagesAsync (nextPageLink, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get all Smart Groups within a specified subscription
            </summary>
        <returns>To be added.</returns>
        <remarks>
            List all the Smart Groups within a specified subscription.
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt; GetAllWithHttpMessagesAsync (string targetResource = default, string targetResourceGroup = default, string targetResourceType = default, string monitorService = default, string monitorCondition = default, string severity = default, string smartGroupState = default, string timeRange = default, long? pageCount = default, string sortBy = default, string sortOrder = default, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt; GetAllWithHttpMessagesAsync(string targetResource, string targetResourceGroup, string targetResourceType, string monitorService, string monitorCondition, string severity, string smartGroupState, string timeRange, valuetype System.Nullable`1&lt;int64&gt; pageCount, string sortBy, string sortOrder, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations.GetAllWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int64},System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllWithHttpMessagesAsync (Optional targetResource As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional targetResourceType As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional smartGroupState As String = Nothing, Optional timeRange As String = Nothing, Optional pageCount As Nullable(Of Long) = Nothing, Optional sortBy As String = Nothing, Optional sortOrder As String = Nothing, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of IPage(Of SmartGroup)))" />
      <MemberSignature Language="F#" Value="abstract member GetAllWithHttpMessagesAsync : string * string * string * string * string * string * string * string * Nullable&lt;int64&gt; * string * string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt;" Usage="iSmartGroupsOperations.GetAllWithHttpMessagesAsync (targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="smartGroupState" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="pageCount" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is
            select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance.
            Default value is select all. Possible values include: 'Application
            Insights', 'ActivityLog Administrative', 'ActivityLog Security',
            'ActivityLog Recommendation', 'ActivityLog Policy', 'ActivityLog
            Autoscale', 'Log Analytics', 'Nagios', 'Platform', 'SCOM',
            'ServiceHealth', 'SmartDetector', 'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'.
            Default value is to select all. Possible values include: 'Fired',
            'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values
            include: 'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="smartGroupState">
            Filter by state of the smart group. Default value is to select all.
            Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1
            day. Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="pageCount">
            Determines number of alerts returned per page in response.
            Permissible value is between 1 to 250. When the "includeContent"
            filter is selected, maximum value allowed is 25. Default value is
            25.
            </param>
        <param name="sortBy">
            Sort the query results by input field. Default value is sort by
            'lastModifiedDateTime'. Possible values include: 'alertsCount',
            'state', 'severity', 'startDateTime', 'lastModifiedDateTime'
            </param>
        <param name="sortOrder">
            Sort the query results order in either ascending or descending.
            Default value is 'desc' for time fields and 'asc' for others.
            Possible values include: 'asc', 'desc'
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get all Smart Groups within a specified subscription
            </summary>
        <returns>To be added.</returns>
        <remarks>
            List all the Smart Groups within a specified subscription.
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetByIdWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup,Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsGetByIdHeaders&gt;&gt; GetByIdWithHttpMessagesAsync (string smartGroupId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`2&lt;class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup, class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsGetByIdHeaders&gt;&gt; GetByIdWithHttpMessagesAsync(string smartGroupId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations.GetByIdWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByIdWithHttpMessagesAsync (smartGroupId As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of SmartGroup, SmartGroupsGetByIdHeaders))" />
      <MemberSignature Language="F#" Value="abstract member GetByIdWithHttpMessagesAsync : string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup, Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsGetByIdHeaders&gt;&gt;" Usage="iSmartGroupsOperations.GetByIdWithHttpMessagesAsync (smartGroupId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroup,Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupsGetByIdHeaders&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="smartGroupId">
            Smart group unique id.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get information related to a specific Smart Group.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Get information related to a specific Smart Group.
            </remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHistoryWithHttpMessagesAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupModification&gt;&gt; GetHistoryWithHttpMessagesAsync (string smartGroupId, System.Collections.Generic.Dictionary&lt;string,System.Collections.Generic.List&lt;string&gt;&gt; customHeaders = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.AzureOperationResponse`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupModification&gt;&gt; GetHistoryWithHttpMessagesAsync(string smartGroupId, class System.Collections.Generic.Dictionary`2&lt;string, class System.Collections.Generic.List`1&lt;string&gt;&gt; customHeaders, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.ISmartGroupsOperations.GetHistoryWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHistoryWithHttpMessagesAsync (smartGroupId As String, Optional customHeaders As Dictionary(Of String, List(Of String)) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AzureOperationResponse(Of SmartGroupModification))" />
      <MemberSignature Language="F#" Value="abstract member GetHistoryWithHttpMessagesAsync : string * System.Collections.Generic.Dictionary&lt;string, System.Collections.Generic.List&lt;string&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupModification&gt;&gt;" Usage="iSmartGroupsOperations.GetHistoryWithHttpMessagesAsync (smartGroupId, customHeaders, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.AzureOperationResponse&lt;Microsoft.Azure.Management.AlertsManagement.Models.SmartGroupModification&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="customHeaders" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Collections.Generic.List&lt;System.String&gt;&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="smartGroupId">
            Smart group unique id.
            </param>
        <param name="customHeaders">
            The headers that will be added to request.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get the history a smart group, which captures any Smart Group state
            changes (New/Acknowledged/Closed) .
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Management.AlertsManagement.Models.ErrorResponseException">
            Thrown when the operation returned an invalid status code
            </exception>
        <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
        <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
