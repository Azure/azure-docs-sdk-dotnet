<Type Name="AlertsOperationsExtensions" FullName="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions">
  <TypeSignature Language="C#" Value="public static class AlertsOperationsExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AlertsOperationsExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module AlertsOperationsExtensions" />
  <TypeSignature Language="F#" Value="type AlertsOperationsExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for AlertsOperations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ChangeState">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.AlertsManagement.Models.Alert ChangeState (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, string newState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.AlertsManagement.Models.Alert ChangeState(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, string newState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.ChangeState(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ChangeState (operations As IAlertsOperations, alertId As String, newState As String) As Alert" />
      <MemberSignature Language="F#" Value="static member ChangeState : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * string -&gt; Microsoft.Azure.Management.AlertsManagement.Models.Alert" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.ChangeState (operations, alertId, newState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.AlertsManagement.Models.Alert</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="newState" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="newState">
            New state of the alert. Possible values include: 'New', 'Acknowledged',
            'Closed'
            </param>
        <summary>
            Change the state of an alert.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeStateAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; ChangeStateAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, string newState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; ChangeStateAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, string newState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.ChangeStateAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ChangeStateAsync (operations As IAlertsOperations, alertId As String, newState As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Alert)" />
      <MemberSignature Language="F#" Value="static member ChangeStateAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.ChangeStateAsync (operations, alertId, newState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="newState" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="newState">
            New state of the alert. Possible values include: 'New', 'Acknowledged',
            'Closed'
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Change the state of an alert.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAll">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; GetAll (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, string monitorService = default, string monitorCondition = default, string severity = default, string alertState = default, string alertRule = default, string smartGroupId = default, bool? includeContext = default, bool? includeEgressConfig = default, long? pageCount = default, string sortBy = default, string sortOrder = default, string select = default, string timeRange = default, string customTimeRange = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; GetAll(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string targetResource, string targetResourceType, string targetResourceGroup, string monitorService, string monitorCondition, string severity, string alertState, string alertRule, string smartGroupId, valuetype System.Nullable`1&lt;bool&gt; includeContext, valuetype System.Nullable`1&lt;bool&gt; includeEgressConfig, valuetype System.Nullable`1&lt;int64&gt; pageCount, string sortBy, string sortOrder, string select, string timeRange, string customTimeRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAll(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAll (operations As IAlertsOperations, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional alertState As String = Nothing, Optional alertRule As String = Nothing, Optional smartGroupId As String = Nothing, Optional includeContext As Nullable(Of Boolean) = Nothing, Optional includeEgressConfig As Nullable(Of Boolean) = Nothing, Optional pageCount As Nullable(Of Long) = Nothing, Optional sortBy As String = Nothing, Optional sortOrder As String = Nothing, Optional select As String = Nothing, Optional timeRange As String = Nothing, Optional customTimeRange As String = Nothing) As IPage(Of Alert)" />
      <MemberSignature Language="F#" Value="static member GetAll : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * string * string * string * string * string * string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * string * string * string * string * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAll (operations, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="alertState" Type="System.String" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="includeContext" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeEgressConfig" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pageCount" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="select" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="customTimeRange" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is select
            all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance. Default value
            is select all. Possible values include: 'Application Insights',
            'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog
            Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log
            Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector',
            'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'. Default
            value is to select all. Possible values include: 'Fired', 'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values include:
            'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="alertState">
            Filter by state of the alert instance. Default value is to select all.
            Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="alertRule">
            Filter by specific alert rule.  Default value is to select all.
            </param>
        <param name="smartGroupId">
            Filter the alerts list by the Smart Group Id. Default value is none.
            </param>
        <param name="includeContext">
            Include context which has contextual data specific to the monitor service.
            Default value is false'
            </param>
        <param name="includeEgressConfig">
            Include egress config which would be used for displaying the content in
            portal.  Default value is 'false'.
            </param>
        <param name="pageCount">
            Determines number of alerts returned per page in response. Permissible
            value is between 1 to 250. When the "includeContent"  filter is selected,
            maximum value allowed is 25. Default value is 25.
            </param>
        <param name="sortBy">
            Sort the query results by input field,  Default value is
            'lastModifiedDateTime'. Possible values include: 'name', 'severity',
            'alertState', 'monitorCondition', 'targetResource', 'targetResourceName',
            'targetResourceGroup', 'targetResourceType', 'startDateTime',
            'lastModifiedDateTime'
            </param>
        <param name="sortOrder">
            Sort the query results order in either ascending or descending.  Default
            value is 'desc' for time fields and 'asc' for others. Possible values
            include: 'asc', 'desc'
            </param>
        <param name="select">
            This filter allows to selection of the fields(comma separated) which would
            be part of the essential section. This would allow to project only the
            required fields rather than getting entire content.  Default is to fetch
            all the fields in the essentials section.
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1 day.
            Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="customTimeRange">
            Filter by custom time range in the format
            &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'.
            Permissible values is within 30 days from  query time. Either timeRange or
            customTimeRange could be used but not both. Default is none.
            </param>
        <summary>
            List all existing alerts, where the results can be filtered on the basis of
            multiple parameters (e.g. time range). The results can then be sorted on
            the basis specific fields, with the default being lastModifiedDateTime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; GetAllAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, string monitorService = default, string monitorCondition = default, string severity = default, string alertState = default, string alertRule = default, string smartGroupId = default, bool? includeContext = default, bool? includeEgressConfig = default, long? pageCount = default, string sortBy = default, string sortOrder = default, string select = default, string timeRange = default, string customTimeRange = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; GetAllAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string targetResource, string targetResourceType, string targetResourceGroup, string monitorService, string monitorCondition, string severity, string alertState, string alertRule, string smartGroupId, valuetype System.Nullable`1&lt;bool&gt; includeContext, valuetype System.Nullable`1&lt;bool&gt; includeEgressConfig, valuetype System.Nullable`1&lt;int64&gt; pageCount, string sortBy, string sortOrder, string select, string timeRange, string customTimeRange, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAllAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllAsync (operations As IAlertsOperations, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional alertState As String = Nothing, Optional alertRule As String = Nothing, Optional smartGroupId As String = Nothing, Optional includeContext As Nullable(Of Boolean) = Nothing, Optional includeEgressConfig As Nullable(Of Boolean) = Nothing, Optional pageCount As Nullable(Of Long) = Nothing, Optional sortBy As String = Nothing, Optional sortOrder As String = Nothing, Optional select As String = Nothing, Optional timeRange As String = Nothing, Optional customTimeRange As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of Alert))" />
      <MemberSignature Language="F#" Value="static member GetAllAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * string * string * string * string * string * string * string * string * Nullable&lt;bool&gt; * Nullable&lt;bool&gt; * Nullable&lt;int64&gt; * string * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAllAsync (operations, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="alertState" Type="System.String" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="smartGroupId" Type="System.String" />
        <Parameter Name="includeContext" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="includeEgressConfig" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="pageCount" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="sortOrder" Type="System.String" />
        <Parameter Name="select" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is select
            all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance. Default value
            is select all. Possible values include: 'Application Insights',
            'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog
            Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log
            Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector',
            'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'. Default
            value is to select all. Possible values include: 'Fired', 'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values include:
            'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="alertState">
            Filter by state of the alert instance. Default value is to select all.
            Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="alertRule">
            Filter by specific alert rule.  Default value is to select all.
            </param>
        <param name="smartGroupId">
            Filter the alerts list by the Smart Group Id. Default value is none.
            </param>
        <param name="includeContext">
            Include context which has contextual data specific to the monitor service.
            Default value is false'
            </param>
        <param name="includeEgressConfig">
            Include egress config which would be used for displaying the content in
            portal.  Default value is 'false'.
            </param>
        <param name="pageCount">
            Determines number of alerts returned per page in response. Permissible
            value is between 1 to 250. When the "includeContent"  filter is selected,
            maximum value allowed is 25. Default value is 25.
            </param>
        <param name="sortBy">
            Sort the query results by input field,  Default value is
            'lastModifiedDateTime'. Possible values include: 'name', 'severity',
            'alertState', 'monitorCondition', 'targetResource', 'targetResourceName',
            'targetResourceGroup', 'targetResourceType', 'startDateTime',
            'lastModifiedDateTime'
            </param>
        <param name="sortOrder">
            Sort the query results order in either ascending or descending.  Default
            value is 'desc' for time fields and 'asc' for others. Possible values
            include: 'asc', 'desc'
            </param>
        <param name="select">
            This filter allows to selection of the fields(comma separated) which would
            be part of the essential section. This would allow to project only the
            required fields rather than getting entire content.  Default is to fetch
            all the fields in the essentials section.
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1 day.
            Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="customTimeRange">
            Filter by custom time range in the format
            &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'.
            Permissible values is within 30 days from  query time. Either timeRange or
            customTimeRange could be used but not both. Default is none.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            List all existing alerts, where the results can be filtered on the basis of
            multiple parameters (e.g. time range). The results can then be sorted on
            the basis specific fields, with the default being lastModifiedDateTime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllNext">
      <MemberSignature Language="C#" Value="public static Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; GetAllNext (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string nextPageLink);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; GetAllNext(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string nextPageLink) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAllNext(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllNext (operations As IAlertsOperations, nextPageLink As String) As IPage(Of Alert)" />
      <MemberSignature Language="F#" Value="static member GetAllNext : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string -&gt; Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAllNext (operations, nextPageLink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <summary>
            List all existing alerts, where the results can be filtered on the basis of
            multiple parameters (e.g. time range). The results can then be sorted on
            the basis specific fields, with the default being lastModifiedDateTime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllNextAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; GetAllNextAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Rest.Azure.IPage`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt; GetAllNextAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string nextPageLink, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAllNextAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAllNextAsync (operations As IAlertsOperations, nextPageLink As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IPage(Of Alert))" />
      <MemberSignature Language="F#" Value="static member GetAllNextAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetAllNextAsync (operations, nextPageLink, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Rest.Azure.IPage&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="nextPageLink" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="nextPageLink">
            The NextLink from the previous successful call to List operation.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            List all existing alerts, where the results can be filtered on the basis of
            multiple parameters (e.g. time range). The results can then be sorted on
            the basis specific fields, with the default being lastModifiedDateTime.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetById">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.AlertsManagement.Models.Alert GetById (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.AlertsManagement.Models.Alert GetById(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetById(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetById (operations As IAlertsOperations, alertId As String) As Alert" />
      <MemberSignature Language="F#" Value="static member GetById : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string -&gt; Microsoft.Azure.Management.AlertsManagement.Models.Alert" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetById (operations, alertId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.AlertsManagement.Models.Alert</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="alertId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <summary>
            Get a specific alert.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Get information related to a specific alert
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByIdAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; GetByIdAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt; GetByIdAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetByIdAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetByIdAsync (operations As IAlertsOperations, alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Alert)" />
      <MemberSignature Language="F#" Value="static member GetByIdAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetByIdAsync (operations, alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.Alert&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get a specific alert.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Get information related to a specific alert
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHistory">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.AlertsManagement.Models.AlertModification GetHistory (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.AlertsManagement.Models.AlertModification GetHistory(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetHistory(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHistory (operations As IAlertsOperations, alertId As String) As AlertModification" />
      <MemberSignature Language="F#" Value="static member GetHistory : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string -&gt; Microsoft.Azure.Management.AlertsManagement.Models.AlertModification" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetHistory (operations, alertId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.AlertsManagement.Models.AlertModification</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="alertId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <summary>
            Get the history of an alert, which captures any monitor condition changes
            (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHistoryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt; GetHistoryAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt; GetHistoryAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string alertId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetHistoryAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHistoryAsync (operations As IAlertsOperations, alertId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AlertModification)" />
      <MemberSignature Language="F#" Value="static member GetHistoryAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetHistoryAsync (operations, alertId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertModification&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="alertId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="alertId">
            Unique ID of an alert instance.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get the history of an alert, which captures any monitor condition changes
            (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSummary">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary GetSummary (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string groupby, bool? includeSmartGroupsCount = default, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, string monitorService = default, string monitorCondition = default, string severity = default, string alertState = default, string alertRule = default, string timeRange = default, string customTimeRange = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary GetSummary(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string groupby, valuetype System.Nullable`1&lt;bool&gt; includeSmartGroupsCount, string targetResource, string targetResourceType, string targetResourceGroup, string monitorService, string monitorCondition, string severity, string alertState, string alertRule, string timeRange, string customTimeRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetSummary(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSummary (operations As IAlertsOperations, groupby As String, Optional includeSmartGroupsCount As Nullable(Of Boolean) = Nothing, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional alertState As String = Nothing, Optional alertRule As String = Nothing, Optional timeRange As String = Nothing, Optional customTimeRange As String = Nothing) As AlertsSummary" />
      <MemberSignature Language="F#" Value="static member GetSummary : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * Nullable&lt;bool&gt; * string * string * string * string * string * string * string * string * string * string -&gt; Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetSummary (operations, groupby, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="groupby" Type="System.String" />
        <Parameter Name="includeSmartGroupsCount" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="alertState" Type="System.String" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="customTimeRange" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="groupby">
            This parameter allows the result set to be grouped by input fields (Maximum
            2 comma separated fields supported). For example, groupby=severity or
            groupby=severity,alertstate. Possible values include: 'severity',
            'alertState', 'monitorCondition', 'monitorService', 'signalType',
            'alertRule'
            </param>
        <param name="includeSmartGroupsCount">
            Include count of the SmartGroups as part of the summary. Default value is
            'false'.
            </param>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is select
            all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance. Default value
            is select all. Possible values include: 'Application Insights',
            'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog
            Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log
            Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector',
            'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'. Default
            value is to select all. Possible values include: 'Fired', 'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values include:
            'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="alertState">
            Filter by state of the alert instance. Default value is to select all.
            Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="alertRule">
            Filter by specific alert rule.  Default value is to select all.
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1 day.
            Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="customTimeRange">
            Filter by custom time range in the format
            &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'.
            Permissible values is within 30 days from  query time. Either timeRange or
            customTimeRange could be used but not both. Default is none.
            </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters (e.g.
            grouping by 'Severity' returns the count of alerts for each severity).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSummaryAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt; GetSummaryAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string groupby, bool? includeSmartGroupsCount = default, string targetResource = default, string targetResourceType = default, string targetResourceGroup = default, string monitorService = default, string monitorCondition = default, string severity = default, string alertState = default, string alertRule = default, string timeRange = default, string customTimeRange = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt; GetSummaryAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, string groupby, valuetype System.Nullable`1&lt;bool&gt; includeSmartGroupsCount, string targetResource, string targetResourceType, string targetResourceGroup, string monitorService, string monitorCondition, string severity, string alertState, string alertRule, string timeRange, string customTimeRange, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetSummaryAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.String,System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSummaryAsync (operations As IAlertsOperations, groupby As String, Optional includeSmartGroupsCount As Nullable(Of Boolean) = Nothing, Optional targetResource As String = Nothing, Optional targetResourceType As String = Nothing, Optional targetResourceGroup As String = Nothing, Optional monitorService As String = Nothing, Optional monitorCondition As String = Nothing, Optional severity As String = Nothing, Optional alertState As String = Nothing, Optional alertRule As String = Nothing, Optional timeRange As String = Nothing, Optional customTimeRange As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AlertsSummary)" />
      <MemberSignature Language="F#" Value="static member GetSummaryAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * string * Nullable&lt;bool&gt; * string * string * string * string * string * string * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.GetSummaryAsync (operations, groupby, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsSummary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="groupby" Type="System.String" />
        <Parameter Name="includeSmartGroupsCount" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="targetResource" Type="System.String" />
        <Parameter Name="targetResourceType" Type="System.String" />
        <Parameter Name="targetResourceGroup" Type="System.String" />
        <Parameter Name="monitorService" Type="System.String" />
        <Parameter Name="monitorCondition" Type="System.String" />
        <Parameter Name="severity" Type="System.String" />
        <Parameter Name="alertState" Type="System.String" />
        <Parameter Name="alertRule" Type="System.String" />
        <Parameter Name="timeRange" Type="System.String" />
        <Parameter Name="customTimeRange" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="groupby">
            This parameter allows the result set to be grouped by input fields (Maximum
            2 comma separated fields supported). For example, groupby=severity or
            groupby=severity,alertstate. Possible values include: 'severity',
            'alertState', 'monitorCondition', 'monitorService', 'signalType',
            'alertRule'
            </param>
        <param name="includeSmartGroupsCount">
            Include count of the SmartGroups as part of the summary. Default value is
            'false'.
            </param>
        <param name="targetResource">
            Filter by target resource( which is full ARM ID) Default value is select
            all.
            </param>
        <param name="targetResourceType">
            Filter by target resource type. Default value is select all.
            </param>
        <param name="targetResourceGroup">
            Filter by target resource group name. Default value is select all.
            </param>
        <param name="monitorService">
            Filter by monitor service which generates the alert instance. Default value
            is select all. Possible values include: 'Application Insights',
            'ActivityLog Administrative', 'ActivityLog Security', 'ActivityLog
            Recommendation', 'ActivityLog Policy', 'ActivityLog Autoscale', 'Log
            Analytics', 'Nagios', 'Platform', 'SCOM', 'ServiceHealth', 'SmartDetector',
            'VM Insights', 'Zabbix'
            </param>
        <param name="monitorCondition">
            Filter by monitor condition which is either 'Fired' or 'Resolved'. Default
            value is to select all. Possible values include: 'Fired', 'Resolved'
            </param>
        <param name="severity">
            Filter by severity.  Default value is select all. Possible values include:
            'Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4'
            </param>
        <param name="alertState">
            Filter by state of the alert instance. Default value is to select all.
            Possible values include: 'New', 'Acknowledged', 'Closed'
            </param>
        <param name="alertRule">
            Filter by specific alert rule.  Default value is to select all.
            </param>
        <param name="timeRange">
            Filter by time range by below listed values. Default value is 1 day.
            Possible values include: '1h', '1d', '7d', '30d'
            </param>
        <param name="customTimeRange">
            Filter by custom time range in the format
            &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)'.
            Permissible values is within 30 days from  query time. Either timeRange or
            customTimeRange could be used but not both. Default is none.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            Get a summarized count of your alerts grouped by various parameters (e.g.
            grouping by 'Severity' returns the count of alerts for each severity).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetaData">
      <MemberSignature Language="C#" Value="public static Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData MetaData (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData MetaData(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.MetaData(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MetaData (operations As IAlertsOperations) As AlertsMetaData" />
      <MemberSignature Language="F#" Value="static member MetaData : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations -&gt; Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.MetaData operations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <summary>
            List alerts meta data information based on value of identifier parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetaDataAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt; MetaDataAsync (this Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt; MetaDataAsync(class Microsoft.Azure.Management.AlertsManagement.IAlertsOperations operations, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.MetaDataAsync(Microsoft.Azure.Management.AlertsManagement.IAlertsOperations,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MetaDataAsync (operations As IAlertsOperations, Optional cancellationToken As CancellationToken = Nothing) As Task(Of AlertsMetaData)" />
      <MemberSignature Language="F#" Value="static member MetaDataAsync : Microsoft.Azure.Management.AlertsManagement.IAlertsOperations * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt;" Usage="Microsoft.Azure.Management.AlertsManagement.AlertsOperationsExtensions.MetaDataAsync (operations, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Management.AlertsManagement</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Management.AlertsManagement.Models.AlertsMetaData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operations" Type="Microsoft.Azure.Management.AlertsManagement.IAlertsOperations" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operations">
            The operations group for this extension method.
            </param>
        <param name="cancellationToken">
            The cancellation token.
            </param>
        <summary>
            List alerts meta data information based on value of identifier parameter.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
