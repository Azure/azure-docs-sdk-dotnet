<Type Name="SearchClient" FullName="Azure.Search.Documents.SearchClient">
  <TypeSignature Language="C#" Value="public class SearchClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Search.Documents.SearchClient" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchClient" />
  <TypeSignature Language="F#" Value="type SearchClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Search.Documents</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>11.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Azure Cognitive Search client that can be used to query an index and
            upload, merge, or delete documents.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SearchClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the SearchClient class for
            mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchClient (Uri endpoint, string indexName, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string indexName, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.#ctor(System.Uri,System.String,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, indexName As String, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.SearchClient : Uri * string * Azure.AzureKeyCredential -&gt; Azure.Search.Documents.SearchClient" Usage="new Azure.Search.Documents.SearchClient (endpoint, indexName, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="indexName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Required.  The URI endpoint of the Search Service.  This is likely
            to be similar to "https://{search_service}.search.windows.net".
            The URI must use HTTPS.
            </param>
        <param name="indexName">
            Required.  The name of the Search Index.
            </param>
        <param name="credential">
            Required.  The API key credential used to authenticate requests
            against the search service.  You need to use an admin key to
            modify the documents in a Search Index.  See
            <see href="https://docs.microsoft.com/azure/search/search-security-api-keys">Create and manage api-keys for an Azure Cognitive Search service</see>
            for more information about API keys in Azure Cognitive Search.
            </param>
        <summary>
            Initializes a new instance of the SearchClient class for
            querying an index and uploading, merging, or deleting documents.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="endpoint" />,
            <paramref name="indexName" />, or <paramref name="credential" /> is
            null.
            </exception>
        <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="endpoint" /> is not using HTTPS or
            the <paramref name="indexName" /> is empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchClient (Uri endpoint, string indexName, Azure.AzureKeyCredential credential, Azure.Search.Documents.SearchClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, string indexName, class Azure.AzureKeyCredential credential, class Azure.Search.Documents.SearchClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.#ctor(System.Uri,System.String,Azure.AzureKeyCredential,Azure.Search.Documents.SearchClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, indexName As String, credential As AzureKeyCredential, options As SearchClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Search.Documents.SearchClient : Uri * string * Azure.AzureKeyCredential * Azure.Search.Documents.SearchClientOptions -&gt; Azure.Search.Documents.SearchClient" Usage="new Azure.Search.Documents.SearchClient (endpoint, indexName, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="indexName" Type="System.String" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Search.Documents.SearchClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">
            Required.  The URI endpoint of the Search Service.  This is likely
            to be similar to "https://{search_service}.search.windows.net".
            The URI must use HTTPS.
            </param>
        <param name="indexName">
            Required.  The name of the Search Index.
            </param>
        <param name="credential">
            Required.  The API key credential used to authenticate requests
            against the search service.  You need to use an admin key to
            modify the documents in a Search Index.  See
            <see href="https://docs.microsoft.com/azure/search/search-security-api-keys">Create and manage api-keys for an Azure Cognitive Search service</see>
            for more information about API keys in Azure Cognitive Search.
            </param>
        <param name="options">
            Client configuration options for connecting to Azure Cognitive
            Search.
            </param>
        <summary>
            Initializes a new instance of the SearchClient class for
            querying an index and uploading, merging, or deleting documents.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
            Thrown when the <paramref name="endpoint" />,
            <paramref name="indexName" />, or <paramref name="credential" /> is
            null.
            </exception>
        <exception cref="T:System.ArgumentException">
            Thrown when the <paramref name="endpoint" /> is not using HTTPS or
            the <paramref name="indexName" /> is empty.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Autocomplete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt; Autocomplete (string searchText, string suggesterName, Azure.Search.Documents.AutocompleteOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.AutocompleteResults&gt; Autocomplete(string searchText, string suggesterName, class Azure.Search.Documents.AutocompleteOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.Autocomplete(System.String,System.String,Azure.Search.Documents.AutocompleteOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Autocomplete (searchText As String, suggesterName As String, Optional options As AutocompleteOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AutocompleteResults)" />
      <MemberSignature Language="F#" Value="abstract member Autocomplete : string * string * Azure.Search.Documents.AutocompleteOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;&#xA;override this.Autocomplete : string * string * Azure.Search.Documents.AutocompleteOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;" Usage="searchClient.Autocomplete (searchText, suggesterName, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="suggesterName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.AutocompleteOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchText">
            The search text on which to base autocomplete results.
            </param>
        <param name="suggesterName">
            The name of the suggester as specified in the suggesters collection
            that's part of the index definition.
            </param>
        <param name="options">
            Options that allow specifying autocomplete behaviors, like fuzzy
            matching.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Suggests query terms based on input text and matching documents in
            the search index.
            <see href="https://docs.microsoft.com/rest/api/searchservice/autocomplete">Autocomplete</see></summary>
        <returns>The result of Autocomplete query.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="AutocompleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;&gt; AutocompleteAsync (string searchText, string suggesterName, Azure.Search.Documents.AutocompleteOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.AutocompleteResults&gt;&gt; AutocompleteAsync(string searchText, string suggesterName, class Azure.Search.Documents.AutocompleteOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.AutocompleteAsync(System.String,System.String,Azure.Search.Documents.AutocompleteOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AutocompleteAsync (searchText As String, suggesterName As String, Optional options As AutocompleteOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AutocompleteResults))" />
      <MemberSignature Language="F#" Value="abstract member AutocompleteAsync : string * string * Azure.Search.Documents.AutocompleteOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;&gt;&#xA;override this.AutocompleteAsync : string * string * Azure.Search.Documents.AutocompleteOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;&gt;" Usage="searchClient.AutocompleteAsync (searchText, suggesterName, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.AutocompleteResults&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="suggesterName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.AutocompleteOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="searchText">
            The search text on which to base autocomplete results.
            </param>
        <param name="suggesterName">
            The name of the suggester as specified in the suggesters collection
            that's part of the index definition.
            </param>
        <param name="options">
            Options that allow specifying autocomplete behaviors, like fuzzy
            matching.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Suggests query terms based on input text and matching documents in
            the search index.
            <see href="https://docs.microsoft.com/rest/api/searchservice/autocomplete">Autocomplete</see></summary>
        <returns>The result of Autocomplete query.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocuments">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt; DeleteDocuments (string keyName, System.Collections.Generic.IEnumerable&lt;string&gt; keyValues, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt; DeleteDocuments(string keyName, class System.Collections.Generic.IEnumerable`1&lt;string&gt; keyValues, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.DeleteDocuments(System.String,System.Collections.Generic.IEnumerable{System.String},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDocuments (keyName As String, keyValues As IEnumerable(Of String), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IndexDocumentsResult)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDocuments : string * seq&lt;string&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&#xA;override this.DeleteDocuments : string * seq&lt;string&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;" Usage="searchClient.DeleteDocuments (keyName, keyValues, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="keyName">
            The name of the key field that uniquely identifies documents in
            the index.
            </param>
        <param name="keyValues">
            The keys of the documents to delete.
            </param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Delete documents from the index as a batch given only their keys.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocuments&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt; DeleteDocuments&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt; DeleteDocuments&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.DeleteDocuments``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDocuments(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IndexDocumentsResult)" />
      <MemberSignature Language="F#" Value="abstract member DeleteDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&#xA;override this.DeleteDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;" Usage="searchClient.DeleteDocuments (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Delete documents from the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the DeleteDocuments and DeleteDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; DeleteDocumentsAsync (string keyName, System.Collections.Generic.IEnumerable&lt;string&gt; keyValues, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; DeleteDocumentsAsync(string keyName, class System.Collections.Generic.IEnumerable`1&lt;string&gt; keyValues, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.DeleteDocumentsAsync(System.String,System.Collections.Generic.IEnumerable{System.String},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDocumentsAsync (keyName As String, keyValues As IEnumerable(Of String), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IndexDocumentsResult))" />
      <MemberSignature Language="F#" Value="abstract member DeleteDocumentsAsync : string * seq&lt;string&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;&#xA;override this.DeleteDocumentsAsync : string * seq&lt;string&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;" Usage="searchClient.DeleteDocumentsAsync (keyName, keyValues, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyName" Type="System.String" />
        <Parameter Name="keyValues" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="keyName">
            The name of the key field that uniquely identifies documents in
            the index.
            </param>
        <param name="keyValues">
            The keys of the documents to delete.
            </param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Delete documents from the index as a batch given only their keys.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteDocumentsAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; DeleteDocumentsAsync&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; DeleteDocumentsAsync&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.DeleteDocumentsAsync``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteDocumentsAsync(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IndexDocumentsResult))" />
      <MemberSignature Language="F#" Value="abstract member DeleteDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;&#xA;override this.DeleteDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;" Usage="searchClient.DeleteDocumentsAsync (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Delete documents from the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the DeleteDocuments and DeleteDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Endpoint">
      <MemberSignature Language="C#" Value="public virtual Uri Endpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Endpoint" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.SearchClient.Endpoint" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Endpoint As Uri" />
      <MemberSignature Language="F#" Value="member this.Endpoint : Uri" Usage="Azure.Search.Documents.SearchClient.Endpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the URI endpoint of the Search Service.  This is likely
            to be similar to "https://{search_service}.search.windows.net".
            </summary>
        <value>To be added.</value>
        <remarks>
            This is not the URI of the Search Index.  You could construct that
            URI with "{Endpoint}/indexes/{IndexName}" if needed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDocument&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;T&gt; GetDocument&lt;T&gt; (string key, Azure.Search.Documents.GetDocumentOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;!!T&gt; GetDocument&lt;T&gt;(string key, class Azure.Search.Documents.GetDocumentOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.GetDocument``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDocument(Of T) (key As String, Optional options As GetDocumentOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of T)" />
      <MemberSignature Language="F#" Value="abstract member GetDocument : string * Azure.Search.Documents.GetDocumentOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;'T&gt;&#xA;override this.GetDocument : string * Azure.Search.Documents.GetDocumentOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;'T&gt;" Usage="searchClient.GetDocument (key, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.GetDocumentOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="key">
            Required.  An string value that uniquely identifies each document
            in the index.  The key is sometimes referred to as a document ID.
            See
            <see href="https://docs.microsoft.com/rest/api/searchservice/naming-rules">Naming rules</see>
            for the rules for constructing valid document keys.
            </param>
        <param name="options">
            Options to customize the operation's behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Retrieves a document from Azure Cognitive Search.  This is useful
            when a user clicks on a specific search result, and you want to
            look up specific details about that document. You can only get one
            document at a time.  Use Search to get multiple documents in a
            single request.
            <see href="https://docs.microsoft.com/rest/api/searchservice/lookup-document">Lookup Document</see></summary>
        <returns>
            The document corresponding to the <paramref name="key" />.
            </returns>
        <remarks>
            The generic overloads of the <see cref="M:Azure.Search.Documents.SearchClient.GetDocument``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" /> and
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" /> methods support mapping of Azure
            Search field types to .NET types via the type parameter
            <typeparamref name="T" />.  Note that all search field types except
            collections are nullable, so we recommend using nullable types for
            the properties of <typeparamref name="T" />. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more information.
            </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDocumentAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;T&gt;&gt; GetDocumentAsync&lt;T&gt; (string key, Azure.Search.Documents.GetDocumentOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;!!T&gt;&gt; GetDocumentAsync&lt;T&gt;(string key, class Azure.Search.Documents.GetDocumentOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDocumentAsync(Of T) (key As String, Optional options As GetDocumentOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of T))" />
      <MemberSignature Language="F#" Value="abstract member GetDocumentAsync : string * Azure.Search.Documents.GetDocumentOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;'T&gt;&gt;&#xA;override this.GetDocumentAsync : string * Azure.Search.Documents.GetDocumentOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;'T&gt;&gt;" Usage="searchClient.GetDocumentAsync (key, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.GetDocumentOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="key">
            Required.  An string value that uniquely identifies each document
            in the index.  The key is sometimes referred to as a document ID.
            See
            <see href="https://docs.microsoft.com/rest/api/searchservice/naming-rules">Naming rules</see>
            for the rules for constructing valid document keys.
            </param>
        <param name="options">
            Options to customize the operation's behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Retrieves a document from Azure Cognitive Search.  This is useful
            when a user clicks on a specific search result, and you want to
            look up specific details about that document. You can only get one
            document at a time.  Use Search to get multiple documents in a
            single request.
            <see href="https://docs.microsoft.com/rest/api/searchservice/lookup-document">Lookup Document</see></summary>
        <returns>
            The document corresponding to the <paramref name="key" />.
            </returns>
        <remarks>
            The <see cref="M:Azure.Search.Documents.SearchClient.GetDocument``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" /> and <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            methods support mapping of Azure Search field types to .NET types
            via the type parameter <typeparamref name="T" />.  Note that all
            search field types except collections are nullable, so we recommend
            using nullable types for the properties of <typeparamref name="T" />.
            The type mapping is as follows:
            <list type="table"><listheader><term>Search field type</term><description>.NET type</description></listheader><item><term>Edm.String</term><description><see cref="T:System.String" /> (string in C# and F#)</description></item><item><term>Edm.Boolean</term><description><see cref="T:System.Nullable`1" /> (bool? in C#,\
            Nullable&lt;bool&gt; in F#)</description></item><item><term>Edm.Double</term><description><see cref="T:System.Nullable`1" /> (double? in C#,
            Nullable&lt;float&gt; in F#)</description></item><item><term>Edm.Int32</term><description><see cref="T:System.Nullable`1" /> (int? in C#,
            Nullable&lt;int&gt; in F#)</description></item><item><term>Edm.Int64</term><description><see cref="T:System.Nullable`1" /> (long? in C#,
            Nullable&lt;int64&gt; in F#)</description></item><item><term>Edm.DateTimeOffset</term><description><see cref="T:System.Nullable`1" /> (DateTimeOffset? in
            C#, Nullable&lt;DateTimeOffset&gt; in F#) or
            System.Nullable&lt;System.DateTime&gt; (DateTime? in C#,
            Nullable&lt;DateTime&gt; in F#). Both types work, although we
            recommend using DateTimeOffset.  When retrieving documents,
            DateTime values will always be in UTC. When indexing documents,
            DateTime values are interpreted as follows:
            <list type="table"><item><term>UTC DateTime</term><description>Sent as-is to the index.</description></item><item><term>Local DateTime</term><description>Converted to UTC before being sent to the index.
            </description></item><item><term>DateTime with unspecified time zone</term><description>Assumed to be UTC and sent as-is to the index.
            </description></item></list></description></item><item><term>Edm.GeographyPoint</term><description> Azure.Core.Spatial.PointGeometry
            </description></item><item><term>Edm.ComplexType</term><description>
            Any type that can be deserialized from the JSON objects in the
            complex field.  This can be a value type or a reference type, but
            we recommend using a reference type since complex fields are
            nullable in Azure Cognitive Search.
            </description></item><item><term>Collection(Edm.String)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;string&gt;
            in F#)</description></item><item><term>Collection(Edm.Boolean)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;bool&gt; in
            F#)</description></item><item><term>Collection(Edm.Double)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;float&gt; in
            F#)</description></item><item><term>Collection(Edm.Int32)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;int&gt; in
            F#)</description></item><item><term>Collection(Edm.Int64)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;int64&gt; in
            F#)</description></item><item><term>Collection(Edm.DateTimeOffset)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> or
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;DateTimeOffset&gt; or
            seq&lt;DateTime&gt; in F#). Both types work, although we recommend
            using <see cref="T:System.Collections.Generic.IEnumerable`1" />.  See the notes
            above on Edm.DateTimeOffset for details.
            </description></item><item><term>Collection(Edm.GeographyPoint)</term><description>sequence of Azure.Core.Spatial.PointGeometry
            (seq&lt;PointGeometry&gt; in F#)</description></item><item><term>Collection(Edm.ComplexType)</term><description><see cref="T:System.Collections.Generic.IEnumerable`1" /> (seq&lt;T&gt; in F#) where T is any
            type that can be deserialized from the JSON objects in the complex
            collection field. This can be a value type or a reference type.
            </description></item></list>
            You can also use the dynamic <see cref="T:Azure.Search.Documents.Models.SearchDocument" /> as your
            <typeparamref name="T" /> and we will attempt to map JSON types in
            the response payload to .NET types. This mapping does not
            have the benefit of precise type information from the index, so the
            mapping is not always correct. In particular, be aware of the
            following cases:
            <list type="bullet"><item><description>
            Any numeric value without a decimal point will be deserialized to
            a <see cref="T:System.Int32" /> (int in C#, int32 in F#) if it can be
            converted or a <see cref="T:System.Int64" /> (long in C#, int64 in F#)
            otherwise.
            </description></item><item><description>
            Special double-precision floating point values such as NaN and
            Infinity will be deserialized as type <see cref="T:System.String" /> rather
            than <see cref="T:System.Double" />, even if they are in arrays with regular
            floating point values.
            </description></item><item><description>
            Any Edm.DateTimeOffset field will be deserialized as a
            <see cref="T:System.DateTimeOffset" />, not <see cref="T:System.DateTime" />.
            </description></item><item><description>
            Any empty JSON array will be deserialized as an array of
            <see cref="T:System.Object" /> (object[] in C#, obj[] in F#).
            </description></item><item><description>
            Complex fields will be recursively deserialized into instances of
            type <see cref="T:Azure.Search.Documents.Models.SearchDocument" />.  Similarly, complex collection
            fields will be deserialized into arrays of such instances.
            </description></item></list></remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDocumentCount">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;long&gt; GetDocumentCount (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;int64&gt; GetDocumentCount(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.GetDocumentCount(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDocumentCount (Optional cancellationToken As CancellationToken = Nothing) As Response(Of Long)" />
      <MemberSignature Language="F#" Value="abstract member GetDocumentCount : System.Threading.CancellationToken -&gt; Azure.Response&lt;int64&gt;&#xA;override this.GetDocumentCount : System.Threading.CancellationToken -&gt; Azure.Response&lt;int64&gt;" Usage="searchClient.GetDocumentCount cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Retrieves a count of the number of documents in this search index.
            </summary>
        <returns>The number of documents in the search index.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDocumentCountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;long&gt;&gt; GetDocumentCountAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;int64&gt;&gt; GetDocumentCountAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.GetDocumentCountAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDocumentCountAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Long))" />
      <MemberSignature Language="F#" Value="abstract member GetDocumentCountAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;int64&gt;&gt;&#xA;override this.GetDocumentCountAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;int64&gt;&gt;" Usage="searchClient.GetDocumentCountAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Retrieves a count of the number of documents in this search index.
            </summary>
        <returns>The number of documents in the search index.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexDocuments&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt; IndexDocuments&lt;T&gt; (Azure.Search.Documents.Models.IndexDocumentsBatch&lt;T&gt; batch, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt; IndexDocuments&lt;T&gt;(class Azure.Search.Documents.Models.IndexDocumentsBatch`1&lt;!!T&gt; batch, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.IndexDocuments``1(Azure.Search.Documents.Models.IndexDocumentsBatch{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexDocuments(Of T) (batch As IndexDocumentsBatch(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IndexDocumentsResult)" />
      <MemberSignature Language="F#" Value="abstract member IndexDocuments : Azure.Search.Documents.Models.IndexDocumentsBatch&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&#xA;override this.IndexDocuments : Azure.Search.Documents.Models.IndexDocumentsBatch&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;" Usage="searchClient.IndexDocuments (batch, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="batch" Type="Azure.Search.Documents.Models.IndexDocumentsBatch&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="batch">
            The batch of document index actions.
            </param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Sends a batch of upload, merge, and/or delete actions to the search
            index.
            <see href="https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents">Add, Update or Delete Documents</see></summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the IndexDocuments and IndexDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            individual <see cref="T:Azure.RequestFailedException" />s wrapped into an
            <see cref="T:System.AggregateException" /> that's thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexDocumentsAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; IndexDocumentsAsync&lt;T&gt; (Azure.Search.Documents.Models.IndexDocumentsBatch&lt;T&gt; batch, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; IndexDocumentsAsync&lt;T&gt;(class Azure.Search.Documents.Models.IndexDocumentsBatch`1&lt;!!T&gt; batch, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.IndexDocumentsAsync``1(Azure.Search.Documents.Models.IndexDocumentsBatch{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexDocumentsAsync(Of T) (batch As IndexDocumentsBatch(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IndexDocumentsResult))" />
      <MemberSignature Language="F#" Value="abstract member IndexDocumentsAsync : Azure.Search.Documents.Models.IndexDocumentsBatch&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;&#xA;override this.IndexDocumentsAsync : Azure.Search.Documents.Models.IndexDocumentsBatch&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;" Usage="searchClient.IndexDocumentsAsync (batch, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="batch" Type="Azure.Search.Documents.Models.IndexDocumentsBatch&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="batch">
            The batch of document index actions.
            </param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Sends a batch of upload, merge, and/or delete actions to the search
            index.
            <see href="https://docs.microsoft.com/rest/api/searchservice/addupdate-or-delete-documents">Add, Update or Delete Documents</see></summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the IndexDocuments and IndexDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            individual <see cref="T:Azure.RequestFailedException" />s wrapped into an
            <see cref="T:System.AggregateException" /> that's thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="IndexName">
      <MemberSignature Language="C#" Value="public virtual string IndexName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndexName" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.SearchClient.IndexName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IndexName As String" />
      <MemberSignature Language="F#" Value="member this.IndexName : string" Usage="Azure.Search.Documents.SearchClient.IndexName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the Search Index.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeDocuments&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt; MergeDocuments&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt; MergeDocuments&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.MergeDocuments``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeDocuments(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IndexDocumentsResult)" />
      <MemberSignature Language="F#" Value="abstract member MergeDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&#xA;override this.MergeDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;" Usage="searchClient.MergeDocuments (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Merge documents to the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the MergeDocuments and MergeDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MergeDocumentsAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; MergeDocumentsAsync&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; MergeDocumentsAsync&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.MergeDocumentsAsync``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeDocumentsAsync(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IndexDocumentsResult))" />
      <MemberSignature Language="F#" Value="abstract member MergeDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;&#xA;override this.MergeDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;" Usage="searchClient.MergeDocumentsAsync (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Merge documents to the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the MergeDocuments and MergeDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MergeOrUploadDocuments&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt; MergeOrUploadDocuments&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt; MergeOrUploadDocuments&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.MergeOrUploadDocuments``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeOrUploadDocuments(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IndexDocumentsResult)" />
      <MemberSignature Language="F#" Value="abstract member MergeOrUploadDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&#xA;override this.MergeOrUploadDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;" Usage="searchClient.MergeOrUploadDocuments (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Merge or upload documents to the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the MergeOrUploadDocuments and
            MergeOrUploadDocumentsAsync methods support mapping of search field
            types to .NET types via the type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="MergeOrUploadDocumentsAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; MergeOrUploadDocumentsAsync&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; MergeOrUploadDocumentsAsync&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.MergeOrUploadDocumentsAsync``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeOrUploadDocumentsAsync(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IndexDocumentsResult))" />
      <MemberSignature Language="F#" Value="abstract member MergeOrUploadDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;&#xA;override this.MergeOrUploadDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;" Usage="searchClient.MergeOrUploadDocumentsAsync (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Merge or upload documents to the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the MergeOrUploadDocuments and
            MergeOrUploadDocumentsAsync methods support mapping of search field
            types to .NET types via the type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="Search&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;T&gt;&gt; Search&lt;T&gt; (string searchText, Azure.Search.Documents.SearchOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.SearchResults`1&lt;!!T&gt;&gt; Search&lt;T&gt;(string searchText, class Azure.Search.Documents.SearchOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.Search``1(System.String,Azure.Search.Documents.SearchOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Search(Of T) (searchText As String, Optional options As SearchOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SearchResults(Of T))" />
      <MemberSignature Language="F#" Value="abstract member Search : string * Azure.Search.Documents.SearchOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;'T&gt;&gt;&#xA;override this.Search : string * Azure.Search.Documents.SearchOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;'T&gt;&gt;" Usage="searchClient.Search (searchText, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.SearchOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="searchText">
            A full-text search query expression;  Use "*" or omit this
            parameter to match all documents.  See
            <see href="https://docs.microsoft.com/azure/search/query-simple-syntax">Simple query syntax in Azure Cognitive Search</see>
            for more information about search query syntax.
            </param>
        <param name="options">
            Options that allow specifying filtering, sorting, faceting, paging,
            and other search query behaviors.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Searches for documents in the search index.
            <see href="https://docs.microsoft.com/rest/api/searchservice/search-documents">Search Documents</see></summary>
        <returns>
            Response containing the documents matching the query.
            </returns>
        <remarks>
          <para>
            Search and SearchAsync methods support mapping of search field
            types to .NET types via the type parameter T.  You can provide your
            own type <typeparamref name="T" /> or use the dynamic
            <see cref="T:Azure.Search.Documents.Models.SearchDocument" />. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            Azure Cognitive Search might not be able to include all results in
            a single response in which case <see cref="M:Azure.Search.Documents.Models.SearchResults`1.GetResults" />
            will automatically continue making additional requests as you
            enumerate through the results.  You can also process the results a
            page at a time with the <see cref="M:Azure.Pageable`1.AsPages(System.String,System.Nullable{System.Int32})" />
            method.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SearchAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;T&gt;&gt;&gt; SearchAsync&lt;T&gt; (string searchText, Azure.Search.Documents.SearchOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.SearchResults`1&lt;!!T&gt;&gt;&gt; SearchAsync&lt;T&gt;(string searchText, class Azure.Search.Documents.SearchOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.SearchAsync``1(System.String,Azure.Search.Documents.SearchOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SearchAsync(Of T) (searchText As String, Optional options As SearchOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SearchResults(Of T)))" />
      <MemberSignature Language="F#" Value="abstract member SearchAsync : string * Azure.Search.Documents.SearchOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;'T&gt;&gt;&gt;&#xA;override this.SearchAsync : string * Azure.Search.Documents.SearchOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;'T&gt;&gt;&gt;" Usage="searchClient.SearchAsync (searchText, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SearchResults&lt;T&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.SearchOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="searchText">
            A full-text search query expression;  Use "*" or omit this
            parameter to match all documents.  See
            <see href="https://docs.microsoft.com/azure/search/query-simple-syntax">Simple query syntax in Azure Cognitive Search</see>
            for more information about search query syntax.
            </param>
        <param name="options">
            Options that allow specifying filtering, sorting, faceting, paging,
            and other search query behaviors.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Searches for documents in the search index.
            <see href="https://docs.microsoft.com/rest/api/searchservice/search-documents">Search Documents</see></summary>
        <returns>
            Response containing the documents matching the query.
            </returns>
        <remarks>
          <para>
            Search and SearchAsync methods support mapping of search field
            types to .NET types via the type parameter T.  You can provide your
            own type <typeparamref name="T" /> or use the dynamic
            <see cref="T:Azure.Search.Documents.Models.SearchDocument" />. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            Azure Cognitive Search might not be able to include all results in
            a single response in which case
            <see cref="M:Azure.Search.Documents.Models.SearchResults`1.GetResultsAsync" /> will automatically
            continue making additional requests as you enumerate through the
            results.  You can also process the results a page at a time with
            the <see cref="M:Azure.AsyncPageable`1.AsPages(System.String,System.Nullable{System.Int32})" /> method.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public virtual string ServiceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:Azure.Search.Documents.SearchClient.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ServiceName As String" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string" Usage="Azure.Search.Documents.SearchClient.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the name of the Search Service.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Suggest&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;T&gt;&gt; Suggest&lt;T&gt; (string searchText, string suggesterName, Azure.Search.Documents.SuggestOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.SuggestResults`1&lt;!!T&gt;&gt; Suggest&lt;T&gt;(string searchText, string suggesterName, class Azure.Search.Documents.SuggestOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.Suggest``1(System.String,System.String,Azure.Search.Documents.SuggestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Suggest(Of T) (searchText As String, suggesterName As String, Optional options As SuggestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SuggestResults(Of T))" />
      <MemberSignature Language="F#" Value="abstract member Suggest : string * string * Azure.Search.Documents.SuggestOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;'T&gt;&gt;&#xA;override this.Suggest : string * string * Azure.Search.Documents.SuggestOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;'T&gt;&gt;" Usage="searchClient.Suggest (searchText, suggesterName, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="suggesterName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.SuggestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="searchText">
            The search text to use to suggest documents. Must be at least 1
            character, and no more than 100 characters.
            </param>
        <param name="suggesterName">
            The name of the suggester as specified in the suggesters collection
            that's part of the index definition.
            </param>
        <param name="options">
            Options for filtering, sorting, and other suggestions query
            behaviors.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Executes a "search-as-you-type" query consisting of a partial text
            input (three character minimum).  It returns matching text found in
            suggester-aware fields.  Azure Cognitive Search looks for matching
            values in fields that are predefined in a Suggester.  For example,
            if you enable suggestions on a city field, typing "sea" produces
            documents containing "Seattle", "Sea Tac", and "Seaside" (all
            actual city names) for that field.
            <see href="https://docs.microsoft.com/rest/api/searchservice/suggestions">Suggestions</see></summary>
        <returns>
            Response containing suggestion query results from an index.
            </returns>
        <remarks>
            Suggest and SuggestAsync methods support mapping of search field
            types to .NET types via the type parameter T.  You can provide your
            own type <typeparamref name="T" /> or use the dynamic
            <see cref="T:Azure.Search.Documents.Models.SearchDocument" />. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="SuggestAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;T&gt;&gt;&gt; SuggestAsync&lt;T&gt; (string searchText, string suggesterName, Azure.Search.Documents.SuggestOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.SuggestResults`1&lt;!!T&gt;&gt;&gt; SuggestAsync&lt;T&gt;(string searchText, string suggesterName, class Azure.Search.Documents.SuggestOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.SuggestAsync``1(System.String,System.String,Azure.Search.Documents.SuggestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SuggestAsync(Of T) (searchText As String, suggesterName As String, Optional options As SuggestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SuggestResults(Of T)))" />
      <MemberSignature Language="F#" Value="abstract member SuggestAsync : string * string * Azure.Search.Documents.SuggestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;'T&gt;&gt;&gt;&#xA;override this.SuggestAsync : string * string * Azure.Search.Documents.SuggestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;'T&gt;&gt;&gt;" Usage="searchClient.SuggestAsync (searchText, suggesterName, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.SuggestResults&lt;T&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="searchText" Type="System.String" />
        <Parameter Name="suggesterName" Type="System.String" />
        <Parameter Name="options" Type="Azure.Search.Documents.SuggestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="searchText">
            The search text to use to suggest documents. Must be at least 1
            character, and no more than 100 characters.
            </param>
        <param name="suggesterName">
            The name of the suggester as specified in the suggesters collection
            that's part of the index definition.
            </param>
        <param name="options">
            Options for filtering, sorting, and other suggestions query
            behaviors.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Executes a "search-as-you-type" query consisting of a partial text
            input (three character minimum).  It returns matching text found in
            suggester-aware fields.  Azure Cognitive Search looks for matching
            values in fields that are predefined in a Suggester.  For example,
            if you enable suggestions on a city field, typing "sea" produces
            documents containing "Seattle", "Sea Tac", and "Seaside" (all
            actual city names) for that field.
            <see href="https://docs.microsoft.com/rest/api/searchservice/suggestions">Suggestions</see></summary>
        <returns>
            Response containing suggestion query results from an index.
            </returns>
        <remarks>
            Suggest and SuggestAsync methods support mapping of search field
            types to .NET types via the type parameter T.  You can provide your
            own type <typeparamref name="T" /> or use the dynamic
            <see cref="T:Azure.Search.Documents.Models.SearchDocument" />. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDocuments&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt; UploadDocuments&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt; UploadDocuments&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.UploadDocuments``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadDocuments(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of IndexDocumentsResult)" />
      <MemberSignature Language="F#" Value="abstract member UploadDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&#xA;override this.UploadDocuments : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;" Usage="searchClient.UploadDocuments (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Upload documents to the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the UploadDocuments and UploadDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDocumentsAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; UploadDocumentsAsync&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; documents, Azure.Search.Documents.IndexDocumentsOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt; UploadDocumentsAsync&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; documents, class Azure.Search.Documents.IndexDocumentsOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Search.Documents.SearchClient.UploadDocumentsAsync``1(System.Collections.Generic.IEnumerable{``0},Azure.Search.Documents.IndexDocumentsOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UploadDocumentsAsync(Of T) (documents As IEnumerable(Of T), Optional options As IndexDocumentsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IndexDocumentsResult))" />
      <MemberSignature Language="F#" Value="abstract member UploadDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;&#xA;override this.UploadDocumentsAsync : seq&lt;'T&gt; * Azure.Search.Documents.IndexDocumentsOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;" Usage="searchClient.UploadDocumentsAsync (documents, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Search.Documents</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>11.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Search.Documents.Models.IndexDocumentsResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="documents" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="options" Type="Azure.Search.Documents.IndexDocumentsOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            The .NET type that maps to the index schema. Instances of this type
            can be retrieved as documents from the index.
            </typeparam>
        <param name="documents">The documents to upload.</param>
        <param name="options">
            Options that allow specifying document indexing behavior.
            </param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be canceled.
            </param>
        <summary>
            Upload documents to the index as a batch.
            </summary>
        <returns>
            Response containing the status of operations for all actions in the
            batch of actions.
            </returns>
        <remarks>
          <para>
            The generic overloads of the UploadDocuments and UploadDocumentsAsync
            methods support mapping of search field types to .NET types via the
            type parameter T. See
            <see cref="M:Azure.Search.Documents.SearchClient.GetDocumentAsync``1(System.String,Azure.Search.Documents.GetDocumentOptions,System.Threading.CancellationToken)" />
            for more details on the type mapping.
            </para>
          <para>
            By default, an exception will only be thrown if the entire request
            fails.  Individual failures are described in the
            <see cref="P:Azure.Search.Documents.Models.IndexDocumentsResult.Results" /> collection.  You can set
            <see cref="P:Azure.Search.Documents.IndexDocumentsOptions.ThrowOnAnyError" /> if you want
            exceptions thrown on partial failure.
            </para>
        </remarks>
        <exception cref="T:Azure.RequestFailedException">
            Thrown when a failure is returned by the Search Service.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>
