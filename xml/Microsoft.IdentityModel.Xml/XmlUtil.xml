<Type Name="XmlUtil" FullName="Microsoft.IdentityModel.Xml.XmlUtil">
  <TypeSignature Language="C#" Value="public static class XmlUtil" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit XmlUtil extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Xml.XmlUtil" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlUtil" />
  <TypeSignature Language="F#" Value="type XmlUtil = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
    <AssemblyVersion>5.6.0.0</AssemblyVersion>
    <AssemblyVersion>6.5.0.0</AssemblyVersion>
    <AssemblyVersion>6.5.1.0</AssemblyVersion>
    <AssemblyVersion>6.6.0.0</AssemblyVersion>
    <AssemblyVersion>6.7.0.0</AssemblyVersion>
    <AssemblyVersion>6.7.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Utilities for working with XML
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckReaderOnEntry">
      <MemberSignature Language="C#" Value="public static void CheckReaderOnEntry (System.Xml.XmlReader reader, string element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckReaderOnEntry(class System.Xml.XmlReader reader, string element) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.CheckReaderOnEntry(System.Xml.XmlReader,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckReaderOnEntry (reader As XmlReader, element As String)" />
      <MemberSignature Language="F#" Value="static member CheckReaderOnEntry : System.Xml.XmlReader * string -&gt; unit" Usage="Microsoft.IdentityModel.Xml.XmlUtil.CheckReaderOnEntry (reader, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="element" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader">the <see cref="T:System.Xml.XmlReader" />to check.</param>
        <param name="element">the expected element.</param>
        <summary>
            Checks if the <see cref="T:System.Xml.XmlReader" /> is pointing to an expected element.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="element" /> is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if <paramref name="reader" /> if not at at expected element.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckReaderOnEntry">
      <MemberSignature Language="C#" Value="public static void CheckReaderOnEntry (System.Xml.XmlReader reader, string element, string namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckReaderOnEntry(class System.Xml.XmlReader reader, string element, string namespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.CheckReaderOnEntry(System.Xml.XmlReader,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckReaderOnEntry (reader As XmlReader, element As String, namespace As String)" />
      <MemberSignature Language="F#" Value="static member CheckReaderOnEntry : System.Xml.XmlReader * string * string -&gt; unit" Usage="Microsoft.IdentityModel.Xml.XmlUtil.CheckReaderOnEntry (reader, element, namespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="element" Type="System.String" />
        <Parameter Name="namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader">the <see cref="T:System.Xml.XmlReader" />to check.</param>
        <param name="element">the expected element.</param>
        <param name="namespace">the expected namespace.</param>
        <summary>
            Checks if the <see cref="T:System.Xml.XmlReader" /> is pointing to an expected element.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="element" /> is null or empty.</exception>
        <exception cref="T:Microsoft.IdentityModel.Xml.XmlReadException">if <paramref name="reader" /> if not at expected element.</exception>
      </Docs>
    </Member>
    <Member MemberName="EqualsQName">
      <MemberSignature Language="C#" Value="public static bool EqualsQName (System.Xml.XmlQualifiedName qualifiedName, string name, string namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool EqualsQName(class System.Xml.XmlQualifiedName qualifiedName, string name, string namespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.EqualsQName(System.Xml.XmlQualifiedName,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EqualsQName (qualifiedName As XmlQualifiedName, name As String, namespace As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member EqualsQName : System.Xml.XmlQualifiedName * string * string -&gt; bool" Usage="Microsoft.IdentityModel.Xml.XmlUtil.EqualsQName (qualifiedName, name, namespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qualifiedName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="qualifiedName">the <see cref="T:System.Xml.XmlQualifiedName" /> to compare.</param>
        <param name="name">the name to compare.</param>
        <param name="namespace">the namepace to compare.</param>
        <summary>
            Determines if a Qualified names equals a name / namespace pair.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXsiTypeAsQualifiedName">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlQualifiedName GetXsiTypeAsQualifiedName (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlQualifiedName GetXsiTypeAsQualifiedName(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.GetXsiTypeAsQualifiedName(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetXsiTypeAsQualifiedName (reader As XmlReader) As XmlQualifiedName" />
      <MemberSignature Language="F#" Value="static member GetXsiTypeAsQualifiedName : System.Xml.XmlReader -&gt; System.Xml.XmlQualifiedName" Usage="Microsoft.IdentityModel.Xml.XmlUtil.GetXsiTypeAsQualifiedName reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">an <see cref="T:System.Xml.XmlReader" />pointing at an Element.</param>
        <summary>
            Gets the xsi:type as a <see cref="T:System.Xml.XmlQualifiedName" /> for the current element.
            </summary>
        <returns>a <see cref="T:System.Xml.XmlQualifiedName" />if the current element has an XSI type.
            If <paramref name="reader" /> is not on an element OR xsi type is not found, null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="reader" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNil">
      <MemberSignature Language="C#" Value="public static bool IsNil (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNil(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.IsNil(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNil (reader As XmlReader) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNil : System.Xml.XmlReader -&gt; bool" Usage="Microsoft.IdentityModel.Xml.XmlUtil.IsNil reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">a <see cref="T:System.Xml.XmlReader" /> positioned on an element.</param>
        <summary>
            Determines if the <paramref name="reader" /> has an attribute that is 'nil'
            </summary>
        <returns>true is the attribute value is 'nil'</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="reader" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public static bool IsStartElement (System.Xml.XmlReader reader, string element, System.Collections.Generic.ICollection&lt;string&gt; namespaceList);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsStartElement(class System.Xml.XmlReader reader, string element, class System.Collections.Generic.ICollection`1&lt;string&gt; namespaceList) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.IsStartElement(System.Xml.XmlReader,System.String,System.Collections.Generic.ICollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsStartElement (reader As XmlReader, element As String, namespaceList As ICollection(Of String)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsStartElement : System.Xml.XmlReader * string * System.Collections.Generic.ICollection&lt;string&gt; -&gt; bool" Usage="Microsoft.IdentityModel.Xml.XmlUtil.IsStartElement (reader, element, namespaceList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="element" Type="System.String" />
        <Parameter Name="namespaceList" Type="System.Collections.Generic.ICollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="reader">the <see cref="T:System.Xml.XmlReader" />to check.</param>
        <param name="element">the expected element.</param>
        <param name="namespaceList">the expected namespace list.</param>
        <summary>
            Determine if reader is at expected element in one of the listed namespace in namespaceList. 
            </summary>
        <returns>if <paramref name="reader" /> is at expected element.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="element" /> is null or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="LogReadException">
      <MemberSignature Language="C#" Value="public static Exception LogReadException (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception LogReadException(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.LogReadException(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogReadException (format As String, ParamArray args As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member LogReadException : string * obj[] -&gt; Exception" Usage="Microsoft.IdentityModel.Xml.XmlUtil.LogReadException (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">the format string.</param>
        <param name="args">the arguments to use for formating.</param>
        <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException" /> to the Logger.
            </summary>
        <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogReadException">
      <MemberSignature Language="C#" Value="public static Exception LogReadException (string format, Exception inner, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception LogReadException(string format, class System.Exception inner, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.LogReadException(System.String,System.Exception,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogReadException (format As String, inner As Exception, ParamArray args As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member LogReadException : string * Exception * obj[] -&gt; Exception" Usage="Microsoft.IdentityModel.Xml.XmlUtil.LogReadException (format, inner, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">the format string.</param>
        <param name="args">the arguments to use for formating.</param>
        <param name="inner">the inner exception.</param>
        <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException" /> to the Logger.
            </summary>
        <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlReadException" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogValidationException">
      <MemberSignature Language="C#" Value="public static Exception LogValidationException (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception LogValidationException(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogValidationException (format As String, ParamArray args As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member LogValidationException : string * obj[] -&gt; Exception" Usage="Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">the format string.</param>
        <param name="args">the arguments to use for formating.</param>
        <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException" /> to the Logger.
            </summary>
        <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogValidationException">
      <MemberSignature Language="C#" Value="public static Exception LogValidationException (string format, Exception inner, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception LogValidationException(string format, class System.Exception inner, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException(System.String,System.Exception,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogValidationException (format As String, inner As Exception, ParamArray args As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member LogValidationException : string * Exception * obj[] -&gt; Exception" Usage="Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException (format, inner, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">the format string.</param>
        <param name="args">the arguments to use for formating.</param>
        <param name="inner">the inner exception.</param>
        <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException" /> to the Logger.
            </summary>
        <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlValidationException" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogWriteException">
      <MemberSignature Language="C#" Value="public static Exception LogWriteException (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception LogWriteException(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogWriteException (format As String, ParamArray args As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member LogWriteException : string * obj[] -&gt; Exception" Usage="Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">the format string.</param>
        <param name="args">the arguments to use for formating.</param>
        <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException" /> to the Logger.
            </summary>
        <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogWriteException">
      <MemberSignature Language="C#" Value="public static Exception LogWriteException (string format, Exception inner, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception LogWriteException(string format, class System.Exception inner, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException(System.String,System.Exception,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogWriteException (format As String, inner As Exception, ParamArray args As Object()) As Exception" />
      <MemberSignature Language="F#" Value="static member LogWriteException : string * Exception * obj[] -&gt; Exception" Usage="Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException (format, inner, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="inner" Type="System.Exception" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">the format string.</param>
        <param name="args">the arguments to use for formating.</param>
        <param name="inner">the inner exception.</param>
        <summary>
            Sends formatted <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException" /> to the Logger.
            </summary>
        <returns>a <see cref="T:Microsoft.IdentityModel.Xml.XmlWriteException" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalizeEmptyString">
      <MemberSignature Language="C#" Value="public static string NormalizeEmptyString (string string);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string NormalizeEmptyString(string string) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.NormalizeEmptyString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NormalizeEmptyString (string As String) As String" />
      <MemberSignature Language="F#" Value="static member NormalizeEmptyString : string -&gt; string" Usage="Microsoft.IdentityModel.Xml.XmlUtil.NormalizeEmptyString string" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string" />
        <summary>
            Normalizes an empty string to 'null'.
            </summary>
        <returns>null if string is null or empty.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveQName">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlQualifiedName ResolveQName (System.Xml.XmlReader reader, string qualifiedString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlQualifiedName ResolveQName(class System.Xml.XmlReader reader, string qualifiedString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.ResolveQName(System.Xml.XmlReader,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ResolveQName (reader As XmlReader, qualifiedString As String) As XmlQualifiedName" />
      <MemberSignature Language="F#" Value="static member ResolveQName : System.Xml.XmlReader * string -&gt; System.Xml.XmlQualifiedName" Usage="Microsoft.IdentityModel.Xml.XmlUtil.ResolveQName (reader, qualifiedString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="qualifiedString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader">the <see cref="T:System.Xml.XmlReader" /> in scope.</param>
        <param name="qualifiedString">the qualifiedName to check.</param>
        <summary>
            Determines if the prefix on a name maps to a namespace that is in scope the reader.
            </summary>
        <returns>a <see cref="T:System.Xml.XmlQualifiedName" /> with the namespace that was in scope. If the prefix was not in scope, the namespace will be null.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="qualifiedString" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateXsiType">
      <MemberSignature Language="C#" Value="public static void ValidateXsiType (System.Xml.XmlReader reader, string expectedTypeName, string expectedTypeNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateXsiType(class System.Xml.XmlReader reader, string expectedTypeName, string expectedTypeNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType(System.Xml.XmlReader,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateXsiType (reader As XmlReader, expectedTypeName As String, expectedTypeNamespace As String)" />
      <MemberSignature Language="F#" Value="static member ValidateXsiType : System.Xml.XmlReader * string * string -&gt; unit" Usage="Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType (reader, expectedTypeName, expectedTypeNamespace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="expectedTypeName" Type="System.String" />
        <Parameter Name="expectedTypeNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reader">an <see cref="T:System.Xml.XmlReader" /> positioned on an element.</param>
        <param name="expectedTypeName">the expected name of the xsi:type.</param>
        <param name="expectedTypeNamespace">the expected namespace of the xsi:type.</param>
        <summary>
            Validates that element the <paramref name="reader" /> is positioned on has an xsi:type attribute
            with a specific name and type.
            </summary>
        <remarks>if the <paramref name="reader" /> does require an xsi:type attribute to be present. If the xsi:type is present, it will be validated.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="expectedTypeNamespace" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidateXsiType">
      <MemberSignature Language="C#" Value="public static void ValidateXsiType (System.Xml.XmlReader reader, string expectedTypeName, string expectedTypeNamespace, bool requireDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateXsiType(class System.Xml.XmlReader reader, string expectedTypeName, string expectedTypeNamespace, bool requireDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType(System.Xml.XmlReader,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidateXsiType (reader As XmlReader, expectedTypeName As String, expectedTypeNamespace As String, requireDeclaration As Boolean)" />
      <MemberSignature Language="F#" Value="static member ValidateXsiType : System.Xml.XmlReader * string * string * bool -&gt; unit" Usage="Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType (reader, expectedTypeName, expectedTypeNamespace, requireDeclaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>5.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.0.0</AssemblyVersion>
        <AssemblyVersion>6.5.1.0</AssemblyVersion>
        <AssemblyVersion>6.6.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.0.0</AssemblyVersion>
        <AssemblyVersion>6.7.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="expectedTypeName" Type="System.String" />
        <Parameter Name="expectedTypeNamespace" Type="System.String" />
        <Parameter Name="requireDeclaration" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">an <see cref="T:System.Xml.XmlReader" /> positioned on an element.</param>
        <param name="expectedTypeName">the expected name of the xsi:type.</param>
        <param name="expectedTypeNamespace">the expected namespace of the xsi:type.</param>
        <param name="requireDeclaration">controls if the xsi:type must be present.</param>
        <summary>
            Validates that element the <paramref name="reader" /> is positioned on has an xsi:type attribute
            with a specific name and type.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">if <paramref name="expectedTypeNamespace" /> is null.</exception>
        <exception cref="T:Microsoft.IdentityModel.Xml.XmlException">if xsi:type is found and did not match expected.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
