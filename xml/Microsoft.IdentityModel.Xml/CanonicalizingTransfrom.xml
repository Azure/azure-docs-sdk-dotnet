<Type Name="CanonicalizingTransfrom" FullName="Microsoft.IdentityModel.Xml.CanonicalizingTransfrom">
  <TypeSignature Language="C#" Value="public abstract class CanonicalizingTransfrom" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CanonicalizingTransfrom extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CanonicalizingTransfrom" />
  <TypeSignature Language="F#" Value="type CanonicalizingTransfrom = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
    <AssemblyVersion>6.8.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines a XML transform that applies C14n canonicalization and produces a hash over the transformed XML nodes.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CanonicalizingTransfrom ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>6.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Algorithm">
      <MemberSignature Language="C#" Value="public abstract string Algorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Algorithm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.Algorithm" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Algorithm As String" />
      <MemberSignature Language="F#" Value="member this.Algorithm : string" Usage="Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.Algorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>6.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the algorithm
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeComments">
      <MemberSignature Language="C#" Value="public bool IncludeComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeComments" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.IncludeComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeComments As Boolean" />
      <MemberSignature Language="F#" Value="member this.IncludeComments : bool with get, set" Usage="Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.IncludeComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>6.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value indicating if this transform should include comments.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InclusiveNamespacesPrefixList">
      <MemberSignature Language="C#" Value="public string InclusiveNamespacesPrefixList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InclusiveNamespacesPrefixList" />
      <MemberSignature Language="DocId" Value="P:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.InclusiveNamespacesPrefixList" />
      <MemberSignature Language="VB.NET" Value="Public Property InclusiveNamespacesPrefixList As String" />
      <MemberSignature Language="F#" Value="member this.InclusiveNamespacesPrefixList : string with get, set" Usage="Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.InclusiveNamespacesPrefixList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>6.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the a PrefixList to use when there is a need to include InclusiveNamespaces writing token.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessAndDigest">
      <MemberSignature Language="C#" Value="public abstract byte[] ProcessAndDigest (Microsoft.IdentityModel.Xml.XmlTokenStream tokenStream, System.Security.Cryptography.HashAlgorithm hashAlg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] ProcessAndDigest(class Microsoft.IdentityModel.Xml.XmlTokenStream tokenStream, class System.Security.Cryptography.HashAlgorithm hashAlg) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.ProcessAndDigest(Microsoft.IdentityModel.Xml.XmlTokenStream,System.Security.Cryptography.HashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProcessAndDigest (tokenStream As XmlTokenStream, hashAlg As HashAlgorithm) As Byte()" />
      <MemberSignature Language="F#" Value="abstract member ProcessAndDigest : Microsoft.IdentityModel.Xml.XmlTokenStream * System.Security.Cryptography.HashAlgorithm -&gt; byte[]" Usage="canonicalizingTransfrom.ProcessAndDigest (tokenStream, hashAlg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.IdentityModel.Xml</AssemblyName>
        <AssemblyVersion>6.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tokenStream" Type="Microsoft.IdentityModel.Xml.XmlTokenStream" />
        <Parameter Name="hashAlg" Type="System.Security.Cryptography.HashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="tokenStream">the <see cref="T:Microsoft.IdentityModel.Xml.XmlTokenStream" /> that has the XML nodes to process.</param>
        <param name="hashAlg">the <see cref="T:System.Security.Cryptography.HashAlgorithm" />to use</param>
        <summary>
            Processes a set of XML nodes and returns the hash of the octets.
            </summary>
        <returns>the hash of the processed XML nodes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
