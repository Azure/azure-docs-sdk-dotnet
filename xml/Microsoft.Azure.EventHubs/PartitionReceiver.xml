<Type Name="PartitionReceiver" FullName="Microsoft.Azure.EventHubs.PartitionReceiver">
  <TypeSignature Language="C#" Value="public abstract class PartitionReceiver : Microsoft.Azure.EventHubs.ClientEntity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PartitionReceiver extends Microsoft.Azure.EventHubs.ClientEntity" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.EventHubs.PartitionReceiver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PartitionReceiver&#xA;Inherits ClientEntity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
    <AssemblyVersion>1.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Azure.EventHubs.ClientEntity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This is a logical representation of receiving from a EventHub partition.
            <para>
            A PartitionReceiver is tied to a ConsumerGroup + Partition combination. If you are creating an epoch based
            PartitionReceiver (i.e. PartitionReceiver.Epoch != 0) you cannot have more than one active receiver per
            ConsumerGroup + Partition combo. You can have multiple receivers per ConsumerGroup + Partition combination with 
            non-epoch receivers.
            </para></summary>
    <remarks>To be added.</remarks>
    <altmember cref="M:Microsoft.Azure.EventHubs.EventHubClient.CreateReceiver(System.String,System.String,System.String)" />
    <altmember cref="M:Microsoft.Azure.EventHubs.EventHubClient.CreateEpochReceiver(System.String,System.String,System.String,System.Int64)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal PartitionReceiver (Microsoft.Azure.EventHubs.EventHubClient eventHubClient, string consumerGroupName, string partitionId, string startOffset, bool offsetInclusive, Nullable&lt;DateTime&gt; startTime, Nullable&lt;long&gt; epoch);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class Microsoft.Azure.EventHubs.EventHubClient eventHubClient, string consumerGroupName, string partitionId, string startOffset, bool offsetInclusive, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startTime, valuetype System.Nullable`1&lt;int64&gt; epoch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.#ctor(Microsoft.Azure.EventHubs.EventHubClient,System.String,System.String,System.String,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.Int64})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventHubClient" Type="Microsoft.Azure.EventHubs.EventHubClient" />
        <Parameter Name="consumerGroupName" Type="System.String" />
        <Parameter Name="partitionId" Type="System.String" />
        <Parameter Name="startOffset" Type="System.String" />
        <Parameter Name="offsetInclusive" Type="System.Boolean" />
        <Parameter Name="startTime" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="epoch" Type="System.Nullable&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="eventHubClient"></param>
        <param name="consumerGroupName"></param>
        <param name="partitionId"></param>
        <param name="startOffset"></param>
        <param name="offsetInclusive"></param>
        <param name="startTime"></param>
        <param name="epoch"></param>
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override sealed System.Threading.Tasks.Task CloseAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.CloseAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CloseAsync () As Task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Closes and releases resources associated with <see cref="T:Microsoft.Azure.EventHubs.PartitionReceiver" />.
            </summary>
        <returns>An asynchronous operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConsumerGroupName">
      <MemberSignature Language="C#" Value="public string ConsumerGroupName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConsumerGroupName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.ConsumerGroupName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConsumerGroupName As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The Consumer Group Name
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultConsumerGroupName">
      <MemberSignature Language="C#" Value="public static readonly string DefaultConsumerGroupName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultConsumerGroupName" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Azure.EventHubs.PartitionReceiver.DefaultConsumerGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultConsumerGroupName As String " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default consumer group name: $Default.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfStream">
      <MemberSignature Language="C#" Value="public static readonly string EndOfStream;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string EndOfStream" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Azure.EventHubs.PartitionReceiver.EndOfStream" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EndOfStream As String " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The constant that denotes the end of a stream. This can be used as an offset argument in receiver creation to 
            start receiving from the latest event, instead of a specific point in time/offset value.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Epoch">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; Epoch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; Epoch" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.Epoch" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Epoch As Nullable(Of Long)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the epoch value that this receiver is currently using for partition ownership.
            <para>A value of null means this receiver is not an epoch-based receiver.</para></summary>
        <value>the epoch value that this receiver is currently using for partition ownership.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHubClient">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.EventHubs.EventHubClient EventHubClient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.EventHubs.EventHubClient EventHubClient" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.EventHubClient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventHubClient As EventHubClient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.EventHubs.EventHubClient</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The EventHubClient this PartitionReceiver was created from.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetInclusive">
      <MemberSignature Language="C#" Value="protected bool OffsetInclusive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OffsetInclusive" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.OffsetInclusive" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property OffsetInclusive As Boolean" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary />
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCloseAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task OnCloseAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task OnCloseAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.OnCloseAsync" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function OnCloseAsync () As Task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnReceiveAsync">
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.EventHubs.EventData&gt;&gt; OnReceiveAsync (int maxMessageCount, TimeSpan waitTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.EventHubs.EventData&gt;&gt; OnReceiveAsync(int32 maxMessageCount, valuetype System.TimeSpan waitTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.OnReceiveAsync(System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function OnReceiveAsync (maxMessageCount As Integer, waitTime As TimeSpan) As Task(Of IList(Of EventData))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Azure.EventHubs.EventData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxMessageCount" Type="System.Int32" />
        <Parameter Name="waitTime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="maxMessageCount"></param>
        <param name="waitTime"></param>
        <summary />
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetReceiveHandler">
      <MemberSignature Language="C#" Value="protected abstract void OnSetReceiveHandler (Microsoft.Azure.EventHubs.IPartitionReceiveHandler receiveHandler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetReceiveHandler(class Microsoft.Azure.EventHubs.IPartitionReceiveHandler receiveHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.OnSetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub OnSetReceiveHandler (receiveHandler As IPartitionReceiveHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveHandler" Type="Microsoft.Azure.EventHubs.IPartitionReceiveHandler" />
      </Parameters>
      <Docs>
        <param name="receiveHandler"></param>
        <summary />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PartitionId">
      <MemberSignature Language="C#" Value="public string PartitionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PartitionId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.PartitionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PartitionId As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get the EventHub partition identifier.
            </summary>
        <value>The identifier representing the partition from which this receiver is fetching data</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefetchCount">
      <MemberSignature Language="C#" Value="public int PrefetchCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrefetchCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.PrefetchCount" />
      <MemberSignature Language="VB.NET" Value="Public Property PrefetchCount As Integer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Get Prefetch Count configured on the Receiver.
            </summary>
        <value>The upper limit of events this receiver will actively receive regardless of whether a receive operation is pending.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.EventHubs.EventData&gt;&gt; ReceiveAsync (int maxMessageCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.EventHubs.EventData&gt;&gt; ReceiveAsync(int32 maxMessageCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync (maxMessageCount As Integer) As Task(Of IEnumerable(Of EventData))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.EventHubs.EventData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxMessageCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxMessageCount">To be added.</param>
        <summary>
            Receive a batch of <see cref="T:Microsoft.Azure.EventHubs.EventData" />'s from an EventHub partition
            </summary>
        <returns>A Task that will yield a batch of <see cref="T:Microsoft.Azure.EventHubs.EventData" /> from the partition on which this receiver is created. Returns 'null' if no EventData is present.</returns>
        <remarks>To be added.</remarks>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
        <example>
            Sample code:
            <code>
            EventHubClient client = EventHubClient.Create("__connectionString__");
            PartitionReceiver receiver = client.CreateReceiver("ConsumerGroup1", "1");
            IEnumerable&lt;EventData&gt; receivedEvents = await receiver.ReceiveAsync(BatchSize);
                 
            while (true)
            {
                int batchSize = 0;
                if (receivedEvents != null)
                {
                    foreach (EventData receivedEvent in receivedEvents)
                    {
                        Console.WriteLine("Message Payload: {0}", Encoding.UTF8.GetString(receivedEvent.Body));
                        Console.WriteLine("Offset: {0}, SeqNo: {1}, EnqueueTime: {2}", 
                            receivedEvent.SystemProperties.Offset, 
                            receivedEvent.SystemProperties.SequenceNumber, 
                            receivedEvent.SystemProperties.EnqueuedTime);
                        batchSize++;
                    }
                }
                     
                Console.WriteLine("ReceivedBatch Size: {0}", batchSize);
                receivedEvents = await receiver.ReceiveAsync();
            }
            </code></example>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.EventHubs.EventData&gt;&gt; ReceiveAsync (int maxMessageCount, TimeSpan waitTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Azure.EventHubs.EventData&gt;&gt; ReceiveAsync(int32 maxMessageCount, valuetype System.TimeSpan waitTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.ReceiveAsync(System.Int32,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync (maxMessageCount As Integer, waitTime As TimeSpan) As Task(Of IEnumerable(Of EventData))" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Azure.EventHubs.PartitionReceiver/&lt;ReceiveAsync&gt;d__36))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Azure.EventHubs.EventData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxMessageCount" Type="System.Int32" />
        <Parameter Name="waitTime" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="maxMessageCount">To be added.</param>
        <param name="waitTime">To be added.</param>
        <summary>
            Receive a batch of <see cref="T:Microsoft.Azure.EventHubs.EventData" />'s from an EventHub partition by allowing wait time on each individual call.
            </summary>
        <returns>A Task that will yield a batch of <see cref="T:Microsoft.Azure.EventHubs.EventData" /> from the partition on which this receiver is created. Returns 'null' if no EventData is present.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReceiveHandler">
      <MemberSignature Language="C#" Value="public void SetReceiveHandler (Microsoft.Azure.EventHubs.IPartitionReceiveHandler receiveHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetReceiveHandler(class Microsoft.Azure.EventHubs.IPartitionReceiveHandler receiveHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.EventHubs.PartitionReceiver.SetReceiveHandler(Microsoft.Azure.EventHubs.IPartitionReceiveHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetReceiveHandler (receiveHandler As IPartitionReceiveHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="receiveHandler" Type="Microsoft.Azure.EventHubs.IPartitionReceiveHandler" />
      </Parameters>
      <Docs>
        <param name="receiveHandler">The <see cref="T:Microsoft.Azure.EventHubs.IPartitionReceiveHandler" /> used to process events.</param>
        <summary>
            Sets the <see cref="T:Microsoft.Azure.EventHubs.IPartitionReceiveHandler" /> to process events.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartOffset">
      <MemberSignature Language="C#" Value="protected string StartOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StartOffset" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.StartOffset" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StartOffset As String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary />
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartOfStream">
      <MemberSignature Language="C#" Value="public static readonly string StartOfStream;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string StartOfStream" />
      <MemberSignature Language="DocId" Value="F:Microsoft.Azure.EventHubs.PartitionReceiver.StartOfStream" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StartOfStream As String " />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            This is a constant defined to represent the start of a partition stream in EventHub.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="protected Nullable&lt;DateTime&gt; StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; StartTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.EventHubs.PartitionReceiver.StartTime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StartTime As Nullable(Of DateTime)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.EventHubs</AssemblyName>
        <AssemblyVersion>1.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary />
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>