<Type Name="IExceptionConvertor" FullName="Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IExceptionConvertor">
  <TypeSignature Language="C#" Value="public interface IExceptionConvertor" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IExceptionConvertor" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IExceptionConvertor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IExceptionConvertor" />
  <TypeSignature Language="F#" Value="type IExceptionConvertor = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Defines an interface to convert user exception to ServiceException.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetInnerExceptions">
      <MemberSignature Language="C#" Value="public Exception[] GetInnerExceptions (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception[] GetInnerExceptions(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IExceptionConvertor.GetInnerExceptions(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInnerExceptions (exception As Exception) As Exception()" />
      <MemberSignature Language="F#" Value="abstract member GetInnerExceptions : Exception -&gt; Exception[]" Usage="iExceptionConvertor.GetInnerExceptions exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Exception for which inner exceptions are being retrieved.</param>
        <summary>
            Gets the list of inner exceptions.
            </summary>
        <returns>List of inner exceptions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryConvertToServiceException">
      <MemberSignature Language="C#" Value="public bool TryConvertToServiceException (Exception originalException, out Microsoft.ServiceFabric.Services.Communication.ServiceException serviceException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryConvertToServiceException(class System.Exception originalException, [out] class Microsoft.ServiceFabric.Services.Communication.ServiceException&amp; serviceException) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Services.Remoting.V2.Runtime.IExceptionConvertor.TryConvertToServiceException(System.Exception,Microsoft.ServiceFabric.Services.Communication.ServiceException@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryConvertToServiceException (originalException As Exception, ByRef serviceException As ServiceException) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryConvertToServiceException : Exception * ServiceException -&gt; bool" Usage="iExceptionConvertor.TryConvertToServiceException (originalException, serviceException)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ServiceFabric.Services.Remoting</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originalException" Type="System.Exception" />
        <Parameter Name="serviceException" Type="Microsoft.ServiceFabric.Services.Communication.ServiceException" RefType="out" />
      </Parameters>
      <Docs>
        <param name="originalException">Actual exception observed.</param>
        <param name="serviceException">ServiceException converted from actual exception.</param>
        <summary>
            Converts user exception to ServiceException.
            </summary>
        <returns>True if the exception is handled, false otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
