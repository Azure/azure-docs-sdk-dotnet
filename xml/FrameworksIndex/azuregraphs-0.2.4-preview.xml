<?xml version="1.0" encoding="utf-8"?>
<Framework Name="azuregraphs-0.2.4-preview">
  <Namespace Name="Microsoft.Azure.Graphs.Common">
    <Type Name="Microsoft.Azure.Graphs.Common.CollectionType" Id="T:Microsoft.Azure.Graphs.Common.CollectionType">
      <Member Id="F:Microsoft.Azure.Graphs.Common.CollectionType.Partitioned" />
      <Member Id="F:Microsoft.Azure.Graphs.Common.CollectionType.Standard" />
      <Member Id="F:Microsoft.Azure.Graphs.Common.CollectionType.Undefined" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.Azure.Graphs.Elements">
    <Type Name="Microsoft.Azure.Graphs.Elements.Direction" Id="T:Microsoft.Azure.Graphs.Elements.Direction">
      <Member Id="F:Microsoft.Azure.Graphs.Elements.Direction.Both" />
      <Member Id="F:Microsoft.Azure.Graphs.Elements.Direction.In" />
      <Member Id="F:Microsoft.Azure.Graphs.Elements.Direction.Out" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Elements.Edge" Id="T:Microsoft.Azure.Graphs.Elements.Edge">
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Edge.#ctor" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Edge.GetProperties" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Edge.GetProperty(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Edge.Validate" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Edge.Id" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Edge.InVertexId" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Edge.InVertexLabel" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Edge.Label" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Edge.OutVertexId" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Edge.OutVertexLabel" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Elements.Property" Id="T:Microsoft.Azure.Graphs.Elements.Property">
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Property.Equals(Microsoft.Azure.Graphs.Elements.Property)" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Property.Validate" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Property.Key" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Property.Value" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Elements.Vertex" Id="T:Microsoft.Azure.Graphs.Elements.Vertex">
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.GetInEdges" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.GetInEdges(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.GetOutEdges" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.GetOutEdges(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.GetVertexProperties" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.GetVertexProperties(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.Vertex.Validate" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Vertex.Id" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.Vertex.Label" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Elements.VertexEdge" Id="T:Microsoft.Azure.Graphs.Elements.VertexEdge">
      <Member Id="M:Microsoft.Azure.Graphs.Elements.VertexEdge.Validate" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.VertexEdge.Direction" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Elements.VertexProperty" Id="T:Microsoft.Azure.Graphs.Elements.VertexProperty">
      <Member Id="M:Microsoft.Azure.Graphs.Elements.VertexProperty.GetProperties" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.VertexProperty.GetProperty(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.Elements.VertexProperty.Validate" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.VertexProperty.Id" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.VertexProperty.Key" />
      <Member Id="P:Microsoft.Azure.Graphs.Elements.VertexProperty.Value" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.Azure.Graphs">
    <Type Name="Microsoft.Azure.Graphs.GraphCommand" Id="T:Microsoft.Azure.Graphs.GraphCommand">
      <Member Id="M:Microsoft.Azure.Graphs.GraphCommand.Dispose" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphCommand.g" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.GraphException" Id="T:Microsoft.Azure.Graphs.GraphException">
      <Member Id="M:Microsoft.Azure.Graphs.GraphException.#ctor(Microsoft.Azure.Graphs.GraphException,System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphException.#ctor(Microsoft.Azure.Graphs.GraphStatusCode,System.Exception,System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphException.#ctor(Microsoft.Azure.Graphs.GraphStatusCode,System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphException.ToString" />
      <Member Id="P:Microsoft.Azure.Graphs.GraphException.Context" />
      <Member Id="P:Microsoft.Azure.Graphs.GraphException.ErrorCode" />
      <Member Id="P:Microsoft.Azure.Graphs.GraphException.Frame" />
      <Member Id="P:Microsoft.Azure.Graphs.GraphException.RequestId" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.GraphExtensions" Id="T:Microsoft.Azure.Graphs.GraphExtensions">
      <Member Id="M:Microsoft.Azure.Graphs.GraphExtensions.CreateGremlinQuery(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.DocumentCollection,System.String,Microsoft.Azure.Documents.Client.FeedOptions,Microsoft.Azure.Graphs.GraphSONMode)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphExtensions.CreateGremlinQuery``1(Microsoft.Azure.Documents.Client.DocumentClient,Microsoft.Azure.Documents.DocumentCollection,System.String,Microsoft.Azure.Documents.Client.FeedOptions,Microsoft.Azure.Graphs.GraphSONMode)" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.GraphSONMode" Id="T:Microsoft.Azure.Graphs.GraphSONMode">
      <Member Id="F:Microsoft.Azure.Graphs.GraphSONMode.Compact" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphSONMode.Normal" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.GraphStatusCode" Id="T:Microsoft.Azure.Graphs.GraphStatusCode">
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.Authenticate" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.InvalidRequestArguments" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.MalformedRequest" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.NoContent" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.PartialContent" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.ScriptEvaluationError" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.ServerError" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.ServerSerializationError" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.ServerTimeout" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.Success" />
      <Member Id="F:Microsoft.Azure.Graphs.GraphStatusCode.Unauthorized" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.GraphTraversal" Id="T:Microsoft.Azure.Graphs.GraphTraversal">
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.AddE" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.AddE(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.AddV" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.AddV(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.AddV(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Aggregate(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.And(Microsoft.Azure.Graphs.GraphTraversal[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.As(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Barrier" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Barrier(System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Both(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.BothE(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.BothV" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.GraphTraversal,Microsoft.Azure.Graphs.Translator.Enums.Order)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.GraphTraversal,System.Collections.IComparer)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.Translator.Enums.Column)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.Translator.Enums.Column,Microsoft.Azure.Graphs.Translator.Enums.Order)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.Translator.Enums.Column,System.Collections.IComparer)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(Microsoft.Azure.Graphs.Translator.Enums.Order)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(System.Collections.IComparer)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(System.String,Microsoft.Azure.Graphs.Translator.Enums.Order)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.By(System.String,System.Collections.IComparer)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Cap(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Choose(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Choose(Microsoft.Azure.Graphs.GraphTraversal,Microsoft.Azure.Graphs.GraphTraversal,Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Choose(Microsoft.Azure.Graphs.Translator.Predicate,Microsoft.Azure.Graphs.GraphTraversal,Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Coalesce(Microsoft.Azure.Graphs.GraphTraversal[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Coin(System.Double)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Constant" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Constant(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Count" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Count(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.CyclicPath" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Dedup(Microsoft.Azure.Graphs.Translator.Enums.Scope,System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Dedup(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Drop" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.E" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.E(System.Collections.Generic.List{System.Object})" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.E(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Emit" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Emit(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Emit(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.FlatMap(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Fold" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.From(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.From(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.GetEnumerator" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Group" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Group(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.GroupCount" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.GroupCount(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Has(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Has(System.String,Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Has(System.String,System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Has(System.String,System.String,System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.HasId(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.HasKey(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.HasLabel(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.HasNot(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.HasValue(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Id" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Identity" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.In(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.InE(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Inject" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Inject(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.InV" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Is(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Is(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Key" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Label" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Limit(Microsoft.Azure.Graphs.Translator.Enums.Scope,System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Limit(System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Local(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Map(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Match(Microsoft.Azure.Graphs.GraphTraversal[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Max" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Max(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Mean" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Mean(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Min" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Min(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.NextAsModelAsync``1" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.NextAsync(System.Threading.CancellationToken)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Not(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Option(System.Object,Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Optional(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Or(Microsoft.Azure.Graphs.GraphTraversal[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Order" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Order(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.OtherV" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Out(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.OutE(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.OutV" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Path" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Project(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Properties(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Property(Microsoft.Azure.Graphs.Translator.Enums.PropertyCardinality,System.String,System.Object,System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Property(System.String,System.Object,System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.PropertyMap(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Range(Microsoft.Azure.Graphs.Translator.Enums.Scope,System.Int32,System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Range(System.Int32,System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Repeat(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Sample(Microsoft.Azure.Graphs.Translator.Enums.Scope,System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Sample(System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Select(Microsoft.Azure.Graphs.Translator.Enums.Column)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Select(Microsoft.Azure.Graphs.Translator.Enums.Pop,System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Select(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.SideEffect(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.SimplePath" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Store(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Sum" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Sum(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.System#Collections#IEnumerable#GetEnumerator" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Tail" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Tail(Microsoft.Azure.Graphs.Translator.Enums.Scope)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Tail(Microsoft.Azure.Graphs.Translator.Enums.Scope,System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Tail(System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Times(System.Int32)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.To(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.To(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.ToList" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Tree" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Tree(System.String)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Unfold" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Union(Microsoft.Azure.Graphs.GraphTraversal[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Until(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Until(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.V(System.Collections.Generic.List{System.Object})" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.V(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Value" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.ValueMap(System.Boolean,System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.ValueMap(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Values(System.String[])" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Where(Microsoft.Azure.Graphs.GraphTraversal)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Where(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.GraphTraversal.Where(System.String,Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="P:Microsoft.Azure.Graphs.GraphTraversal.__" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.Azure.Graphs.Translator.Enums">
    <Type Name="Microsoft.Azure.Graphs.Translator.Enums.Column" Id="T:Microsoft.Azure.Graphs.Translator.Enums.Column">
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Column.Keys" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Column.Values" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Translator.Enums.Order" Id="T:Microsoft.Azure.Graphs.Translator.Enums.Order">
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Order.Decr" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Order.Incr" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Order.Shuffle" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Translator.Enums.Pop" Id="T:Microsoft.Azure.Graphs.Translator.Enums.Pop">
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Pop.All" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Pop.First" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Pop.Last" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Translator.Enums.PropertyCardinality" Id="T:Microsoft.Azure.Graphs.Translator.Enums.PropertyCardinality">
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.PropertyCardinality.List" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.PropertyCardinality.Single" />
    </Type>
    <Type Name="Microsoft.Azure.Graphs.Translator.Enums.Scope" Id="T:Microsoft.Azure.Graphs.Translator.Enums.Scope">
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Scope.Global" />
      <Member Id="F:Microsoft.Azure.Graphs.Translator.Enums.Scope.Local" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.Azure.Graphs.Translator">
    <Type Name="Microsoft.Azure.Graphs.Translator.Predicate" Id="T:Microsoft.Azure.Graphs.Translator.Predicate">
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.And(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Between(System.Object,System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Eq(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Gt(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Gte(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Inside(System.Object,System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Lt(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Lte(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Neq(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Not(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Or(Microsoft.Azure.Graphs.Translator.Predicate)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Outside(System.Object,System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Within(System.Collections.IList)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Within(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Within(System.Object[])" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Without(System.Collections.IList)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Without(System.Object)" />
      <Member Id="M:Microsoft.Azure.Graphs.Translator.Predicate.Without(System.Object[])" />
    </Type>
  </Namespace>
  <Namespace Name="Mono.CompilerServices.SymbolWriter">
    <Type Name="Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry" Id="T:Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry.ID" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry.#ctor(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry.ToString" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry.CapturedScopes" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.AnonymousScopeEntry.CapturedVariables" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.CapturedScope" Id="T:Mono.CompilerServices.SymbolWriter.CapturedScope">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedScope.CapturedName" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedScope.Scope" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CapturedScope.#ctor(System.Int32,System.String)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CapturedScope.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.CapturedVariable" Id="T:Mono.CompilerServices.SymbolWriter.CapturedVariable">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedVariable.CapturedName" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedVariable.Kind" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedVariable.Name" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CapturedVariable.#ctor(System.String,System.String,Mono.CompilerServices.SymbolWriter.CapturedVariable.CapturedKind)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CapturedVariable.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.CodeBlockEntry" Id="T:Mono.CompilerServices.SymbolWriter.CodeBlockEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.BlockType" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.EndOffset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Index" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Parent" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.StartOffset" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.#ctor(System.Int32,System.Int32,Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Close(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.CompileUnitEntry" Id="T:Mono.CompilerServices.SymbolWriter.CompileUnitEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.Index" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.#ctor(Mono.CompilerServices.SymbolWriter.MonoSymbolFile,Mono.CompilerServices.SymbolWriter.SourceFileEntry)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.AddFile(Mono.CompilerServices.SymbolWriter.SourceFileEntry)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.DefineNamespace(System.String,System.String[],System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.ReadAll" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.IncludeFiles" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.Mono#CompilerServices#SymbolWriter#ICompileUnit#Entry" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.Namespaces" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.Size" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.CompileUnitEntry.SourceFile" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.ICompileUnit" Id="T:Mono.CompilerServices.SymbolWriter.ICompileUnit">
      <Member Id="P:Mono.CompilerServices.SymbolWriter.ICompileUnit.Entry" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.IMethodDef" Id="T:Mono.CompilerServices.SymbolWriter.IMethodDef">
      <Member Id="P:Mono.CompilerServices.SymbolWriter.IMethodDef.Name" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.IMethodDef.Token" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.ISourceFile" Id="T:Mono.CompilerServices.SymbolWriter.ISourceFile">
      <Member Id="P:Mono.CompilerServices.SymbolWriter.ISourceFile.Entry" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.LineNumberEntry" Id="T:Mono.CompilerServices.SymbolWriter.LineNumberEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.Column" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.EndColumn" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.EndRow" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.File" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.IsHidden" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.Null" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.Offset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.Row" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.#ctor(System.Int32,System.Int32,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.LineNumberTable" Id="T:Mono.CompilerServices.SymbolWriter.LineNumberTable">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable._line_numbers" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.Default_LineBase" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.Default_LineRange" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.Default_OpcodeBase" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNE_end_sequence" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNE_MONO_negate_is_hidden" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNS_advance_line" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNS_advance_pc" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNS_const_add_pc" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNS_copy" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.DW_LNS_set_file" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.LineBase" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.LineRange" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.MaxAddressIncrement" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberTable.OpcodeBase" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberTable.#ctor(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberTable.GetMethodBounds(Mono.CompilerServices.SymbolWriter.LineNumberEntry@,Mono.CompilerServices.SymbolWriter.LineNumberEntry@)" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.LineNumberTable.LineNumbers" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.LocalVariableEntry" Id="T:Mono.CompilerServices.SymbolWriter.LocalVariableEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LocalVariableEntry.BlockIndex" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LocalVariableEntry.Index" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LocalVariableEntry.Name" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LocalVariableEntry.#ctor(System.Int32,System.String,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LocalVariableEntry.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.MethodEntry" Id="T:Mono.CompilerServices.SymbolWriter.MethodEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.CompileUnit" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.CompileUnitIndex" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.NamespaceID" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.Size" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.SymbolFile" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.Token" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.CompareTo(System.Object)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.GetCodeBlocks" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.GetLineNumberTable" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.GetLocals" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.GetRealName" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.GetScopeVariables" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.ReadAll" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MethodEntry.ToString" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MethodEntry.Index" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MethodEntry.MethodFlags" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.MonoSymbolFile" Id="T:Mono.CompilerServices.SymbolWriter.MonoSymbolFile">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.MajorVersion" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.MinorVersion" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.NumLineNumbers" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.#ctor" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.AddCompileUnit(Mono.CompilerServices.SymbolWriter.CompileUnitEntry)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.AddMethod(Mono.CompilerServices.SymbolWriter.MethodEntry)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.AddSource(Mono.CompilerServices.SymbolWriter.SourceFileEntry)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.CreateSymbolFile(System.Guid,System.IO.FileStream)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.DefineMethod(Mono.CompilerServices.SymbolWriter.CompileUnitEntry,System.Int32,Mono.CompilerServices.SymbolWriter.ScopeVariable[],Mono.CompilerServices.SymbolWriter.LocalVariableEntry[],Mono.CompilerServices.SymbolWriter.LineNumberEntry[],Mono.CompilerServices.SymbolWriter.CodeBlockEntry[],System.String,Mono.CompilerServices.SymbolWriter.MethodEntry.Flags,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.Dispose" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.Dispose(System.Boolean)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.FindSource(System.String)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetAnonymousScope(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetCompileUnit(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetMethod(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetMethodByToken(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.GetSourceFile(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.ReadSymbolFile(System.IO.Stream)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.ReadSymbolFile(System.Reflection.Assembly)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.ReadSymbolFile(System.String)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.ReadSymbolFile(System.String,System.Guid)" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.AnonymousScopeCount" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.CompileUnitCount" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.CompileUnits" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.Guid" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.MethodCount" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.Methods" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.NamespaceCount" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.OffsetTable" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.SourceCount" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.Sources" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.MonoSymbolFile.TypeCount" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.MonoSymbolFileException" Id="T:Mono.CompilerServices.SymbolWriter.MonoSymbolFileException">
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFileException.#ctor" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFileException.#ctor(System.String,System.Exception)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.MonoSymbolFileException.#ctor(System.String,System.Object[])" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.NamespaceEntry" Id="T:Mono.CompilerServices.SymbolWriter.NamespaceEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.NamespaceEntry.Index" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.NamespaceEntry.Name" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.NamespaceEntry.Parent" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.NamespaceEntry.UsingClauses" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.NamespaceEntry.#ctor(System.String,System.Int32,System.String[],System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.NamespaceEntry.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.OffsetTable" Id="T:Mono.CompilerServices.SymbolWriter.OffsetTable">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.AnonymousScopeCount" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.AnonymousScopeTableOffset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.AnonymousScopeTableSize" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.CompileUnitCount" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.CompileUnitTableOffset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.CompileUnitTableSize" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.DataSectionOffset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.DataSectionSize" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.FileFlags" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.LineNumberTable_LineBase" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.LineNumberTable_LineRange" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.LineNumberTable_OpcodeBase" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.Magic" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.MajorVersion" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.MethodCount" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.MethodTableOffset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.MethodTableSize" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.MinorVersion" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.SourceCount" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.SourceTableOffset" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.SourceTableSize" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.TotalFileSize" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.TypeCount" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.OffsetTable.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.ScopeVariable" Id="T:Mono.CompilerServices.SymbolWriter.ScopeVariable">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.ScopeVariable.Index" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.ScopeVariable.Scope" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.ScopeVariable.#ctor(System.Int32,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.ScopeVariable.ToString" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.SourceFileEntry" Id="T:Mono.CompilerServices.SymbolWriter.SourceFileEntry">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.SourceFileEntry.Index" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceFileEntry.#ctor(Mono.CompilerServices.SymbolWriter.MonoSymbolFile,System.String)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceFileEntry.#ctor(Mono.CompilerServices.SymbolWriter.MonoSymbolFile,System.String,System.Byte[],System.Byte[])" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceFileEntry.#ctor(Mono.CompilerServices.SymbolWriter.MonoSymbolFile,System.String,System.String,System.Byte[],System.Byte[])" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceFileEntry.CheckChecksum" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceFileEntry.SetAutoGenerated" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceFileEntry.ToString" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceFileEntry.AutoGenerated" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceFileEntry.Checksum" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceFileEntry.FileName" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceFileEntry.Size" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.SourceMethodBuilder" Id="T:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder">
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.#ctor(Mono.CompilerServices.SymbolWriter.ICompileUnit)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.#ctor(Mono.CompilerServices.SymbolWriter.ICompileUnit,System.Int32,Mono.CompilerServices.SymbolWriter.IMethodDef)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.AddLocal(System.Int32,System.String)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.AddScopeVariable(System.Int32,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.DefineMethod(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.DefineMethod(Mono.CompilerServices.SymbolWriter.MonoSymbolFile,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.EndBlock(System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.MarkSequencePoint(System.Int32,Mono.CompilerServices.SymbolWriter.SourceFileEntry,System.Int32,System.Int32,System.Boolean)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.MarkSequencePoint(System.Int32,Mono.CompilerServices.SymbolWriter.SourceFileEntry,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.StartBlock(Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type,System.Int32)" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.StartBlock(Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type,System.Int32,System.Int32)" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.Blocks" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.CurrentBlock" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.Locals" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.ScopeVariables" />
      <Member Id="P:Mono.CompilerServices.SymbolWriter.SourceMethodBuilder.SourceFile" />
    </Type>
  </Namespace>
  <Namespace Name="">
    <Type Name="Mono.CompilerServices.SymbolWriter.CapturedVariable/CapturedKind" Id="T:Mono.CompilerServices.SymbolWriter.CapturedVariable.CapturedKind">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedVariable.CapturedKind.Local" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedVariable.CapturedKind.Parameter" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CapturedVariable.CapturedKind.This" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.CodeBlockEntry/Type" Id="T:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type.CompilerGenerated" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type.IteratorBody" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type.IteratorDispatcher" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.CodeBlockEntry.Type.Lexical" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.LineNumberEntry/LocationComparer" Id="T:Mono.CompilerServices.SymbolWriter.LineNumberEntry.LocationComparer">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.LineNumberEntry.LocationComparer.Default" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.LocationComparer.#ctor" />
      <Member Id="M:Mono.CompilerServices.SymbolWriter.LineNumberEntry.LocationComparer.Compare(Mono.CompilerServices.SymbolWriter.LineNumberEntry,Mono.CompilerServices.SymbolWriter.LineNumberEntry)" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.MethodEntry/Flags" Id="T:Mono.CompilerServices.SymbolWriter.MethodEntry.Flags">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.Flags.ColumnsInfoIncluded" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.Flags.EndInfoIncluded" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.MethodEntry.Flags.LocalNamesAmbiguous" />
    </Type>
    <Type Name="Mono.CompilerServices.SymbolWriter.OffsetTable/Flags" Id="T:Mono.CompilerServices.SymbolWriter.OffsetTable.Flags">
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.Flags.IsAspxSource" />
      <Member Id="F:Mono.CompilerServices.SymbolWriter.OffsetTable.Flags.WindowsFileNames" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousExpression/AnonymousMethodMethod" Id="T:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod">
      <Member Id="F:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.AnonymousMethod" />
      <Member Id="F:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.Storey" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.AnonymousExpression,Mono.CSharp.AnonymousMethodStorey,Mono.CSharp.TypeExpr,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.CreateEmitContext(System.Reflection.Emit.ILGenerator,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.DefineTypeParameters" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.Emit" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.AnonymousMethodMethod.ResolveMemberType" />
    </Type>
    <Type Name="Mono.CSharp.Argument/AType" Id="T:Mono.CSharp.Argument.AType">
      <Member Id="F:Mono.CSharp.Argument.AType.ConditionalAccessFlag" />
      <Member Id="F:Mono.CSharp.Argument.AType.Default" />
      <Member Id="F:Mono.CSharp.Argument.AType.DynamicTypeName" />
      <Member Id="F:Mono.CSharp.Argument.AType.ExtensionType" />
      <Member Id="F:Mono.CSharp.Argument.AType.ExtensionTypeConditionalAccess" />
      <Member Id="F:Mono.CSharp.Argument.AType.None" />
      <Member Id="F:Mono.CSharp.Argument.AType.Out" />
      <Member Id="F:Mono.CSharp.Argument.AType.Ref" />
    </Type>
    <Type Name="Mono.CSharp.ArrayContainer/TypeRankPair" Id="T:Mono.CSharp.ArrayContainer.TypeRankPair">
      <Member Id="M:Mono.CSharp.ArrayContainer.TypeRankPair.#ctor(Mono.CSharp.TypeSpec,System.Int32)" />
      <Member Id="M:Mono.CSharp.ArrayContainer.TypeRankPair.Equals(Mono.CSharp.ArrayContainer.TypeRankPair)" />
      <Member Id="M:Mono.CSharp.ArrayContainer.TypeRankPair.GetHashCode" />
    </Type>
    <Type Name="Mono.CSharp.AttributeEncoder/EncodedTypeProperties" Id="T:Mono.CSharp.AttributeEncoder.EncodedTypeProperties">
      <Member Id="F:Mono.CSharp.AttributeEncoder.EncodedTypeProperties.DynamicType" />
      <Member Id="F:Mono.CSharp.AttributeEncoder.EncodedTypeProperties.None" />
      <Member Id="F:Mono.CSharp.AttributeEncoder.EncodedTypeProperties.TypeParameter" />
    </Type>
    <Type Name="Mono.CSharp.AwaitStatement/AwaitableMemberAccess" Id="T:Mono.CSharp.AwaitStatement.AwaitableMemberAccess">
      <Member Id="M:Mono.CSharp.AwaitStatement.AwaitableMemberAccess.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.AwaitableMemberAccess.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.AwaitableMemberAccess.Error_TypeDoesNotContainDefinition(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.String)" />
      <Member Id="P:Mono.CSharp.AwaitStatement.AwaitableMemberAccess.ProbingMode" />
    </Type>
    <Type Name="Mono.CSharp.Binary/Operator" Id="T:Mono.CSharp.Binary.Operator">
      <Member Id="F:Mono.CSharp.Binary.Operator.Addition" />
      <Member Id="F:Mono.CSharp.Binary.Operator.AdditionMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.ArithmeticMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.BitwiseAnd" />
      <Member Id="F:Mono.CSharp.Binary.Operator.BitwiseMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.BitwiseOr" />
      <Member Id="F:Mono.CSharp.Binary.Operator.ComparisonMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.DecomposedMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.Division" />
      <Member Id="F:Mono.CSharp.Binary.Operator.Equality" />
      <Member Id="F:Mono.CSharp.Binary.Operator.EqualityMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.ExclusiveOr" />
      <Member Id="F:Mono.CSharp.Binary.Operator.GreaterThan" />
      <Member Id="F:Mono.CSharp.Binary.Operator.GreaterThanOrEqual" />
      <Member Id="F:Mono.CSharp.Binary.Operator.Inequality" />
      <Member Id="F:Mono.CSharp.Binary.Operator.LeftShift" />
      <Member Id="F:Mono.CSharp.Binary.Operator.LessThan" />
      <Member Id="F:Mono.CSharp.Binary.Operator.LessThanOrEqual" />
      <Member Id="F:Mono.CSharp.Binary.Operator.LogicalAnd" />
      <Member Id="F:Mono.CSharp.Binary.Operator.LogicalMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.LogicalOr" />
      <Member Id="F:Mono.CSharp.Binary.Operator.Modulus" />
      <Member Id="F:Mono.CSharp.Binary.Operator.Multiply" />
      <Member Id="F:Mono.CSharp.Binary.Operator.NullableMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.RelationalMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.RightShift" />
      <Member Id="F:Mono.CSharp.Binary.Operator.ShiftMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.Subtraction" />
      <Member Id="F:Mono.CSharp.Binary.Operator.SubtractionMask" />
      <Member Id="F:Mono.CSharp.Binary.Operator.ValuesOnlyMask" />
    </Type>
    <Type Name="Mono.CSharp.Binary/PredefinedOperator" Id="T:Mono.CSharp.Binary.PredefinedOperator">
      <Member Id="F:Mono.CSharp.Binary.PredefinedOperator.left" />
      <Member Id="F:Mono.CSharp.Binary.PredefinedOperator.left_unwrap" />
      <Member Id="F:Mono.CSharp.Binary.PredefinedOperator.OperatorsMask" />
      <Member Id="F:Mono.CSharp.Binary.PredefinedOperator.ReturnType" />
      <Member Id="F:Mono.CSharp.Binary.PredefinedOperator.right" />
      <Member Id="F:Mono.CSharp.Binary.PredefinedOperator.right_unwrap" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Binary.Operator)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Binary.Operator,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Binary.Operator)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Binary.Operator,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.ConvertResult(Mono.CSharp.ResolveContext,Mono.CSharp.Binary)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.IsApplicable(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.IsPrimitiveApplicable(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Binary.PredefinedOperator.ResolveBetterOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Binary.PredefinedOperator)" />
      <Member Id="P:Mono.CSharp.Binary.PredefinedOperator.IsLifted" />
    </Type>
    <Type Name="Mono.CSharp.Binary/State" Id="T:Mono.CSharp.Binary.State">
      <Member Id="F:Mono.CSharp.Binary.State.Compound" />
      <Member Id="F:Mono.CSharp.Binary.State.None" />
      <Member Id="F:Mono.CSharp.Binary.State.UserOperatorsExcluded" />
    </Type>
    <Type Name="Mono.CSharp.Block/Flags" Id="T:Mono.CSharp.Block.Flags">
      <Member Id="F:Mono.CSharp.Block.Flags.AwaitBlock" />
      <Member Id="F:Mono.CSharp.Block.Flags.CatchBlock" />
      <Member Id="F:Mono.CSharp.Block.Flags.CompilerGenerated" />
      <Member Id="F:Mono.CSharp.Block.Flags.FinallyBlock" />
      <Member Id="F:Mono.CSharp.Block.Flags.HasAsyncModifier" />
      <Member Id="F:Mono.CSharp.Block.Flags.HasCapturedThis" />
      <Member Id="F:Mono.CSharp.Block.Flags.HasCapturedVariable" />
      <Member Id="F:Mono.CSharp.Block.Flags.HasReferenceToStoreyForInstanceLambdas" />
      <Member Id="F:Mono.CSharp.Block.Flags.InitializationEmitted" />
      <Member Id="F:Mono.CSharp.Block.Flags.IsExpressionTree" />
      <Member Id="F:Mono.CSharp.Block.Flags.Iterator" />
      <Member Id="F:Mono.CSharp.Block.Flags.NoFlowAnalysis" />
      <Member Id="F:Mono.CSharp.Block.Flags.ReachableEnd" />
      <Member Id="F:Mono.CSharp.Block.Flags.Resolved" />
      <Member Id="F:Mono.CSharp.Block.Flags.Unchecked" />
      <Member Id="F:Mono.CSharp.Block.Flags.Unsafe" />
      <Member Id="F:Mono.CSharp.Block.Flags.YieldBlock" />
    </Type>
    <Type Name="Mono.CSharp.BuilderContext/FlagsHandle" Id="T:Mono.CSharp.BuilderContext.FlagsHandle">
      <Member Id="M:Mono.CSharp.BuilderContext.FlagsHandle.#ctor(Mono.CSharp.BuilderContext,Mono.CSharp.BuilderContext.Options)" />
      <Member Id="M:Mono.CSharp.BuilderContext.FlagsHandle.Dispose" />
    </Type>
    <Type Name="Mono.CSharp.BuilderContext/Options" Id="T:Mono.CSharp.BuilderContext.Options">
      <Member Id="F:Mono.CSharp.BuilderContext.Options.AccurateDebugInfo" />
      <Member Id="F:Mono.CSharp.BuilderContext.Options.AsyncBody" />
      <Member Id="F:Mono.CSharp.BuilderContext.Options.CheckedScope" />
      <Member Id="F:Mono.CSharp.BuilderContext.Options.ConstructorScope" />
      <Member Id="F:Mono.CSharp.BuilderContext.Options.OmitDebugInfo" />
    </Type>
    <Type Name="Mono.CSharp.BuiltinTypeSpec/Type" Id="T:Mono.CSharp.BuiltinTypeSpec.Type">
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Array" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Attribute" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Bool" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Byte" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Char" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Decimal" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Delegate" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Double" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Dynamic" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Enum" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Exception" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.FirstPrimitive" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Float" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.IDisposable" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.IEnumerable" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.IEnumerator" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Int" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.IntPtr" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.LastPrimitive" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Long" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.MulticastDelegate" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.None" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Object" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Other" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.SByte" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Short" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.String" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.Type" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.UInt" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.UIntPtr" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.ULong" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.UShort" />
      <Member Id="F:Mono.CSharp.BuiltinTypeSpec.Type.ValueType" />
    </Type>
    <Type Name="Mono.CSharp.CompoundAssign/TargetExpression" Id="T:Mono.CSharp.CompoundAssign.TargetExpression">
      <Member Id="M:Mono.CSharp.CompoundAssign.TargetExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.TargetExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.CompoundAssign.TargetExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.TargetExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.TargetExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.TargetExpression.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.CompoundAssign.TargetExpression.RequiresEmitWithAwait" />
    </Type>
    <Type Name="Mono.CSharp.ConvCast/Mode" Id="T:Mono.CSharp.ConvCast.Mode">
      <Member Id="F:Mono.CSharp.ConvCast.Mode.CH_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.CH_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.CH_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I_I8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I1_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I1_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I1_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I1_U4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I1_U8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I2_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I2_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I2_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I2_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I2_U4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I2_U8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_U4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I4_U8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_I" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_I4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_U4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.I8_U8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_I4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_I8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_U4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R4_U8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_I4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_I8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_R4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_U4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.R8_U8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U1_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U1_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U2_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U2_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U2_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U2_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U4_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U4_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U4_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U4_I4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U4_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U4_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_CH" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_I" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_I1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_I2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_I4" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_I8" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_U1" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_U2" />
      <Member Id="F:Mono.CSharp.ConvCast.Mode.U8_U4" />
    </Type>
    <Type Name="Mono.CSharp.Event/AEventAccessor" Id="T:Mono.CSharp.Event.AEventAccessor">
      <Member Id="F:Mono.CSharp.Event.AEventAccessor.AddPrefix" />
      <Member Id="F:Mono.CSharp.Event.AEventAccessor.method" />
      <Member Id="F:Mono.CSharp.Event.AEventAccessor.RemovePrefix" />
      <Member Id="M:Mono.CSharp.Event.AEventAccessor.#ctor(Mono.CSharp.Event,System.String,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Event.AEventAccessor.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Event.AEventAccessor.ApplyToExtraTarget(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Event.AEventAccessor.Define(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.Event.AEventAccessor.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.Event.AEventAccessor.IsClsComplianceRequired" />
      <Member Id="P:Mono.CSharp.Event.AEventAccessor.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Event.AEventAccessor.IsInterfaceImplementation" />
      <Member Id="P:Mono.CSharp.Event.AEventAccessor.MethodData" />
      <Member Id="P:Mono.CSharp.Event.AEventAccessor.ParameterInfo" />
      <Member Id="P:Mono.CSharp.Event.AEventAccessor.ReturnType" />
      <Member Id="P:Mono.CSharp.Event.AEventAccessor.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.EventProperty/AddDelegateMethod" Id="T:Mono.CSharp.EventProperty.AddDelegateMethod">
      <Member Id="M:Mono.CSharp.EventProperty.AddDelegateMethod.#ctor(Mono.CSharp.EventProperty,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.EventProperty/AEventPropertyAccessor" Id="T:Mono.CSharp.EventProperty.AEventPropertyAccessor">
      <Member Id="M:Mono.CSharp.EventProperty.AEventPropertyAccessor.#ctor(Mono.CSharp.EventProperty,System.String,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.EventProperty.AEventPropertyAccessor.Define(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.EventProperty.AEventPropertyAccessor.GetSignatureForError" />
    </Type>
    <Type Name="Mono.CSharp.EventProperty/RemoveDelegateMethod" Id="T:Mono.CSharp.EventProperty.RemoveDelegateMethod">
      <Member Id="M:Mono.CSharp.EventProperty.RemoveDelegateMethod.#ctor(Mono.CSharp.EventProperty,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.Expression/MemberLookupRestrictions" Id="T:Mono.CSharp.Expression.MemberLookupRestrictions">
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.DontSetConditionalAccess" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.EmptyArguments" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.ExactArity" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.IgnoreAmbiguity" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.IgnoreArity" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.InvocableOnly" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.NameOfExcluded" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.None" />
      <Member Id="F:Mono.CSharp.Expression.MemberLookupRestrictions.ReadAccess" />
    </Type>
    <Type Name="Mono.CSharp.FieldBase/Status" Id="T:Mono.CSharp.FieldBase.Status">
      <Member Id="F:Mono.CSharp.FieldBase.Status.HAS_OFFSET" />
    </Type>
    <Type Name="Mono.CSharp.Fixed/VariableDeclaration" Id="T:Mono.CSharp.Fixed.VariableDeclaration">
      <Member Id="M:Mono.CSharp.Fixed.VariableDeclaration.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.Fixed.VariableDeclaration.ResolveInitializer(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable,Mono.CSharp.Expression)" />
    </Type>
    <Type Name="Mono.CSharp.HoistedStoreyClass/HoistedField" Id="T:Mono.CSharp.HoistedStoreyClass.HoistedField">
      <Member Id="M:Mono.CSharp.HoistedStoreyClass.HoistedField.#ctor(Mono.CSharp.HoistedStoreyClass,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,System.String,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.HoistedStoreyClass.HoistedField.ResolveMemberType" />
    </Type>
    <Type Name="Mono.CSharp.Indexer/GetIndexerMethod" Id="T:Mono.CSharp.Indexer.GetIndexerMethod">
      <Member Id="M:Mono.CSharp.Indexer.GetIndexerMethod.#ctor(Mono.CSharp.PropertyBase,Mono.CSharp.Modifiers,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Indexer.GetIndexerMethod.Define(Mono.CSharp.TypeContainer)" />
      <Member Id="P:Mono.CSharp.Indexer.GetIndexerMethod.Mono#CSharp#IInterfaceMemberSpec#MemberType" />
      <Member Id="P:Mono.CSharp.Indexer.GetIndexerMethod.Mono#CSharp#IParametersMember#Parameters" />
      <Member Id="P:Mono.CSharp.Indexer.GetIndexerMethod.ParameterInfo" />
    </Type>
    <Type Name="Mono.CSharp.Indexer/SetIndexerMethod" Id="T:Mono.CSharp.Indexer.SetIndexerMethod">
      <Member Id="M:Mono.CSharp.Indexer.SetIndexerMethod.#ctor(Mono.CSharp.PropertyBase,Mono.CSharp.Modifiers,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.Indexer.SetIndexerMethod.Mono#CSharp#IInterfaceMemberSpec#MemberType" />
      <Member Id="P:Mono.CSharp.Indexer.SetIndexerMethod.Mono#CSharp#IParametersMember#Parameters" />
    </Type>
    <Type Name="Mono.CSharp.Invocation/Predefined" Id="T:Mono.CSharp.Invocation.Predefined">
      <Member Id="M:Mono.CSharp.Invocation.Predefined.#ctor(Mono.CSharp.MethodGroupExpr,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Invocation.Predefined.DoResolveOverload(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.Linq.AQueryClause/QueryExpressionAccess" Id="T:Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess">
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess.Error_TypeDoesNotContainDefinition(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.String)" />
    </Type>
    <Type Name="Mono.CSharp.Linq.AQueryClause/QueryExpressionInvocation" Id="T:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation">
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.#ctor(Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.DoResolveDynamic(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.DoResolveOverload(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.Mono#CSharp#OverloadResolver#IErrorHandler#AmbiguousCandidates(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.Mono#CSharp#OverloadResolver#IErrorHandler#ArgumentMismatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.Argument,System.Int32)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.Mono#CSharp#OverloadResolver#IErrorHandler#NoArgumentMatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.Mono#CSharp#OverloadResolver#IErrorHandler#TypeInferenceFailed(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
    </Type>
    <Type Name="Mono.CSharp.Linq.QueryBlock/TransparentParameter" Id="T:Mono.CSharp.Linq.QueryBlock.TransparentParameter">
      <Member Id="F:Mono.CSharp.Linq.QueryBlock.TransparentParameter.Counter" />
      <Member Id="F:Mono.CSharp.Linq.QueryBlock.TransparentParameter.Identifier" />
      <Member Id="F:Mono.CSharp.Linq.QueryBlock.TransparentParameter.Parent" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.TransparentParameter.#ctor(Mono.CSharp.Parameter,Mono.CSharp.Linq.RangeVariable)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.TransparentParameter.Reset" />
    </Type>
    <Type Name="Mono.CSharp.LocalVariable/Flags" Id="T:Mono.CSharp.LocalVariable.Flags">
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.AddressTaken" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.CompilerGenerated" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.Constant" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.FixedVariable" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.ForeachVariable" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.IsLocked" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.IsThis" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.ReadonlyMask" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.SymbolFileHidden" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.Used" />
      <Member Id="F:Mono.CSharp.LocalVariable.Flags.UsingVariable" />
    </Type>
    <Type Name="Mono.CSharp.LocationsBag/MemberLocations" Id="T:Mono.CSharp.LocationsBag.MemberLocations">
      <Member Id="F:Mono.CSharp.LocationsBag.MemberLocations.Modifiers" />
      <Member Id="M:Mono.CSharp.LocationsBag.MemberLocations.#ctor(System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}})" />
      <Member Id="M:Mono.CSharp.LocationsBag.MemberLocations.#ctor(System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocationsBag.MemberLocations.#ctor(System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}},Mono.CSharp.Location[])" />
      <Member Id="M:Mono.CSharp.LocationsBag.MemberLocations.#ctor(System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}},System.Collections.Generic.List{Mono.CSharp.Location})" />
      <Member Id="M:Mono.CSharp.LocationsBag.MemberLocations.AddLocations(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocationsBag.MemberLocations.AddLocations(Mono.CSharp.Location[])" />
      <Member Id="P:Mono.CSharp.LocationsBag.MemberLocations.Count" />
      <Member Id="P:Mono.CSharp.LocationsBag.MemberLocations.Item(System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.MemberCore/Flags" Id="T:Mono.CSharp.MemberCore.Flags">
      <Member Id="F:Mono.CSharp.MemberCore.Flags.CanBeReused" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.CloseTypeCreated" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.ClsCompliance_Undetected" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.ClsCompliant" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.ClsCompliantAttributeFalse" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.Excluded" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.Excluded_Undetected" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.HasClsCompliantAttribute" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.HasCompliantAttribute_Undetected" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.HasExplicitLayout" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.HasInstanceConstructor" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.HasStructLayout" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.HasUserOperators" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.InterfacesExpanded" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.IsAssigned" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.IsUsed" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.MethodOverloadsExist" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.Obsolete" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.Obsolete_Undetected" />
      <Member Id="F:Mono.CSharp.MemberCore.Flags.PartialDefinitionExists" />
    </Type>
    <Type Name="Mono.CSharp.MemberSpec/StateFlags" Id="T:Mono.CSharp.MemberSpec.StateFlags">
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.CLSCompliant" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.CLSCompliant_Undetected" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.ConstraintsChecked" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.GenericIterateInterface" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.GenericTask" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.HasDynamicElement" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.InflatedExpressionType" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.InflatedNullableType" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.InterfacesExpanded" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.InterfacesImported" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.IsAccessor" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.IsGeneric" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.IsNotCSharpCompatible" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.MissingDependency" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.MissingDependency_Undetected" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.Obsolete" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.Obsolete_Undetected" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.PendingBaseTypeInflate" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.PendingMakeMethod" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.PendingMemberCacheMembers" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.PendingMetaInflate" />
      <Member Id="F:Mono.CSharp.MemberSpec.StateFlags.SpecialRuntimeType" />
    </Type>
    <Type Name="Mono.CSharp.MetadataImporter/DynamicTypeReader" Id="T:Mono.CSharp.MetadataImporter.DynamicTypeReader">
      <Member Id="F:Mono.CSharp.MetadataImporter.DynamicTypeReader.Position" />
      <Member Id="M:Mono.CSharp.MetadataImporter.DynamicTypeReader.#ctor(System.Object)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.DynamicTypeReader.HasDynamicAttribute" />
      <Member Id="M:Mono.CSharp.MetadataImporter.DynamicTypeReader.IsDynamicObject" />
    </Type>
    <Type Name="Mono.CSharp.ModuleContainer/PatternMatchingHelper" Id="T:Mono.CSharp.ModuleContainer.PatternMatchingHelper">
      <Member Id="M:Mono.CSharp.ModuleContainer.PatternMatchingHelper.#ctor(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.PatternMatchingHelper.DoDefineMembers" />
      <Member Id="P:Mono.CSharp.ModuleContainer.PatternMatchingHelper.NumberMatcher" />
    </Type>
    <Type Name="Mono.CSharp.Operator/OpType" Id="T:Mono.CSharp.Operator.OpType">
      <Member Id="F:Mono.CSharp.Operator.OpType.Addition" />
      <Member Id="F:Mono.CSharp.Operator.OpType.BitwiseAnd" />
      <Member Id="F:Mono.CSharp.Operator.OpType.BitwiseOr" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Decrement" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Division" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Equality" />
      <Member Id="F:Mono.CSharp.Operator.OpType.ExclusiveOr" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Explicit" />
      <Member Id="F:Mono.CSharp.Operator.OpType.False" />
      <Member Id="F:Mono.CSharp.Operator.OpType.GreaterThan" />
      <Member Id="F:Mono.CSharp.Operator.OpType.GreaterThanOrEqual" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Implicit" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Increment" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Inequality" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Is" />
      <Member Id="F:Mono.CSharp.Operator.OpType.LeftShift" />
      <Member Id="F:Mono.CSharp.Operator.OpType.LessThan" />
      <Member Id="F:Mono.CSharp.Operator.OpType.LessThanOrEqual" />
      <Member Id="F:Mono.CSharp.Operator.OpType.LogicalNot" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Modulus" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Multiply" />
      <Member Id="F:Mono.CSharp.Operator.OpType.OnesComplement" />
      <Member Id="F:Mono.CSharp.Operator.OpType.RightShift" />
      <Member Id="F:Mono.CSharp.Operator.OpType.Subtraction" />
      <Member Id="F:Mono.CSharp.Operator.OpType.TOP" />
      <Member Id="F:Mono.CSharp.Operator.OpType.True" />
      <Member Id="F:Mono.CSharp.Operator.OpType.UnaryNegation" />
      <Member Id="F:Mono.CSharp.Operator.OpType.UnaryPlus" />
    </Type>
    <Type Name="Mono.CSharp.OverloadResolver/IBaseMembersProvider" Id="T:Mono.CSharp.OverloadResolver.IBaseMembersProvider">
      <Member Id="M:Mono.CSharp.OverloadResolver.IBaseMembersProvider.GetBaseMembers(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.IBaseMembersProvider.GetOverrideMemberParameters(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.IBaseMembersProvider.LookupExtensionMethod(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.OverloadResolver/IErrorHandler" Id="T:Mono.CSharp.OverloadResolver.IErrorHandler">
      <Member Id="M:Mono.CSharp.OverloadResolver.IErrorHandler.AmbiguousCandidates(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.IErrorHandler.ArgumentMismatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.Argument,System.Int32)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.IErrorHandler.NoArgumentMatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.IErrorHandler.TypeInferenceFailed(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
    </Type>
    <Type Name="Mono.CSharp.OverloadResolver/IInstanceQualifier" Id="T:Mono.CSharp.OverloadResolver.IInstanceQualifier">
      <Member Id="M:Mono.CSharp.OverloadResolver.IInstanceQualifier.CheckProtectedMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.OverloadResolver.IInstanceQualifier.InstanceType" />
    </Type>
    <Type Name="Mono.CSharp.OverloadResolver/Restrictions" Id="T:Mono.CSharp.OverloadResolver.Restrictions">
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.BaseMembersIncluded" />
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.CovariantDelegate" />
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.DelegateInvoke" />
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.GetEnumeratorLookup" />
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.NoBaseMembers" />
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.None" />
      <Member Id="F:Mono.CSharp.OverloadResolver.Restrictions.ProbingOnly" />
    </Type>
    <Type Name="Mono.CSharp.Parameter/Modifier" Id="T:Mono.CSharp.Parameter.Modifier">
      <Member Id="F:Mono.CSharp.Parameter.Modifier.CallerFilePath" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.CallerLineNumber" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.CallerMask" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.CallerMemberName" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.ModifierMask" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.NONE" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.OUT" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.PARAMS" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.REF" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.RefOutMask" />
      <Member Id="F:Mono.CSharp.Parameter.Modifier.This" />
    </Type>
    <Type Name="Mono.CSharp.ParametersBlock/ParameterInfo" Id="T:Mono.CSharp.ParametersBlock.ParameterInfo">
      <Member Id="F:Mono.CSharp.ParametersBlock.ParameterInfo.VariableInfo" />
      <Member Id="M:Mono.CSharp.ParametersBlock.ParameterInfo.#ctor(Mono.CSharp.ParametersBlock,System.Int32)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.ParameterInfo.CreateReferenceExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.Block" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.IsDeclared" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.IsLocked" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.IsParameter" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.Location" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.Mono#CSharp#INamedBlockVariable#Block" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.Parameter" />
      <Member Id="P:Mono.CSharp.ParametersBlock.ParameterInfo.ParameterType" />
    </Type>
    <Type Name="Mono.CSharp.PendingImplementation/Operation" Id="T:Mono.CSharp.PendingImplementation.Operation">
      <Member Id="F:Mono.CSharp.PendingImplementation.Operation.ClearAll" />
      <Member Id="F:Mono.CSharp.PendingImplementation.Operation.ClearOne" />
      <Member Id="F:Mono.CSharp.PendingImplementation.Operation.Lookup" />
    </Type>
    <Type Name="Mono.CSharp.Property/BackingFieldDeclaration" Id="T:Mono.CSharp.Property.BackingFieldDeclaration">
      <Member Id="M:Mono.CSharp.Property.BackingFieldDeclaration.#ctor(Mono.CSharp.Property,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Property.BackingFieldDeclaration.GetSignatureForError" />
      <Member Id="P:Mono.CSharp.Property.BackingFieldDeclaration.OriginalProperty" />
    </Type>
    <Type Name="Mono.CSharp.PropertyBase/GetMethod" Id="T:Mono.CSharp.PropertyBase.GetMethod">
      <Member Id="M:Mono.CSharp.PropertyBase.GetMethod.#ctor(Mono.CSharp.PropertyBase,Mono.CSharp.Modifiers,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PropertyBase.GetMethod.Define(Mono.CSharp.TypeContainer)" />
      <Member Id="P:Mono.CSharp.PropertyBase.GetMethod.ParameterInfo" />
      <Member Id="P:Mono.CSharp.PropertyBase.GetMethod.ReturnType" />
      <Member Id="P:Mono.CSharp.PropertyBase.GetMethod.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.PropertyBase/PropertyMethod" Id="T:Mono.CSharp.PropertyBase.PropertyMethod">
      <Member Id="F:Mono.CSharp.PropertyBase.PropertyMethod.flags" />
      <Member Id="F:Mono.CSharp.PropertyBase.PropertyMethod.method" />
      <Member Id="M:Mono.CSharp.PropertyBase.PropertyMethod.#ctor(Mono.CSharp.PropertyBase,System.String,Mono.CSharp.Modifiers,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PropertyBase.PropertyMethod.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.PropertyBase.PropertyMethod.Define(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.PropertyBase.PropertyMethod.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.PropertyBase.PropertyMethod.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.PropertyBase.PropertyMethod.IsClsComplianceRequired" />
      <Member Id="P:Mono.CSharp.PropertyBase.PropertyMethod.AttributeTargets" />
      <Member Id="P:Mono.CSharp.PropertyBase.PropertyMethod.HasCustomAccessModifier" />
      <Member Id="P:Mono.CSharp.PropertyBase.PropertyMethod.Property" />
    </Type>
    <Type Name="Mono.CSharp.PropertyBase/SetMethod" Id="T:Mono.CSharp.PropertyBase.SetMethod">
      <Member Id="F:Mono.CSharp.PropertyBase.SetMethod.parameters" />
      <Member Id="M:Mono.CSharp.PropertyBase.SetMethod.#ctor(Mono.CSharp.PropertyBase,Mono.CSharp.Modifiers,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PropertyBase.SetMethod.ApplyToExtraTarget(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.PropertyBase.SetMethod.Define(Mono.CSharp.TypeContainer)" />
      <Member Id="P:Mono.CSharp.PropertyBase.SetMethod.ParameterInfo" />
      <Member Id="P:Mono.CSharp.PropertyBase.SetMethod.ReturnType" />
      <Member Id="P:Mono.CSharp.PropertyBase.SetMethod.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.ReducedExpression/ReducedConstantExpression" Id="T:Mono.CSharp.ReducedExpression.ReducedConstantExpression">
      <Member Id="M:Mono.CSharp.ReducedExpression.ReducedConstantExpression.#ctor(Mono.CSharp.Constant,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.ReducedConstantExpression.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.ReducedConstantExpression.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.ReducedConstantExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.ReducedConstantExpression.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.ReducedExpression.ReducedConstantExpression.OriginalExpression" />
    </Type>
    <Type Name="Mono.CSharp.ResolveContext/FlagsHandle" Id="T:Mono.CSharp.ResolveContext.FlagsHandle">
      <Member Id="M:Mono.CSharp.ResolveContext.FlagsHandle.#ctor(Mono.CSharp.ResolveContext,Mono.CSharp.ResolveContext.Options)" />
      <Member Id="M:Mono.CSharp.ResolveContext.FlagsHandle.Dispose" />
    </Type>
    <Type Name="Mono.CSharp.ResolveContext/Options" Id="T:Mono.CSharp.ResolveContext.Options">
      <Member Id="F:Mono.CSharp.ResolveContext.Options.AllCheckStateFlags" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.BaseInitializer" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.CatchScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.CheckedScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.CompoundAssignmentScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.ConstantCheckState" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.ConstantScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.ConstructorScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.DontSetConditionalAccessReceiver" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.EnumScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.ExpressionTreeConversion" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.FieldInitializerScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.FinallyScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.FixedInitializerScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.InferReturnType" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.InvokeSpecialName" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.LockScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.NameOfScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.OmitDebuggingInfo" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.ProbingMode" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.TryScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.TryWithCatchScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.UnsafeScope" />
      <Member Id="F:Mono.CSharp.ResolveContext.Options.UsingInitializerScope" />
    </Type>
    <Type Name="Mono.CSharp.StateMachine/State" Id="T:Mono.CSharp.StateMachine.State">
      <Member Id="F:Mono.CSharp.StateMachine.State.After" />
      <Member Id="F:Mono.CSharp.StateMachine.State.Running" />
      <Member Id="F:Mono.CSharp.StateMachine.State.Start" />
      <Member Id="F:Mono.CSharp.StateMachine.State.Uninitialized" />
    </Type>
    <Type Name="Mono.CSharp.TemporaryVariableReference/Declarator" Id="T:Mono.CSharp.TemporaryVariableReference.Declarator">
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Declarator.#ctor(Mono.CSharp.TemporaryVariableReference)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Declarator.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Declarator.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Declarator.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Declarator.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.Tokenizer/LocatedTokenBuffer" Id="T:Mono.CSharp.Tokenizer.LocatedTokenBuffer">
      <Member Id="F:Mono.CSharp.Tokenizer.LocatedTokenBuffer.pos" />
      <Member Id="M:Mono.CSharp.Tokenizer.LocatedTokenBuffer.#ctor" />
      <Member Id="M:Mono.CSharp.Tokenizer.LocatedTokenBuffer.#ctor(Mono.CSharp.LocatedToken[])" />
      <Member Id="M:Mono.CSharp.Tokenizer.LocatedTokenBuffer.Create(Mono.CSharp.SourceFile,System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.Tokenizer.LocatedTokenBuffer.Create(System.String,Mono.CSharp.SourceFile,System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.Tokenizer.LocatedTokenBuffer.CreateOptional(Mono.CSharp.SourceFile,System.Int32,System.Int32,System.Object@)" />
    </Type>
    <Type Name="Mono.CSharp.Tokenizer/PreprocessorDirective" Id="T:Mono.CSharp.Tokenizer.PreprocessorDirective">
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.CustomArgumentsParsing" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Define" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Elif" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Else" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Endif" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Endregion" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Error" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.If" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Invalid" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Line" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Pragma" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Region" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.RequiresArgument" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Undef" />
      <Member Id="F:Mono.CSharp.Tokenizer.PreprocessorDirective.Warning" />
    </Type>
    <Type Name="Mono.CSharp.TypeDefinition/BaseContext" Id="T:Mono.CSharp.TypeDefinition.BaseContext">
      <Member Id="M:Mono.CSharp.TypeDefinition.BaseContext.#ctor(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.BaseContext.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeDefinition.BaseContext.LookupExtensionMethod(System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.BaseContext.LookupNamespaceAlias(System.String)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.BaseContext.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.Compiler" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.CurrentMemberDefinition" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.CurrentType" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.IsObsolete" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.IsStatic" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.IsUnsafe" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseContext.Module" />
    </Type>
    <Type Name="Mono.CSharp.TypeInferenceContext/BoundKind" Id="T:Mono.CSharp.TypeInferenceContext.BoundKind">
      <Member Id="F:Mono.CSharp.TypeInferenceContext.BoundKind.Exact" />
      <Member Id="F:Mono.CSharp.TypeInferenceContext.BoundKind.Lower" />
      <Member Id="F:Mono.CSharp.TypeInferenceContext.BoundKind.Upper" />
    </Type>
    <Type Name="Mono.CSharp.Unary/Operator" Id="T:Mono.CSharp.Unary.Operator">
      <Member Id="F:Mono.CSharp.Unary.Operator.AddressOf" />
      <Member Id="F:Mono.CSharp.Unary.Operator.LogicalNot" />
      <Member Id="F:Mono.CSharp.Unary.Operator.OnesComplement" />
      <Member Id="F:Mono.CSharp.Unary.Operator.TOP" />
      <Member Id="F:Mono.CSharp.Unary.Operator.UnaryNegation" />
      <Member Id="F:Mono.CSharp.Unary.Operator.UnaryPlus" />
    </Type>
    <Type Name="Mono.CSharp.UnaryMutator/Mode" Id="T:Mono.CSharp.UnaryMutator.Mode">
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.IsDecrement" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.IsIncrement" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.IsPost" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.IsPre" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.PostDecrement" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.PostIncrement" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.PreDecrement" />
      <Member Id="F:Mono.CSharp.UnaryMutator.Mode.PreIncrement" />
    </Type>
    <Type Name="Mono.CSharp.Using/VariableDeclaration" Id="T:Mono.CSharp.Using.VariableDeclaration">
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.#ctor(Mono.CSharp.LocalVariable,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.CheckIDiposableConversion(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.CreateDisposeCall(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.EmitDispose(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.ResolveDeclaratorInitializer(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.ResolveExpression(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.ResolveInitializer(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Using.VariableDeclaration.RewriteUsingDeclarators(Mono.CSharp.BlockContext,Mono.CSharp.Statement)" />
      <Member Id="P:Mono.CSharp.Using.VariableDeclaration.IsNested" />
    </Type>
    <Type Name="Mono.CSharp.UsingAliasNamespace/AliasContext" Id="T:Mono.CSharp.UsingAliasNamespace.AliasContext">
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.AliasContext.#ctor(Mono.CSharp.NamespaceContainer)" />
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.AliasContext.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.AliasContext.LookupExtensionMethod(System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.AliasContext.LookupNamespaceAlias(System.String)" />
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.AliasContext.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.CurrentMemberDefinition" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.CurrentType" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.IsObsolete" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.IsStatic" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.IsUnsafe" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.AliasContext.Module" />
    </Type>
  </Namespace>
  <Namespace Name="Mono.CSharp">
    <Type Name="Mono.CSharp.AbstractMessage" Id="T:Mono.CSharp.AbstractMessage">
      <Member Id="F:Mono.CSharp.AbstractMessage.code" />
      <Member Id="F:Mono.CSharp.AbstractMessage.location" />
      <Member Id="M:Mono.CSharp.AbstractMessage.#ctor(Mono.CSharp.AbstractMessage)" />
      <Member Id="M:Mono.CSharp.AbstractMessage.#ctor(System.Int32,Mono.CSharp.Location,System.String,System.Collections.Generic.List{System.String})" />
      <Member Id="M:Mono.CSharp.AbstractMessage.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.AbstractMessage.GetHashCode" />
      <Member Id="P:Mono.CSharp.AbstractMessage.Code" />
      <Member Id="P:Mono.CSharp.AbstractMessage.IsWarning" />
      <Member Id="P:Mono.CSharp.AbstractMessage.Location" />
      <Member Id="P:Mono.CSharp.AbstractMessage.MessageType" />
      <Member Id="P:Mono.CSharp.AbstractMessage.RelatedSymbols" />
      <Member Id="P:Mono.CSharp.AbstractMessage.Text" />
    </Type>
    <Type Name="Mono.CSharp.AbstractPropertyEventMethod" Id="T:Mono.CSharp.AbstractPropertyEventMethod">
      <Member Id="F:Mono.CSharp.AbstractPropertyEventMethod.block" />
      <Member Id="F:Mono.CSharp.AbstractPropertyEventMethod.declarative_security" />
      <Member Id="F:Mono.CSharp.AbstractPropertyEventMethod.method_data" />
      <Member Id="F:Mono.CSharp.AbstractPropertyEventMethod.prefix" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.#ctor(Mono.CSharp.InterfaceMemberBase,System.String,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.ApplyToExtraTarget(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.CreateEmitContext(System.Reflection.Emit.ILGenerator,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.Define" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.Emit(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.EnableOverloadChecks(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.GetCallerMemberName" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.IsClsComplianceRequired" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.PrepareEmit" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.UpdateName(Mono.CSharp.InterfaceMemberBase)" />
      <Member Id="M:Mono.CSharp.AbstractPropertyEventMethod.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.Block" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.CallingConventions" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.IsAccessor" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.MethodName" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.Mono#CSharp#IMethodDefinition#Metadata" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.ParameterInfo" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.ParameterTypes" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.ReturnType" />
      <Member Id="P:Mono.CSharp.AbstractPropertyEventMethod.Spec" />
    </Type>
    <Type Name="Mono.CSharp.AddressOp" Id="T:Mono.CSharp.AddressOp">
      <Member Id="F:Mono.CSharp.AddressOp.Load" />
      <Member Id="F:Mono.CSharp.AddressOp.LoadStore" />
      <Member Id="F:Mono.CSharp.AddressOp.Store" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousExpression" Id="T:Mono.CSharp.AnonymousExpression">
      <Member Id="F:Mono.CSharp.AnonymousExpression.block" />
      <Member Id="F:Mono.CSharp.AnonymousExpression.ReturnType" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.Compatible(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.Compatible(Mono.CSharp.ResolveContext,Mono.CSharp.AnonymousExpression)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.AnonymousExpression.SetHasThisAccess" />
      <Member Id="P:Mono.CSharp.AnonymousExpression.Block" />
      <Member Id="P:Mono.CSharp.AnonymousExpression.ContainerType" />
      <Member Id="P:Mono.CSharp.AnonymousExpression.IsIterator" />
      <Member Id="P:Mono.CSharp.AnonymousExpression.Storey" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousMethodBody" Id="T:Mono.CSharp.AnonymousMethodBody">
      <Member Id="F:Mono.CSharp.AnonymousMethodBody.parameters" />
      <Member Id="M:Mono.CSharp.AnonymousMethodBody.#ctor(Mono.CSharp.ParametersCompiled,Mono.CSharp.ParametersBlock,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodBody.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodBody.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodBody.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodBody.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodBody.GetSignatureForError" />
      <Member Id="P:Mono.CSharp.AnonymousMethodBody.ContainerType" />
      <Member Id="P:Mono.CSharp.AnonymousMethodBody.DirectMethodGroupConversion" />
      <Member Id="P:Mono.CSharp.AnonymousMethodBody.IsIterator" />
      <Member Id="P:Mono.CSharp.AnonymousMethodBody.Parameters" />
      <Member Id="P:Mono.CSharp.AnonymousMethodBody.ReturnTypeInference" />
      <Member Id="P:Mono.CSharp.AnonymousMethodBody.Storey" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousMethodExpression" Id="T:Mono.CSharp.AnonymousMethodExpression">
      <Member Id="F:Mono.CSharp.AnonymousMethodExpression.Block" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.Compatible(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.CompatibleMethodFactory(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.ParametersCompiled,Mono.CSharp.ParametersBlock)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.CreateExpressionTree(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.DoResolveParameters(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.Error_AddressOfCapturedVar(Mono.CSharp.ResolveContext,Mono.CSharp.IVariableReference,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.ExplicitTypeInference(Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.ImplicitStandardConversionExists(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.InferReturnType(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.ResolveParameters(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.VerifyExplicitParameters(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec,Mono.CSharp.AParametersCollection)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodExpression.VerifyParameterCompatibility(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec,Mono.CSharp.AParametersCollection,System.Boolean)" />
      <Member Id="P:Mono.CSharp.AnonymousMethodExpression.ExprClassName" />
      <Member Id="P:Mono.CSharp.AnonymousMethodExpression.HasExplicitParameters" />
      <Member Id="P:Mono.CSharp.AnonymousMethodExpression.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.AnonymousMethodExpression.Parameters" />
      <Member Id="P:Mono.CSharp.AnonymousMethodExpression.TypeInferenceReportPrinter" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousMethodStorey" Id="T:Mono.CSharp.AnonymousMethodStorey">
      <Member Id="F:Mono.CSharp.AnonymousMethodStorey.hoisted_locals" />
      <Member Id="F:Mono.CSharp.AnonymousMethodStorey.hoisted_params" />
      <Member Id="F:Mono.CSharp.AnonymousMethodStorey.hoisted_this" />
      <Member Id="F:Mono.CSharp.AnonymousMethodStorey.ID" />
      <Member Id="F:Mono.CSharp.AnonymousMethodStorey.Instance" />
      <Member Id="F:Mono.CSharp.AnonymousMethodStorey.OriginalSourceBlock" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.#ctor(Mono.CSharp.ExplicitBlock,Mono.CSharp.TypeDefinition,Mono.CSharp.MemberBase,Mono.CSharp.TypeParameters,System.String,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.AddCapturedThisField(Mono.CSharp.EmitContext,Mono.CSharp.AnonymousMethodStorey)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.AddCapturedVariable(System.String,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.AddCompilerGeneratedField(System.String,Mono.CSharp.FullNamedExpression)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.AddCompilerGeneratedField(System.String,Mono.CSharp.FullNamedExpression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.AddParentStoreyReference(Mono.CSharp.EmitContext,Mono.CSharp.AnonymousMethodStorey)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.AddReferenceFromChildrenBlock(Mono.CSharp.ExplicitBlock)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.CaptureLocalVariable(Mono.CSharp.ResolveContext,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.CaptureParameter(Mono.CSharp.ResolveContext,Mono.CSharp.ParametersBlock.ParameterInfo,Mono.CSharp.ParameterReference)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.DoResolveTypeParameters" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.EmitHoistedParameters(Mono.CSharp.EmitContext,System.Collections.Generic.List{Mono.CSharp.HoistedParameter})" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.EmitStoreyInstantiation(Mono.CSharp.EmitContext,Mono.CSharp.ExplicitBlock)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.GetStoreyInstanceExpression(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.GetVariableMangledName(Mono.CSharp.ResolveContext,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.AnonymousMethodStorey.SetNestedStoryParent(Mono.CSharp.AnonymousMethodStorey)" />
      <Member Id="P:Mono.CSharp.AnonymousMethodStorey.HoistedThis" />
      <Member Id="P:Mono.CSharp.AnonymousMethodStorey.ReferencesFromChildrenBlock" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousTypeClass" Id="T:Mono.CSharp.AnonymousTypeClass">
      <Member Id="F:Mono.CSharp.AnonymousTypeClass.ClassNamePrefix" />
      <Member Id="F:Mono.CSharp.AnonymousTypeClass.SignatureForError" />
      <Member Id="M:Mono.CSharp.AnonymousTypeClass.Create(Mono.CSharp.TypeContainer,System.Collections.Generic.IList{Mono.CSharp.AnonymousTypeParameter},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AnonymousTypeClass.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.AnonymousTypeClass.GetCompilationSourceFile" />
      <Member Id="M:Mono.CSharp.AnonymousTypeClass.GetSignatureForError" />
      <Member Id="P:Mono.CSharp.AnonymousTypeClass.Parameters" />
    </Type>
    <Type Name="Mono.CSharp.AnonymousTypeParameter" Id="T:Mono.CSharp.AnonymousTypeParameter">
      <Member Id="F:Mono.CSharp.AnonymousTypeParameter.Name" />
      <Member Id="M:Mono.CSharp.AnonymousTypeParameter.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AnonymousTypeParameter.#ctor(Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.AnonymousTypeParameter.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.AnonymousTypeParameter.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.AnonymousTypeParameter.Error_InvalidInitializer(Mono.CSharp.ResolveContext,System.String)" />
      <Member Id="M:Mono.CSharp.AnonymousTypeParameter.GetHashCode" />
    </Type>
    <Type Name="Mono.CSharp.AParametersCollection" Id="T:Mono.CSharp.AParametersCollection">
      <Member Id="F:Mono.CSharp.AParametersCollection.has_arglist" />
      <Member Id="F:Mono.CSharp.AParametersCollection.has_params" />
      <Member Id="F:Mono.CSharp.AParametersCollection.parameters" />
      <Member Id="F:Mono.CSharp.AParametersCollection.types" />
      <Member Id="M:Mono.CSharp.AParametersCollection.#ctor" />
      <Member Id="M:Mono.CSharp.AParametersCollection.GetMetaInfo" />
      <Member Id="M:Mono.CSharp.AParametersCollection.GetParameterAttribute(Mono.CSharp.Parameter.Modifier)" />
      <Member Id="M:Mono.CSharp.AParametersCollection.GetParameterIndexByName(System.String)" />
      <Member Id="M:Mono.CSharp.AParametersCollection.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.AParametersCollection.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.AParametersCollection.GetSignatureForError(System.String,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.AParametersCollection.HasSameParameterDefaults(Mono.CSharp.AParametersCollection,Mono.CSharp.AParametersCollection)" />
      <Member Id="M:Mono.CSharp.AParametersCollection.Inflate(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.AParametersCollection.ParameterDesc(System.Int32)" />
      <Member Id="P:Mono.CSharp.AParametersCollection.CallingConvention" />
      <Member Id="P:Mono.CSharp.AParametersCollection.Count" />
      <Member Id="P:Mono.CSharp.AParametersCollection.ExtensionMethodType" />
      <Member Id="P:Mono.CSharp.AParametersCollection.FixedParameters" />
      <Member Id="P:Mono.CSharp.AParametersCollection.HasArglist" />
      <Member Id="P:Mono.CSharp.AParametersCollection.HasExtensionMethodType" />
      <Member Id="P:Mono.CSharp.AParametersCollection.HasParams" />
      <Member Id="P:Mono.CSharp.AParametersCollection.IsEmpty" />
      <Member Id="P:Mono.CSharp.AParametersCollection.Types" />
    </Type>
    <Type Name="Mono.CSharp.Arglist" Id="T:Mono.CSharp.Arglist">
      <Member Id="M:Mono.CSharp.Arglist.#ctor(Mono.CSharp.Arguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Arglist.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Arglist.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Arglist.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Arglist.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Arglist.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Arglist.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Arglist.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.Arglist.Arguments" />
      <Member Id="P:Mono.CSharp.Arglist.ArgumentTypes" />
    </Type>
    <Type Name="Mono.CSharp.ArglistAccess" Id="T:Mono.CSharp.ArglistAccess">
      <Member Id="M:Mono.CSharp.ArglistAccess.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArglistAccess.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ArglistAccess.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArglistAccess.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ArglistAccess.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArglistAccess.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArglistAccess.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.ArglistParameter" Id="T:Mono.CSharp.ArglistParameter">
      <Member Id="M:Mono.CSharp.ArglistParameter.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArglistParameter.ApplyAttributes(System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ConstructorBuilder,System.Int32,Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.ArglistParameter.CheckAccessibility(Mono.CSharp.InterfaceMemberBase)" />
      <Member Id="M:Mono.CSharp.ArglistParameter.Resolve(Mono.CSharp.IMemberContext,System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.Argument" Id="T:Mono.CSharp.Argument">
      <Member Id="F:Mono.CSharp.Argument.ArgType" />
      <Member Id="F:Mono.CSharp.Argument.Expr" />
      <Member Id="M:Mono.CSharp.Argument.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Argument.#ctor(Mono.CSharp.Expression,Mono.CSharp.Argument.AType)" />
      <Member Id="M:Mono.CSharp.Argument.Clone(Mono.CSharp.CloneContext)" />
      <Member Id="M:Mono.CSharp.Argument.Clone(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Argument.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Argument.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Argument.EmitToField(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Argument.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Argument.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Argument.Resolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Argument.ResolveMethodGroup(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Argument.IsByRef" />
      <Member Id="P:Mono.CSharp.Argument.IsDefaultArgument" />
      <Member Id="P:Mono.CSharp.Argument.IsExtensionType" />
      <Member Id="P:Mono.CSharp.Argument.Modifier" />
      <Member Id="P:Mono.CSharp.Argument.Type" />
    </Type>
    <Type Name="Mono.CSharp.Arguments" Id="T:Mono.CSharp.Arguments">
      <Member Id="M:Mono.CSharp.Arguments.#ctor(System.Int32)" />
      <Member Id="M:Mono.CSharp.Arguments.Add(Mono.CSharp.Argument)" />
      <Member Id="M:Mono.CSharp.Arguments.AddRange(Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Arguments.CheckArrayAsAttribute(Mono.CSharp.CompilerContext)" />
      <Member Id="M:Mono.CSharp.Arguments.Clone(Mono.CSharp.CloneContext)" />
      <Member Id="M:Mono.CSharp.Arguments.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Arguments.CreateDynamicBinderArguments(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Arguments.CreateForExpressionTree(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments,Mono.CSharp.Expression[])" />
      <Member Id="M:Mono.CSharp.Arguments.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Arguments.Emit(Mono.CSharp.EmitContext,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Arguments.FlowAnalysis(Mono.CSharp.FlowAnalysisContext,System.Collections.Generic.List{Mono.CSharp.MovableArgument})" />
      <Member Id="M:Mono.CSharp.Arguments.GetEnumerator" />
      <Member Id="M:Mono.CSharp.Arguments.Insert(System.Int32,Mono.CSharp.Argument)" />
      <Member Id="M:Mono.CSharp.Arguments.MakeExpression(Mono.CSharp.Arguments,Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Arguments.MarkOrderedArgument(Mono.CSharp.NamedArgument)" />
      <Member Id="M:Mono.CSharp.Arguments.RemoveAt(System.Int32)" />
      <Member Id="M:Mono.CSharp.Arguments.Resolve(Mono.CSharp.ResolveContext,System.Boolean@)" />
      <Member Id="P:Mono.CSharp.Arguments.Count" />
      <Member Id="P:Mono.CSharp.Arguments.HasDynamic" />
      <Member Id="P:Mono.CSharp.Arguments.HasNamed" />
      <Member Id="P:Mono.CSharp.Arguments.Item(System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.ArrayAccess" Id="T:Mono.CSharp.ArrayAccess">
      <Member Id="M:Mono.CSharp.ArrayAccess.#ctor(Mono.CSharp.ElementAccess,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ArrayAccess.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.Error_NegativeArrayIndex(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.ArrayAccess.MakeAssignExpression(Mono.CSharp.BuilderContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.ArrayAccess.SetConditionalAccessReceiver" />
      <Member Id="P:Mono.CSharp.ArrayAccess.ConditionalAccess" />
    </Type>
    <Type Name="Mono.CSharp.ArrayContainer" Id="T:Mono.CSharp.ArrayContainer">
      <Member Id="M:Mono.CSharp.ArrayContainer.GetAddressMethod" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetConstructor" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetGetMethod" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetMetaInfo" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetPostfixSignature" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetPostfixSignature(System.Int32)" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetSetMethod" />
      <Member Id="M:Mono.CSharp.ArrayContainer.GetSignatureForDocumentation(System.Boolean)" />
      <Member Id="M:Mono.CSharp.ArrayContainer.MakeType(Mono.CSharp.ModuleContainer,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ArrayContainer.MakeType(Mono.CSharp.ModuleContainer,Mono.CSharp.TypeSpec,System.Int32)" />
      <Member Id="M:Mono.CSharp.ArrayContainer.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.ArrayContainer.Interfaces" />
      <Member Id="P:Mono.CSharp.ArrayContainer.Rank" />
    </Type>
    <Type Name="Mono.CSharp.ArrayCreation" Id="T:Mono.CSharp.ArrayCreation">
      <Member Id="F:Mono.CSharp.ArrayCreation.arguments" />
      <Member Id="F:Mono.CSharp.ArrayCreation.array_data" />
      <Member Id="F:Mono.CSharp.ArrayCreation.array_element_type" />
      <Member Id="F:Mono.CSharp.ArrayCreation.dimensions" />
      <Member Id="F:Mono.CSharp.ArrayCreation.rank" />
      <Member Id="M:Mono.CSharp.ArrayCreation.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.ArrayInitializer)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.ArrayInitializer,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.ComposedTypeSpecifier,Mono.CSharp.ArrayInitializer,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.#ctor(Mono.CSharp.FullNamedExpression,System.Collections.Generic.List{Mono.CSharp.Expression},Mono.CSharp.ComposedTypeSpecifier,Mono.CSharp.ArrayInitializer,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ArrayCreation.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.EmitToFieldSource(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.Error_NegativeArrayIndex(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.ResolveArrayElement(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArrayCreation.ResolveInitializers(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.ArrayCreation.Initializers" />
      <Member Id="P:Mono.CSharp.ArrayCreation.NoEmptyInterpolation" />
      <Member Id="P:Mono.CSharp.ArrayCreation.Rank" />
      <Member Id="P:Mono.CSharp.ArrayCreation.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.ArrayIndexCast" Id="T:Mono.CSharp.ArrayIndexCast">
      <Member Id="M:Mono.CSharp.ArrayIndexCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ArrayIndexCast.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayIndexCast.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.ArrayInitializer" Id="T:Mono.CSharp.ArrayInitializer">
      <Member Id="M:Mono.CSharp.ArrayInitializer.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.#ctor(System.Collections.Generic.List{Mono.CSharp.Expression},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.#ctor(System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.Add(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ArrayInitializer.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.ArrayInitializer.Count" />
      <Member Id="P:Mono.CSharp.ArrayInitializer.Elements" />
      <Member Id="P:Mono.CSharp.ArrayInitializer.Item(System.Int32)" />
      <Member Id="P:Mono.CSharp.ArrayInitializer.VariableDeclaration" />
    </Type>
    <Type Name="Mono.CSharp.As" Id="T:Mono.CSharp.As">
      <Member Id="M:Mono.CSharp.As.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.As.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.As.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.As.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.As.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.As.OperatorName" />
    </Type>
    <Type Name="Mono.CSharp.AssemblyBuilderExtension" Id="T:Mono.CSharp.AssemblyBuilderExtension">
      <Member Id="F:Mono.CSharp.AssemblyBuilderExtension.ctx" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.#ctor(Mono.CSharp.CompilerContext)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.AddModule(System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.AddPermissionRequests(System.Security.PermissionSet[])" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.AddTypeForwarder(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.DefineWin32IconResource(System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.GetReferencedAssemblies" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.SetAlgorithmId(System.UInt32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.SetCulture(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.SetFlags(System.UInt32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AssemblyBuilderExtension.SetVersion(System.Version,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.AssemblyDefinition" Id="T:Mono.CSharp.AssemblyDefinition">
      <Member Id="F:Mono.CSharp.AssemblyDefinition.added_modules" />
      <Member Id="F:Mono.CSharp.AssemblyDefinition.Builder" />
      <Member Id="F:Mono.CSharp.AssemblyDefinition.builder_extra" />
      <Member Id="F:Mono.CSharp.AssemblyDefinition.file_name" />
      <Member Id="F:Mono.CSharp.AssemblyDefinition.module" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.#ctor(Mono.CSharp.ModuleContainer,System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.AddModule(Mono.CSharp.ImportedModuleDefinition)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.CreateAssemblyName" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.CreateModuleBuilder" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.EmbedResources" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.Emit" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.GetNotUnifiedReferences(System.Reflection.AssemblyName)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.GetPublicKeyToken" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.IsFriendAssemblyTo(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.Resolve" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.ResolveAssemblySecurityAttributes" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.Save" />
      <Member Id="M:Mono.CSharp.AssemblyDefinition.SaveModule(System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.CLSCompliantAttribute" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.Compiler" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.EntryPoint" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.FullName" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.HasCLSCompliantAttribute" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.Importer" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.IsCLSCompliant" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.IsSatelliteAssembly" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.Mono#CSharp#IAssemblyDefinition#IsMissing" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.Name" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.Report" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.SymbolWriter" />
      <Member Id="P:Mono.CSharp.AssemblyDefinition.WrapNonExceptionThrows" />
    </Type>
    <Type Name="Mono.CSharp.AssemblyDefinitionDynamic" Id="T:Mono.CSharp.AssemblyDefinitionDynamic">
      <Member Id="M:Mono.CSharp.AssemblyDefinitionDynamic.#ctor(Mono.CSharp.ModuleContainer,System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinitionDynamic.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinitionDynamic.Create(System.AppDomain,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinitionDynamic.CreateModuleBuilder" />
      <Member Id="M:Mono.CSharp.AssemblyDefinitionDynamic.IncludeModule(System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyDefinitionDynamic.SaveModule(System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)" />
    </Type>
    <Type Name="Mono.CSharp.AssemblyReferenceMessageInfo" Id="T:Mono.CSharp.AssemblyReferenceMessageInfo">
      <Member Id="M:Mono.CSharp.AssemblyReferenceMessageInfo.#ctor(System.Reflection.AssemblyName,System.Action{Mono.CSharp.Report})" />
      <Member Id="P:Mono.CSharp.AssemblyReferenceMessageInfo.DependencyName" />
      <Member Id="P:Mono.CSharp.AssemblyReferenceMessageInfo.ReportMessage" />
    </Type>
    <Type Name="Mono.CSharp.AssemblyResource" Id="T:Mono.CSharp.AssemblyResource">
      <Member Id="M:Mono.CSharp.AssemblyResource.#ctor(System.String,System.String)" />
      <Member Id="M:Mono.CSharp.AssemblyResource.#ctor(System.String,System.String,System.Boolean)" />
      <Member Id="M:Mono.CSharp.AssemblyResource.Equals(Mono.CSharp.AssemblyResource)" />
      <Member Id="P:Mono.CSharp.AssemblyResource.Attributes" />
      <Member Id="P:Mono.CSharp.AssemblyResource.FileName" />
      <Member Id="P:Mono.CSharp.AssemblyResource.IsEmbeded" />
      <Member Id="P:Mono.CSharp.AssemblyResource.Name" />
    </Type>
    <Type Name="Mono.CSharp.Assign" Id="T:Mono.CSharp.Assign">
      <Member Id="F:Mono.CSharp.Assign.source" />
      <Member Id="F:Mono.CSharp.Assign.target" />
      <Member Id="M:Mono.CSharp.Assign.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Assign.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Assign.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Assign.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Assign.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Assign.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Assign.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Assign.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Assign.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Assign.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Assign.ResolveConversions(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Assign.Source" />
      <Member Id="P:Mono.CSharp.Assign.StartLocation" />
      <Member Id="P:Mono.CSharp.Assign.Target" />
    </Type>
    <Type Name="Mono.CSharp.AsyncInitializer" Id="T:Mono.CSharp.AsyncInitializer">
      <Member Id="M:Mono.CSharp.AsyncInitializer.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.TypeDefinition,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AsyncInitializer.CreateBlockContext(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.AsyncInitializer.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AsyncInitializer.EmitCatchBlock(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AsyncInitializer.EmitMoveNextEpilogue(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AsyncInitializer.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AsyncInitializer.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="P:Mono.CSharp.AsyncInitializer.ContainerType" />
      <Member Id="P:Mono.CSharp.AsyncInitializer.DelegateType" />
      <Member Id="P:Mono.CSharp.AsyncInitializer.HoistedReturnState" />
      <Member Id="P:Mono.CSharp.AsyncInitializer.IsIterator" />
      <Member Id="P:Mono.CSharp.AsyncInitializer.ReturnTypeInference" />
    </Type>
    <Type Name="Mono.CSharp.Attributable" Id="T:Mono.CSharp.Attributable">
      <Member Id="F:Mono.CSharp.Attributable.attributes" />
      <Member Id="M:Mono.CSharp.Attributable.#ctor" />
      <Member Id="M:Mono.CSharp.Attributable.AddAttributes(Mono.CSharp.Attributes,Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.Attributable.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Attributable.IsClsComplianceRequired" />
      <Member Id="P:Mono.CSharp.Attributable.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Attributable.OptAttributes" />
      <Member Id="P:Mono.CSharp.Attributable.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.Attribute" Id="T:Mono.CSharp.Attribute">
      <Member Id="F:Mono.CSharp.Attribute.DefaultUsageAttribute" />
      <Member Id="F:Mono.CSharp.Attribute.EmptyObject" />
      <Member Id="F:Mono.CSharp.Attribute.ExplicitTarget" />
      <Member Id="F:Mono.CSharp.Attribute.Target" />
      <Member Id="F:Mono.CSharp.Attribute.Type" />
      <Member Id="M:Mono.CSharp.Attribute.#ctor(System.String,Mono.CSharp.ATypeNameExpression,Mono.CSharp.Arguments[],Mono.CSharp.Location,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Attribute.AttachTo(Mono.CSharp.Attributable,Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.Attribute.CheckTarget" />
      <Member Id="M:Mono.CSharp.Attribute.Clone" />
      <Member Id="M:Mono.CSharp.Attribute.CreateResolveContext" />
      <Member Id="M:Mono.CSharp.Attribute.Emit(System.Collections.Generic.Dictionary{Mono.CSharp.Attribute,System.Collections.Generic.List{Mono.CSharp.Attribute}})" />
      <Member Id="M:Mono.CSharp.Attribute.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.Attribute.Error_AttributeArgumentIsDynamic(Mono.CSharp.IMemberContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Attribute.Error_InvalidArgumentValue(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Attribute.Error_InvalidSecurityParent" />
      <Member Id="M:Mono.CSharp.Attribute.Error_MissingGuidAttribute" />
      <Member Id="M:Mono.CSharp.Attribute.Error_MisusedDynamicAttribute" />
      <Member Id="M:Mono.CSharp.Attribute.Error_MisusedExtensionAttribute" />
      <Member Id="M:Mono.CSharp.Attribute.ExtractSecurityPermissionSet(Mono.CSharp.MethodSpec,System.Collections.Generic.Dictionary{System.Security.Permissions.SecurityAction,System.Security.PermissionSet}@)" />
      <Member Id="M:Mono.CSharp.Attribute.GetArgumentType" />
      <Member Id="M:Mono.CSharp.Attribute.GetAttributeUsageAttribute" />
      <Member Id="M:Mono.CSharp.Attribute.GetBoolean" />
      <Member Id="M:Mono.CSharp.Attribute.GetCharSetValue" />
      <Member Id="M:Mono.CSharp.Attribute.GetClsCompliantAttributeValue" />
      <Member Id="M:Mono.CSharp.Attribute.GetCoClassAttributeValue" />
      <Member Id="M:Mono.CSharp.Attribute.GetConditionalAttributeValue" />
      <Member Id="M:Mono.CSharp.Attribute.GetHashCode" />
      <Member Id="M:Mono.CSharp.Attribute.GetIndexerAttributeValue" />
      <Member Id="M:Mono.CSharp.Attribute.GetMethodImplOptions" />
      <Member Id="M:Mono.CSharp.Attribute.GetNamedValue(System.String)" />
      <Member Id="M:Mono.CSharp.Attribute.GetObsoleteAttribute" />
      <Member Id="M:Mono.CSharp.Attribute.GetParameterDefaultValue" />
      <Member Id="M:Mono.CSharp.Attribute.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Attribute.GetString" />
      <Member Id="M:Mono.CSharp.Attribute.GetValidTargets" />
      <Member Id="M:Mono.CSharp.Attribute.HasField(System.String)" />
      <Member Id="M:Mono.CSharp.Attribute.IsExplicitLayoutKind" />
      <Member Id="M:Mono.CSharp.Attribute.IsInternalCall" />
      <Member Id="M:Mono.CSharp.Attribute.IsValidArgumentType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Attribute.IsValidSecurityAttribute" />
      <Member Id="M:Mono.CSharp.Attribute.Resolve" />
      <Member Id="M:Mono.CSharp.Attribute.ResolveTypeForComparison" />
      <Member Id="M:Mono.CSharp.Attribute.SetOwner(Mono.CSharp.Attributable)" />
      <Member Id="P:Mono.CSharp.Attribute.HasSecurityAttribute" />
      <Member Id="P:Mono.CSharp.Attribute.Location" />
      <Member Id="P:Mono.CSharp.Attribute.Name" />
      <Member Id="P:Mono.CSharp.Attribute.NamedArguments" />
      <Member Id="P:Mono.CSharp.Attribute.PositionalArguments" />
      <Member Id="P:Mono.CSharp.Attribute.Report" />
      <Member Id="P:Mono.CSharp.Attribute.ResolveError" />
      <Member Id="P:Mono.CSharp.Attribute.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.AttributeEncoder" Id="T:Mono.CSharp.AttributeEncoder">
      <Member Id="F:Mono.CSharp.AttributeEncoder.Empty" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.#ctor" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Boolean)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Byte)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Double)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Int16)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Int32)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Int64)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.SByte)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.Single)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.String)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.UInt16)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.UInt32)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.Encode(System.UInt64)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.EncodeEmptyNamedArguments" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.EncodeNamedArguments``1(``0[],Mono.CSharp.Constant[])" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.EncodeNamedFieldArgument(Mono.CSharp.FieldSpec,Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.EncodeNamedPropertyArgument(Mono.CSharp.PropertySpec,Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.EncodeTypeName(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.EncodeTypeName(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.AttributeEncoder.ToArray" />
    </Type>
    <Type Name="Mono.CSharp.Attributes" Id="T:Mono.CSharp.Attributes">
      <Member Id="F:Mono.CSharp.Attributes.Attrs" />
      <Member Id="M:Mono.CSharp.Attributes.#ctor(Mono.CSharp.Attribute)" />
      <Member Id="M:Mono.CSharp.Attributes.#ctor(System.Collections.Generic.List{Mono.CSharp.Attribute})" />
      <Member Id="M:Mono.CSharp.Attributes.AddAttribute(Mono.CSharp.Attribute)" />
      <Member Id="M:Mono.CSharp.Attributes.AddAttributes(System.Collections.Generic.List{Mono.CSharp.Attribute})" />
      <Member Id="M:Mono.CSharp.Attributes.AttachFromPartial(Mono.CSharp.Attributable,Mono.CSharp.Attributable)" />
      <Member Id="M:Mono.CSharp.Attributes.AttachTo(Mono.CSharp.Attributable,Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.Attributes.CheckTargets" />
      <Member Id="M:Mono.CSharp.Attributes.Clone" />
      <Member Id="M:Mono.CSharp.Attributes.Contains(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.Attributes.ConvertGlobalAttributes(Mono.CSharp.TypeContainer,Mono.CSharp.NamespaceContainer,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Attributes.Emit" />
      <Member Id="M:Mono.CSharp.Attributes.HasResolveError" />
      <Member Id="M:Mono.CSharp.Attributes.Search(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.Attributes.Search(System.String,Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.Attributes.SearchMulti(Mono.CSharp.PredefinedAttribute)" />
    </Type>
    <Type Name="Mono.CSharp.ATypeNameExpression" Id="T:Mono.CSharp.ATypeNameExpression">
      <Member Id="F:Mono.CSharp.ATypeNameExpression.targs" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.#ctor(System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.#ctor(System.String,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.GetHashCode" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.GetMemberType(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ATypeNameExpression.LookupNameExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Expression.MemberLookupRestrictions)" />
      <Member Id="P:Mono.CSharp.ATypeNameExpression.Arity" />
      <Member Id="P:Mono.CSharp.ATypeNameExpression.HasTypeArguments" />
      <Member Id="P:Mono.CSharp.ATypeNameExpression.Name" />
      <Member Id="P:Mono.CSharp.ATypeNameExpression.TypeArguments" />
    </Type>
    <Type Name="Mono.CSharp.Await" Id="T:Mono.CSharp.Await">
      <Member Id="M:Mono.CSharp.Await.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Await.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Await.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Await.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Await.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Await.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Await.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Await.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.FieldExpr)" />
      <Member Id="M:Mono.CSharp.Await.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Await.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Await.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Await.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="P:Mono.CSharp.Await.Expr" />
      <Member Id="P:Mono.CSharp.Await.Statement" />
    </Type>
    <Type Name="Mono.CSharp.AwaiterDefinition" Id="T:Mono.CSharp.AwaiterDefinition">
      <Member Id="M:Mono.CSharp.AwaiterDefinition.#ctor" />
      <Member Id="P:Mono.CSharp.AwaiterDefinition.GetResult" />
      <Member Id="P:Mono.CSharp.AwaiterDefinition.INotifyCompletion" />
      <Member Id="P:Mono.CSharp.AwaiterDefinition.IsCompleted" />
      <Member Id="P:Mono.CSharp.AwaiterDefinition.IsValidPattern" />
    </Type>
    <Type Name="Mono.CSharp.AwaitStatement" Id="T:Mono.CSharp.AwaitStatement">
      <Member Id="M:Mono.CSharp.AwaitStatement.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.EmitPrologue(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.GetResultExpression(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.AwaitStatement.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.AwaitStatement.ResultType" />
    </Type>
    <Type Name="Mono.CSharp.BaseThis" Id="T:Mono.CSharp.BaseThis">
      <Member Id="M:Mono.CSharp.BaseThis.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.BaseThis.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.BaseThis.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.BaseThis.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.BaseThis.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.BaseThis.Error_ThisNotAvailable(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.BaseThis.ResolveBase(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.BaseThis.Name" />
    </Type>
    <Type Name="Mono.CSharp.Binary" Id="T:Mono.CSharp.Binary">
      <Member Id="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Binary.State)" />
      <Member Id="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Binary.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Binary.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Binary.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Binary.CreateCallSiteBinder(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Binary.CreateEqualityLiftedOperatorsTable(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.Binary.CreateEqualityOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <Member Id="M:Mono.CSharp.Binary.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Binary.CreateExpressionTree(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.CreateLiftedValueTypeResult(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Binary.CreatePointerOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <Member Id="M:Mono.CSharp.Binary.CreateStandardLiftedOperatorsTable(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.Binary.CreateStandardOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <Member Id="M:Mono.CSharp.Binary.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Binary.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Binary.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Binary.EmitOperator(Mono.CSharp.EmitContext,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.EmitOperatorOpcode(Mono.CSharp.EmitContext,Mono.CSharp.Binary.Operator,Mono.CSharp.TypeSpec,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Binary.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Binary.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Binary.Operator,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Binary.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Binary.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Binary.FlowAnalysisConditional(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Binary.GetEnumResultCast(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Binary.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Binary.MakeExpression(Mono.CSharp.BuilderContext,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Binary.ResolveOperator(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Binary.IsCompound" />
      <Member Id="P:Mono.CSharp.Binary.Left" />
      <Member Id="P:Mono.CSharp.Binary.Oper" />
      <Member Id="P:Mono.CSharp.Binary.Right" />
      <Member Id="P:Mono.CSharp.Binary.StartLocation" />
    </Type>
    <Type Name="Mono.CSharp.BindingRestriction" Id="T:Mono.CSharp.BindingRestriction">
      <Member Id="F:Mono.CSharp.BindingRestriction.DeclaredOnly" />
      <Member Id="F:Mono.CSharp.BindingRestriction.InstanceOnly" />
      <Member Id="F:Mono.CSharp.BindingRestriction.NoAccessors" />
      <Member Id="F:Mono.CSharp.BindingRestriction.None" />
      <Member Id="F:Mono.CSharp.BindingRestriction.OverrideOnly" />
    </Type>
    <Type Name="Mono.CSharp.Block" Id="T:Mono.CSharp.Block">
      <Member Id="F:Mono.CSharp.Block.EndLocation" />
      <Member Id="F:Mono.CSharp.Block.Explicit" />
      <Member Id="F:Mono.CSharp.Block.flags" />
      <Member Id="F:Mono.CSharp.Block.ParametersBlock" />
      <Member Id="F:Mono.CSharp.Block.Parent" />
      <Member Id="F:Mono.CSharp.Block.scope_initializers" />
      <Member Id="F:Mono.CSharp.Block.StartLocation" />
      <Member Id="F:Mono.CSharp.Block.statements" />
      <Member Id="M:Mono.CSharp.Block.#ctor(Mono.CSharp.Block,Mono.CSharp.Block.Flags,Mono.CSharp.Location,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Block.#ctor(Mono.CSharp.Block,Mono.CSharp.Location,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Block.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Block.AddLabel(Mono.CSharp.LabeledStatement)" />
      <Member Id="M:Mono.CSharp.Block.AddLocalName(Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.Block.AddLocalName(System.String,Mono.CSharp.INamedBlockVariable)" />
      <Member Id="M:Mono.CSharp.Block.AddScopeStatement(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Block.AddStatement(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Block.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Block.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Block.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Block.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Block.EmitScopeInitializers(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Block.Error_AlreadyDeclared(System.String,Mono.CSharp.INamedBlockVariable)" />
      <Member Id="M:Mono.CSharp.Block.Error_AlreadyDeclared(System.String,Mono.CSharp.INamedBlockVariable,System.String)" />
      <Member Id="M:Mono.CSharp.Block.Error_AlreadyDeclaredTypeParameter(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Block.InsertStatement(System.Int32,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Block.LookupLabel(System.String)" />
      <Member Id="M:Mono.CSharp.Block.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Block.MarkReachableScope(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Block.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Block.ScanGotoJump(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Block.ScanGotoJump(Mono.CSharp.Statement,Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Block.SetEndLocation(Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.Block.IsCatchBlock" />
      <Member Id="P:Mono.CSharp.Block.IsCompilerGenerated" />
      <Member Id="P:Mono.CSharp.Block.IsFinallyBlock" />
      <Member Id="P:Mono.CSharp.Block.Original" />
      <Member Id="P:Mono.CSharp.Block.Statements" />
      <Member Id="P:Mono.CSharp.Block.Unchecked" />
      <Member Id="P:Mono.CSharp.Block.Unsafe" />
    </Type>
    <Type Name="Mono.CSharp.BlockConstant" Id="T:Mono.CSharp.BlockConstant">
      <Member Id="M:Mono.CSharp.BlockConstant.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.BlockConstant.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.BlockConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.BlockConstant.ResolveInitializer(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable,Mono.CSharp.Expression)" />
    </Type>
    <Type Name="Mono.CSharp.BlockContext" Id="T:Mono.CSharp.BlockContext">
      <Member Id="F:Mono.CSharp.BlockContext.AssignmentInfoOffset" />
      <Member Id="M:Mono.CSharp.BlockContext.#ctor(Mono.CSharp.IMemberContext,Mono.CSharp.ExplicitBlock,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BlockContext.#ctor(Mono.CSharp.ResolveContext,Mono.CSharp.ExplicitBlock,Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.BlockContext.CurrentTryBlock" />
      <Member Id="P:Mono.CSharp.BlockContext.CurrentTryCatch" />
      <Member Id="P:Mono.CSharp.BlockContext.EnclosingLoop" />
      <Member Id="P:Mono.CSharp.BlockContext.EnclosingLoopOrSwitch" />
      <Member Id="P:Mono.CSharp.BlockContext.ReturnType" />
      <Member Id="P:Mono.CSharp.BlockContext.Switch" />
    </Type>
    <Type Name="Mono.CSharp.BlockVariable" Id="T:Mono.CSharp.BlockVariable">
      <Member Id="F:Mono.CSharp.BlockVariable.declarators" />
      <Member Id="F:Mono.CSharp.BlockVariable.li" />
      <Member Id="F:Mono.CSharp.BlockVariable.type_expr" />
      <Member Id="M:Mono.CSharp.BlockVariable.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.BlockVariable.#ctor(Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.BlockVariable.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.BlockVariable.AddDeclarator(Mono.CSharp.BlockVariableDeclarator)" />
      <Member Id="M:Mono.CSharp.BlockVariable.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.BlockVariable.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.BlockVariable.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.BlockVariable.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.BlockVariable.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.BlockVariable.Resolve(Mono.CSharp.BlockContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.BlockVariable.ResolveInitializer(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable,Mono.CSharp.Expression)" />
      <Member Id="P:Mono.CSharp.BlockVariable.Declarators" />
      <Member Id="P:Mono.CSharp.BlockVariable.Initializer" />
      <Member Id="P:Mono.CSharp.BlockVariable.TypeExpression" />
      <Member Id="P:Mono.CSharp.BlockVariable.Variable" />
    </Type>
    <Type Name="Mono.CSharp.BlockVariableDeclarator" Id="T:Mono.CSharp.BlockVariableDeclarator">
      <Member Id="M:Mono.CSharp.BlockVariableDeclarator.#ctor(Mono.CSharp.LocalVariable,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.BlockVariableDeclarator.Clone(Mono.CSharp.CloneContext)" />
      <Member Id="P:Mono.CSharp.BlockVariableDeclarator.Initializer" />
      <Member Id="P:Mono.CSharp.BlockVariableDeclarator.Variable" />
    </Type>
    <Type Name="Mono.CSharp.BoolConstant" Id="T:Mono.CSharp.BoolConstant">
      <Member Id="F:Mono.CSharp.BoolConstant.Value" />
      <Member Id="M:Mono.CSharp.BoolConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Boolean,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.BoolConstant.#ctor(Mono.CSharp.TypeSpec,System.Boolean,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.BoolConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BoolConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.BoolConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BoolConstant.GetValue" />
      <Member Id="M:Mono.CSharp.BoolConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.BoolConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.BoolConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.BoolConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.BoolConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.BooleanExpression" Id="T:Mono.CSharp.BooleanExpression">
      <Member Id="M:Mono.CSharp.BooleanExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.BooleanExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.BooleanExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.BooleanExpression.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.BooleanExpressionFalse" Id="T:Mono.CSharp.BooleanExpressionFalse">
      <Member Id="M:Mono.CSharp.BooleanExpressionFalse.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.BooleanExpressionFalse.ResolveOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
    </Type>
    <Type Name="Mono.CSharp.BoolLiteral" Id="T:Mono.CSharp.BoolLiteral">
      <Member Id="M:Mono.CSharp.BoolLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Boolean,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.BoolLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.BoolLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.BoxedCast" Id="T:Mono.CSharp.BoxedCast">
      <Member Id="M:Mono.CSharp.BoxedCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BoxedCast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.BoxedCast.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.BoxedCast.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.BoxedCast.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
    </Type>
    <Type Name="Mono.CSharp.Break" Id="T:Mono.CSharp.Break">
      <Member Id="M:Mono.CSharp.Break.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Break.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Break.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Break.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Break.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Break.MarkReachable(Mono.CSharp.Reachability)" />
    </Type>
    <Type Name="Mono.CSharp.BuilderContext" Id="T:Mono.CSharp.BuilderContext">
      <Member Id="F:Mono.CSharp.BuilderContext.flags" />
      <Member Id="M:Mono.CSharp.BuilderContext.#ctor" />
      <Member Id="M:Mono.CSharp.BuilderContext.HasSet(Mono.CSharp.BuilderContext.Options)" />
      <Member Id="M:Mono.CSharp.BuilderContext.With(Mono.CSharp.BuilderContext.Options,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.BuiltinTypes" Id="T:Mono.CSharp.BuiltinTypes">
      <Member Id="F:Mono.CSharp.BuiltinTypes.Array" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Attribute" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.BinaryPromotionsTypes" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Bool" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Byte" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Char" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Decimal" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Delegate" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Double" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Dynamic" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Enum" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Exception" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Float" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.IDisposable" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.IEnumerable" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.IEnumerator" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Int" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.IntPtr" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Long" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.MulticastDelegate" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Object" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.OperatorsBinaryEquality" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.OperatorsBinaryStandard" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.OperatorsBinaryUnsafe" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.OperatorsUnary" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.OperatorsUnaryMutator" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.RuntimeFieldHandle" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.RuntimeTypeHandle" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.SByte" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Short" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.String" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Type" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.UInt" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.UIntPtr" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.ULong" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.UShort" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.ValueType" />
      <Member Id="F:Mono.CSharp.BuiltinTypes.Void" />
      <Member Id="M:Mono.CSharp.BuiltinTypes.#ctor" />
      <Member Id="M:Mono.CSharp.BuiltinTypes.CheckDefinitions(Mono.CSharp.ModuleContainer)" />
      <Member Id="P:Mono.CSharp.BuiltinTypes.AllTypes" />
    </Type>
    <Type Name="Mono.CSharp.BuiltinTypeSpec" Id="T:Mono.CSharp.BuiltinTypeSpec">
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.#ctor(Mono.CSharp.MemberKind,System.String,System.String,Mono.CSharp.BuiltinTypeSpec.Type)" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.#ctor(System.String,Mono.CSharp.BuiltinTypeSpec.Type)" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.GetSize(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.IsPrimitiveType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.IsPrimitiveTypeOrDecimal(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.SetDefinition(Mono.CSharp.ITypeDefinition,System.Type,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.BuiltinTypeSpec.SetDefinition(Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.BuiltinTypeSpec.Arity" />
      <Member Id="P:Mono.CSharp.BuiltinTypeSpec.BuiltinType" />
      <Member Id="P:Mono.CSharp.BuiltinTypeSpec.FullName" />
      <Member Id="P:Mono.CSharp.BuiltinTypeSpec.Name" />
      <Member Id="P:Mono.CSharp.BuiltinTypeSpec.Namespace" />
    </Type>
    <Type Name="Mono.CSharp.ByteConstant" Id="T:Mono.CSharp.ByteConstant">
      <Member Id="F:Mono.CSharp.ByteConstant.Value" />
      <Member Id="M:Mono.CSharp.ByteConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Byte,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ByteConstant.#ctor(Mono.CSharp.TypeSpec,System.Byte,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ByteConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ByteConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ByteConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ByteConstant.GetValue" />
      <Member Id="M:Mono.CSharp.ByteConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.ByteConstant.Increment" />
      <Member Id="P:Mono.CSharp.ByteConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.ByteConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.ByteConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.ByteConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.Cast" Id="T:Mono.CSharp.Cast">
      <Member Id="M:Mono.CSharp.Cast.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Cast.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Cast.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Cast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Cast.TargetType" />
    </Type>
    <Type Name="Mono.CSharp.Catch" Id="T:Mono.CSharp.Catch">
      <Member Id="M:Mono.CSharp.Catch.#ctor(Mono.CSharp.ExplicitBlock,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Catch.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Catch.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Catch.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Catch.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Catch.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Catch.Block" />
      <Member Id="P:Mono.CSharp.Catch.CatchType" />
      <Member Id="P:Mono.CSharp.Catch.Filter" />
      <Member Id="P:Mono.CSharp.Catch.IsGeneral" />
      <Member Id="P:Mono.CSharp.Catch.TypeExpression" />
      <Member Id="P:Mono.CSharp.Catch.Variable" />
    </Type>
    <Type Name="Mono.CSharp.CatchFilterExpression" Id="T:Mono.CSharp.CatchFilterExpression">
      <Member Id="M:Mono.CSharp.CatchFilterExpression.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.CharConstant" Id="T:Mono.CSharp.CharConstant">
      <Member Id="F:Mono.CSharp.CharConstant.Value" />
      <Member Id="M:Mono.CSharp.CharConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Char,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CharConstant.#ctor(Mono.CSharp.TypeSpec,System.Char,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CharConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.CharConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.CharConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.CharConstant.GetValue" />
      <Member Id="M:Mono.CSharp.CharConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.CharConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.CharConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.CharConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.CharConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.CharLiteral" Id="T:Mono.CSharp.CharLiteral">
      <Member Id="M:Mono.CSharp.CharLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Char,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CharLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.CharLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.Checked" Id="T:Mono.CSharp.Checked">
      <Member Id="F:Mono.CSharp.Checked.Block" />
      <Member Id="M:Mono.CSharp.Checked.#ctor(Mono.CSharp.Block,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Checked.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Checked.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Checked.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Checked.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Checked.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Checked.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.CheckedExpr" Id="T:Mono.CSharp.CheckedExpr">
      <Member Id="F:Mono.CSharp.CheckedExpr.Expr" />
      <Member Id="M:Mono.CSharp.CheckedExpr.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.CheckedExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.CheckedExpr.MakeExpression(Mono.CSharp.BuilderContext)" />
    </Type>
    <Type Name="Mono.CSharp.Class" Id="T:Mono.CSharp.Class">
      <Member Id="M:Mono.CSharp.Class.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Modifiers,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Class.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Class.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Class.ConditionalConditions" />
      <Member Id="M:Mono.CSharp.Class.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.Class.Emit" />
      <Member Id="M:Mono.CSharp.Class.GetCompletionStartingWith(System.String,System.Collections.Generic.List{System.String})" />
      <Member Id="M:Mono.CSharp.Class.ResolveBaseTypes(Mono.CSharp.FullNamedExpression@)" />
      <Member Id="M:Mono.CSharp.Class.SetBaseTypes(System.Collections.Generic.List{Mono.CSharp.FullNamedExpression})" />
      <Member Id="P:Mono.CSharp.Class.AttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.ClassCast" Id="T:Mono.CSharp.ClassCast">
      <Member Id="M:Mono.CSharp.ClassCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ClassCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ClassCast.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.ClassOrStruct" Id="T:Mono.CSharp.ClassOrStruct">
      <Member Id="F:Mono.CSharp.ClassOrStruct.generated_primary_constructor" />
      <Member Id="F:Mono.CSharp.ClassOrStruct.StaticClassAttribute" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Attributes,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.AddNameToContainer(Mono.CSharp.MemberCore,System.String)" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.DefineDefaultConstructor(System.Boolean)" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.Emit" />
      <Member Id="M:Mono.CSharp.ClassOrStruct.PrepareEmit" />
      <Member Id="P:Mono.CSharp.ClassOrStruct.PrimaryConstructorBlock" />
      <Member Id="P:Mono.CSharp.ClassOrStruct.TypeAttr" />
    </Type>
    <Type Name="Mono.CSharp.CloneContext" Id="T:Mono.CSharp.CloneContext">
      <Member Id="M:Mono.CSharp.CloneContext.#ctor" />
      <Member Id="M:Mono.CSharp.CloneContext.AddBlockMap(Mono.CSharp.Block,Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.CloneContext.LookupBlock(Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.CloneContext.RemapBlockCopy(Mono.CSharp.Block)" />
    </Type>
    <Type Name="Mono.CSharp.CollectionOrObjectInitializers" Id="T:Mono.CSharp.CollectionOrObjectInitializers">
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.#ctor(System.Collections.Generic.IList{Mono.CSharp.Expression},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.CreateExpressionTree(Mono.CSharp.ResolveContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.CollectionOrObjectInitializers.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.CollectionOrObjectInitializers.Initializers" />
      <Member Id="P:Mono.CSharp.CollectionOrObjectInitializers.IsCollectionInitializer" />
      <Member Id="P:Mono.CSharp.CollectionOrObjectInitializers.IsEmpty" />
    </Type>
    <Type Name="Mono.CSharp.CommandLineParser" Id="T:Mono.CSharp.CommandLineParser">
      <Member Id="E:Mono.CSharp.CommandLineParser.UnknownOptionHandler" />
      <Member Id="M:Mono.CSharp.CommandLineParser.#ctor(System.IO.TextWriter)" />
      <Member Id="M:Mono.CSharp.CommandLineParser.#ctor(System.IO.TextWriter,System.IO.TextWriter)" />
      <Member Id="M:Mono.CSharp.CommandLineParser.ParseArguments(Mono.CSharp.CompilerSettings,System.String[])" />
      <Member Id="M:Mono.CSharp.CommandLineParser.ParseArguments(System.String[])" />
      <Member Id="M:Mono.CSharp.CommandLineParser.ProcessWarningsList(System.String,System.Action{System.Int32})" />
      <Member Id="P:Mono.CSharp.CommandLineParser.HasBeenStopped" />
    </Type>
    <Type Name="Mono.CSharp.Comparer" Id="T:Mono.CSharp.Comparer">
      <Member Id="M:Mono.CSharp.Comparer.Compare(System.Object,System.Object)" />
      <Member Id="M:Mono.CSharp.Comparer.Sort(System.Reflection.EventInfo[])" />
      <Member Id="M:Mono.CSharp.Comparer.Sort(System.Reflection.MemberInfo[])" />
      <Member Id="M:Mono.CSharp.Comparer.Sort(System.Reflection.MethodBase[])" />
      <Member Id="M:Mono.CSharp.Comparer.Sort(System.Reflection.PropertyInfo[])" />
    </Type>
    <Type Name="Mono.CSharp.CompilationSourceFile" Id="T:Mono.CSharp.CompilationSourceFile">
      <Member Id="M:Mono.CSharp.CompilationSourceFile.#ctor(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.SourceFile)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.AddDefine(System.String)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.AddIncludeFile(Mono.CSharp.SourceFile)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.AddUndefine(System.String)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.IsConditionalDefined(System.String)" />
      <Member Id="M:Mono.CSharp.CompilationSourceFile.PrepareEmit" />
      <Member Id="P:Mono.CSharp.CompilationSourceFile.FileName" />
      <Member Id="P:Mono.CSharp.CompilationSourceFile.SourceFile" />
      <Member Id="P:Mono.CSharp.CompilationSourceFile.SymbolUnitEntry" />
    </Type>
    <Type Name="Mono.CSharp.CompiledMethod" Id="T:Mono.CSharp.CompiledMethod" />
    <Type Name="Mono.CSharp.CompilerCallableEntryPoint" Id="T:Mono.CSharp.CompilerCallableEntryPoint">
      <Member Id="M:Mono.CSharp.CompilerCallableEntryPoint.#ctor" />
      <Member Id="M:Mono.CSharp.CompilerCallableEntryPoint.InvokeCompiler(System.String[],System.IO.TextWriter)" />
      <Member Id="M:Mono.CSharp.CompilerCallableEntryPoint.PartialReset" />
      <Member Id="M:Mono.CSharp.CompilerCallableEntryPoint.Reset" />
      <Member Id="M:Mono.CSharp.CompilerCallableEntryPoint.Reset(System.Boolean)" />
      <Member Id="P:Mono.CSharp.CompilerCallableEntryPoint.AllWarningNumbers" />
    </Type>
    <Type Name="Mono.CSharp.CompilerContext" Id="T:Mono.CSharp.CompilerContext">
      <Member Id="M:Mono.CSharp.CompilerContext.#ctor(Mono.CSharp.CompilerSettings,Mono.CSharp.ReportPrinter)" />
      <Member Id="M:Mono.CSharp.CompilerContext.LookupFile(Mono.CSharp.CompilationSourceFile,System.String)" />
      <Member Id="P:Mono.CSharp.CompilerContext.BuiltinTypes" />
      <Member Id="P:Mono.CSharp.CompilerContext.IsRuntimeBinder" />
      <Member Id="P:Mono.CSharp.CompilerContext.Report" />
      <Member Id="P:Mono.CSharp.CompilerContext.Settings" />
      <Member Id="P:Mono.CSharp.CompilerContext.SourceFiles" />
    </Type>
    <Type Name="Mono.CSharp.CompilerGeneratedContainer" Id="T:Mono.CSharp.CompilerGeneratedContainer">
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Modifiers,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.CheckMembersDefined" />
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.MakeMemberName(Mono.CSharp.MemberBase,System.String,System.Int32,Mono.CSharp.TypeParameters,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.MakeName(System.String,System.String,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.CompilerGeneratedContainer.ResolveBaseTypes(Mono.CSharp.FullNamedExpression@)" />
    </Type>
    <Type Name="Mono.CSharp.CompilerSettings" Id="T:Mono.CSharp.CompilerSettings">
      <Member Id="F:Mono.CSharp.CompilerSettings.AssemblyReferences" />
      <Member Id="F:Mono.CSharp.CompilerSettings.AssemblyReferencesAliases" />
      <Member Id="F:Mono.CSharp.CompilerSettings.BreakOnInternalError" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Checked" />
      <Member Id="F:Mono.CSharp.CompilerSettings.DebugFlags" />
      <Member Id="F:Mono.CSharp.CompilerSettings.DocumentationFile" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Encoding" />
      <Member Id="F:Mono.CSharp.CompilerSettings.EnhancedWarnings" />
      <Member Id="F:Mono.CSharp.CompilerSettings.FatalCounter" />
      <Member Id="F:Mono.CSharp.CompilerSettings.GenerateDebugInfo" />
      <Member Id="F:Mono.CSharp.CompilerSettings.GetResourceStrings" />
      <Member Id="F:Mono.CSharp.CompilerSettings.LoadDefaultReferences" />
      <Member Id="F:Mono.CSharp.CompilerSettings.MainClass" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Modules" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Optimize" />
      <Member Id="F:Mono.CSharp.CompilerSettings.OutputFile" />
      <Member Id="F:Mono.CSharp.CompilerSettings.ParseOnly" />
      <Member Id="F:Mono.CSharp.CompilerSettings.PathMap" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Platform" />
      <Member Id="F:Mono.CSharp.CompilerSettings.ReferencesLookupPaths" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Resources" />
      <Member Id="F:Mono.CSharp.CompilerSettings.RuntimeMetadataVersion" />
      <Member Id="F:Mono.CSharp.CompilerSettings.SdkVersion" />
      <Member Id="F:Mono.CSharp.CompilerSettings.ShowFullPaths" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Stacktrace" />
      <Member Id="F:Mono.CSharp.CompilerSettings.StatementMode" />
      <Member Id="F:Mono.CSharp.CompilerSettings.StdLib" />
      <Member Id="F:Mono.CSharp.CompilerSettings.StdLibRuntimeVersion" />
      <Member Id="F:Mono.CSharp.CompilerSettings.StrongNameDelaySign" />
      <Member Id="F:Mono.CSharp.CompilerSettings.StrongNameKeyContainer" />
      <Member Id="F:Mono.CSharp.CompilerSettings.StrongNameKeyFile" />
      <Member Id="F:Mono.CSharp.CompilerSettings.TabSize" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Target" />
      <Member Id="F:Mono.CSharp.CompilerSettings.TargetExt" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Timestamps" />
      <Member Id="F:Mono.CSharp.CompilerSettings.TokenizeOnly" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Unsafe" />
      <Member Id="F:Mono.CSharp.CompilerSettings.VerboseParserFlag" />
      <Member Id="F:Mono.CSharp.CompilerSettings.VerifyClsCompliance" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Version" />
      <Member Id="F:Mono.CSharp.CompilerSettings.WarningLevel" />
      <Member Id="F:Mono.CSharp.CompilerSettings.WarningsAreErrors" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Win32IconFile" />
      <Member Id="F:Mono.CSharp.CompilerSettings.Win32ResourceFile" />
      <Member Id="F:Mono.CSharp.CompilerSettings.WriteMetadataOnly" />
      <Member Id="M:Mono.CSharp.CompilerSettings.#ctor" />
      <Member Id="M:Mono.CSharp.CompilerSettings.AddConditionalSymbol(System.String)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.AddWarningAsError(System.Int32)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.AddWarningOnly(System.Int32)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.IsConditionalSymbolDefined(System.String)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.IsWarningAsError(System.Int32)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.IsWarningDisabledGlobally(System.Int32)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.IsWarningEnabled(System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.CompilerSettings.SetIgnoreWarning(System.Int32)" />
      <Member Id="P:Mono.CSharp.CompilerSettings.FirstSourceFile" />
      <Member Id="P:Mono.CSharp.CompilerSettings.HasKeyFileOrContainer" />
      <Member Id="P:Mono.CSharp.CompilerSettings.NeedsEntryPoint" />
      <Member Id="P:Mono.CSharp.CompilerSettings.SourceFiles" />
    </Type>
    <Type Name="Mono.CSharp.CompletingExpression" Id="T:Mono.CSharp.CompletingExpression">
      <Member Id="M:Mono.CSharp.CompletingExpression.#ctor" />
      <Member Id="M:Mono.CSharp.CompletingExpression.AppendResults(System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <Member Id="M:Mono.CSharp.CompletingExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.CompletingExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CompletingExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.CompletingExpression.EmitStatement(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.CompletionElementInitializer" Id="T:Mono.CSharp.CompletionElementInitializer">
      <Member Id="M:Mono.CSharp.CompletionElementInitializer.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CompletionElementInitializer.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompletionElementInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.CompletionMemberAccess" Id="T:Mono.CSharp.CompletionMemberAccess">
      <Member Id="M:Mono.CSharp.CompletionMemberAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CompletionMemberAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CompletionMemberAccess.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompletionMemberAccess.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.CompletionResult" Id="T:Mono.CSharp.CompletionResult">
      <Member Id="M:Mono.CSharp.CompletionResult.#ctor(System.String,System.String[])" />
      <Member Id="P:Mono.CSharp.CompletionResult.BaseText" />
      <Member Id="P:Mono.CSharp.CompletionResult.Result" />
    </Type>
    <Type Name="Mono.CSharp.CompletionSimpleName" Id="T:Mono.CSharp.CompletionSimpleName">
      <Member Id="F:Mono.CSharp.CompletionSimpleName.Prefix" />
      <Member Id="M:Mono.CSharp.CompletionSimpleName.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.CompletionSimpleName.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompletionSimpleName.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.ComposedCast" Id="T:Mono.CSharp.ComposedCast">
      <Member Id="M:Mono.CSharp.ComposedCast.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.ComposedTypeSpecifier)" />
      <Member Id="M:Mono.CSharp.ComposedCast.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ComposedCast.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ComposedCast.ResolveAsType(Mono.CSharp.IMemberContext,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.ComposedTypeSpecifier" Id="T:Mono.CSharp.ComposedTypeSpecifier">
      <Member Id="F:Mono.CSharp.ComposedTypeSpecifier.Dimension" />
      <Member Id="F:Mono.CSharp.ComposedTypeSpecifier.Location" />
      <Member Id="F:Mono.CSharp.ComposedTypeSpecifier.SingleDimension" />
      <Member Id="M:Mono.CSharp.ComposedTypeSpecifier.#ctor(System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ComposedTypeSpecifier.CreateArrayDimension(System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ComposedTypeSpecifier.CreateNullable(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ComposedTypeSpecifier.CreatePointer(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ComposedTypeSpecifier.GetSignatureForError" />
      <Member Id="P:Mono.CSharp.ComposedTypeSpecifier.IsNullable" />
      <Member Id="P:Mono.CSharp.ComposedTypeSpecifier.IsPointer" />
      <Member Id="P:Mono.CSharp.ComposedTypeSpecifier.Next" />
    </Type>
    <Type Name="Mono.CSharp.CompositeExpression" Id="T:Mono.CSharp.CompositeExpression">
      <Member Id="F:Mono.CSharp.CompositeExpression.expr" />
      <Member Id="M:Mono.CSharp.CompositeExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompositeExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.CompositeExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CompositeExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CompositeExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.CompositeExpression.Child" />
      <Member Id="P:Mono.CSharp.CompositeExpression.IsNull" />
    </Type>
    <Type Name="Mono.CSharp.CompoundAssign" Id="T:Mono.CSharp.CompoundAssign">
      <Member Id="M:Mono.CSharp.CompoundAssign.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.CompoundAssign.ResolveConversions(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.CompoundAssign.Operator" />
    </Type>
    <Type Name="Mono.CSharp.Conditional" Id="T:Mono.CSharp.Conditional">
      <Member Id="M:Mono.CSharp.Conditional.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Conditional.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Conditional.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Conditional.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Conditional.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Conditional.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Conditional.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Conditional.FlowAnalysisConditional(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.Conditional.Expr" />
      <Member Id="P:Mono.CSharp.Conditional.FalseExpr" />
      <Member Id="P:Mono.CSharp.Conditional.TrueExpr" />
    </Type>
    <Type Name="Mono.CSharp.ConditionalAccessContext" Id="T:Mono.CSharp.ConditionalAccessContext">
      <Member Id="M:Mono.CSharp.ConditionalAccessContext.#ctor(Mono.CSharp.TypeSpec,System.Reflection.Emit.Label)" />
      <Member Id="P:Mono.CSharp.ConditionalAccessContext.EndLabel" />
      <Member Id="P:Mono.CSharp.ConditionalAccessContext.Statement" />
      <Member Id="P:Mono.CSharp.ConditionalAccessContext.Type" />
    </Type>
    <Type Name="Mono.CSharp.ConditionalLogicalOperator" Id="T:Mono.CSharp.ConditionalLogicalOperator">
      <Member Id="M:Mono.CSharp.ConditionalLogicalOperator.#ctor(Mono.CSharp.MethodSpec,Mono.CSharp.Arguments,System.Func{Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression},System.Boolean,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ConditionalLogicalOperator.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConditionalLogicalOperator.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.ConditionalMemberAccess" Id="T:Mono.CSharp.ConditionalMemberAccess">
      <Member Id="M:Mono.CSharp.ConditionalMemberAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ConditionalMemberAccess.HasConditionalAccess" />
    </Type>
    <Type Name="Mono.CSharp.ConsoleReportPrinter" Id="T:Mono.CSharp.ConsoleReportPrinter">
      <Member Id="M:Mono.CSharp.ConsoleReportPrinter.#ctor" />
      <Member Id="M:Mono.CSharp.ConsoleReportPrinter.#ctor(System.IO.TextWriter)" />
      <Member Id="M:Mono.CSharp.ConsoleReportPrinter.FormatText(System.String)" />
    </Type>
    <Type Name="Mono.CSharp.Const" Id="T:Mono.CSharp.Const">
      <Member Id="M:Mono.CSharp.Const.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Const.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Const.Define" />
      <Member Id="M:Mono.CSharp.Const.DefineValue" />
      <Member Id="M:Mono.CSharp.Const.Emit" />
      <Member Id="M:Mono.CSharp.Const.Error_InvalidConstantType(Mono.CSharp.TypeSpec,Mono.CSharp.Location,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Const.PrepareEmit" />
    </Type>
    <Type Name="Mono.CSharp.Constant" Id="T:Mono.CSharp.Constant">
      <Member Id="M:Mono.CSharp.Constant.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constant.Clone(Mono.CSharp.CloneContext)" />
      <Member Id="M:Mono.CSharp.Constant.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Constant.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Constant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Constant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Constant.CreateConstantFromValue(Mono.CSharp.TypeSpec,System.Object,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constant.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Constant.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Constant.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Constant.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Constant.ExtractConstantFromValue(Mono.CSharp.TypeSpec,System.Object,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constant.GetTypedValue" />
      <Member Id="M:Mono.CSharp.Constant.GetValue" />
      <Member Id="M:Mono.CSharp.Constant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.Constant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.Constant.ImplicitConversionRequired(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Constant.IsDefaultInitializer(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Constant.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Constant.Reduce(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Constant.Resolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Constant.ToString" />
      <Member Id="M:Mono.CSharp.Constant.TryReduce(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.Constant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.Constant.IsLiteral" />
      <Member Id="P:Mono.CSharp.Constant.IsNegative" />
      <Member Id="P:Mono.CSharp.Constant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.Constant.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.Constant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.ConstantExpr" Id="T:Mono.CSharp.ConstantExpr">
      <Member Id="M:Mono.CSharp.ConstantExpr.#ctor(Mono.CSharp.ConstSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ConstantExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConstantExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConstantExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ConstantExpr.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ConstantExpr.ResolveNameOf(Mono.CSharp.ResolveContext,Mono.CSharp.ATypeNameExpression)" />
      <Member Id="M:Mono.CSharp.ConstantExpr.SetTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeArguments)" />
      <Member Id="P:Mono.CSharp.ConstantExpr.DeclaringType" />
      <Member Id="P:Mono.CSharp.ConstantExpr.IsInstance" />
      <Member Id="P:Mono.CSharp.ConstantExpr.IsStatic" />
      <Member Id="P:Mono.CSharp.ConstantExpr.KindName" />
      <Member Id="P:Mono.CSharp.ConstantExpr.Name" />
    </Type>
    <Type Name="Mono.CSharp.ConstantFold" Id="T:Mono.CSharp.ConstantFold">
      <Member Id="M:Mono.CSharp.ConstantFold.BinaryFold(Mono.CSharp.ResolveContext,Mono.CSharp.Binary.Operator,Mono.CSharp.Constant,Mono.CSharp.Constant,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ConstantFold.CreateBinaryPromotionsTypes(Mono.CSharp.BuiltinTypes)" />
    </Type>
    <Type Name="Mono.CSharp.ConstInitializer" Id="T:Mono.CSharp.ConstInitializer">
      <Member Id="M:Mono.CSharp.ConstInitializer.#ctor(Mono.CSharp.FieldBase,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ConstInitializer.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ConstInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConstInitializer.DoResolveInitializer(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConstInitializer.GetSignatureForError" />
      <Member Id="P:Mono.CSharp.ConstInitializer.Name" />
    </Type>
    <Type Name="Mono.CSharp.Constraints" Id="T:Mono.CSharp.Constraints">
      <Member Id="M:Mono.CSharp.Constraints.#ctor(Mono.CSharp.SimpleMemberName,System.Collections.Generic.List{Mono.CSharp.FullNamedExpression},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constraints.CheckConflictingInheritedConstraint(Mono.CSharp.TypeParameterSpec,Mono.CSharp.TypeSpec,Mono.CSharp.IMemberContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constraints.CheckGenericConstraints(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Constraints.Error_ConflictingConstraints(Mono.CSharp.IMemberContext,Mono.CSharp.TypeParameterSpec,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constraints.Resolve(Mono.CSharp.IMemberContext,Mono.CSharp.TypeParameter)" />
      <Member Id="M:Mono.CSharp.Constraints.VerifyClsCompliance(Mono.CSharp.Report)" />
      <Member Id="P:Mono.CSharp.Constraints.Location" />
      <Member Id="P:Mono.CSharp.Constraints.TypeExpressions" />
      <Member Id="P:Mono.CSharp.Constraints.TypeParameter" />
    </Type>
    <Type Name="Mono.CSharp.Constructor" Id="T:Mono.CSharp.Constructor">
      <Member Id="F:Mono.CSharp.Constructor.AllowedModifiers" />
      <Member Id="F:Mono.CSharp.Constructor.ConstructorBuilder" />
      <Member Id="F:Mono.CSharp.Constructor.ConstructorName" />
      <Member Id="F:Mono.CSharp.Constructor.Initializer" />
      <Member Id="F:Mono.CSharp.Constructor.TypeConstructorName" />
      <Member Id="M:Mono.CSharp.Constructor.#ctor(Mono.CSharp.TypeDefinition,System.String,Mono.CSharp.Modifiers,Mono.CSharp.Attributes,Mono.CSharp.ParametersCompiled,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Constructor.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Constructor.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Constructor.CheckBase" />
      <Member Id="M:Mono.CSharp.Constructor.Define" />
      <Member Id="M:Mono.CSharp.Constructor.Emit" />
      <Member Id="M:Mono.CSharp.Constructor.FindBaseMember(Mono.CSharp.MemberSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.Constructor.GetCallerMemberName" />
      <Member Id="M:Mono.CSharp.Constructor.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.Constructor.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Constructor.IsDefault" />
      <Member Id="M:Mono.CSharp.Constructor.Mono#CSharp#IMethodData#CreateEmitContext(System.Reflection.Emit.ILGenerator,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
      <Member Id="M:Mono.CSharp.Constructor.VerifyClsCompliance" />
      <Member Id="M:Mono.CSharp.Constructor.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.Constructor.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Constructor.HasCompliantArgs" />
      <Member Id="P:Mono.CSharp.Constructor.IsPrimaryConstructor" />
      <Member Id="P:Mono.CSharp.Constructor.MethodName" />
      <Member Id="P:Mono.CSharp.Constructor.Mono#CSharp#IMethodData#IsAccessor" />
      <Member Id="P:Mono.CSharp.Constructor.Mono#CSharp#IMethodDefinition#Metadata" />
      <Member Id="P:Mono.CSharp.Constructor.ReturnType" />
      <Member Id="P:Mono.CSharp.Constructor.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.ConstructorBaseInitializer" Id="T:Mono.CSharp.ConstructorBaseInitializer">
      <Member Id="M:Mono.CSharp.ConstructorBaseInitializer.#ctor(Mono.CSharp.Arguments,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.ConstructorInitializer" Id="T:Mono.CSharp.ConstructorInitializer">
      <Member Id="M:Mono.CSharp.ConstructorInitializer.#ctor(Mono.CSharp.Arguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ConstructorInitializer.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ConstructorInitializer.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConstructorInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConstructorInitializer.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ConstructorInitializer.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ConstructorInitializer.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.ConstructorInitializer.Arguments" />
    </Type>
    <Type Name="Mono.CSharp.ConstructorThisInitializer" Id="T:Mono.CSharp.ConstructorThisInitializer">
      <Member Id="M:Mono.CSharp.ConstructorThisInitializer.#ctor(Mono.CSharp.Arguments,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.ConstSpec" Id="T:Mono.CSharp.ConstSpec">
      <Member Id="M:Mono.CSharp.ConstSpec.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.IMemberDefinition,Mono.CSharp.TypeSpec,System.Reflection.FieldInfo,Mono.CSharp.Modifiers,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ConstSpec.GetConstant(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.ConstSpec.Value" />
    </Type>
    <Type Name="Mono.CSharp.ContextualReturn" Id="T:Mono.CSharp.ContextualReturn">
      <Member Id="M:Mono.CSharp.ContextualReturn.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ContextualReturn.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ContextualReturn.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ContextualReturn.DoResolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.Continue" Id="T:Mono.CSharp.Continue">
      <Member Id="M:Mono.CSharp.Continue.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Continue.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Continue.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Continue.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Continue.MarkReachable(Mono.CSharp.Reachability)" />
    </Type>
    <Type Name="Mono.CSharp.ConvCast" Id="T:Mono.CSharp.ConvCast">
      <Member Id="M:Mono.CSharp.ConvCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec,Mono.CSharp.ConvCast.Mode)" />
      <Member Id="M:Mono.CSharp.ConvCast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ConvCast.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ConvCast.Emit(Mono.CSharp.EmitContext,Mono.CSharp.ConvCast.Mode)" />
      <Member Id="M:Mono.CSharp.ConvCast.ToString" />
    </Type>
    <Type Name="Mono.CSharp.CSharpBinderFlags" Id="T:Mono.CSharp.CSharpBinderFlags">
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.BinaryOperationLogical" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.CheckedContext" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.ConvertArrayIndex" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.ConvertExplicit" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.InvokeSimpleName" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.InvokeSpecialName" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.None" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.ResultDiscarded" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.ResultIndexed" />
      <Member Id="F:Mono.CSharp.CSharpBinderFlags.ValueFromCompoundAssignment" />
    </Type>
    <Type Name="Mono.CSharp.CSharpParser" Id="T:Mono.CSharp.CSharpParser">
      <Member Id="F:Mono.CSharp.CSharpParser.eof_token" />
      <Member Id="F:Mono.CSharp.CSharpParser.ErrorOutput" />
      <Member Id="F:Mono.CSharp.CSharpParser.InteractiveResult" />
      <Member Id="F:Mono.CSharp.CSharpParser.undo" />
      <Member Id="F:Mono.CSharp.CSharpParser.UnexpectedEOF" />
      <Member Id="F:Mono.CSharp.CSharpParser.use_global_stacks" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyCheck" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyDgoto" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyFinal" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyGindex" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyMax" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyNames" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyRindex" />
      <Member Id="F:Mono.CSharp.CSharpParser.yySindex" />
      <Member Id="F:Mono.CSharp.CSharpParser.yyTable" />
      <Member Id="M:Mono.CSharp.CSharpParser.#ctor(Mono.CSharp.SeekableStreamReader,Mono.CSharp.CompilationSourceFile,Mono.CSharp.ParserSession)" />
      <Member Id="M:Mono.CSharp.CSharpParser.#ctor(Mono.CSharp.SeekableStreamReader,Mono.CSharp.CompilationSourceFile,Mono.CSharp.Report,Mono.CSharp.ParserSession)" />
      <Member Id="M:Mono.CSharp.CSharpParser.parse" />
      <Member Id="M:Mono.CSharp.CSharpParser.yyDefault(System.Object)" />
      <Member Id="M:Mono.CSharp.CSharpParser.yyerror(System.String)" />
      <Member Id="M:Mono.CSharp.CSharpParser.yyerror(System.String,System.String[])" />
      <Member Id="M:Mono.CSharp.CSharpParser.yyExpecting(System.Int32)" />
      <Member Id="M:Mono.CSharp.CSharpParser.yyExpectingTokens(System.Int32)" />
      <Member Id="P:Mono.CSharp.CSharpParser.Lexer" />
    </Type>
    <Type Name="Mono.CSharp.DecimalConstant" Id="T:Mono.CSharp.DecimalConstant">
      <Member Id="F:Mono.CSharp.DecimalConstant.Value" />
      <Member Id="M:Mono.CSharp.DecimalConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Decimal,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DecimalConstant.#ctor(Mono.CSharp.TypeSpec,System.Decimal,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DecimalConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.DecimalConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.DecimalConstant.GetValue" />
      <Member Id="M:Mono.CSharp.DecimalConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.DecimalConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.DecimalConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.DecimalConstant.IsNegative" />
    </Type>
    <Type Name="Mono.CSharp.DecimalLiteral" Id="T:Mono.CSharp.DecimalLiteral">
      <Member Id="M:Mono.CSharp.DecimalLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Decimal,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DecimalLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.DecimalLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.DeclarationExpression" Id="T:Mono.CSharp.DeclarationExpression">
      <Member Id="M:Mono.CSharp.DeclarationExpression.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.DeclarationExpression.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.DeclarationExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.DeclarationExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DeclarationExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DeclarationExpression.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.DeclarationExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.DeclarationExpression.Initializer" />
      <Member Id="P:Mono.CSharp.DeclarationExpression.Variable" />
      <Member Id="P:Mono.CSharp.DeclarationExpression.VariableType" />
    </Type>
    <Type Name="Mono.CSharp.DefaultParameterValueExpression" Id="T:Mono.CSharp.DefaultParameterValueExpression">
      <Member Id="M:Mono.CSharp.DefaultParameterValueExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.DefaultParameterValueExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.DefaultParameterValueExpression.Resolve(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter)" />
    </Type>
    <Type Name="Mono.CSharp.DefaultValueExpression" Id="T:Mono.CSharp.DefaultValueExpression">
      <Member Id="M:Mono.CSharp.DefaultValueExpression.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.DefaultValueExpression.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.DefaultValueExpression.Expr" />
      <Member Id="P:Mono.CSharp.DefaultValueExpression.IsSideEffectFree" />
    </Type>
    <Type Name="Mono.CSharp.DefiniteAssignmentBitSet" Id="T:Mono.CSharp.DefiniteAssignmentBitSet">
      <Member Id="F:Mono.CSharp.DefiniteAssignmentBitSet.Empty" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.#ctor(Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.#ctor(System.Int32)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.And(System.Collections.Generic.List{Mono.CSharp.DefiniteAssignmentBitSet})" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.IsIncluded(Mono.CSharp.DefiniteAssignmentBitSet,Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.op_BitwiseAnd(Mono.CSharp.DefiniteAssignmentBitSet,Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.op_BitwiseOr(Mono.CSharp.DefiniteAssignmentBitSet,Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.Set(System.Int32)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.Set(System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.DefiniteAssignmentBitSet.ToString" />
      <Member Id="P:Mono.CSharp.DefiniteAssignmentBitSet.Item(System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.Delegate" Id="T:Mono.CSharp.Delegate">
      <Member Id="F:Mono.CSharp.Delegate.InvokeMethodName" />
      <Member Id="M:Mono.CSharp.Delegate.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Delegate.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Delegate.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Delegate.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.Delegate.Emit" />
      <Member Id="M:Mono.CSharp.Delegate.FullDelegateDesc(Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.Delegate.GetConstructor(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Delegate.GetInvokeMethod(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Delegate.GetParameters(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Delegate.IsTypeCovariant(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Delegate.PrepareEmit" />
      <Member Id="M:Mono.CSharp.Delegate.ResolveBaseTypes(Mono.CSharp.FullNamedExpression@)" />
      <Member Id="M:Mono.CSharp.Delegate.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.Delegate.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Delegate.InstanceExpression" />
      <Member Id="P:Mono.CSharp.Delegate.MemberType" />
      <Member Id="P:Mono.CSharp.Delegate.Parameters" />
      <Member Id="P:Mono.CSharp.Delegate.TypeAttr" />
      <Member Id="P:Mono.CSharp.Delegate.TypExpression" />
      <Member Id="P:Mono.CSharp.Delegate.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.DelegateCreation" Id="T:Mono.CSharp.DelegateCreation">
      <Member Id="F:Mono.CSharp.DelegateCreation.constructor_method" />
      <Member Id="F:Mono.CSharp.DelegateCreation.method_group" />
      <Member Id="M:Mono.CSharp.DelegateCreation.#ctor" />
      <Member Id="M:Mono.CSharp.DelegateCreation.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.DelegateCreation.CreateDelegateMethodArguments(Mono.CSharp.ResolveContext,Mono.CSharp.AParametersCollection,Mono.CSharp.TypeSpec[],Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.ImplicitStandardConversionExists(Mono.CSharp.ResolveContext,Mono.CSharp.MethodGroupExpr,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.Mono#CSharp#OverloadResolver#IErrorHandler#AmbiguousCandidates(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.Mono#CSharp#OverloadResolver#IErrorHandler#ArgumentMismatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.Argument,System.Int32)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.Mono#CSharp#OverloadResolver#IErrorHandler#NoArgumentMatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.DelegateCreation.Mono#CSharp#OverloadResolver#IErrorHandler#TypeInferenceFailed(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.DelegateCreation.AllowSpecialMethodsInvocation" />
    </Type>
    <Type Name="Mono.CSharp.Destructor" Id="T:Mono.CSharp.Destructor">
      <Member Id="F:Mono.CSharp.Destructor.MetadataName" />
      <Member Id="M:Mono.CSharp.Destructor.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.Modifiers,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Destructor.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Destructor.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Destructor.CheckBase" />
      <Member Id="M:Mono.CSharp.Destructor.Define" />
      <Member Id="M:Mono.CSharp.Destructor.Emit" />
      <Member Id="M:Mono.CSharp.Destructor.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Destructor.ResolveMemberType" />
      <Member Id="P:Mono.CSharp.Destructor.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.Do" Id="T:Mono.CSharp.Do">
      <Member Id="F:Mono.CSharp.Do.expr" />
      <Member Id="M:Mono.CSharp.Do.#ctor(Mono.CSharp.Statement,Mono.CSharp.BooleanExpression,Mono.CSharp.Location,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Do.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Do.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Do.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Do.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Do.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Do.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Do.SetEndReachable" />
      <Member Id="M:Mono.CSharp.Do.SetIteratorReachable" />
      <Member Id="P:Mono.CSharp.Do.WhileLocation" />
    </Type>
    <Type Name="Mono.CSharp.DoubleConstant" Id="T:Mono.CSharp.DoubleConstant">
      <Member Id="F:Mono.CSharp.DoubleConstant.Value" />
      <Member Id="M:Mono.CSharp.DoubleConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Double,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DoubleConstant.#ctor(Mono.CSharp.TypeSpec,System.Double,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DoubleConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.DoubleConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.DoubleConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.DoubleConstant.GetValue" />
      <Member Id="M:Mono.CSharp.DoubleConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.DoubleConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.DoubleConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.DoubleConstant.IsNegative" />
    </Type>
    <Type Name="Mono.CSharp.DoubleLiteral" Id="T:Mono.CSharp.DoubleLiteral">
      <Member Id="M:Mono.CSharp.DoubleLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Double,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.DoubleLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.DoubleLiteral.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="P:Mono.CSharp.DoubleLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.DynamicResultCast" Id="T:Mono.CSharp.DynamicResultCast">
      <Member Id="M:Mono.CSharp.DynamicResultCast.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.DynamicResultCast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.DynamicResultCast.MakeExpression(Mono.CSharp.BuilderContext)" />
    </Type>
    <Type Name="Mono.CSharp.ElementAccess" Id="T:Mono.CSharp.ElementAccess">
      <Member Id="F:Mono.CSharp.ElementAccess.Arguments" />
      <Member Id="F:Mono.CSharp.ElementAccess.Expr" />
      <Member Id="M:Mono.CSharp.ElementAccess.#ctor(Mono.CSharp.Expression,Mono.CSharp.Arguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ElementAccess.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ElementAccess.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ElementAccess.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ElementAccess.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ElementAccess.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ElementAccess.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ElementAccess.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ElementAccess.Error_CannotApplyIndexing(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ElementAccess.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ElementAccess.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ElementAccess.HasConditionalAccess" />
      <Member Id="P:Mono.CSharp.ElementAccess.ConditionalAccess" />
      <Member Id="P:Mono.CSharp.ElementAccess.StartLocation" />
    </Type>
    <Type Name="Mono.CSharp.ElementInitializer" Id="T:Mono.CSharp.ElementInitializer">
      <Member Id="F:Mono.CSharp.ElementInitializer.Name" />
      <Member Id="M:Mono.CSharp.ElementInitializer.#ctor(System.String,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ElementInitializer.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ElementInitializer.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ElementInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ElementInitializer.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ElementInitializer.ResolveElement(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.ElementInitializer.IsDictionaryInitializer" />
    </Type>
    <Type Name="Mono.CSharp.ElementTypeSpec" Id="T:Mono.CSharp.ElementTypeSpec">
      <Member Id="M:Mono.CSharp.ElementTypeSpec.#ctor(Mono.CSharp.MemberKind,Mono.CSharp.TypeSpec,System.Type)" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.CheckObsoleteness(Mono.CSharp.IMemberContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.ConditionalConditions" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.GetAttributeCoClass" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.GetAttributeDefaultMember" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.GetPostfixSignature" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.GetSignatureForDocumentation(System.Boolean)" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.LoadMembers(Mono.CSharp.TypeSpec,System.Boolean,Mono.CSharp.MemberCache@)" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.Mono#CSharp#ITypeDefinition#IsInternalAsPublic(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.Mutate(Mono.CSharp.TypeParameterMutator)" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.SetIsAssigned" />
      <Member Id="M:Mono.CSharp.ElementTypeSpec.SetIsUsed" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Element" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Interfaces" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.IsImported" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Mono#CSharp#IMemberDefinition#CLSAttributeValue" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Mono#CSharp#ITypeDefinition#DeclaringAssembly" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Mono#CSharp#ITypeDefinition#IsComImport" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Mono#CSharp#ITypeDefinition#IsCyclicTypeForwarder" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Mono#CSharp#ITypeDefinition#IsPartial" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Mono#CSharp#ITypeDefinition#IsTypeForwarder" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Name" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.Namespace" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.TypeParameters" />
      <Member Id="P:Mono.CSharp.ElementTypeSpec.TypeParametersCount" />
    </Type>
    <Type Name="Mono.CSharp.EmitContext" Id="T:Mono.CSharp.EmitContext">
      <Member Id="F:Mono.CSharp.EmitContext.CurrentAnonymousMethod" />
      <Member Id="F:Mono.CSharp.EmitContext.DefaultTarget" />
      <Member Id="F:Mono.CSharp.EmitContext.ig" />
      <Member Id="F:Mono.CSharp.EmitContext.LoopBegin" />
      <Member Id="F:Mono.CSharp.EmitContext.LoopEnd" />
      <Member Id="F:Mono.CSharp.EmitContext.return_value" />
      <Member Id="F:Mono.CSharp.EmitContext.Switch" />
      <Member Id="M:Mono.CSharp.EmitContext.#ctor(Mono.CSharp.IMemberContext,System.Reflection.Emit.ILGenerator,Mono.CSharp.TypeSpec,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
      <Member Id="M:Mono.CSharp.EmitContext.AddStatementEpilog(Mono.CSharp.IExpressionCleanup)" />
      <Member Id="M:Mono.CSharp.EmitContext.AssertEmptyStack" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginCatchBlock(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginCompilerScope(System.Int32)" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginExceptionBlock" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginExceptionFilterBlock" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginFilterHandler" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginFinallyBlock" />
      <Member Id="M:Mono.CSharp.EmitContext.BeginScope(System.Int32)" />
      <Member Id="M:Mono.CSharp.EmitContext.CloseConditionalAccess(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.CreateReturnLabel" />
      <Member Id="M:Mono.CSharp.EmitContext.DeclareLocal(Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EmitContext.DefineLabel" />
      <Member Id="M:Mono.CSharp.EmitContext.DefineLocalVariable(System.String,System.Reflection.Emit.LocalBuilder)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,Mono.CSharp.FieldSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,Mono.CSharp.MethodSpec,System.Type[])" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.Double)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.Single)" />
      <Member Id="M:Mono.CSharp.EmitContext.Emit(System.Reflection.Emit.OpCode,System.String)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArgumentAddress(System.Int32)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArgumentLoad(System.Int32)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArgumentStore(System.Int32)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArrayAddress(Mono.CSharp.ArrayContainer)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArrayLoad(Mono.CSharp.ArrayContainer)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArrayNew(Mono.CSharp.ArrayContainer)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitArrayStore(Mono.CSharp.ArrayContainer)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitEpilogue" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitInt(System.Int32)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitLoadFromPtr(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitLong(System.Int64)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitNull" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitStoreFromPtr(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.EmitThis" />
      <Member Id="M:Mono.CSharp.EmitContext.EndExceptionBlock" />
      <Member Id="M:Mono.CSharp.EmitContext.EndScope" />
      <Member Id="M:Mono.CSharp.EmitContext.FreeTemporaryLocal(System.Reflection.Emit.LocalBuilder,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.GetTemporaryField(Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EmitContext.GetTemporaryLocal(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmitContext.Mark(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.EmitContext.MarkCallEntry(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.EmitContext.MarkLabel(System.Reflection.Emit.Label)" />
      <Member Id="M:Mono.CSharp.EmitContext.TemporaryReturn" />
      <Member Id="P:Mono.CSharp.EmitContext.AsyncThrowVariable" />
      <Member Id="P:Mono.CSharp.EmitContext.BuiltinTypes" />
      <Member Id="P:Mono.CSharp.EmitContext.ConditionalAccess" />
      <Member Id="P:Mono.CSharp.EmitContext.CurrentType" />
      <Member Id="P:Mono.CSharp.EmitContext.CurrentTypeDefinition" />
      <Member Id="P:Mono.CSharp.EmitContext.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.EmitContext.EmitAccurateDebugInfo" />
      <Member Id="P:Mono.CSharp.EmitContext.HasMethodSymbolBuilder" />
      <Member Id="P:Mono.CSharp.EmitContext.HasReturnLabel" />
      <Member Id="P:Mono.CSharp.EmitContext.IsAnonymousStoreyMutateRequired" />
      <Member Id="P:Mono.CSharp.EmitContext.IsStatic" />
      <Member Id="P:Mono.CSharp.EmitContext.IsStaticConstructor" />
      <Member Id="P:Mono.CSharp.EmitContext.MemberContext" />
      <Member Id="P:Mono.CSharp.EmitContext.Module" />
      <Member Id="P:Mono.CSharp.EmitContext.NotifyEvaluatorOnStore" />
      <Member Id="P:Mono.CSharp.EmitContext.RecursivePatternLabel" />
      <Member Id="P:Mono.CSharp.EmitContext.Report" />
      <Member Id="P:Mono.CSharp.EmitContext.ReturnLabel" />
      <Member Id="P:Mono.CSharp.EmitContext.ReturnType" />
      <Member Id="P:Mono.CSharp.EmitContext.StatementEpilogue" />
      <Member Id="P:Mono.CSharp.EmitContext.TryFinallyUnwind" />
    </Type>
    <Type Name="Mono.CSharp.EmptyCast" Id="T:Mono.CSharp.EmptyCast">
      <Member Id="M:Mono.CSharp.EmptyCast.Create(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmptyCast.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EmptyCast.EmitSideEffect(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.EmptyCompletion" Id="T:Mono.CSharp.EmptyCompletion">
      <Member Id="M:Mono.CSharp.EmptyCompletion.#ctor" />
      <Member Id="M:Mono.CSharp.EmptyCompletion.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.EmptyCompletion.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.EmptyConstantCast" Id="T:Mono.CSharp.EmptyConstantCast">
      <Member Id="F:Mono.CSharp.EmptyConstantCast.child" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.#ctor(Mono.CSharp.Constant,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.GetValue" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.EmptyConstantCast.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.EmptyConstantCast.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.EmptyConstantCast.IsNegative" />
      <Member Id="P:Mono.CSharp.EmptyConstantCast.IsNull" />
      <Member Id="P:Mono.CSharp.EmptyConstantCast.IsOneInteger" />
      <Member Id="P:Mono.CSharp.EmptyConstantCast.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.EmptyConstantCast.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.EmptyExpression" Id="T:Mono.CSharp.EmptyExpression">
      <Member Id="F:Mono.CSharp.EmptyExpression.EventAddition" />
      <Member Id="F:Mono.CSharp.EmptyExpression.EventSubtraction" />
      <Member Id="F:Mono.CSharp.EmptyExpression.LValueMemberAccess" />
      <Member Id="F:Mono.CSharp.EmptyExpression.LValueMemberOutAccess" />
      <Member Id="F:Mono.CSharp.EmptyExpression.MissingValue" />
      <Member Id="F:Mono.CSharp.EmptyExpression.Null" />
      <Member Id="F:Mono.CSharp.EmptyExpression.OutAccess" />
      <Member Id="F:Mono.CSharp.EmptyExpression.UnaryAddress" />
      <Member Id="M:Mono.CSharp.EmptyExpression.#ctor(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.EmptyExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EmptyExpression.EmitSideEffect(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.EmptyExpressionStatement" Id="T:Mono.CSharp.EmptyExpressionStatement">
      <Member Id="F:Mono.CSharp.EmptyExpressionStatement.Instance" />
      <Member Id="M:Mono.CSharp.EmptyExpressionStatement.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.EmptyExpressionStatement.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.EmptyExpressionStatement.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EmptyExpressionStatement.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EmptyExpressionStatement.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EmptyExpressionStatement.EmitStatement(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.EmptyStatement" Id="T:Mono.CSharp.EmptyStatement">
      <Member Id="M:Mono.CSharp.EmptyStatement.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.EmptyStatement.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.EmptyStatement.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.EmptyStatement.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EmptyStatement.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.EmptyStatement.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EmptyStatement.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.Enum" Id="T:Mono.CSharp.Enum">
      <Member Id="F:Mono.CSharp.Enum.UnderlyingValueField" />
      <Member Id="M:Mono.CSharp.Enum.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Enum.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Enum.AddEnumMember(Mono.CSharp.EnumMember)" />
      <Member Id="M:Mono.CSharp.Enum.DoDefineContainer" />
      <Member Id="M:Mono.CSharp.Enum.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.Enum.Error_UnderlyingType(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Enum.IsUnmanagedType" />
      <Member Id="M:Mono.CSharp.Enum.ResolveBaseTypes(Mono.CSharp.FullNamedExpression@)" />
      <Member Id="M:Mono.CSharp.Enum.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.Enum.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Enum.BaseTypeExpression" />
      <Member Id="P:Mono.CSharp.Enum.TypeAttr" />
      <Member Id="P:Mono.CSharp.Enum.UnderlyingType" />
    </Type>
    <Type Name="Mono.CSharp.EnumConstant" Id="T:Mono.CSharp.EnumConstant">
      <Member Id="F:Mono.CSharp.EnumConstant.Child" />
      <Member Id="M:Mono.CSharp.EnumConstant.#ctor(Mono.CSharp.Constant,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EnumConstant.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.EnumConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EnumConstant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EnumConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EnumConstant.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EnumConstant.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EnumConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.EnumConstant.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.EnumConstant.GetTypedValue" />
      <Member Id="M:Mono.CSharp.EnumConstant.GetValue" />
      <Member Id="M:Mono.CSharp.EnumConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.EnumConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.EnumConstant.Increment" />
      <Member Id="P:Mono.CSharp.EnumConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.EnumConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.EnumConstant.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.EnumConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.EnumMember" Id="T:Mono.CSharp.EnumMember">
      <Member Id="M:Mono.CSharp.EnumMember.#ctor(Mono.CSharp.Enum,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.EnumMember.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.EnumMember.ConvertInitializer(Mono.CSharp.ResolveContext,Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.EnumMember.Define" />
    </Type>
    <Type Name="Mono.CSharp.ErrorExpression" Id="T:Mono.CSharp.ErrorExpression">
      <Member Id="F:Mono.CSharp.ErrorExpression.Instance" />
      <Member Id="M:Mono.CSharp.ErrorExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ErrorExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ErrorExpression.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ErrorExpression.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.Location,System.String,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ErrorExpression.Error_UnexpectedKind(Mono.CSharp.ResolveContext,Mono.CSharp.ResolveFlags,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ErrorExpression.Error_ValueAssignment(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ErrorExpression.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.Evaluator" Id="T:Mono.CSharp.Evaluator">
      <Member Id="F:Mono.CSharp.Evaluator.DescribeTypeExpressions" />
      <Member Id="F:Mono.CSharp.Evaluator.Terse" />
      <Member Id="M:Mono.CSharp.Evaluator.#ctor(Mono.CSharp.CompilerContext)" />
      <Member Id="M:Mono.CSharp.Evaluator.Compile(System.String)" />
      <Member Id="M:Mono.CSharp.Evaluator.Compile(System.String,Mono.CSharp.CompiledMethod@)" />
      <Member Id="M:Mono.CSharp.Evaluator.Evaluate(System.String)" />
      <Member Id="M:Mono.CSharp.Evaluator.Evaluate(System.String,System.Object@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.Evaluator.GetCompletions(System.String,System.String@)" />
      <Member Id="M:Mono.CSharp.Evaluator.GetUsing" />
      <Member Id="M:Mono.CSharp.Evaluator.GetVars" />
      <Member Id="M:Mono.CSharp.Evaluator.Interrupt" />
      <Member Id="M:Mono.CSharp.Evaluator.LoadAssembly(System.String)" />
      <Member Id="M:Mono.CSharp.Evaluator.ReferenceAssembly(System.Reflection.Assembly)" />
      <Member Id="M:Mono.CSharp.Evaluator.Run(System.String)" />
      <Member Id="P:Mono.CSharp.Evaluator.InteractiveBaseClass" />
      <Member Id="P:Mono.CSharp.Evaluator.ModificationListener" />
      <Member Id="P:Mono.CSharp.Evaluator.WaitOnTask" />
    </Type>
    <Type Name="Mono.CSharp.Event" Id="T:Mono.CSharp.Event">
      <Member Id="F:Mono.CSharp.Event.spec" />
      <Member Id="M:Mono.CSharp.Event.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Event.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Event.CheckOverrideAgainstBase(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.Event.Define" />
      <Member Id="M:Mono.CSharp.Event.Emit" />
      <Member Id="M:Mono.CSharp.Event.PrepareEmit" />
      <Member Id="M:Mono.CSharp.Event.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.Event.Add" />
      <Member Id="P:Mono.CSharp.Event.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Event.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.Event.ExpectedMemberTypeVariance" />
      <Member Id="P:Mono.CSharp.Event.Remove" />
    </Type>
    <Type Name="Mono.CSharp.EventExpr" Id="T:Mono.CSharp.EventExpr">
      <Member Id="M:Mono.CSharp.EventExpr.#ctor(Mono.CSharp.EventSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.EventExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EventExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.EventExpr.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.EventExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.EventExpr.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EventExpr.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.EventExpr.Error_CannotCallAbstractBase(Mono.CSharp.ResolveContext,System.String)" />
      <Member Id="M:Mono.CSharp.EventExpr.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.EventExpr.ResolveMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.SimpleName)" />
      <Member Id="M:Mono.CSharp.EventExpr.ResolveNameOf(Mono.CSharp.ResolveContext,Mono.CSharp.ATypeNameExpression)" />
      <Member Id="M:Mono.CSharp.EventExpr.SetTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeArguments)" />
      <Member Id="P:Mono.CSharp.EventExpr.DeclaringType" />
      <Member Id="P:Mono.CSharp.EventExpr.IsInstance" />
      <Member Id="P:Mono.CSharp.EventExpr.IsStatic" />
      <Member Id="P:Mono.CSharp.EventExpr.KindName" />
      <Member Id="P:Mono.CSharp.EventExpr.Name" />
      <Member Id="P:Mono.CSharp.EventExpr.Operator" />
    </Type>
    <Type Name="Mono.CSharp.EventField" Id="T:Mono.CSharp.EventField">
      <Member Id="M:Mono.CSharp.EventField.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.EventField.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.EventField.AddDeclarator(Mono.CSharp.FieldDeclarator)" />
      <Member Id="M:Mono.CSharp.EventField.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.EventField.Define" />
      <Member Id="P:Mono.CSharp.EventField.Declarators" />
      <Member Id="P:Mono.CSharp.EventField.Initializer" />
      <Member Id="P:Mono.CSharp.EventField.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.EventProperty" Id="T:Mono.CSharp.EventProperty">
      <Member Id="M:Mono.CSharp.EventProperty.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.EventProperty.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.EventProperty.Define" />
      <Member Id="P:Mono.CSharp.EventProperty.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.EventSpec" Id="T:Mono.CSharp.EventSpec">
      <Member Id="M:Mono.CSharp.EventSpec.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.IMemberDefinition,Mono.CSharp.TypeSpec,Mono.CSharp.Modifiers,Mono.CSharp.MethodSpec,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.EventSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.EventSpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.EventSpec.AccessorAdd" />
      <Member Id="P:Mono.CSharp.EventSpec.AccessorRemove" />
      <Member Id="P:Mono.CSharp.EventSpec.BackingField" />
      <Member Id="P:Mono.CSharp.EventSpec.MemberType" />
    </Type>
    <Type Name="Mono.CSharp.ExceptionStatement" Id="T:Mono.CSharp.ExceptionStatement">
      <Member Id="F:Mono.CSharp.ExceptionStatement.first_catch_resume_pc" />
      <Member Id="F:Mono.CSharp.ExceptionStatement.first_resume_pc" />
      <Member Id="F:Mono.CSharp.ExceptionStatement.parent_try_block" />
      <Member Id="F:Mono.CSharp.ExceptionStatement.resume_points" />
      <Member Id="M:Mono.CSharp.ExceptionStatement.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ExceptionStatement.AddResumePoint(Mono.CSharp.ResumableStatement,System.Int32,Mono.CSharp.StateMachineInitializer,Mono.CSharp.TryCatch)" />
      <Member Id="M:Mono.CSharp.ExceptionStatement.EmitTryBodyPrepare(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.ExitStatement" Id="T:Mono.CSharp.ExitStatement">
      <Member Id="F:Mono.CSharp.ExitStatement.unwind_protect" />
      <Member Id="M:Mono.CSharp.ExitStatement.#ctor" />
      <Member Id="M:Mono.CSharp.ExitStatement.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ExitStatement.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.ExitStatement.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.ExitStatement.IsLocalExit" />
    </Type>
    <Type Name="Mono.CSharp.ExplicitBlock" Id="T:Mono.CSharp.ExplicitBlock">
      <Member Id="F:Mono.CSharp.ExplicitBlock.am_storey" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.#ctor(Mono.CSharp.Block,Mono.CSharp.Block.Flags,Mono.CSharp.Location,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.#ctor(Mono.CSharp.Block,Mono.CSharp.Location,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.CreateAnonymousMethodStorey(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.DefineStoreyContainer(Mono.CSharp.EmitContext,Mono.CSharp.AnonymousMethodStorey)" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.DisableDebugScopeIndex" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.EmitScopeInitialization(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.GetDebugSymbolScopeIndex" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.RegisterAsyncAwait" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.RegisterIteratorYield" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.SetCatchBlock" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.SetFinallyBlock" />
      <Member Id="M:Mono.CSharp.ExplicitBlock.WrapIntoDestructor(Mono.CSharp.TryFinally,Mono.CSharp.ExplicitBlock)" />
      <Member Id="P:Mono.CSharp.ExplicitBlock.AnonymousMethodStorey" />
      <Member Id="P:Mono.CSharp.ExplicitBlock.HasAwait" />
      <Member Id="P:Mono.CSharp.ExplicitBlock.HasCapturedThis" />
      <Member Id="P:Mono.CSharp.ExplicitBlock.HasCapturedVariable" />
      <Member Id="P:Mono.CSharp.ExplicitBlock.HasReachableClosingBrace" />
      <Member Id="P:Mono.CSharp.ExplicitBlock.HasYield" />
    </Type>
    <Type Name="Mono.CSharp.ExprClass" Id="T:Mono.CSharp.ExprClass">
      <Member Id="F:Mono.CSharp.ExprClass.EventAccess" />
      <Member Id="F:Mono.CSharp.ExprClass.IndexerAccess" />
      <Member Id="F:Mono.CSharp.ExprClass.MethodGroup" />
      <Member Id="F:Mono.CSharp.ExprClass.Namespace" />
      <Member Id="F:Mono.CSharp.ExprClass.Nothing" />
      <Member Id="F:Mono.CSharp.ExprClass.PropertyAccess" />
      <Member Id="F:Mono.CSharp.ExprClass.Type" />
      <Member Id="F:Mono.CSharp.ExprClass.TypeParameter" />
      <Member Id="F:Mono.CSharp.ExprClass.Unresolved" />
      <Member Id="F:Mono.CSharp.ExprClass.Value" />
      <Member Id="F:Mono.CSharp.ExprClass.Variable" />
    </Type>
    <Type Name="Mono.CSharp.Expression" Id="T:Mono.CSharp.Expression">
      <Member Id="F:Mono.CSharp.Expression.eclass" />
      <Member Id="F:Mono.CSharp.Expression.loc" />
      <Member Id="F:Mono.CSharp.Expression.type" />
      <Member Id="M:Mono.CSharp.Expression.#ctor" />
      <Member Id="M:Mono.CSharp.Expression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Expression.CanReduceLambda(Mono.CSharp.AnonymousMethodBody)" />
      <Member Id="M:Mono.CSharp.Expression.Clone(Mono.CSharp.CloneContext)" />
      <Member Id="M:Mono.CSharp.Expression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Expression.ConstructorLookup(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.Arguments@,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Expression.ConvertExpressionToArrayIndex(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Expression.CreateExpressionFactoryCall(Mono.CSharp.ResolveContext,System.String,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Expression.CreateExpressionFactoryCall(Mono.CSharp.ResolveContext,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Expression.CreateExpressionFactoryCall(Mono.CSharp.ResolveContext,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Arguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.CreateExpressionTypeExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Expression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Expression.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Expression.EmitExpressionsList(Mono.CSharp.EmitContext,System.Collections.Generic.List{Mono.CSharp.Expression})" />
      <Member Id="M:Mono.CSharp.Expression.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Expression.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Expression.EmitToFieldSource(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Expression.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Expression.Error_ConstantCanBeInitializedWithNullOnly(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Expression.Error_ExpressionMustBeConstant(Mono.CSharp.ResolveContext,Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Expression.Error_InvalidExpressionStatement(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Expression.Error_InvalidExpressionStatement(Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Expression.Error_InvalidExpressionStatement(Mono.CSharp.Report,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Error_NamedArgument(Mono.CSharp.NamedArgument,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Expression.Error_NegativeArrayIndex(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Error_NullPropagatingLValue(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.Error_NullShortCircuitInsideExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.Location,System.String,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Expression.Error_PointerInsideExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.Error_TypeArgumentsCannotBeUsed(Mono.CSharp.IMemberContext,Mono.CSharp.MemberSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Error_TypeArgumentsCannotBeUsed(Mono.CSharp.IMemberContext,System.String,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Error_TypeDoesNotContainDefinition(Mono.CSharp.ResolveContext,Mono.CSharp.Location,Mono.CSharp.TypeSpec,System.String)" />
      <Member Id="M:Mono.CSharp.Expression.Error_TypeDoesNotContainDefinition(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.String)" />
      <Member Id="M:Mono.CSharp.Expression.Error_UnexpectedKind(Mono.CSharp.IMemberContext,Mono.CSharp.Expression,System.String,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Error_UnexpectedKind(Mono.CSharp.ResolveContext,Mono.CSharp.ResolveFlags,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Error_ValueAssignment(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Expression.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Expression.Error_ValueCannotBeConvertedCore(Mono.CSharp.ResolveContext,Mono.CSharp.Location,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Expression.Error_VoidInvalidInTheContext(Mono.CSharp.Location,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Expression.Error_VoidPointerOperation(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.ErrorIsInaccesible(Mono.CSharp.IMemberContext,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Expression.FlowAnalysisConditional(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Expression.GetOperatorFalse(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.GetOperatorTrue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Expression.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.Expression.IsNeverNull(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Expression.IsNullPropagatingValid(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Expression.LiftMemberType(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Expression.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Expression.MakePointerAccess(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Expression.MemberLookup(Mono.CSharp.IMemberContext,System.Boolean,Mono.CSharp.TypeSpec,System.String,System.Int32,Mono.CSharp.Expression.MemberLookupRestrictions,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.MemberLookupToExpression(Mono.CSharp.IMemberContext,System.Collections.Generic.IList{Mono.CSharp.MemberSpec},System.Boolean,Mono.CSharp.TypeSpec,System.String,System.Int32,Mono.CSharp.Expression.MemberLookupRestrictions,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.ProbeIdenticalTypeName(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.SimpleName)" />
      <Member Id="M:Mono.CSharp.Expression.Resolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.Resolve(Mono.CSharp.ResolveContext,Mono.CSharp.ResolveFlags)" />
      <Member Id="M:Mono.CSharp.Expression.ResolveAsType(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Expression.ResolveLabelConstant(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Expression.ResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Expression.UnsafeError(Mono.CSharp.Report,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.UnsafeError(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Expression.Warning_UnreachableExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.Expression.ExprClassName" />
      <Member Id="P:Mono.CSharp.Expression.ExprClassToResolveFlags" />
      <Member Id="P:Mono.CSharp.Expression.IsNull" />
      <Member Id="P:Mono.CSharp.Expression.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.Expression.Location" />
      <Member Id="P:Mono.CSharp.Expression.StartLocation" />
      <Member Id="P:Mono.CSharp.Expression.Type" />
    </Type>
    <Type Name="Mono.CSharp.ExpressionStatement" Id="T:Mono.CSharp.ExpressionStatement">
      <Member Id="M:Mono.CSharp.ExpressionStatement.#ctor" />
      <Member Id="M:Mono.CSharp.ExpressionStatement.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ExpressionStatement.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ExpressionStatement.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.ExpressionStatement.ResolveStatement(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.ExtensionMethodCandidates" Id="T:Mono.CSharp.ExtensionMethodCandidates">
      <Member Id="M:Mono.CSharp.ExtensionMethodCandidates.#ctor(Mono.CSharp.IMemberContext,System.Collections.Generic.IList{Mono.CSharp.MethodSpec},Mono.CSharp.NamespaceContainer,System.Int32)" />
      <Member Id="P:Mono.CSharp.ExtensionMethodCandidates.Container" />
      <Member Id="P:Mono.CSharp.ExtensionMethodCandidates.Context" />
      <Member Id="P:Mono.CSharp.ExtensionMethodCandidates.LookupIndex" />
      <Member Id="P:Mono.CSharp.ExtensionMethodCandidates.Methods" />
    </Type>
    <Type Name="Mono.CSharp.Field" Id="T:Mono.CSharp.Field">
      <Member Id="M:Mono.CSharp.Field.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Field.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Field.Define" />
      <Member Id="M:Mono.CSharp.Field.DoMemberTypeDependentChecks" />
      <Member Id="M:Mono.CSharp.Field.VerifyClsCompliance" />
    </Type>
    <Type Name="Mono.CSharp.FieldBase" Id="T:Mono.CSharp.FieldBase">
      <Member Id="F:Mono.CSharp.FieldBase.declarators" />
      <Member Id="F:Mono.CSharp.FieldBase.FieldBuilder" />
      <Member Id="F:Mono.CSharp.FieldBase.initializer" />
      <Member Id="F:Mono.CSharp.FieldBase.spec" />
      <Member Id="F:Mono.CSharp.FieldBase.status" />
      <Member Id="M:Mono.CSharp.FieldBase.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.FieldBase.AddDeclarator(Mono.CSharp.FieldDeclarator)" />
      <Member Id="M:Mono.CSharp.FieldBase.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.FieldBase.CheckBase" />
      <Member Id="M:Mono.CSharp.FieldBase.ConvertInitializer(Mono.CSharp.ResolveContext,Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.FieldBase.DoMemberTypeDependentChecks" />
      <Member Id="M:Mono.CSharp.FieldBase.Emit" />
      <Member Id="M:Mono.CSharp.FieldBase.Error_VariableOfStaticClass(Mono.CSharp.Location,System.String,Mono.CSharp.TypeSpec,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.FieldBase.SetCustomAttribute(Mono.CSharp.MethodSpec,System.Byte[])" />
      <Member Id="M:Mono.CSharp.FieldBase.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.FieldBase.AttributeTargets" />
      <Member Id="P:Mono.CSharp.FieldBase.Declarators" />
      <Member Id="P:Mono.CSharp.FieldBase.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.FieldBase.Initializer" />
      <Member Id="P:Mono.CSharp.FieldBase.Name" />
      <Member Id="P:Mono.CSharp.FieldBase.Spec" />
      <Member Id="P:Mono.CSharp.FieldBase.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.FieldDeclarator" Id="T:Mono.CSharp.FieldDeclarator">
      <Member Id="M:Mono.CSharp.FieldDeclarator.#ctor(Mono.CSharp.SimpleMemberName,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.FieldDeclarator.GetFieldTypeExpression(Mono.CSharp.FieldBase)" />
      <Member Id="P:Mono.CSharp.FieldDeclarator.Initializer" />
      <Member Id="P:Mono.CSharp.FieldDeclarator.Name" />
    </Type>
    <Type Name="Mono.CSharp.FieldExpr" Id="T:Mono.CSharp.FieldExpr">
      <Member Id="F:Mono.CSharp.FieldExpr.spec" />
      <Member Id="M:Mono.CSharp.FieldExpr.#ctor(Mono.CSharp.FieldBase,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FieldExpr.#ctor(Mono.CSharp.FieldSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FieldExpr.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FieldExpr.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.FieldExpr.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.FieldExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.CreateExpressionTree(Mono.CSharp.ResolveContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.FieldExpr.CreateTypeOfExpression" />
      <Member Id="M:Mono.CSharp.FieldExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.FieldExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.FieldExpr.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.FieldExpr.EmitAssignFromStack(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.FieldExpr.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.GetHashCode" />
      <Member Id="M:Mono.CSharp.FieldExpr.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.FieldExpr.IsMarshalByRefAccess(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.MakeAssignExpression(Mono.CSharp.BuilderContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.FieldExpr.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.ResolveNameOf(Mono.CSharp.ResolveContext,Mono.CSharp.ATypeNameExpression)" />
      <Member Id="M:Mono.CSharp.FieldExpr.SetFieldAssigned(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.FieldExpr.SetHasAddressTaken" />
      <Member Id="M:Mono.CSharp.FieldExpr.SetTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeArguments)" />
      <Member Id="P:Mono.CSharp.FieldExpr.DeclaringType" />
      <Member Id="P:Mono.CSharp.FieldExpr.IsFixed" />
      <Member Id="P:Mono.CSharp.FieldExpr.IsHoisted" />
      <Member Id="P:Mono.CSharp.FieldExpr.IsInstance" />
      <Member Id="P:Mono.CSharp.FieldExpr.IsStatic" />
      <Member Id="P:Mono.CSharp.FieldExpr.KindName" />
      <Member Id="P:Mono.CSharp.FieldExpr.Name" />
      <Member Id="P:Mono.CSharp.FieldExpr.Spec" />
      <Member Id="P:Mono.CSharp.FieldExpr.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.FieldInitializer" Id="T:Mono.CSharp.FieldInitializer">
      <Member Id="M:Mono.CSharp.FieldInitializer.#ctor(Mono.CSharp.FieldBase,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FieldInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.FieldInitializer.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.FieldInitializer.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.FieldInitializer.AssignmentOffset" />
      <Member Id="P:Mono.CSharp.FieldInitializer.Field" />
      <Member Id="P:Mono.CSharp.FieldInitializer.IsDefaultInitializer" />
      <Member Id="P:Mono.CSharp.FieldInitializer.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.FieldInitializer.StartLocation" />
    </Type>
    <Type Name="Mono.CSharp.FieldSpec" Id="T:Mono.CSharp.FieldSpec">
      <Member Id="M:Mono.CSharp.FieldSpec.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.IMemberDefinition,Mono.CSharp.TypeSpec,System.Reflection.FieldInfo,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.FieldSpec.GetMetaInfo" />
      <Member Id="M:Mono.CSharp.FieldSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.FieldSpec.Mutate(Mono.CSharp.TypeParameterMutator)" />
      <Member Id="M:Mono.CSharp.FieldSpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.FieldSpec.IsReadOnly" />
      <Member Id="P:Mono.CSharp.FieldSpec.MemberType" />
    </Type>
    <Type Name="Mono.CSharp.Fixed" Id="T:Mono.CSharp.Fixed">
      <Member Id="M:Mono.CSharp.Fixed.#ctor(Mono.CSharp.Fixed.VariableDeclaration,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Fixed.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Fixed.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Fixed.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Fixed.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Fixed.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Fixed.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Fixed.Statement" />
      <Member Id="P:Mono.CSharp.Fixed.Variables" />
    </Type>
    <Type Name="Mono.CSharp.FixedField" Id="T:Mono.CSharp.FixedField">
      <Member Id="F:Mono.CSharp.FixedField.FixedElementName" />
      <Member Id="M:Mono.CSharp.FixedField.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.FixedField.ConvertInitializer(Mono.CSharp.ResolveContext,Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.FixedField.Define" />
      <Member Id="M:Mono.CSharp.FixedField.DoMemberTypeIndependentChecks" />
      <Member Id="M:Mono.CSharp.FixedField.Emit" />
      <Member Id="P:Mono.CSharp.FixedField.CharSetValue" />
    </Type>
    <Type Name="Mono.CSharp.FloatConstant" Id="T:Mono.CSharp.FloatConstant">
      <Member Id="F:Mono.CSharp.FloatConstant.DoubleValue" />
      <Member Id="M:Mono.CSharp.FloatConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Double,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FloatConstant.#ctor(Mono.CSharp.TypeSpec,System.Double,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FloatConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.FloatConstant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.FloatConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.FloatConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.FloatConstant.GetValue" />
      <Member Id="M:Mono.CSharp.FloatConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.FloatConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.FloatConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.FloatConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.FloatConstant.Value" />
    </Type>
    <Type Name="Mono.CSharp.FloatLiteral" Id="T:Mono.CSharp.FloatLiteral">
      <Member Id="M:Mono.CSharp.FloatLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Single,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.FloatLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.FloatLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.FlowAnalysisContext" Id="T:Mono.CSharp.FlowAnalysisContext">
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.#ctor(Mono.CSharp.CompilerContext,Mono.CSharp.ParametersBlock,System.Int32)" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.AddReachedLabel(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.BranchDefiniteAssignment" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.BranchDefiniteAssignment(Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.CopyLabelStack" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.IsDefinitelyAssigned(Mono.CSharp.VariableInfo)" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.IsStructFieldDefinitelyAssigned(Mono.CSharp.VariableInfo,System.String)" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.SetLabelStack(System.Collections.Generic.Dictionary{Mono.CSharp.Statement,System.Collections.Generic.List{Mono.CSharp.DefiniteAssignmentBitSet}})" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.SetStructFieldAssigned(Mono.CSharp.VariableInfo,System.String)" />
      <Member Id="M:Mono.CSharp.FlowAnalysisContext.SetVariableAssigned(Mono.CSharp.VariableInfo,System.Boolean)" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.DefiniteAssignment" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.DefiniteAssignmentOnFalse" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.DefiniteAssignmentOnTrue" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.ParametersBlock" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.Report" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.SwitchInitialDefinitiveAssignment" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.TryFinally" />
      <Member Id="P:Mono.CSharp.FlowAnalysisContext.UnreachableReported" />
    </Type>
    <Type Name="Mono.CSharp.For" Id="T:Mono.CSharp.For">
      <Member Id="M:Mono.CSharp.For.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.For.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.For.AddEndDefiniteAssignment(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.For.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.For.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.For.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.For.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.For.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.For.SetEndReachable" />
      <Member Id="M:Mono.CSharp.For.SetIteratorReachable" />
      <Member Id="P:Mono.CSharp.For.Condition" />
      <Member Id="P:Mono.CSharp.For.Initializer" />
      <Member Id="P:Mono.CSharp.For.Iterator" />
    </Type>
    <Type Name="Mono.CSharp.Foreach" Id="T:Mono.CSharp.Foreach">
      <Member Id="M:Mono.CSharp.Foreach.#ctor(Mono.CSharp.Expression,Mono.CSharp.LocalVariable,Mono.CSharp.Expression,Mono.CSharp.Statement,Mono.CSharp.Block,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Foreach.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Foreach.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Foreach.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Foreach.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Foreach.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Foreach.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Foreach.Expr" />
      <Member Id="P:Mono.CSharp.Foreach.TypeExpression" />
      <Member Id="P:Mono.CSharp.Foreach.Variable" />
    </Type>
    <Type Name="Mono.CSharp.FullNamedExpression" Id="T:Mono.CSharp.FullNamedExpression">
      <Member Id="M:Mono.CSharp.FullNamedExpression.#ctor" />
      <Member Id="M:Mono.CSharp.FullNamedExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.FullNamedExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.FullNamedExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.FullNamedExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.FullNamedExpression.ResolveAsType(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.FullNamedExpression.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.GlobalRootNamespace" Id="T:Mono.CSharp.GlobalRootNamespace">
      <Member Id="M:Mono.CSharp.GlobalRootNamespace.#ctor" />
    </Type>
    <Type Name="Mono.CSharp.Goto" Id="T:Mono.CSharp.Goto">
      <Member Id="M:Mono.CSharp.Goto.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Goto.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Goto.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Goto.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Goto.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Goto.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Goto.Error_UnknownLabel(Mono.CSharp.BlockContext,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Goto.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="P:Mono.CSharp.Goto.IsLocalExit" />
      <Member Id="P:Mono.CSharp.Goto.Target" />
    </Type>
    <Type Name="Mono.CSharp.GotoCase" Id="T:Mono.CSharp.GotoCase">
      <Member Id="M:Mono.CSharp.GotoCase.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.GotoCase.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.GotoCase.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.GotoCase.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.GotoCase.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.GotoCase.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.GotoCase.Expr" />
      <Member Id="P:Mono.CSharp.GotoCase.Label" />
    </Type>
    <Type Name="Mono.CSharp.GotoDefault" Id="T:Mono.CSharp.GotoDefault">
      <Member Id="M:Mono.CSharp.GotoDefault.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.GotoDefault.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.GotoDefault.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.GotoDefault.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.GotoDefault.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.HoistedParameter" Id="T:Mono.CSharp.HoistedParameter">
      <Member Id="M:Mono.CSharp.HoistedParameter.#ctor(Mono.CSharp.AnonymousMethodStorey,Mono.CSharp.ParameterReference)" />
      <Member Id="M:Mono.CSharp.HoistedParameter.#ctor(Mono.CSharp.HoistedParameter,System.String)" />
      <Member Id="M:Mono.CSharp.HoistedParameter.EmitHoistingAssignment(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.HoistedParameter.IsAssigned" />
      <Member Id="P:Mono.CSharp.HoistedParameter.Parameter" />
    </Type>
    <Type Name="Mono.CSharp.HoistedStoreyClass" Id="T:Mono.CSharp.HoistedStoreyClass">
      <Member Id="F:Mono.CSharp.HoistedStoreyClass.mutator" />
      <Member Id="M:Mono.CSharp.HoistedStoreyClass.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.MemberName,Mono.CSharp.TypeParameters,Mono.CSharp.Modifiers,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.HoistedStoreyClass.GetGenericStorey" />
      <Member Id="P:Mono.CSharp.HoistedStoreyClass.Mutator" />
    </Type>
    <Type Name="Mono.CSharp.HoistedThis" Id="T:Mono.CSharp.HoistedThis">
      <Member Id="M:Mono.CSharp.HoistedThis.#ctor(Mono.CSharp.AnonymousMethodStorey,Mono.CSharp.Field)" />
    </Type>
    <Type Name="Mono.CSharp.HoistedVariable" Id="T:Mono.CSharp.HoistedVariable">
      <Member Id="F:Mono.CSharp.HoistedVariable.field" />
      <Member Id="F:Mono.CSharp.HoistedVariable.storey" />
      <Member Id="M:Mono.CSharp.HoistedVariable.#ctor(Mono.CSharp.AnonymousMethodStorey,Mono.CSharp.Field)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.#ctor(Mono.CSharp.AnonymousMethodStorey,System.String,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.CreateExpressionTree" />
      <Member Id="M:Mono.CSharp.HoistedVariable.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.HoistedVariable.GetFieldExpression(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.HoistedVariable.Field" />
      <Member Id="P:Mono.CSharp.HoistedVariable.Storey" />
    </Type>
    <Type Name="Mono.CSharp.IAssemblyDefinition" Id="T:Mono.CSharp.IAssemblyDefinition">
      <Member Id="M:Mono.CSharp.IAssemblyDefinition.GetPublicKeyToken" />
      <Member Id="M:Mono.CSharp.IAssemblyDefinition.IsFriendAssemblyTo(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="P:Mono.CSharp.IAssemblyDefinition.FullName" />
      <Member Id="P:Mono.CSharp.IAssemblyDefinition.IsCLSCompliant" />
      <Member Id="P:Mono.CSharp.IAssemblyDefinition.IsMissing" />
      <Member Id="P:Mono.CSharp.IAssemblyDefinition.Name" />
    </Type>
    <Type Name="Mono.CSharp.IAssignMethod" Id="T:Mono.CSharp.IAssignMethod">
      <Member Id="M:Mono.CSharp.IAssignMethod.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.IAssignMethod.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.IExpressionCleanup" Id="T:Mono.CSharp.IExpressionCleanup">
      <Member Id="M:Mono.CSharp.IExpressionCleanup.EmitCleanup(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.If" Id="T:Mono.CSharp.If">
      <Member Id="F:Mono.CSharp.If.FalseStatement" />
      <Member Id="F:Mono.CSharp.If.TrueStatement" />
      <Member Id="M:Mono.CSharp.If.#ctor(Mono.CSharp.Expression,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.If.#ctor(Mono.CSharp.Expression,Mono.CSharp.Statement,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.If.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.If.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.If.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.If.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.If.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.If.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.If.Expr" />
    </Type>
    <Type Name="Mono.CSharp.IFixedExpression" Id="T:Mono.CSharp.IFixedExpression">
      <Member Id="P:Mono.CSharp.IFixedExpression.IsFixed" />
    </Type>
    <Type Name="Mono.CSharp.IGenericMethodDefinition" Id="T:Mono.CSharp.IGenericMethodDefinition">
      <Member Id="P:Mono.CSharp.IGenericMethodDefinition.TypeParameters" />
      <Member Id="P:Mono.CSharp.IGenericMethodDefinition.TypeParametersCount" />
    </Type>
    <Type Name="Mono.CSharp.IInterfaceMemberSpec" Id="T:Mono.CSharp.IInterfaceMemberSpec">
      <Member Id="P:Mono.CSharp.IInterfaceMemberSpec.MemberType" />
    </Type>
    <Type Name="Mono.CSharp.ILiteralConstant" Id="T:Mono.CSharp.ILiteralConstant" />
    <Type Name="Mono.CSharp.ILocalVariable" Id="T:Mono.CSharp.ILocalVariable">
      <Member Id="M:Mono.CSharp.ILocalVariable.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ILocalVariable.EmitAddressOf(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ILocalVariable.EmitAssign(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.IMemberContext" Id="T:Mono.CSharp.IMemberContext">
      <Member Id="M:Mono.CSharp.IMemberContext.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.IMemberContext.LookupExtensionMethod(System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.IMemberContext.LookupNamespaceAlias(System.String)" />
      <Member Id="M:Mono.CSharp.IMemberContext.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.IMemberContext.CurrentMemberDefinition" />
      <Member Id="P:Mono.CSharp.IMemberContext.CurrentType" />
      <Member Id="P:Mono.CSharp.IMemberContext.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.IMemberContext.IsObsolete" />
      <Member Id="P:Mono.CSharp.IMemberContext.IsStatic" />
      <Member Id="P:Mono.CSharp.IMemberContext.IsUnsafe" />
    </Type>
    <Type Name="Mono.CSharp.IMemberDefinition" Id="T:Mono.CSharp.IMemberDefinition">
      <Member Id="M:Mono.CSharp.IMemberDefinition.ConditionalConditions" />
      <Member Id="M:Mono.CSharp.IMemberDefinition.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.IMemberDefinition.SetIsAssigned" />
      <Member Id="M:Mono.CSharp.IMemberDefinition.SetIsUsed" />
      <Member Id="P:Mono.CSharp.IMemberDefinition.CLSAttributeValue" />
      <Member Id="P:Mono.CSharp.IMemberDefinition.IsImported" />
      <Member Id="P:Mono.CSharp.IMemberDefinition.Name" />
    </Type>
    <Type Name="Mono.CSharp.IMemoryLocation" Id="T:Mono.CSharp.IMemoryLocation">
      <Member Id="M:Mono.CSharp.IMemoryLocation.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
    </Type>
    <Type Name="Mono.CSharp.IMethodData" Id="T:Mono.CSharp.IMethodData">
      <Member Id="M:Mono.CSharp.IMethodData.CreateEmitContext(System.Reflection.Emit.ILGenerator,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
      <Member Id="P:Mono.CSharp.IMethodData.Block" />
      <Member Id="P:Mono.CSharp.IMethodData.CallingConventions" />
      <Member Id="P:Mono.CSharp.IMethodData.IsAccessor" />
      <Member Id="P:Mono.CSharp.IMethodData.Location" />
      <Member Id="P:Mono.CSharp.IMethodData.MethodName" />
      <Member Id="P:Mono.CSharp.IMethodData.OptAttributes" />
      <Member Id="P:Mono.CSharp.IMethodData.ParameterInfo" />
      <Member Id="P:Mono.CSharp.IMethodData.ReturnType" />
      <Member Id="P:Mono.CSharp.IMethodData.Spec" />
    </Type>
    <Type Name="Mono.CSharp.IMethodDefinition" Id="T:Mono.CSharp.IMethodDefinition">
      <Member Id="P:Mono.CSharp.IMethodDefinition.Metadata" />
    </Type>
    <Type Name="Mono.CSharp.IModuleContext" Id="T:Mono.CSharp.IModuleContext">
      <Member Id="P:Mono.CSharp.IModuleContext.Module" />
    </Type>
    <Type Name="Mono.CSharp.ImplicitCast" Id="T:Mono.CSharp.ImplicitCast">
      <Member Id="M:Mono.CSharp.ImplicitCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ImplicitCast.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.ImplicitDelegateCreation" Id="T:Mono.CSharp.ImplicitDelegateCreation">
      <Member Id="M:Mono.CSharp.ImplicitDelegateCreation.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.MethodGroupExpr,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ImplicitDelegateCreation.ContainsMethodTypeParameter(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ImplicitDelegateCreation.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ImplicitDelegateCreation.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.ImplicitLambdaParameter" Id="T:Mono.CSharp.ImplicitLambdaParameter">
      <Member Id="M:Mono.CSharp.ImplicitLambdaParameter.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ImplicitLambdaParameter.Resolve(Mono.CSharp.IMemberContext,System.Int32)" />
      <Member Id="M:Mono.CSharp.ImplicitLambdaParameter.SetParameterType(Mono.CSharp.TypeSpec)" />
    </Type>
    <Type Name="Mono.CSharp.ImportedAssemblyDefinition" Id="T:Mono.CSharp.ImportedAssemblyDefinition">
      <Member Id="M:Mono.CSharp.ImportedAssemblyDefinition.#ctor(System.Reflection.Assembly)" />
      <Member Id="M:Mono.CSharp.ImportedAssemblyDefinition.GetAssemblyVisibleToName(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.ImportedAssemblyDefinition.GetPublicKeyToken" />
      <Member Id="M:Mono.CSharp.ImportedAssemblyDefinition.IsFriendAssemblyTo(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.ImportedAssemblyDefinition.ReadAttributes" />
      <Member Id="M:Mono.CSharp.ImportedAssemblyDefinition.ToString" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.Assembly" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.FullName" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.HasStrongName" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.IsCLSCompliant" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.IsMissing" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.Location" />
      <Member Id="P:Mono.CSharp.ImportedAssemblyDefinition.Name" />
    </Type>
    <Type Name="Mono.CSharp.ImportedModuleDefinition" Id="T:Mono.CSharp.ImportedModuleDefinition">
      <Member Id="M:Mono.CSharp.ImportedModuleDefinition.#ctor(System.Reflection.Module)" />
      <Member Id="M:Mono.CSharp.ImportedModuleDefinition.ReadAssemblyAttributes" />
      <Member Id="M:Mono.CSharp.ImportedModuleDefinition.ReadAttributes" />
      <Member Id="P:Mono.CSharp.ImportedModuleDefinition.IsCLSCompliant" />
      <Member Id="P:Mono.CSharp.ImportedModuleDefinition.Name" />
    </Type>
    <Type Name="Mono.CSharp.INamedBlockVariable" Id="T:Mono.CSharp.INamedBlockVariable">
      <Member Id="M:Mono.CSharp.INamedBlockVariable.CreateReferenceExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.INamedBlockVariable.Block" />
      <Member Id="P:Mono.CSharp.INamedBlockVariable.IsDeclared" />
      <Member Id="P:Mono.CSharp.INamedBlockVariable.IsParameter" />
      <Member Id="P:Mono.CSharp.INamedBlockVariable.Location" />
    </Type>
    <Type Name="Mono.CSharp.Indexer" Id="T:Mono.CSharp.Indexer">
      <Member Id="M:Mono.CSharp.Indexer.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.MemberName,Mono.CSharp.Modifiers,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Indexer.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Indexer.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Indexer.CheckForDuplications" />
      <Member Id="M:Mono.CSharp.Indexer.Define" />
      <Member Id="M:Mono.CSharp.Indexer.Emit" />
      <Member Id="M:Mono.CSharp.Indexer.EnableOverloadChecks(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.Indexer.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.Indexer.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Indexer.PrepareEmit" />
      <Member Id="M:Mono.CSharp.Indexer.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.Indexer.Mono#CSharp#IParametersMember#Parameters" />
      <Member Id="P:Mono.CSharp.Indexer.ParameterInfo" />
    </Type>
    <Type Name="Mono.CSharp.IndexerSpec" Id="T:Mono.CSharp.IndexerSpec">
      <Member Id="M:Mono.CSharp.IndexerSpec.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.IMemberDefinition,Mono.CSharp.TypeSpec,Mono.CSharp.AParametersCollection,System.Reflection.PropertyInfo,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.IndexerSpec.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.IndexerSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.IndexerSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.IndexerSpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.IndexerSpec.Parameters" />
    </Type>
    <Type Name="Mono.CSharp.Indirection" Id="T:Mono.CSharp.Indirection">
      <Member Id="M:Mono.CSharp.Indirection.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Indirection.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Indirection.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.Indirection.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Indirection.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Indirection.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Indirection.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Indirection.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Indirection.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Indirection.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Indirection.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="P:Mono.CSharp.Indirection.Expr" />
      <Member Id="P:Mono.CSharp.Indirection.IsFixed" />
      <Member Id="P:Mono.CSharp.Indirection.StartLocation" />
    </Type>
    <Type Name="Mono.CSharp.InflatedTypeSpec" Id="T:Mono.CSharp.InflatedTypeSpec">
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.#ctor(Mono.CSharp.IModuleContext,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.AddInterface(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.CheckObsoleteness(Mono.CSharp.IMemberContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.ContainsTypeParameter(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.CreateLocalInflator(Mono.CSharp.IModuleContext)" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.GetDefinition" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.GetMetaInfo" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.GetTypeNameSignature" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.HasDynamicArgument" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.InitializeMemberCache(System.Boolean)" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.IsNotCLSCompliant(System.Boolean@)" />
      <Member Id="M:Mono.CSharp.InflatedTypeSpec.Mutate(Mono.CSharp.TypeParameterMutator)" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.BaseType" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.Constraints" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.HasConstraintsChecked" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.Interfaces" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.IsArrayGenericInterface" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.IsExpressionTreeType" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.IsGenericTask" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.IsNullableType" />
      <Member Id="P:Mono.CSharp.InflatedTypeSpec.TypeArguments" />
    </Type>
    <Type Name="Mono.CSharp.InstanceEmitter" Id="T:Mono.CSharp.InstanceEmitter">
      <Member Id="M:Mono.CSharp.InstanceEmitter.#ctor(Mono.CSharp.Expression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.InstanceEmitter.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.InstanceEmitter.EmitLoad(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.InstanceEmitter.GetStackType(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.IntConstant" Id="T:Mono.CSharp.IntConstant">
      <Member Id="F:Mono.CSharp.IntConstant.Value" />
      <Member Id="M:Mono.CSharp.IntConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.IntConstant.#ctor(Mono.CSharp.TypeSpec,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.IntConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.IntConstant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.IntConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.IntConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.IntConstant.GetValue" />
      <Member Id="M:Mono.CSharp.IntConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.IntConstant.Increment" />
      <Member Id="P:Mono.CSharp.IntConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.IntConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.IntConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.IntConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.IntegralConstant" Id="T:Mono.CSharp.IntegralConstant">
      <Member Id="M:Mono.CSharp.IntegralConstant.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.IntegralConstant.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.IntegralConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.IntegralConstant.Increment" />
    </Type>
    <Type Name="Mono.CSharp.InteractiveBase" Id="T:Mono.CSharp.InteractiveBase">
      <Member Id="F:Mono.CSharp.InteractiveBase.ContinuationPrompt" />
      <Member Id="F:Mono.CSharp.InteractiveBase.Error" />
      <Member Id="F:Mono.CSharp.InteractiveBase.Evaluator" />
      <Member Id="F:Mono.CSharp.InteractiveBase.Output" />
      <Member Id="F:Mono.CSharp.InteractiveBase.Prompt" />
      <Member Id="F:Mono.CSharp.InteractiveBase.QuitRequested" />
      <Member Id="M:Mono.CSharp.InteractiveBase.#ctor" />
      <Member Id="M:Mono.CSharp.InteractiveBase.Describe(System.Object)" />
      <Member Id="M:Mono.CSharp.InteractiveBase.LoadAssembly(System.String)" />
      <Member Id="M:Mono.CSharp.InteractiveBase.LoadPackage(System.String)" />
      <Member Id="M:Mono.CSharp.InteractiveBase.print(System.Object)" />
      <Member Id="M:Mono.CSharp.InteractiveBase.print(System.String,System.Object[])" />
      <Member Id="M:Mono.CSharp.InteractiveBase.Quit" />
      <Member Id="M:Mono.CSharp.InteractiveBase.ShowUsing" />
      <Member Id="M:Mono.CSharp.InteractiveBase.ShowVars" />
      <Member Id="M:Mono.CSharp.InteractiveBase.Time(System.Action)" />
      <Member Id="P:Mono.CSharp.InteractiveBase.help" />
      <Member Id="P:Mono.CSharp.InteractiveBase.quit" />
    </Type>
    <Type Name="Mono.CSharp.Interface" Id="T:Mono.CSharp.Interface">
      <Member Id="M:Mono.CSharp.Interface.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Modifiers,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Interface.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Interface.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Interface.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.Interface.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Interface.TypeAttr" />
    </Type>
    <Type Name="Mono.CSharp.InterfaceMemberBase" Id="T:Mono.CSharp.InterfaceMemberBase">
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.AllowedModifiersClass" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.AllowedModifiersInterface" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.AllowedModifiersStruct" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.base_method" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.flags" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.InterfaceType" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.is_external_implementation" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.IsExplicitImpl" />
      <Member Id="F:Mono.CSharp.InterfaceMemberBase.IsInterface" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.CheckAccessModifiers(Mono.CSharp.MemberCore,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.CheckBase" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.CheckForDuplications" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.CheckOverrideAgainstBase(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.Define" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.DefineParameters(Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.DoMemberTypeDependentChecks" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.Emit" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.EnableOverloadChecks(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.Error_CannotChangeAccessModifiers(Mono.CSharp.MemberCore,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.Error_StaticReturnType" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.FindBaseMember(Mono.CSharp.MemberSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.GetFullName(Mono.CSharp.MemberName)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.GetFullName(System.String)" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.InterfaceMemberBase.SetConstraints(System.Collections.Generic.List{Mono.CSharp.Constraints})" />
      <Member Id="P:Mono.CSharp.InterfaceMemberBase.ExpectedMemberTypeVariance" />
      <Member Id="P:Mono.CSharp.InterfaceMemberBase.IsUsed" />
      <Member Id="P:Mono.CSharp.InterfaceMemberBase.ShortName" />
    </Type>
    <Type Name="Mono.CSharp.InternalErrorException" Id="T:Mono.CSharp.InternalErrorException">
      <Member Id="M:Mono.CSharp.InternalErrorException.#ctor" />
      <Member Id="M:Mono.CSharp.InternalErrorException.#ctor(Mono.CSharp.MemberCore,System.Exception)" />
      <Member Id="M:Mono.CSharp.InternalErrorException.#ctor(System.Exception,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.InternalErrorException.#ctor(System.Exception,System.String,System.Object[])" />
      <Member Id="M:Mono.CSharp.InternalErrorException.#ctor(System.String)" />
      <Member Id="M:Mono.CSharp.InternalErrorException.#ctor(System.String,System.Object[])" />
    </Type>
    <Type Name="Mono.CSharp.InterpolatedString" Id="T:Mono.CSharp.InterpolatedString">
      <Member Id="M:Mono.CSharp.InterpolatedString.#ctor(Mono.CSharp.StringLiteral,System.Collections.Generic.List{Mono.CSharp.Expression},Mono.CSharp.StringLiteral)" />
      <Member Id="M:Mono.CSharp.InterpolatedString.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.InterpolatedString.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.InterpolatedString.ConvertTo(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.InterpolatedString.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.InterpolatedString.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.InterpolatedString.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.InterpolatedString.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
    </Type>
    <Type Name="Mono.CSharp.InterpolatedStringInsert" Id="T:Mono.CSharp.InterpolatedStringInsert">
      <Member Id="M:Mono.CSharp.InterpolatedStringInsert.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.InterpolatedStringInsert.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.InterpolatedStringInsert.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.InterpolatedStringInsert.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.InterpolatedStringInsert.ResolveAligment(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.InterpolatedStringInsert.Alignment" />
      <Member Id="P:Mono.CSharp.InterpolatedStringInsert.Format" />
    </Type>
    <Type Name="Mono.CSharp.IntLiteral" Id="T:Mono.CSharp.IntLiteral">
      <Member Id="M:Mono.CSharp.IntLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.IntLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.IntLiteral.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.IntLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.Invocation" Id="T:Mono.CSharp.Invocation">
      <Member Id="F:Mono.CSharp.Invocation.arguments" />
      <Member Id="F:Mono.CSharp.Invocation.expr" />
      <Member Id="F:Mono.CSharp.Invocation.mg" />
      <Member Id="M:Mono.CSharp.Invocation.#ctor(Mono.CSharp.Expression,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Invocation.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Invocation.CanReduceLambda(Mono.CSharp.AnonymousMethodBody)" />
      <Member Id="M:Mono.CSharp.Invocation.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Invocation.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Invocation.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Invocation.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Invocation.DoResolveDynamic(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Invocation.DoResolveOverload(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Invocation.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Invocation.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Invocation.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Invocation.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Invocation.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.Invocation.IsMemberInvocable(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.Invocation.IsSpecialMethodInvocation(Mono.CSharp.ResolveContext,Mono.CSharp.MethodSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Invocation.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Invocation.MakeExpression(Mono.CSharp.BuilderContext,Mono.CSharp.Expression,Mono.CSharp.MethodSpec,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Invocation.ResolveStatement(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Invocation.Arguments" />
      <Member Id="P:Mono.CSharp.Invocation.Exp" />
      <Member Id="P:Mono.CSharp.Invocation.MethodGroup" />
      <Member Id="P:Mono.CSharp.Invocation.StartLocation" />
    </Type>
    <Type Name="Mono.CSharp.IParameterData" Id="T:Mono.CSharp.IParameterData">
      <Member Id="P:Mono.CSharp.IParameterData.DefaultValue" />
      <Member Id="P:Mono.CSharp.IParameterData.HasDefaultValue" />
      <Member Id="P:Mono.CSharp.IParameterData.HasExtensionMethodModifier" />
      <Member Id="P:Mono.CSharp.IParameterData.ModFlags" />
      <Member Id="P:Mono.CSharp.IParameterData.Name" />
    </Type>
    <Type Name="Mono.CSharp.IParametersMember" Id="T:Mono.CSharp.IParametersMember">
      <Member Id="P:Mono.CSharp.IParametersMember.Parameters" />
    </Type>
    <Type Name="Mono.CSharp.Is" Id="T:Mono.CSharp.Is">
      <Member Id="M:Mono.CSharp.Is.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Is.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Is.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Is.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Is.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Is.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Is.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Is.ResolveProbeType(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Is.OperatorName" />
      <Member Id="P:Mono.CSharp.Is.Variable" />
    </Type>
    <Type Name="Mono.CSharp.Iterator" Id="T:Mono.CSharp.Iterator">
      <Member Id="F:Mono.CSharp.Iterator.IsEnumerable" />
      <Member Id="F:Mono.CSharp.Iterator.OriginalIteratorType" />
      <Member Id="F:Mono.CSharp.Iterator.OriginalMethod" />
      <Member Id="M:Mono.CSharp.Iterator.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.IMethodData,Mono.CSharp.TypeDefinition,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Iterator.CreateFinallyHost(Mono.CSharp.TryFinallyBlock)" />
      <Member Id="M:Mono.CSharp.Iterator.CreateIterator(Mono.CSharp.IMethodData,Mono.CSharp.TypeDefinition,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.Iterator.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Iterator.EmitDispose(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Iterator.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Iterator.EmitYieldBreak(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Iterator.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Iterator.InjectYield(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Int32,System.Boolean,System.Reflection.Emit.Label)" />
      <Member Id="P:Mono.CSharp.Iterator.Container" />
      <Member Id="P:Mono.CSharp.Iterator.ContainerType" />
      <Member Id="P:Mono.CSharp.Iterator.IsIterator" />
    </Type>
    <Type Name="Mono.CSharp.ITypeDefinition" Id="T:Mono.CSharp.ITypeDefinition">
      <Member Id="M:Mono.CSharp.ITypeDefinition.GetAttributeCoClass" />
      <Member Id="M:Mono.CSharp.ITypeDefinition.GetAttributeDefaultMember" />
      <Member Id="M:Mono.CSharp.ITypeDefinition.GetAttributeUsage(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.ITypeDefinition.IsInternalAsPublic(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.ITypeDefinition.LoadMembers(Mono.CSharp.TypeSpec,System.Boolean,Mono.CSharp.MemberCache@)" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.DeclaringAssembly" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.IsComImport" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.IsCyclicTypeForwarder" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.IsPartial" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.IsTypeForwarder" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.Namespace" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.TypeParameters" />
      <Member Id="P:Mono.CSharp.ITypeDefinition.TypeParametersCount" />
    </Type>
    <Type Name="Mono.CSharp.IVariableReference" Id="T:Mono.CSharp.IVariableReference">
      <Member Id="M:Mono.CSharp.IVariableReference.SetHasAddressTaken" />
      <Member Id="P:Mono.CSharp.IVariableReference.IsHoisted" />
      <Member Id="P:Mono.CSharp.IVariableReference.Name" />
      <Member Id="P:Mono.CSharp.IVariableReference.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.LabeledStatement" Id="T:Mono.CSharp.LabeledStatement">
      <Member Id="M:Mono.CSharp.LabeledStatement.#ctor(System.String,Mono.CSharp.Block,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.AddGotoReference(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.LabelTarget(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.LabeledStatement.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.LabeledStatement.Block" />
      <Member Id="P:Mono.CSharp.LabeledStatement.Name" />
    </Type>
    <Type Name="Mono.CSharp.LambdaExpression" Id="T:Mono.CSharp.LambdaExpression">
      <Member Id="M:Mono.CSharp.LambdaExpression.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LambdaExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.LambdaExpression.CompatibleMethodFactory(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.ParametersCompiled,Mono.CSharp.ParametersBlock)" />
      <Member Id="M:Mono.CSharp.LambdaExpression.CreateExpressionTree(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.LambdaExpression.DoResolveParameters(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.LambdaExpression.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.LambdaExpression.ResolveParameters(Mono.CSharp.ResolveContext,Mono.CSharp.TypeInferenceContext,Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.LambdaExpression.HasExplicitParameters" />
    </Type>
    <Type Name="Mono.CSharp.LanguageVersion" Id="T:Mono.CSharp.LanguageVersion">
      <Member Id="F:Mono.CSharp.LanguageVersion.Default" />
      <Member Id="F:Mono.CSharp.LanguageVersion.Experimental" />
      <Member Id="F:Mono.CSharp.LanguageVersion.ISO_1" />
      <Member Id="F:Mono.CSharp.LanguageVersion.ISO_2" />
      <Member Id="F:Mono.CSharp.LanguageVersion.V_3" />
      <Member Id="F:Mono.CSharp.LanguageVersion.V_4" />
      <Member Id="F:Mono.CSharp.LanguageVersion.V_5" />
      <Member Id="F:Mono.CSharp.LanguageVersion.V_6" />
    </Type>
    <Type Name="Mono.CSharp.LocalExitStatement" Id="T:Mono.CSharp.LocalExitStatement">
      <Member Id="F:Mono.CSharp.LocalExitStatement.enclosing_loop" />
      <Member Id="M:Mono.CSharp.LocalExitStatement.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocalExitStatement.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.LocalExitStatement.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.LocalExitStatement.IsLocalExit" />
    </Type>
    <Type Name="Mono.CSharp.LocalTemporary" Id="T:Mono.CSharp.LocalTemporary">
      <Member Id="M:Mono.CSharp.LocalTemporary.#ctor(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.#ctor(System.Reflection.Emit.LocalBuilder,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.LocalTemporary.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.Release(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LocalTemporary.Store(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.LocalTemporary.Builder" />
    </Type>
    <Type Name="Mono.CSharp.LocalVariable" Id="T:Mono.CSharp.LocalVariable">
      <Member Id="F:Mono.CSharp.LocalVariable.VariableInfo" />
      <Member Id="M:Mono.CSharp.LocalVariable.#ctor(Mono.CSharp.Block,System.String,Mono.CSharp.LocalVariable.Flags,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocalVariable.#ctor(Mono.CSharp.Block,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocalVariable.#ctor(Mono.CSharp.LocalVariable,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocalVariable.CreateBuilder(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LocalVariable.CreateCompilerGenerated(Mono.CSharp.TypeSpec,Mono.CSharp.Block,Mono.CSharp.Location,System.Boolean)" />
      <Member Id="M:Mono.CSharp.LocalVariable.CreateReferenceExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocalVariable.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LocalVariable.EmitAddressOf(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LocalVariable.EmitAssign(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LocalVariable.GetCompilerGeneratedName(Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.LocalVariable.GetReadOnlyContext" />
      <Member Id="M:Mono.CSharp.LocalVariable.IsAssigned(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.LocalVariable.IsThisAssigned(Mono.CSharp.FlowAnalysisContext,Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.LocalVariable.PrepareAssignmentAnalysis(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.LocalVariable.SetHasAddressTaken" />
      <Member Id="M:Mono.CSharp.LocalVariable.SetIsUsed" />
      <Member Id="M:Mono.CSharp.LocalVariable.ToString" />
      <Member Id="P:Mono.CSharp.LocalVariable.AddressTaken" />
      <Member Id="P:Mono.CSharp.LocalVariable.Block" />
      <Member Id="P:Mono.CSharp.LocalVariable.ConstantValue" />
      <Member Id="P:Mono.CSharp.LocalVariable.HoistedVariant" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsCompilerGenerated" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsConstant" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsDeclared" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsFixed" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsLocked" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsReadonly" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsThis" />
      <Member Id="P:Mono.CSharp.LocalVariable.IsUsed" />
      <Member Id="P:Mono.CSharp.LocalVariable.Location" />
      <Member Id="P:Mono.CSharp.LocalVariable.Mono#CSharp#INamedBlockVariable#IsParameter" />
      <Member Id="P:Mono.CSharp.LocalVariable.Name" />
      <Member Id="P:Mono.CSharp.LocalVariable.Type" />
    </Type>
    <Type Name="Mono.CSharp.LocalVariableReference" Id="T:Mono.CSharp.LocalVariableReference">
      <Member Id="F:Mono.CSharp.LocalVariableReference.local_info" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.#ctor(Mono.CSharp.LocalVariable,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.GetHashCode" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.GetHoistedVariable(Mono.CSharp.AnonymousExpression)" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.SetHasAddressTaken" />
      <Member Id="M:Mono.CSharp.LocalVariableReference.ToString" />
      <Member Id="P:Mono.CSharp.LocalVariableReference.IsFixed" />
      <Member Id="P:Mono.CSharp.LocalVariableReference.IsLockedByStatement" />
      <Member Id="P:Mono.CSharp.LocalVariableReference.IsRef" />
      <Member Id="P:Mono.CSharp.LocalVariableReference.Name" />
      <Member Id="P:Mono.CSharp.LocalVariableReference.Variable" />
      <Member Id="P:Mono.CSharp.LocalVariableReference.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.LocatedToken" Id="T:Mono.CSharp.LocatedToken">
      <Member Id="F:Mono.CSharp.LocatedToken.column" />
      <Member Id="F:Mono.CSharp.LocatedToken.file" />
      <Member Id="F:Mono.CSharp.LocatedToken.row" />
      <Member Id="F:Mono.CSharp.LocatedToken.value" />
      <Member Id="M:Mono.CSharp.LocatedToken.#ctor" />
      <Member Id="M:Mono.CSharp.LocatedToken.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocatedToken.ToString" />
      <Member Id="P:Mono.CSharp.LocatedToken.Location" />
      <Member Id="P:Mono.CSharp.LocatedToken.Value" />
    </Type>
    <Type Name="Mono.CSharp.Location" Id="T:Mono.CSharp.Location">
      <Member Id="F:Mono.CSharp.Location.InEmacs" />
      <Member Id="F:Mono.CSharp.Location.Null" />
      <Member Id="M:Mono.CSharp.Location.#ctor(Mono.CSharp.SourceFile,System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.Location.AddFile(Mono.CSharp.SourceFile)" />
      <Member Id="M:Mono.CSharp.Location.Equals(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Location.Initialize(System.Collections.Generic.List{Mono.CSharp.SourceFile})" />
      <Member Id="M:Mono.CSharp.Location.op_Subtraction(Mono.CSharp.Location,System.Int32)" />
      <Member Id="M:Mono.CSharp.Location.Reset" />
      <Member Id="M:Mono.CSharp.Location.ToString" />
      <Member Id="M:Mono.CSharp.Location.ToStringFullName" />
      <Member Id="P:Mono.CSharp.Location.Column" />
      <Member Id="P:Mono.CSharp.Location.File" />
      <Member Id="P:Mono.CSharp.Location.IsNull" />
      <Member Id="P:Mono.CSharp.Location.Name" />
      <Member Id="P:Mono.CSharp.Location.NameFullPath" />
      <Member Id="P:Mono.CSharp.Location.Row" />
      <Member Id="P:Mono.CSharp.Location.SourceFile" />
    </Type>
    <Type Name="Mono.CSharp.LocationsBag" Id="T:Mono.CSharp.LocationsBag">
      <Member Id="M:Mono.CSharp.LocationsBag.#ctor" />
      <Member Id="M:Mono.CSharp.LocationsBag.AddLocation(System.Object,Mono.CSharp.Location[])" />
      <Member Id="M:Mono.CSharp.LocationsBag.AddMember(Mono.CSharp.MemberCore,System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}})" />
      <Member Id="M:Mono.CSharp.LocationsBag.AddMember(Mono.CSharp.MemberCore,System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocationsBag.AddMember(Mono.CSharp.MemberCore,System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}},Mono.CSharp.Location[])" />
      <Member Id="M:Mono.CSharp.LocationsBag.AddMember(Mono.CSharp.MemberCore,System.Collections.Generic.IList{System.Tuple{Mono.CSharp.Modifiers,Mono.CSharp.Location}},System.Collections.Generic.List{Mono.CSharp.Location})" />
      <Member Id="M:Mono.CSharp.LocationsBag.AddStatement(System.Object,Mono.CSharp.Location[])" />
      <Member Id="M:Mono.CSharp.LocationsBag.AppendTo(System.Object,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LocationsBag.AppendToMember(Mono.CSharp.MemberCore,Mono.CSharp.Location[])" />
      <Member Id="M:Mono.CSharp.LocationsBag.GetLocations(System.Object)" />
      <Member Id="M:Mono.CSharp.LocationsBag.GetMemberLocation(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.LocationsBag.InsertLocation(System.Object,System.Int32,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.Lock" Id="T:Mono.CSharp.Lock">
      <Member Id="M:Mono.CSharp.Lock.#ctor(Mono.CSharp.Expression,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Lock.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Lock.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Lock.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Lock.EmitFinallyBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Lock.EmitTryBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Lock.EmitTryBodyPrepare(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Lock.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Lock.Expr" />
    </Type>
    <Type Name="Mono.CSharp.LongConstant" Id="T:Mono.CSharp.LongConstant">
      <Member Id="F:Mono.CSharp.LongConstant.Value" />
      <Member Id="M:Mono.CSharp.LongConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Int64,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LongConstant.#ctor(Mono.CSharp.TypeSpec,System.Int64,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LongConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.LongConstant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.LongConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.LongConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.LongConstant.GetValue" />
      <Member Id="M:Mono.CSharp.LongConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.LongConstant.Increment" />
      <Member Id="P:Mono.CSharp.LongConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.LongConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.LongConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.LongConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.LongLiteral" Id="T:Mono.CSharp.LongLiteral">
      <Member Id="M:Mono.CSharp.LongLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.Int64,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.LongLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.LongLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.LookupMode" Id="T:Mono.CSharp.LookupMode">
      <Member Id="F:Mono.CSharp.LookupMode.IgnoreAccessibility" />
      <Member Id="F:Mono.CSharp.LookupMode.Normal" />
      <Member Id="F:Mono.CSharp.LookupMode.Probing" />
    </Type>
    <Type Name="Mono.CSharp.LoopStatement" Id="T:Mono.CSharp.LoopStatement">
      <Member Id="M:Mono.CSharp.LoopStatement.#ctor(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.LoopStatement.AddEndDefiniteAssignment(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.LoopStatement.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.LoopStatement.SetEndReachable" />
      <Member Id="M:Mono.CSharp.LoopStatement.SetIteratorReachable" />
      <Member Id="P:Mono.CSharp.LoopStatement.Statement" />
    </Type>
    <Type Name="Mono.CSharp.MakeRefExpr" Id="T:Mono.CSharp.MakeRefExpr">
      <Member Id="M:Mono.CSharp.MakeRefExpr.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MakeRefExpr.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.MakeRefExpr.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.MakeRefExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MakeRefExpr.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.MemberAccess" Id="T:Mono.CSharp.MemberAccess">
      <Member Id="F:Mono.CSharp.MemberAccess.expr" />
      <Member Id="M:Mono.CSharp.MemberAccess.#ctor(Mono.CSharp.Expression,System.String)" />
      <Member Id="M:Mono.CSharp.MemberAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberAccess.#ctor(Mono.CSharp.Expression,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberAccess.#ctor(Mono.CSharp.Expression,System.String,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberAccess.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.MemberAccess.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.MemberAccess.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MemberAccess.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.MemberAccess.Error_IdentifierNotFound(Mono.CSharp.IMemberContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberAccess.Error_InvalidExpressionStatement(Mono.CSharp.Report,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberAccess.Error_OperatorCannotBeApplied(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberAccess.Error_TypeDoesNotContainDefinition(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.String)" />
      <Member Id="M:Mono.CSharp.MemberAccess.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.MemberAccess.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.MemberAccess.IsValidDotExpression(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberAccess.LookupNameExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Expression.MemberLookupRestrictions)" />
      <Member Id="M:Mono.CSharp.MemberAccess.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="P:Mono.CSharp.MemberAccess.LeftExpression" />
      <Member Id="P:Mono.CSharp.MemberAccess.StartLocation" />
    </Type>
    <Type Name="Mono.CSharp.MemberBase" Id="T:Mono.CSharp.MemberBase">
      <Member Id="F:Mono.CSharp.MemberBase.member_type" />
      <Member Id="F:Mono.CSharp.MemberBase.Parent" />
      <Member Id="F:Mono.CSharp.MemberBase.type_expr" />
      <Member Id="M:Mono.CSharp.MemberBase.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.MemberBase.CheckBase" />
      <Member Id="M:Mono.CSharp.MemberBase.Define" />
      <Member Id="M:Mono.CSharp.MemberBase.DoMemberTypeDependentChecks" />
      <Member Id="M:Mono.CSharp.MemberBase.DoMemberTypeIndependentChecks" />
      <Member Id="M:Mono.CSharp.MemberBase.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.MemberBase.IsTypePermitted" />
      <Member Id="M:Mono.CSharp.MemberBase.PrepareEmit" />
      <Member Id="M:Mono.CSharp.MemberBase.ResolveMemberType" />
      <Member Id="P:Mono.CSharp.MemberBase.MemberType" />
      <Member Id="P:Mono.CSharp.MemberBase.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.MemberCache" Id="T:Mono.CSharp.MemberCache">
      <Member Id="F:Mono.CSharp.MemberCache.Empty" />
      <Member Id="F:Mono.CSharp.MemberCache.IndexerNameAlias" />
      <Member Id="M:Mono.CSharp.MemberCache.#ctor" />
      <Member Id="M:Mono.CSharp.MemberCache.#ctor(Mono.CSharp.MemberCache)" />
      <Member Id="M:Mono.CSharp.MemberCache.#ctor(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.MemberCache.#ctor(System.Int32)" />
      <Member Id="M:Mono.CSharp.MemberCache.AddBaseType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.AddInterface(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.AddMember(Mono.CSharp.InterfaceMemberBase,System.String,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.AddMember(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.AddMemberImported(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.CheckExistingMembersOverloads(Mono.CSharp.MemberCore,Mono.CSharp.AParametersCollection)" />
      <Member Id="M:Mono.CSharp.MemberCache.CheckExistingMembersOverloads(Mono.CSharp.MemberCore,System.String,Mono.CSharp.AParametersCollection)" />
      <Member Id="M:Mono.CSharp.MemberCache.FindBaseMember(Mono.CSharp.MemberCore,Mono.CSharp.MemberSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.MemberCache.FindExtensionMethods(Mono.CSharp.IMemberContext,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.MemberCache.FindInterfaceMembers(Mono.CSharp.TypeParameterSpec,System.String)" />
      <Member Id="M:Mono.CSharp.MemberCache.FindMember(Mono.CSharp.TypeSpec,Mono.CSharp.MemberFilter,Mono.CSharp.BindingRestriction)" />
      <Member Id="M:Mono.CSharp.MemberCache.FindMembers(Mono.CSharp.TypeSpec,System.String,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MemberCache.FindNestedType(Mono.CSharp.TypeSpec,System.String,System.Int32,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetAllFieldsForDefiniteAssignment(Mono.CSharp.TypeSpec,Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetCompletitionMembers(Mono.CSharp.IMemberContext,Mono.CSharp.TypeSpec,System.String)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetDeclaredNestedTypes(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetInterfaceMethods(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetMember``1(Mono.CSharp.TypeSpec,``0)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetNotImplementedAbstractMethods(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.GetUserOperator(Mono.CSharp.TypeSpec,Mono.CSharp.Operator.OpType,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MemberCache.InflateMembers(Mono.CSharp.MemberCache,Mono.CSharp.TypeSpec,Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.MemberCache.InflateTypes(Mono.CSharp.MemberCache,Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.MemberCache.RemoveHiddenMembers(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCache.VerifyClsCompliance(Mono.CSharp.TypeSpec,Mono.CSharp.Report)" />
    </Type>
    <Type Name="Mono.CSharp.MemberCore" Id="T:Mono.CSharp.MemberCore">
      <Member Id="F:Mono.CSharp.MemberCore.comment" />
      <Member Id="F:Mono.CSharp.MemberCore.Parent" />
      <Member Id="M:Mono.CSharp.MemberCore.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.MemberCore.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.MemberCore.CheckAbstractAndExtern(System.Boolean)" />
      <Member Id="M:Mono.CSharp.MemberCore.CheckProtectedModifier" />
      <Member Id="M:Mono.CSharp.MemberCore.ConditionalConditions" />
      <Member Id="M:Mono.CSharp.MemberCore.Define" />
      <Member Id="M:Mono.CSharp.MemberCore.Emit" />
      <Member Id="M:Mono.CSharp.MemberCore.EnableOverloadChecks(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.MemberCore.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.MemberCore.GetCallerMemberName" />
      <Member Id="M:Mono.CSharp.MemberCore.GetCompletionStartingWith(System.String,System.Collections.Generic.List{System.String})" />
      <Member Id="M:Mono.CSharp.MemberCore.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.MemberCore.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.MemberCore.IsAccessibleAs(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberCore.IsClsComplianceRequired" />
      <Member Id="M:Mono.CSharp.MemberCore.IsExposedFromAssembly" />
      <Member Id="M:Mono.CSharp.MemberCore.LookupExtensionMethod(System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.MemberCore.LookupNamespaceAlias(System.String)" />
      <Member Id="M:Mono.CSharp.MemberCore.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberCore.SetConstraints(System.Collections.Generic.List{Mono.CSharp.Constraints})" />
      <Member Id="M:Mono.CSharp.MemberCore.SetIsAssigned" />
      <Member Id="M:Mono.CSharp.MemberCore.SetIsUsed" />
      <Member Id="M:Mono.CSharp.MemberCore.SetMemberName(Mono.CSharp.MemberName)" />
      <Member Id="M:Mono.CSharp.MemberCore.VerifyClsCompliance" />
      <Member Id="M:Mono.CSharp.MemberCore.Warning_IdentifierNotCompliant" />
      <Member Id="M:Mono.CSharp.MemberCore.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.MemberCore.CLSAttributeValue" />
      <Member Id="P:Mono.CSharp.MemberCore.Compiler" />
      <Member Id="P:Mono.CSharp.MemberCore.CurrentMemberDefinition" />
      <Member Id="P:Mono.CSharp.MemberCore.CurrentType" />
      <Member Id="P:Mono.CSharp.MemberCore.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.MemberCore.DocComment" />
      <Member Id="P:Mono.CSharp.MemberCore.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.MemberCore.HasClsCompliantAttribute" />
      <Member Id="P:Mono.CSharp.MemberCore.IsAvailableForReuse" />
      <Member Id="P:Mono.CSharp.MemberCore.IsCompilerGenerated" />
      <Member Id="P:Mono.CSharp.MemberCore.IsImported" />
      <Member Id="P:Mono.CSharp.MemberCore.IsObsolete" />
      <Member Id="P:Mono.CSharp.MemberCore.IsStatic" />
      <Member Id="P:Mono.CSharp.MemberCore.IsUnsafe" />
      <Member Id="P:Mono.CSharp.MemberCore.IsUsed" />
      <Member Id="P:Mono.CSharp.MemberCore.Location" />
      <Member Id="P:Mono.CSharp.MemberCore.MemberName" />
      <Member Id="P:Mono.CSharp.MemberCore.ModFlags" />
      <Member Id="P:Mono.CSharp.MemberCore.Module" />
      <Member Id="P:Mono.CSharp.MemberCore.Mono#CSharp#IMemberDefinition#Name" />
      <Member Id="P:Mono.CSharp.MemberCore.Report" />
    </Type>
    <Type Name="Mono.CSharp.MemberExpr" Id="T:Mono.CSharp.MemberExpr">
      <Member Id="F:Mono.CSharp.MemberExpr.conditional_access_receiver" />
      <Member Id="F:Mono.CSharp.MemberExpr.InstanceExpression" />
      <Member Id="M:Mono.CSharp.MemberExpr.#ctor" />
      <Member Id="M:Mono.CSharp.MemberExpr.CandidateToBaseOverride(Mono.CSharp.ResolveContext,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.MemberExpr.CheckProtectedMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberExpr.CheckProtectedMemberAccess``1(Mono.CSharp.ResolveContext,``0,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberExpr.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.MemberExpr.DoBestMemberChecks``1(Mono.CSharp.ResolveContext,``0)" />
      <Member Id="M:Mono.CSharp.MemberExpr.EmitInstance(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MemberExpr.Error_CannotCallAbstractBase(Mono.CSharp.ResolveContext,System.String)" />
      <Member Id="M:Mono.CSharp.MemberExpr.Error_ProtectedMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberExpr.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.MemberExpr.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.MemberExpr.Mono#CSharp#OverloadResolver#IInstanceQualifier#CheckProtectedMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberExpr.ResolveConditionalAccessReceiver(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MemberExpr.ResolveInstanceExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.MemberExpr.ResolveMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.SimpleName)" />
      <Member Id="M:Mono.CSharp.MemberExpr.ResolveNameOf(Mono.CSharp.ResolveContext,Mono.CSharp.ATypeNameExpression)" />
      <Member Id="M:Mono.CSharp.MemberExpr.SetTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeArguments)" />
      <Member Id="P:Mono.CSharp.MemberExpr.ConditionalAccess" />
      <Member Id="P:Mono.CSharp.MemberExpr.DeclaringType" />
      <Member Id="P:Mono.CSharp.MemberExpr.IsBase" />
      <Member Id="P:Mono.CSharp.MemberExpr.IsInstance" />
      <Member Id="P:Mono.CSharp.MemberExpr.IsStatic" />
      <Member Id="P:Mono.CSharp.MemberExpr.KindName" />
      <Member Id="P:Mono.CSharp.MemberExpr.Mono#CSharp#OverloadResolver#IInstanceQualifier#InstanceType" />
      <Member Id="P:Mono.CSharp.MemberExpr.Name" />
    </Type>
    <Type Name="Mono.CSharp.MemberFilter" Id="T:Mono.CSharp.MemberFilter">
      <Member Id="F:Mono.CSharp.MemberFilter.Arity" />
      <Member Id="F:Mono.CSharp.MemberFilter.Kind" />
      <Member Id="F:Mono.CSharp.MemberFilter.MemberType" />
      <Member Id="F:Mono.CSharp.MemberFilter.Name" />
      <Member Id="F:Mono.CSharp.MemberFilter.Parameters" />
      <Member Id="M:Mono.CSharp.MemberFilter.#ctor(Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.MemberFilter.#ctor(System.String,System.Int32,Mono.CSharp.MemberKind,Mono.CSharp.AParametersCollection,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberFilter.Constructor(Mono.CSharp.AParametersCollection)" />
      <Member Id="M:Mono.CSharp.MemberFilter.Equals(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberFilter.Field(System.String,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberFilter.Method(System.String,System.Int32,Mono.CSharp.AParametersCollection,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MemberFilter.Property(System.String,Mono.CSharp.TypeSpec)" />
    </Type>
    <Type Name="Mono.CSharp.MemberKind" Id="T:Mono.CSharp.MemberKind">
      <Member Id="F:Mono.CSharp.MemberKind.ArrayType" />
      <Member Id="F:Mono.CSharp.MemberKind.Class" />
      <Member Id="F:Mono.CSharp.MemberKind.Constructor" />
      <Member Id="F:Mono.CSharp.MemberKind.Delegate" />
      <Member Id="F:Mono.CSharp.MemberKind.Destructor" />
      <Member Id="F:Mono.CSharp.MemberKind.Enum" />
      <Member Id="F:Mono.CSharp.MemberKind.Event" />
      <Member Id="F:Mono.CSharp.MemberKind.Field" />
      <Member Id="F:Mono.CSharp.MemberKind.GenericMask" />
      <Member Id="F:Mono.CSharp.MemberKind.Indexer" />
      <Member Id="F:Mono.CSharp.MemberKind.Interface" />
      <Member Id="F:Mono.CSharp.MemberKind.InternalCompilerType" />
      <Member Id="F:Mono.CSharp.MemberKind.MaskType" />
      <Member Id="F:Mono.CSharp.MemberKind.Method" />
      <Member Id="F:Mono.CSharp.MemberKind.MissingType" />
      <Member Id="F:Mono.CSharp.MemberKind.Namespace" />
      <Member Id="F:Mono.CSharp.MemberKind.NestedMask" />
      <Member Id="F:Mono.CSharp.MemberKind.Operator" />
      <Member Id="F:Mono.CSharp.MemberKind.PointerType" />
      <Member Id="F:Mono.CSharp.MemberKind.Property" />
      <Member Id="F:Mono.CSharp.MemberKind.Struct" />
      <Member Id="F:Mono.CSharp.MemberKind.TypeParameter" />
      <Member Id="F:Mono.CSharp.MemberKind.Void" />
    </Type>
    <Type Name="Mono.CSharp.MemberName" Id="T:Mono.CSharp.MemberName">
      <Member Id="F:Mono.CSharp.MemberName.ExplicitInterface" />
      <Member Id="F:Mono.CSharp.MemberName.Left" />
      <Member Id="F:Mono.CSharp.MemberName.Location" />
      <Member Id="F:Mono.CSharp.MemberName.Name" />
      <Member Id="F:Mono.CSharp.MemberName.Null" />
      <Member Id="F:Mono.CSharp.MemberName.TypeParameters" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(Mono.CSharp.MemberName,Mono.CSharp.MemberName)" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(Mono.CSharp.MemberName,System.String,Mono.CSharp.FullNamedExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(Mono.CSharp.MemberName,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(System.String)" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(System.String,Mono.CSharp.TypeParameters,Mono.CSharp.FullNamedExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberName.#ctor(System.String,Mono.CSharp.TypeParameters,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberName.CreateMetadataName(System.Text.StringBuilder)" />
      <Member Id="M:Mono.CSharp.MemberName.Equals(Mono.CSharp.MemberName)" />
      <Member Id="M:Mono.CSharp.MemberName.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.MemberName.GetHashCode" />
      <Member Id="M:Mono.CSharp.MemberName.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.MemberName.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.MemberName.MakeName(System.String,Mono.CSharp.TypeParameters)" />
      <Member Id="P:Mono.CSharp.MemberName.Arity" />
      <Member Id="P:Mono.CSharp.MemberName.Basename" />
      <Member Id="P:Mono.CSharp.MemberName.IsGeneric" />
    </Type>
    <Type Name="Mono.CSharp.MemberSpec" Id="T:Mono.CSharp.MemberSpec">
      <Member Id="F:Mono.CSharp.MemberSpec.declaringType" />
      <Member Id="F:Mono.CSharp.MemberSpec.definition" />
      <Member Id="F:Mono.CSharp.MemberSpec.Kind" />
      <Member Id="F:Mono.CSharp.MemberSpec.modifiers" />
      <Member Id="F:Mono.CSharp.MemberSpec.SharedStateFlags" />
      <Member Id="F:Mono.CSharp.MemberSpec.state" />
      <Member Id="M:Mono.CSharp.MemberSpec.#ctor(Mono.CSharp.MemberKind,Mono.CSharp.TypeSpec,Mono.CSharp.IMemberDefinition,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.MemberSpec.CheckObsoleteness(Mono.CSharp.IMemberContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MemberSpec.GetAttributeObsolete" />
      <Member Id="M:Mono.CSharp.MemberSpec.GetMissingDependencies" />
      <Member Id="M:Mono.CSharp.MemberSpec.GetMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberSpec.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.MemberSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.MemberSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.MemberSpec.IsAccessible(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.MemberSpec.IsCLSCompliant" />
      <Member Id="M:Mono.CSharp.MemberSpec.IsConditionallyExcluded(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.MemberSpec.IsNotCLSCompliant(System.Boolean@)" />
      <Member Id="M:Mono.CSharp.MemberSpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MemberSpec.ToString" />
      <Member Id="P:Mono.CSharp.MemberSpec.Arity" />
      <Member Id="P:Mono.CSharp.MemberSpec.DeclaringType" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsAbstract" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsAccessor" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsGeneric" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsNotCSharpCompatible" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsPrivate" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsPublic" />
      <Member Id="P:Mono.CSharp.MemberSpec.IsStatic" />
      <Member Id="P:Mono.CSharp.MemberSpec.MemberDefinition" />
      <Member Id="P:Mono.CSharp.MemberSpec.Modifiers" />
      <Member Id="P:Mono.CSharp.MemberSpec.Name" />
    </Type>
    <Type Name="Mono.CSharp.MetadataImporter" Id="T:Mono.CSharp.MetadataImporter">
      <Member Id="F:Mono.CSharp.MetadataImporter.assembly_2_definition" />
      <Member Id="F:Mono.CSharp.MetadataImporter.compiled_types" />
      <Member Id="F:Mono.CSharp.MetadataImporter.CompilerServicesNamespace" />
      <Member Id="F:Mono.CSharp.MetadataImporter.import_cache" />
      <Member Id="F:Mono.CSharp.MetadataImporter.module" />
      <Member Id="M:Mono.CSharp.MetadataImporter.#ctor(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.AddCompiledType(System.Reflection.Emit.TypeBuilder,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateEvent(System.Reflection.EventInfo,Mono.CSharp.TypeSpec,Mono.CSharp.MethodSpec,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateField(System.Reflection.FieldInfo,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateMethod(System.Reflection.MethodBase,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateNestedType(System.Type,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateProperty(System.Reflection.PropertyInfo,Mono.CSharp.TypeSpec,Mono.CSharp.MethodSpec,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateType(System.Type)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.CreateType(System.Type,Mono.CSharp.TypeSpec,Mono.CSharp.MetadataImporter.DynamicTypeReader,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.DetermineKindFromBaseType(System.Type)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.GetAssemblyDefinition(System.Reflection.Assembly)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.GetImportedAssemblyDefinition(System.Reflection.AssemblyName)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.HasAttribute(System.Collections.Generic.IList{System.Reflection.CustomAttributeData},System.String,System.String)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.HasVolatileModifier(System.Type[])" />
      <Member Id="M:Mono.CSharp.MetadataImporter.ImportType(System.Type)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.ImportTypeBase(System.Type)" />
      <Member Id="M:Mono.CSharp.MetadataImporter.ImportTypes(System.Type[],Mono.CSharp.Namespace,System.Boolean)" />
      <Member Id="P:Mono.CSharp.MetadataImporter.Assemblies" />
      <Member Id="P:Mono.CSharp.MetadataImporter.IgnoreCompilerGeneratedField" />
      <Member Id="P:Mono.CSharp.MetadataImporter.IgnorePrivateMembers" />
    </Type>
    <Type Name="Mono.CSharp.Method" Id="T:Mono.CSharp.Method">
      <Member Id="M:Mono.CSharp.Method.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Method.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Method.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Method.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Method.CheckImplementingMethodConstraints(Mono.CSharp.TypeContainer,Mono.CSharp.MethodSpec,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.Method.Create(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.ParametersCompiled,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Method.Define" />
      <Member Id="M:Mono.CSharp.Method.DefineTypeParameters" />
      <Member Id="M:Mono.CSharp.Method.Emit" />
      <Member Id="M:Mono.CSharp.Method.EnableOverloadChecks(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.Method.Error1599(Mono.CSharp.Location,Mono.CSharp.TypeSpec,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Method.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Method.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Method.PrepareEmit" />
      <Member Id="M:Mono.CSharp.Method.ResolveMemberType" />
      <Member Id="M:Mono.CSharp.Method.SetPartialDefinition(Mono.CSharp.Method)" />
      <Member Id="P:Mono.CSharp.Method.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.Method.TypeParameters" />
      <Member Id="P:Mono.CSharp.Method.TypeParametersCount" />
    </Type>
    <Type Name="Mono.CSharp.MethodCore" Id="T:Mono.CSharp.MethodCore">
      <Member Id="F:Mono.CSharp.MethodCore.block" />
      <Member Id="F:Mono.CSharp.MethodCore.parameters" />
      <Member Id="F:Mono.CSharp.MethodCore.spec" />
      <Member Id="M:Mono.CSharp.MethodCore.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.MethodCore.CheckBase" />
      <Member Id="M:Mono.CSharp.MethodCore.CheckOverrideAgainstBase(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MethodCore.Emit" />
      <Member Id="M:Mono.CSharp.MethodCore.EnableOverloadChecks(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.MethodCore.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.MethodCore.PrepareEmit" />
      <Member Id="M:Mono.CSharp.MethodCore.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.MethodCore.Block" />
      <Member Id="P:Mono.CSharp.MethodCore.CallingConventions" />
      <Member Id="P:Mono.CSharp.MethodCore.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.MethodCore.ExpectedMemberTypeVariance" />
      <Member Id="P:Mono.CSharp.MethodCore.Mono#CSharp#IParametersMember#Parameters" />
      <Member Id="P:Mono.CSharp.MethodCore.ParameterInfo" />
      <Member Id="P:Mono.CSharp.MethodCore.ParameterTypes" />
      <Member Id="P:Mono.CSharp.MethodCore.Spec" />
    </Type>
    <Type Name="Mono.CSharp.MethodData" Id="T:Mono.CSharp.MethodData">
      <Member Id="F:Mono.CSharp.MethodData.declaring_type" />
      <Member Id="F:Mono.CSharp.MethodData.flags" />
      <Member Id="F:Mono.CSharp.MethodData.implementing" />
      <Member Id="F:Mono.CSharp.MethodData.member" />
      <Member Id="F:Mono.CSharp.MethodData.method" />
      <Member Id="F:Mono.CSharp.MethodData.modifiers" />
      <Member Id="F:Mono.CSharp.MethodData.parent_method" />
      <Member Id="M:Mono.CSharp.MethodData.#ctor(Mono.CSharp.InterfaceMemberBase,Mono.CSharp.Modifiers,System.Reflection.MethodAttributes,Mono.CSharp.IMethodData)" />
      <Member Id="M:Mono.CSharp.MethodData.#ctor(Mono.CSharp.InterfaceMemberBase,Mono.CSharp.Modifiers,System.Reflection.MethodAttributes,Mono.CSharp.IMethodData,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.MethodData.Define(Mono.CSharp.TypeDefinition,System.String)" />
      <Member Id="M:Mono.CSharp.MethodData.DefineMethodBuilder(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.MethodData.DefineMethodBuilder(Mono.CSharp.TypeDefinition,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.MethodData.Emit(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.MethodData.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.MethodData.DeclaringType" />
      <Member Id="P:Mono.CSharp.MethodData.MetadataName" />
      <Member Id="P:Mono.CSharp.MethodData.MethodBuilder" />
    </Type>
    <Type Name="Mono.CSharp.MethodGroupExpr" Id="T:Mono.CSharp.MethodGroupExpr">
      <Member Id="F:Mono.CSharp.MethodGroupExpr.Methods" />
      <Member Id="F:Mono.CSharp.MethodGroupExpr.queried_type" />
      <Member Id="F:Mono.CSharp.MethodGroupExpr.type_arguments" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.#ctor(Mono.CSharp.MethodSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.#ctor(System.Collections.Generic.IList{Mono.CSharp.MemberSpec},Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.CreatePredefined(Mono.CSharp.MethodSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.EmitCall(Mono.CSharp.EmitContext,Mono.CSharp.Arguments,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.EmitCall(Mono.CSharp.EmitContext,Mono.CSharp.Arguments,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.GetBaseMembers(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.GetOverrideMemberParameters(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.HasAccessibleCandidate(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.IsExtensionMethodArgument(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.LookupExtensionMethod(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.OverloadResolve(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments@,Mono.CSharp.OverloadResolver.IErrorHandler,Mono.CSharp.OverloadResolver.Restrictions)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.ResolveMemberAccess(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.SimpleName)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.ResolveNameOf(Mono.CSharp.ResolveContext,Mono.CSharp.ATypeNameExpression)" />
      <Member Id="M:Mono.CSharp.MethodGroupExpr.SetTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeArguments)" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.BestCandidate" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.BestCandidateReturnType" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.Candidates" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.DeclaringType" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.IsConditionallyExcluded" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.IsInstance" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.IsStatic" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.KindName" />
      <Member Id="P:Mono.CSharp.MethodGroupExpr.Name" />
    </Type>
    <Type Name="Mono.CSharp.MethodOrOperator" Id="T:Mono.CSharp.MethodOrOperator">
      <Member Id="F:Mono.CSharp.MethodOrOperator.MethodData" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.CheckForDuplications" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.ConditionalConditions" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.CreateEmitContext(System.Reflection.Emit.ILGenerator,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.Define" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.DoMemberTypeDependentChecks" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.DoMemberTypeIndependentChecks" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.Emit" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.Error_ConditionalAttributeIsNotValid" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.PrepareEmit" />
      <Member Id="M:Mono.CSharp.MethodOrOperator.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.AttributeTargets" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.IsPartialDefinition" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.IsPartialImplementation" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.MethodBuilder" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.MethodName" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.Mono#CSharp#IMethodData#IsAccessor" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.Mono#CSharp#IMethodDefinition#Metadata" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.ReturnType" />
      <Member Id="P:Mono.CSharp.MethodOrOperator.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.MethodSpec" Id="T:Mono.CSharp.MethodSpec">
      <Member Id="F:Mono.CSharp.MethodSpec.Excluded" />
      <Member Id="M:Mono.CSharp.MethodSpec.#ctor(Mono.CSharp.MemberKind,Mono.CSharp.TypeSpec,Mono.CSharp.IMethodDefinition,Mono.CSharp.TypeSpec,Mono.CSharp.AParametersCollection,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.MethodSpec.GetGenericMethodDefinition" />
      <Member Id="M:Mono.CSharp.MethodSpec.GetMetaInfo" />
      <Member Id="M:Mono.CSharp.MethodSpec.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.MethodSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.MethodSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.MethodSpec.MakeGenericMethod(Mono.CSharp.IMemberContext,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.MethodSpec.Mutate(Mono.CSharp.TypeParameterMutator)" />
      <Member Id="M:Mono.CSharp.MethodSpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.MethodSpec.Arity" />
      <Member Id="P:Mono.CSharp.MethodSpec.Constraints" />
      <Member Id="P:Mono.CSharp.MethodSpec.GenericDefinition" />
      <Member Id="P:Mono.CSharp.MethodSpec.IsAsync" />
      <Member Id="P:Mono.CSharp.MethodSpec.IsConstructor" />
      <Member Id="P:Mono.CSharp.MethodSpec.IsExtensionMethod" />
      <Member Id="P:Mono.CSharp.MethodSpec.IsReservedMethod" />
      <Member Id="P:Mono.CSharp.MethodSpec.IsSealed" />
      <Member Id="P:Mono.CSharp.MethodSpec.IsVirtual" />
      <Member Id="P:Mono.CSharp.MethodSpec.MemberDefinition" />
      <Member Id="P:Mono.CSharp.MethodSpec.Mono#CSharp#IInterfaceMemberSpec#MemberType" />
      <Member Id="P:Mono.CSharp.MethodSpec.Parameters" />
      <Member Id="P:Mono.CSharp.MethodSpec.ReturnType" />
      <Member Id="P:Mono.CSharp.MethodSpec.TypeArguments" />
    </Type>
    <Type Name="Mono.CSharp.MissingTypeSpecReference" Id="T:Mono.CSharp.MissingTypeSpecReference">
      <Member Id="M:Mono.CSharp.MissingTypeSpecReference.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.MissingTypeSpecReference.Caller" />
      <Member Id="P:Mono.CSharp.MissingTypeSpecReference.Type" />
    </Type>
    <Type Name="Mono.CSharp.Modifiers" Id="T:Mono.CSharp.Modifiers">
      <Member Id="F:Mono.CSharp.Modifiers.ABSTRACT" />
      <Member Id="F:Mono.CSharp.Modifiers.AccessibilityMask" />
      <Member Id="F:Mono.CSharp.Modifiers.AllowedExplicitImplFlags" />
      <Member Id="F:Mono.CSharp.Modifiers.ASYNC" />
      <Member Id="F:Mono.CSharp.Modifiers.AutoProperty" />
      <Member Id="F:Mono.CSharp.Modifiers.BACKING_FIELD" />
      <Member Id="F:Mono.CSharp.Modifiers.COMPILER_GENERATED" />
      <Member Id="F:Mono.CSharp.Modifiers.DEBUGGER_HIDDEN" />
      <Member Id="F:Mono.CSharp.Modifiers.DEBUGGER_STEP_THROUGH" />
      <Member Id="F:Mono.CSharp.Modifiers.DEFAULT_ACCESS_MODIFIER" />
      <Member Id="F:Mono.CSharp.Modifiers.EXTERN" />
      <Member Id="F:Mono.CSharp.Modifiers.INTERNAL" />
      <Member Id="F:Mono.CSharp.Modifiers.METHOD_EXTENSION" />
      <Member Id="F:Mono.CSharp.Modifiers.NEW" />
      <Member Id="F:Mono.CSharp.Modifiers.OVERRIDE" />
      <Member Id="F:Mono.CSharp.Modifiers.PARTIAL" />
      <Member Id="F:Mono.CSharp.Modifiers.PRIVATE" />
      <Member Id="F:Mono.CSharp.Modifiers.PROPERTY_CUSTOM" />
      <Member Id="F:Mono.CSharp.Modifiers.PROTECTED" />
      <Member Id="F:Mono.CSharp.Modifiers.PUBLIC" />
      <Member Id="F:Mono.CSharp.Modifiers.READONLY" />
      <Member Id="F:Mono.CSharp.Modifiers.SEALED" />
      <Member Id="F:Mono.CSharp.Modifiers.STATIC" />
      <Member Id="F:Mono.CSharp.Modifiers.TOP" />
      <Member Id="F:Mono.CSharp.Modifiers.UNSAFE" />
      <Member Id="F:Mono.CSharp.Modifiers.VIRTUAL" />
      <Member Id="F:Mono.CSharp.Modifiers.VOLATILE" />
    </Type>
    <Type Name="Mono.CSharp.ModuleContainer" Id="T:Mono.CSharp.ModuleContainer">
      <Member Id="F:Mono.CSharp.ModuleContainer.DefaultCharSet" />
      <Member Id="F:Mono.CSharp.ModuleContainer.DefaultCharSetType" />
      <Member Id="F:Mono.CSharp.ModuleContainer.OperatorsBinaryEqualityLifted" />
      <Member Id="F:Mono.CSharp.ModuleContainer.OperatorsBinaryLifted" />
      <Member Id="M:Mono.CSharp.ModuleContainer.#ctor(Mono.CSharp.CompilerContext)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.AddAnonymousType(Mono.CSharp.AnonymousTypeClass)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.AddAttribute(Mono.CSharp.Attribute,Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.AddTypeContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.CloseContainer" />
      <Member Id="M:Mono.CSharp.ModuleContainer.Create(Mono.CSharp.AssemblyDefinition,System.Reflection.Emit.ModuleBuilder)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.CreateBuilder(System.String,System.Reflection.TypeAttributes,System.Int32)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.CreatePatterMatchingHelper" />
      <Member Id="M:Mono.CSharp.ModuleContainer.CreateRootNamespace(System.String)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.Define" />
      <Member Id="M:Mono.CSharp.ModuleContainer.DefineContainer" />
      <Member Id="M:Mono.CSharp.ModuleContainer.EmitContainer" />
      <Member Id="M:Mono.CSharp.ModuleContainer.EnableRedefinition" />
      <Member Id="M:Mono.CSharp.ModuleContainer.GetAnonymousType(System.Collections.Generic.IList{Mono.CSharp.AnonymousTypeParameter})" />
      <Member Id="M:Mono.CSharp.ModuleContainer.GetAwaiter(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.GetCompletionStartingWith(System.String,System.Collections.Generic.List{System.String})" />
      <Member Id="M:Mono.CSharp.ModuleContainer.GetPredefinedEnumAritmeticOperators(Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.GetRootNamespace(System.String)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ModuleContainer.InitializePredefinedTypes" />
      <Member Id="M:Mono.CSharp.ModuleContainer.IsClsComplianceRequired" />
      <Member Id="M:Mono.CSharp.ModuleContainer.LoadGetResourceStrings(System.Collections.Generic.List{System.String})" />
      <Member Id="M:Mono.CSharp.ModuleContainer.ResolveAssemblyAttribute(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.ModuleContainer.SetDeclaringAssembly(Mono.CSharp.AssemblyDefinition)" />
      <Member Id="P:Mono.CSharp.ModuleContainer.AttributeTargets" />
      <Member Id="P:Mono.CSharp.ModuleContainer.Builder" />
      <Member Id="P:Mono.CSharp.ModuleContainer.Compiler" />
      <Member Id="P:Mono.CSharp.ModuleContainer.CounterAnonymousTypes" />
      <Member Id="P:Mono.CSharp.ModuleContainer.DeclaringAssembly" />
      <Member Id="P:Mono.CSharp.ModuleContainer.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.ModuleContainer.Evaluator" />
      <Member Id="P:Mono.CSharp.ModuleContainer.GetResourceStrings" />
      <Member Id="P:Mono.CSharp.ModuleContainer.GlobalRootNamespace" />
      <Member Id="P:Mono.CSharp.ModuleContainer.HasDefaultCharSet" />
      <Member Id="P:Mono.CSharp.ModuleContainer.HasExtensionMethod" />
      <Member Id="P:Mono.CSharp.ModuleContainer.HasTypesFullyDefined" />
      <Member Id="P:Mono.CSharp.ModuleContainer.Module" />
      <Member Id="P:Mono.CSharp.ModuleContainer.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.MovableArgument" Id="T:Mono.CSharp.MovableArgument">
      <Member Id="M:Mono.CSharp.MovableArgument.#ctor(Mono.CSharp.Argument)" />
      <Member Id="M:Mono.CSharp.MovableArgument.#ctor(Mono.CSharp.Expression,Mono.CSharp.Argument.AType)" />
      <Member Id="M:Mono.CSharp.MovableArgument.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.MovableArgument.EmitToVariable(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.NamedArgument" Id="T:Mono.CSharp.NamedArgument">
      <Member Id="F:Mono.CSharp.NamedArgument.Name" />
      <Member Id="M:Mono.CSharp.NamedArgument.#ctor(System.String,Mono.CSharp.Location,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.NamedArgument.#ctor(System.String,Mono.CSharp.Location,Mono.CSharp.Expression,Mono.CSharp.Argument.AType)" />
      <Member Id="M:Mono.CSharp.NamedArgument.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.NamedArgument.Location" />
    </Type>
    <Type Name="Mono.CSharp.Namespace" Id="T:Mono.CSharp.Namespace">
      <Member Id="F:Mono.CSharp.Namespace.namespaces" />
      <Member Id="F:Mono.CSharp.Namespace.types" />
      <Member Id="M:Mono.CSharp.Namespace.#ctor" />
      <Member Id="M:Mono.CSharp.Namespace.#ctor(Mono.CSharp.Namespace,System.String)" />
      <Member Id="M:Mono.CSharp.Namespace.AddNamespace(Mono.CSharp.MemberName)" />
      <Member Id="M:Mono.CSharp.Namespace.AddType(Mono.CSharp.ModuleContainer,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Namespace.CompletionGetTypesStartingWith(System.String)" />
      <Member Id="M:Mono.CSharp.Namespace.GetAllTypes(System.String)" />
      <Member Id="M:Mono.CSharp.Namespace.GetNamespace(System.String,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Namespace.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Namespace.IsImportedTypeOverride(Mono.CSharp.ModuleContainer,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Namespace.LookupExtensionMethod(Mono.CSharp.IMemberContext,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.Namespace.LookupType(Mono.CSharp.IMemberContext,System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Namespace.LookupTypeOrNamespace(Mono.CSharp.IMemberContext,System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Namespace.RemoveContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.Namespace.SetBuiltinType(Mono.CSharp.BuiltinTypeSpec)" />
      <Member Id="M:Mono.CSharp.Namespace.TryGetNamespace(System.String,Mono.CSharp.Namespace@)" />
      <Member Id="M:Mono.CSharp.Namespace.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.Namespace.Name" />
      <Member Id="P:Mono.CSharp.Namespace.Parent" />
    </Type>
    <Type Name="Mono.CSharp.NamespaceContainer" Id="T:Mono.CSharp.NamespaceContainer">
      <Member Id="F:Mono.CSharp.NamespaceContainer.DeclarationFound" />
      <Member Id="F:Mono.CSharp.NamespaceContainer.Parent" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.#ctor(Mono.CSharp.MemberName,Mono.CSharp.NamespaceContainer)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.#ctor(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.AddPartial(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.AddTypeContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.AddUsing(Mono.CSharp.UsingAliasNamespace)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.AddUsing(Mono.CSharp.UsingClause)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.DefineNamespace" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.DoDefineContainer" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.EmitContainer" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.EnableRedefinition" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.GetCompletionStartingWith(System.String,System.Collections.Generic.List{System.String})" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.LookupExtensionMethod(Mono.CSharp.IMemberContext,System.String,System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.LookupExternAlias(System.String)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.LookupNamespaceAlias(System.String)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.LookupStaticUsings(Mono.CSharp.IMemberContext,System.String,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.RemoveContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.NamespaceContainer.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.NamespaceContainer.AttributeTargets" />
      <Member Id="P:Mono.CSharp.NamespaceContainer.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.NamespaceContainer.NS" />
      <Member Id="P:Mono.CSharp.NamespaceContainer.Usings" />
      <Member Id="P:Mono.CSharp.NamespaceContainer.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.NamespaceExpression" Id="T:Mono.CSharp.NamespaceExpression">
      <Member Id="M:Mono.CSharp.NamespaceExpression.#ctor(Mono.CSharp.Namespace,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NamespaceExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.NamespaceExpression.Error_NamespaceDoesNotExist(Mono.CSharp.IMemberContext,System.String,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NamespaceExpression.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.NamespaceExpression.LookupTypeOrNamespace(Mono.CSharp.IMemberContext,System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NamespaceExpression.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.NamespaceExpression.ToString" />
      <Member Id="P:Mono.CSharp.NamespaceExpression.Namespace" />
    </Type>
    <Type Name="Mono.CSharp.New" Id="T:Mono.CSharp.New">
      <Member Id="F:Mono.CSharp.New.arguments" />
      <Member Id="F:Mono.CSharp.New.method" />
      <Member Id="F:Mono.CSharp.New.RequestedType" />
      <Member Id="M:Mono.CSharp.New.#ctor(Mono.CSharp.Expression,Mono.CSharp.Arguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.New.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.New.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.New.CanEmitOptimizedLocalTarget(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.New.CheckComImport(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.New.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.New.Constantify(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.New.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.New.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.New.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.New.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.New.Emit(Mono.CSharp.EmitContext,Mono.CSharp.IMemoryLocation)" />
      <Member Id="M:Mono.CSharp.New.EmitAddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.New.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.New.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.New.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.New.Arguments" />
      <Member Id="P:Mono.CSharp.New.IsGeneratedStructConstructor" />
      <Member Id="P:Mono.CSharp.New.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.NewAnonymousType" Id="T:Mono.CSharp.NewAnonymousType">
      <Member Id="M:Mono.CSharp.NewAnonymousType.#ctor(System.Collections.Generic.List{Mono.CSharp.AnonymousTypeParameter},Mono.CSharp.TypeContainer,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NewAnonymousType.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.NewAnonymousType.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.NewAnonymousType.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.NewAnonymousType.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.NewAnonymousType.Parameters" />
    </Type>
    <Type Name="Mono.CSharp.NewDelegate" Id="T:Mono.CSharp.NewDelegate">
      <Member Id="F:Mono.CSharp.NewDelegate.Arguments" />
      <Member Id="M:Mono.CSharp.NewDelegate.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Arguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NewDelegate.DoResolve(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.NewInitialize" Id="T:Mono.CSharp.NewInitialize">
      <Member Id="M:Mono.CSharp.NewInitialize.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.Arguments,Mono.CSharp.CollectionOrObjectInitializers,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NewInitialize.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.NewInitialize.CanEmitOptimizedLocalTarget(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.NewInitialize.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.NewInitialize.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.NewInitialize.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.NewInitialize.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.NewInitialize.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.NewInitialize.Emit(Mono.CSharp.EmitContext,Mono.CSharp.IMemoryLocation)" />
      <Member Id="M:Mono.CSharp.NewInitialize.EmitAddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.NewInitialize.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.NewInitialize.Initializers" />
    </Type>
    <Type Name="Mono.CSharp.NullConstant" Id="T:Mono.CSharp.NullConstant">
      <Member Id="M:Mono.CSharp.NullConstant.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NullConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.NullConstant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.NullConstant.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.NullConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.NullConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.NullConstant.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.NullConstant.GetValue" />
      <Member Id="M:Mono.CSharp.NullConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.NullConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.NullConstant.ExprClassName" />
      <Member Id="P:Mono.CSharp.NullConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.NullConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.NullConstant.IsNull" />
      <Member Id="P:Mono.CSharp.NullConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.NullLiteral" Id="T:Mono.CSharp.NullLiteral">
      <Member Id="M:Mono.CSharp.NullLiteral.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.NullLiteral.Error_ValueCannotBeConverted(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.NullLiteral.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.NullLiteral.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.NullLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.Operator" Id="T:Mono.CSharp.Operator">
      <Member Id="F:Mono.CSharp.Operator.OperatorType" />
      <Member Id="M:Mono.CSharp.Operator.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.Operator.OpType,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.ParametersCompiled,Mono.CSharp.ToplevelBlock,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Operator.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Operator.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Operator.Define" />
      <Member Id="M:Mono.CSharp.Operator.FindBaseMember(Mono.CSharp.MemberSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.Operator.GetMatchingOperator" />
      <Member Id="M:Mono.CSharp.Operator.GetMetadataName(Mono.CSharp.Operator.OpType)" />
      <Member Id="M:Mono.CSharp.Operator.GetMetadataName(System.String)" />
      <Member Id="M:Mono.CSharp.Operator.GetName(Mono.CSharp.Operator.OpType)" />
      <Member Id="M:Mono.CSharp.Operator.GetName(System.String)" />
      <Member Id="M:Mono.CSharp.Operator.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.Operator.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Operator.GetType(System.String)" />
      <Member Id="M:Mono.CSharp.Operator.ResolveMemberType" />
    </Type>
    <Type Name="Mono.CSharp.OperatorCast" Id="T:Mono.CSharp.OperatorCast">
      <Member Id="M:Mono.CSharp.OperatorCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.OperatorCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.OperatorCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.OperatorCast.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.Outline" Id="T:Mono.CSharp.Outline">
      <Member Id="M:Mono.CSharp.Outline.#ctor(System.Type,System.IO.TextWriter,System.Boolean,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Outline.OutlineType" />
      <Member Id="M:Mono.CSharp.Outline.RemoveGenericArity(System.String)" />
    </Type>
    <Type Name="Mono.CSharp.OverloadResolver" Id="T:Mono.CSharp.OverloadResolver">
      <Member Id="M:Mono.CSharp.OverloadResolver.#ctor(System.Collections.Generic.IList{Mono.CSharp.MemberSpec},Mono.CSharp.OverloadResolver.Restrictions,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.#ctor(System.Collections.Generic.IList{Mono.CSharp.MemberSpec},Mono.CSharp.TypeArguments,Mono.CSharp.OverloadResolver.Restrictions,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.BetterTypeConversion(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.Error_ConstructorMismatch(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.ResolveDefaultValueArgument(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.ResolveMember``1(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments@)" />
      <Member Id="M:Mono.CSharp.OverloadResolver.ResolveOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Arguments@)" />
      <Member Id="P:Mono.CSharp.OverloadResolver.BaseMembersProvider" />
      <Member Id="P:Mono.CSharp.OverloadResolver.BestCandidateIsDynamic" />
      <Member Id="P:Mono.CSharp.OverloadResolver.BestCandidateNewMethodGroup" />
      <Member Id="P:Mono.CSharp.OverloadResolver.BestCandidateReturnType" />
      <Member Id="P:Mono.CSharp.OverloadResolver.CustomErrors" />
      <Member Id="P:Mono.CSharp.OverloadResolver.InstanceQualifier" />
    </Type>
    <Type Name="Mono.CSharp.Parameter" Id="T:Mono.CSharp.Parameter">
      <Member Id="F:Mono.CSharp.Parameter.HasAddressTaken" />
      <Member Id="F:Mono.CSharp.Parameter.idx" />
      <Member Id="F:Mono.CSharp.Parameter.parameter_type" />
      <Member Id="M:Mono.CSharp.Parameter.#ctor(Mono.CSharp.FullNamedExpression,System.String,Mono.CSharp.Parameter.Modifier,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Parameter.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Parameter.ApplyAttributes(System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ConstructorBuilder,System.Int32,Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Parameter.CheckAccessibility(Mono.CSharp.InterfaceMemberBase)" />
      <Member Id="M:Mono.CSharp.Parameter.Clone" />
      <Member Id="M:Mono.CSharp.Parameter.CreateExpressionTreeVariable(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Parameter.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Parameter.EmitAddressOf(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Parameter.EmitAssign(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Parameter.Error_DuplicateName(Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Parameter.ExpressionTreeVariableReference" />
      <Member Id="M:Mono.CSharp.Parameter.GetModifierSignature(Mono.CSharp.Parameter.Modifier)" />
      <Member Id="M:Mono.CSharp.Parameter.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.Parameter.IsClsCompliant(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.Parameter.Resolve(Mono.CSharp.IMemberContext,System.Int32)" />
      <Member Id="M:Mono.CSharp.Parameter.ResolveDefaultValue(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Parameter.ResolveParameterExpressionType(Mono.CSharp.IMemberContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Parameter.SetIndex(System.Int32)" />
      <Member Id="M:Mono.CSharp.Parameter.Warning_UselessOptionalParameter(Mono.CSharp.Report)" />
      <Member Id="P:Mono.CSharp.Parameter.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Parameter.DefaultExpression" />
      <Member Id="P:Mono.CSharp.Parameter.DefaultValue" />
      <Member Id="P:Mono.CSharp.Parameter.HasDefaultValue" />
      <Member Id="P:Mono.CSharp.Parameter.HasExtensionMethodModifier" />
      <Member Id="P:Mono.CSharp.Parameter.HoistedVariant" />
      <Member Id="P:Mono.CSharp.Parameter.Location" />
      <Member Id="P:Mono.CSharp.Parameter.ModFlags" />
      <Member Id="P:Mono.CSharp.Parameter.Mono#CSharp#IParameterData#DefaultValue" />
      <Member Id="P:Mono.CSharp.Parameter.Name" />
      <Member Id="P:Mono.CSharp.Parameter.ParameterModifier" />
      <Member Id="P:Mono.CSharp.Parameter.Type" />
      <Member Id="P:Mono.CSharp.Parameter.TypeExpression" />
      <Member Id="P:Mono.CSharp.Parameter.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.ParameterBase" Id="T:Mono.CSharp.ParameterBase">
      <Member Id="F:Mono.CSharp.ParameterBase.builder" />
      <Member Id="M:Mono.CSharp.ParameterBase.#ctor" />
      <Member Id="M:Mono.CSharp.ParameterBase.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.ParameterBase.IsClsComplianceRequired" />
      <Member Id="P:Mono.CSharp.ParameterBase.Builder" />
    </Type>
    <Type Name="Mono.CSharp.ParameterData" Id="T:Mono.CSharp.ParameterData">
      <Member Id="M:Mono.CSharp.ParameterData.#ctor(System.String,Mono.CSharp.Parameter.Modifier)" />
      <Member Id="M:Mono.CSharp.ParameterData.#ctor(System.String,Mono.CSharp.Parameter.Modifier,Mono.CSharp.Expression)" />
      <Member Id="P:Mono.CSharp.ParameterData.DefaultValue" />
      <Member Id="P:Mono.CSharp.ParameterData.HasDefaultValue" />
      <Member Id="P:Mono.CSharp.ParameterData.HasExtensionMethodModifier" />
      <Member Id="P:Mono.CSharp.ParameterData.ModFlags" />
      <Member Id="P:Mono.CSharp.ParameterData.Name" />
    </Type>
    <Type Name="Mono.CSharp.ParameterReference" Id="T:Mono.CSharp.ParameterReference">
      <Member Id="F:Mono.CSharp.ParameterReference.pi" />
      <Member Id="M:Mono.CSharp.ParameterReference.#ctor(Mono.CSharp.ParametersBlock.ParameterInfo,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParameterReference.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.ParameterReference.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ParameterReference.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ParameterReference.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ParameterReference.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ParameterReference.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.ParameterReference.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ParameterReference.GetHashCode" />
      <Member Id="M:Mono.CSharp.ParameterReference.GetHoistedVariable(Mono.CSharp.AnonymousExpression)" />
      <Member Id="M:Mono.CSharp.ParameterReference.SetHasAddressTaken" />
      <Member Id="P:Mono.CSharp.ParameterReference.IsFixed" />
      <Member Id="P:Mono.CSharp.ParameterReference.IsLockedByStatement" />
      <Member Id="P:Mono.CSharp.ParameterReference.IsRef" />
      <Member Id="P:Mono.CSharp.ParameterReference.Name" />
      <Member Id="P:Mono.CSharp.ParameterReference.Parameter" />
      <Member Id="P:Mono.CSharp.ParameterReference.Variable" />
      <Member Id="P:Mono.CSharp.ParameterReference.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.ParametersBlock" Id="T:Mono.CSharp.ParametersBlock">
      <Member Id="F:Mono.CSharp.ParametersBlock.labels" />
      <Member Id="F:Mono.CSharp.ParametersBlock.parameter_info" />
      <Member Id="F:Mono.CSharp.ParametersBlock.parameters" />
      <Member Id="F:Mono.CSharp.ParametersBlock.resolved" />
      <Member Id="F:Mono.CSharp.ParametersBlock.state_machine" />
      <Member Id="F:Mono.CSharp.ParametersBlock.top_block" />
      <Member Id="M:Mono.CSharp.ParametersBlock.#ctor(Mono.CSharp.Block,Mono.CSharp.ParametersCompiled,Mono.CSharp.Location,Mono.CSharp.Block.Flags)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.#ctor(Mono.CSharp.ParametersCompiled,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.CheckControlExit(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.CheckControlExit(Mono.CSharp.FlowAnalysisContext,Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.ConvertToAsyncTask(Mono.CSharp.IMemberContext,Mono.CSharp.TypeDefinition,Mono.CSharp.ParametersCompiled,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.ConvertToIterator(Mono.CSharp.IMethodData,Mono.CSharp.TypeDefinition,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.EmitEmbedded(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.GetDebugSymbolScopeIndex" />
      <Member Id="M:Mono.CSharp.ParametersBlock.GetLabel(System.String,Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.GetParameterInfo(Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.GetParameterReference(System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.PerformClone(System.Collections.Generic.HashSet{Mono.CSharp.LocalVariable}@)" />
      <Member Id="M:Mono.CSharp.ParametersBlock.ProcessParameters" />
      <Member Id="M:Mono.CSharp.ParametersBlock.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.ParametersBlock.HasReferenceToStoreyForInstanceLambdas" />
      <Member Id="P:Mono.CSharp.ParametersBlock.IsAsync" />
      <Member Id="P:Mono.CSharp.ParametersBlock.IsExpressionTree" />
      <Member Id="P:Mono.CSharp.ParametersBlock.Parameters" />
      <Member Id="P:Mono.CSharp.ParametersBlock.Resolved" />
      <Member Id="P:Mono.CSharp.ParametersBlock.StateMachine" />
      <Member Id="P:Mono.CSharp.ParametersBlock.TemporaryLocalsCount" />
      <Member Id="P:Mono.CSharp.ParametersBlock.TopBlock" />
    </Type>
    <Type Name="Mono.CSharp.ParametersCompiled" Id="T:Mono.CSharp.ParametersCompiled">
      <Member Id="F:Mono.CSharp.ParametersCompiled.EmptyReadOnlyParameters" />
      <Member Id="F:Mono.CSharp.ParametersCompiled.Undefined" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.#ctor(Mono.CSharp.Parameter[])" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.#ctor(Mono.CSharp.Parameter[],System.Boolean)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.ApplyAttributes(Mono.CSharp.IMemberContext,System.Reflection.MethodBase)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CheckConstraints(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CheckParameters(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.Clone" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CreateExpressionTree(Mono.CSharp.BlockContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CreateFullyResolved(Mono.CSharp.Parameter,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CreateFullyResolved(Mono.CSharp.Parameter[],Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CreateFullyResolved(Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.CreateImplicitParameter(Mono.CSharp.FullNamedExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.IsSameClsSignature(Mono.CSharp.AParametersCollection,Mono.CSharp.AParametersCollection)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.MergeGenerated(Mono.CSharp.CompilerContext,Mono.CSharp.ParametersCompiled,System.Boolean,Mono.CSharp.Parameter,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.MergeGenerated(Mono.CSharp.CompilerContext,Mono.CSharp.ParametersCompiled,System.Boolean,Mono.CSharp.Parameter[],Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.Prefix(Mono.CSharp.ParametersCompiled,Mono.CSharp.Parameter,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.Resolve(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.ResolveDefaultValues(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.ParametersCompiled.VerifyClsCompliance(Mono.CSharp.IMemberContext)" />
      <Member Id="P:Mono.CSharp.ParametersCompiled.Item(System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.ParametersImported" Id="T:Mono.CSharp.ParametersImported">
      <Member Id="M:Mono.CSharp.ParametersImported.#ctor(Mono.CSharp.IParameterData[],Mono.CSharp.TypeSpec[],System.Boolean)" />
      <Member Id="M:Mono.CSharp.ParametersImported.#ctor(Mono.CSharp.IParameterData[],Mono.CSharp.TypeSpec[],System.Boolean,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.ParamsParameter" Id="T:Mono.CSharp.ParamsParameter">
      <Member Id="M:Mono.CSharp.ParamsParameter.#ctor(Mono.CSharp.FullNamedExpression,System.String,Mono.CSharp.Attributes,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParamsParameter.ApplyAttributes(System.Reflection.Emit.MethodBuilder,System.Reflection.Emit.ConstructorBuilder,System.Int32,Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.ParamsParameter.Resolve(Mono.CSharp.IMemberContext,System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.ParenthesizedExpression" Id="T:Mono.CSharp.ParenthesizedExpression">
      <Member Id="M:Mono.CSharp.ParenthesizedExpression.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ParenthesizedExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.ParenthesizedExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ParenthesizedExpression.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ParenthesizedExpression.HasConditionalAccess" />
    </Type>
    <Type Name="Mono.CSharp.ParserSession" Id="T:Mono.CSharp.ParserSession">
      <Member Id="F:Mono.CSharp.ParserSession.IDBuilder" />
      <Member Id="F:Mono.CSharp.ParserSession.Identifiers" />
      <Member Id="F:Mono.CSharp.ParserSession.NumberBuilder" />
      <Member Id="F:Mono.CSharp.ParserSession.ParametersStack" />
      <Member Id="F:Mono.CSharp.ParserSession.StreamReaderBuffer" />
      <Member Id="M:Mono.CSharp.ParserSession.#ctor" />
      <Member Id="M:Mono.CSharp.ParserSession.GetChecksumAlgorithm" />
      <Member Id="P:Mono.CSharp.ParserSession.LocatedTokens" />
      <Member Id="P:Mono.CSharp.ParserSession.LocationsBag" />
      <Member Id="P:Mono.CSharp.ParserSession.UseJayGlobalArrays" />
    </Type>
    <Type Name="Mono.CSharp.PendingImplementation" Id="T:Mono.CSharp.PendingImplementation">
      <Member Id="M:Mono.CSharp.PendingImplementation.GetPendingImplementations(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.PendingImplementation.ImplementMethod(Mono.CSharp.MemberName,Mono.CSharp.TypeSpec,Mono.CSharp.MethodData,System.Boolean,Mono.CSharp.MethodSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.PendingImplementation.InterfaceMethod(Mono.CSharp.MemberName,Mono.CSharp.TypeSpec,Mono.CSharp.MethodData,Mono.CSharp.PendingImplementation.Operation,Mono.CSharp.MethodSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.PendingImplementation.IsInterfaceMethod(Mono.CSharp.MemberName,Mono.CSharp.TypeSpec,Mono.CSharp.MethodData,Mono.CSharp.MethodSpec@,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.PendingImplementation.VerifyPendingMethods" />
    </Type>
    <Type Name="Mono.CSharp.Platform" Id="T:Mono.CSharp.Platform">
      <Member Id="F:Mono.CSharp.Platform.AnyCPU" />
      <Member Id="F:Mono.CSharp.Platform.AnyCPU32Preferred" />
      <Member Id="F:Mono.CSharp.Platform.Arm" />
      <Member Id="F:Mono.CSharp.Platform.IA64" />
      <Member Id="F:Mono.CSharp.Platform.X64" />
      <Member Id="F:Mono.CSharp.Platform.X86" />
    </Type>
    <Type Name="Mono.CSharp.PointerArithmetic" Id="T:Mono.CSharp.PointerArithmetic">
      <Member Id="M:Mono.CSharp.PointerArithmetic.#ctor(Mono.CSharp.Binary.Operator,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PointerArithmetic.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.PointerArithmetic.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.PointerArithmetic.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.PointerArithmetic.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedAttribute" Id="T:Mono.CSharp.PredefinedAttribute">
      <Member Id="F:Mono.CSharp.PredefinedAttribute.ctor" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.AssemblyBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.ConstructorBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.FieldBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.MethodBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.ModuleBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.ParameterBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.PropertyBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.EmitAttribute(System.Reflection.Emit.TypeBuilder)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.GetHashCode" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.op_Equality(Mono.CSharp.TypeSpec,Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.op_Inequality(Mono.CSharp.TypeSpec,Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.PredefinedAttribute.ResolveBuilder" />
      <Member Id="P:Mono.CSharp.PredefinedAttribute.Constructor" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedAttributes" Id="T:Mono.CSharp.PredefinedAttributes">
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyAlgorithmId" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyCompany" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyCopyright" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyCulture" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyFileVersion" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyFlags" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyInformationalVersion" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyProduct" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyTrademark" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AssemblyVersion" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AsyncStateMachine" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.AttributeUsage" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.CallerFilePathAttribute" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.CallerLineNumberAttribute" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.CallerMemberNameAttribute" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.CLSCompliant" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.CoClass" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.ComImport" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.CompilerGenerated" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Conditional" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Debuggable" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DebuggerBrowsable" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DebuggerHidden" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DebuggerStepThrough" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DecimalConstant" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DefaultCharset" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DefaultMember" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DefaultParameterValue" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.DllImport" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Dynamic" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Extension" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.FieldOffset" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.FixedBuffer" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Guid" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.HostProtection" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.In" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.IndexerName" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.InternalsVisibleTo" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.MarshalAs" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.MethodImpl" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Obsolete" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.OptionalParameter" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Out" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.ParamArray" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Required" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.RuntimeCompatibility" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.Security" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.StructLayout" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.TypeForwarder" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.UnmanagedFunctionPointer" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.UnsafeValueType" />
      <Member Id="F:Mono.CSharp.PredefinedAttributes.UnverifiableCode" />
      <Member Id="M:Mono.CSharp.PredefinedAttributes.#ctor(Mono.CSharp.ModuleContainer)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedDebuggableAttribute" Id="T:Mono.CSharp.PredefinedDebuggableAttribute">
      <Member Id="M:Mono.CSharp.PredefinedDebuggableAttribute.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedDebuggableAttribute.EmitAttribute(System.Reflection.Emit.AssemblyBuilder,System.Diagnostics.DebuggableAttribute.DebuggingModes)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedDebuggerBrowsableAttribute" Id="T:Mono.CSharp.PredefinedDebuggerBrowsableAttribute">
      <Member Id="M:Mono.CSharp.PredefinedDebuggerBrowsableAttribute.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedDebuggerBrowsableAttribute.EmitAttribute(System.Reflection.Emit.FieldBuilder,System.Diagnostics.DebuggerBrowsableState)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedDecimalAttribute" Id="T:Mono.CSharp.PredefinedDecimalAttribute">
      <Member Id="M:Mono.CSharp.PredefinedDecimalAttribute.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedDecimalAttribute.EmitAttribute(System.Reflection.Emit.FieldBuilder,System.Decimal,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PredefinedDecimalAttribute.EmitAttribute(System.Reflection.Emit.ParameterBuilder,System.Decimal,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedDynamicAttribute" Id="T:Mono.CSharp.PredefinedDynamicAttribute">
      <Member Id="M:Mono.CSharp.PredefinedDynamicAttribute.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedDynamicAttribute.EmitAttribute(System.Reflection.Emit.FieldBuilder,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PredefinedDynamicAttribute.EmitAttribute(System.Reflection.Emit.ParameterBuilder,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PredefinedDynamicAttribute.EmitAttribute(System.Reflection.Emit.PropertyBuilder,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.PredefinedDynamicAttribute.EmitAttribute(System.Reflection.Emit.TypeBuilder,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedMember`1" Id="T:Mono.CSharp.PredefinedMember`1">
      <Member Id="M:Mono.CSharp.PredefinedMember`1.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.BuiltinTypeSpec,System.String,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.PredefinedType,Mono.CSharp.MemberFilter)" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.PredefinedType,System.String,Mono.CSharp.MemberKind,Mono.CSharp.PredefinedType[])" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.PredefinedType,System.String,Mono.CSharp.MemberKind,System.Func{Mono.CSharp.TypeSpec[]},Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.PredefinedType,System.String,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.TypeSpec,Mono.CSharp.MemberFilter)" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.Get" />
      <Member Id="M:Mono.CSharp.PredefinedMember`1.Resolve(Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedStateMachineAttribute" Id="T:Mono.CSharp.PredefinedStateMachineAttribute">
      <Member Id="M:Mono.CSharp.PredefinedStateMachineAttribute.#ctor(Mono.CSharp.ModuleContainer,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedStateMachineAttribute.EmitAttribute(System.Reflection.Emit.MethodBuilder,Mono.CSharp.StateMachine)" />
    </Type>
    <Type Name="Mono.CSharp.PredefinedType" Id="T:Mono.CSharp.PredefinedType">
      <Member Id="F:Mono.CSharp.PredefinedType.module" />
      <Member Id="F:Mono.CSharp.PredefinedType.type" />
      <Member Id="M:Mono.CSharp.PredefinedType.#ctor(Mono.CSharp.BuiltinTypeSpec)" />
      <Member Id="M:Mono.CSharp.PredefinedType.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.MemberKind,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.PredefinedType.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.MemberKind,System.String,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.PredefinedType.Define" />
      <Member Id="M:Mono.CSharp.PredefinedType.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.PredefinedType.Resolve" />
      <Member Id="M:Mono.CSharp.PredefinedType.Resolve(Mono.CSharp.ModuleContainer,Mono.CSharp.MemberKind,System.String,System.String,System.Int32,System.Boolean,System.Boolean)" />
      <Member Id="P:Mono.CSharp.PredefinedType.Arity" />
      <Member Id="P:Mono.CSharp.PredefinedType.IsDefined" />
      <Member Id="P:Mono.CSharp.PredefinedType.Name" />
      <Member Id="P:Mono.CSharp.PredefinedType.Namespace" />
      <Member Id="P:Mono.CSharp.PredefinedType.TypeSpec" />
    </Type>
    <Type Name="Mono.CSharp.Probe" Id="T:Mono.CSharp.Probe">
      <Member Id="F:Mono.CSharp.Probe.expr" />
      <Member Id="F:Mono.CSharp.Probe.probe_type_expr" />
      <Member Id="F:Mono.CSharp.Probe.ProbeType" />
      <Member Id="M:Mono.CSharp.Probe.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Probe.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Probe.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Probe.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Probe.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Probe.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.Probe.ResolveCommon(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Probe.ResolveProbeType(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Probe.Expr" />
      <Member Id="P:Mono.CSharp.Probe.OperatorName" />
    </Type>
    <Type Name="Mono.CSharp.Property" Id="T:Mono.CSharp.Property">
      <Member Id="M:Mono.CSharp.Property.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Property.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Property.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Property.Define" />
      <Member Id="M:Mono.CSharp.Property.Emit" />
      <Member Id="P:Mono.CSharp.Property.BackingField" />
      <Member Id="P:Mono.CSharp.Property.Initializer" />
      <Member Id="P:Mono.CSharp.Property.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.PropertyBase" Id="T:Mono.CSharp.PropertyBase">
      <Member Id="M:Mono.CSharp.PropertyBase.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.PropertyBase.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.PropertyBase.CheckOverrideAgainstBase(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.PropertyBase.DefineAccessors" />
      <Member Id="M:Mono.CSharp.PropertyBase.DefineBuilders(Mono.CSharp.MemberKind,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.PropertyBase.DoMemberTypeDependentChecks" />
      <Member Id="M:Mono.CSharp.PropertyBase.DoMemberTypeIndependentChecks" />
      <Member Id="M:Mono.CSharp.PropertyBase.Emit" />
      <Member Id="M:Mono.CSharp.PropertyBase.PrepareEmit" />
      <Member Id="M:Mono.CSharp.PropertyBase.SetMemberName(Mono.CSharp.MemberName)" />
      <Member Id="M:Mono.CSharp.PropertyBase.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.PropertyBase.AccessorFirst" />
      <Member Id="P:Mono.CSharp.PropertyBase.AccessorSecond" />
      <Member Id="P:Mono.CSharp.PropertyBase.AttributeTargets" />
      <Member Id="P:Mono.CSharp.PropertyBase.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.PropertyBase.ExpectedMemberTypeVariance" />
      <Member Id="P:Mono.CSharp.PropertyBase.Get" />
      <Member Id="P:Mono.CSharp.PropertyBase.IsUsed" />
      <Member Id="P:Mono.CSharp.PropertyBase.Set" />
      <Member Id="P:Mono.CSharp.PropertyBase.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.PropertyBasedMember" Id="T:Mono.CSharp.PropertyBasedMember">
      <Member Id="M:Mono.CSharp.PropertyBasedMember.#ctor(Mono.CSharp.TypeDefinition,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.PropertyBasedMember.CheckReservedNameConflict(System.String,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.PropertyBasedMember.VerifyClsCompliance" />
    </Type>
    <Type Name="Mono.CSharp.PropertySpec" Id="T:Mono.CSharp.PropertySpec">
      <Member Id="M:Mono.CSharp.PropertySpec.#ctor(Mono.CSharp.MemberKind,Mono.CSharp.TypeSpec,Mono.CSharp.IMemberDefinition,Mono.CSharp.TypeSpec,System.Reflection.PropertyInfo,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.PropertySpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.PropertySpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="P:Mono.CSharp.PropertySpec.Get" />
      <Member Id="P:Mono.CSharp.PropertySpec.HasDifferentAccessibility" />
      <Member Id="P:Mono.CSharp.PropertySpec.HasGet" />
      <Member Id="P:Mono.CSharp.PropertySpec.HasSet" />
      <Member Id="P:Mono.CSharp.PropertySpec.MemberType" />
      <Member Id="P:Mono.CSharp.PropertySpec.MetaInfo" />
      <Member Id="P:Mono.CSharp.PropertySpec.Set" />
    </Type>
    <Type Name="Mono.CSharp.QualifiedAliasMember" Id="T:Mono.CSharp.QualifiedAliasMember">
      <Member Id="F:Mono.CSharp.QualifiedAliasMember.GlobalAlias" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.#ctor(System.String,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.#ctor(System.String,System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.#ctor(System.String,System.String,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.CreateExpressionFromAlias(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.HasConditionalAccess" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.LookupNameExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Expression.MemberLookupRestrictions)" />
      <Member Id="M:Mono.CSharp.QualifiedAliasMember.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="P:Mono.CSharp.QualifiedAliasMember.Alias" />
    </Type>
    <Type Name="Mono.CSharp.Reachability" Id="T:Mono.CSharp.Reachability">
      <Member Id="M:Mono.CSharp.Reachability.CreateUnreachable" />
      <Member Id="M:Mono.CSharp.Reachability.op_BitwiseAnd(Mono.CSharp.Reachability,Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Reachability.op_BitwiseOr(Mono.CSharp.Reachability,Mono.CSharp.Reachability)" />
      <Member Id="P:Mono.CSharp.Reachability.IsUnreachable" />
    </Type>
    <Type Name="Mono.CSharp.ReducedExpression" Id="T:Mono.CSharp.ReducedExpression">
      <Member Id="M:Mono.CSharp.ReducedExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ReducedExpression.Create(Mono.CSharp.Constant,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.Create(Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.Create(Mono.CSharp.Expression,Mono.CSharp.Expression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.Create(Mono.CSharp.ExpressionStatement,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.ReducedExpression.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.ReducedExpression.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.ReducedExpression.OriginalExpression" />
    </Type>
    <Type Name="Mono.CSharp.ReflectionImporter" Id="T:Mono.CSharp.ReflectionImporter">
      <Member Id="M:Mono.CSharp.ReflectionImporter.#ctor(Mono.CSharp.ModuleContainer,Mono.CSharp.BuiltinTypes)" />
      <Member Id="M:Mono.CSharp.ReflectionImporter.AddCompiledType(System.Reflection.Emit.TypeBuilder,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ReflectionImporter.DetermineKindFromBaseType(System.Type)" />
      <Member Id="M:Mono.CSharp.ReflectionImporter.HasVolatileModifier(System.Type[])" />
      <Member Id="M:Mono.CSharp.ReflectionImporter.ImportAssembly(System.Reflection.Assembly,Mono.CSharp.RootNamespace)" />
      <Member Id="M:Mono.CSharp.ReflectionImporter.ImportModule(System.Reflection.Module,Mono.CSharp.RootNamespace)" />
    </Type>
    <Type Name="Mono.CSharp.RefTypeExpr" Id="T:Mono.CSharp.RefTypeExpr">
      <Member Id="M:Mono.CSharp.RefTypeExpr.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.RefTypeExpr.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.RefTypeExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.RefTypeExpr.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.RefValueExpr" Id="T:Mono.CSharp.RefValueExpr">
      <Member Id="M:Mono.CSharp.RefValueExpr.#ctor(Mono.CSharp.Expression,Mono.CSharp.FullNamedExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.RefValueExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.RefValueExpr.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="P:Mono.CSharp.RefValueExpr.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.Report" Id="T:Mono.CSharp.Report">
      <Member Id="F:Mono.CSharp.Report.AllWarnings" />
      <Member Id="F:Mono.CSharp.Report.RuntimeErrorId" />
      <Member Id="M:Mono.CSharp.Report.#ctor(Mono.CSharp.CompilerContext,Mono.CSharp.ReportPrinter)" />
      <Member Id="M:Mono.CSharp.Report.Debug(System.Int32,System.String,System.Object[])" />
      <Member Id="M:Mono.CSharp.Report.Debug(System.String,System.Object[])" />
      <Member Id="M:Mono.CSharp.Report.DisableReporting" />
      <Member Id="M:Mono.CSharp.Report.EnableReporting" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,Mono.CSharp.Location,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,Mono.CSharp.Location,System.String,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,Mono.CSharp.Location,System.String,System.String[])" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,System.String,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Error(System.Int32,System.String,System.String[])" />
      <Member Id="M:Mono.CSharp.Report.ExtraInformation(Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.FeatureIsNotAvailable(Mono.CSharp.CompilerContext,Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.FeatureIsNotSupported(Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.RegisterWarningRegion(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Report.RuntimeMissingSupport(Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.SetPrinter(Mono.CSharp.ReportPrinter)" />
      <Member Id="M:Mono.CSharp.Report.SymbolRelatedToPreviousError(Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.SymbolRelatedToPreviousError(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.Report.SymbolRelatedToPreviousError(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.Report.SymbolRelatedToPreviousError(System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,Mono.CSharp.Location,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,Mono.CSharp.Location,System.String,System.Object[])" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,Mono.CSharp.Location,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,Mono.CSharp.Location,System.String,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,System.String,System.String,System.String)" />
      <Member Id="M:Mono.CSharp.Report.Warning(System.Int32,System.Int32,System.String,System.String[])" />
      <Member Id="P:Mono.CSharp.Report.Errors" />
      <Member Id="P:Mono.CSharp.Report.IsDisabled" />
      <Member Id="P:Mono.CSharp.Report.Printer" />
      <Member Id="P:Mono.CSharp.Report.Warnings" />
    </Type>
    <Type Name="Mono.CSharp.ReportPrinter" Id="T:Mono.CSharp.ReportPrinter">
      <Member Id="F:Mono.CSharp.ReportPrinter.reported_missing_definitions" />
      <Member Id="M:Mono.CSharp.ReportPrinter.#ctor" />
      <Member Id="M:Mono.CSharp.ReportPrinter.FormatText(System.String)" />
      <Member Id="M:Mono.CSharp.ReportPrinter.MissingTypeReported(Mono.CSharp.ITypeDefinition)" />
      <Member Id="M:Mono.CSharp.ReportPrinter.Print(Mono.CSharp.AbstractMessage,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ReportPrinter.Print(Mono.CSharp.AbstractMessage,System.IO.TextWriter,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ReportPrinter.Reset" />
      <Member Id="P:Mono.CSharp.ReportPrinter.ErrorsCount" />
      <Member Id="P:Mono.CSharp.ReportPrinter.HasRelatedSymbolSupport" />
      <Member Id="P:Mono.CSharp.ReportPrinter.WarningsCount" />
    </Type>
    <Type Name="Mono.CSharp.ResolveContext" Id="T:Mono.CSharp.ResolveContext">
      <Member Id="F:Mono.CSharp.ResolveContext.CurrentAnonymousMethod" />
      <Member Id="F:Mono.CSharp.ResolveContext.CurrentBlock" />
      <Member Id="F:Mono.CSharp.ResolveContext.CurrentInitializerVariable" />
      <Member Id="F:Mono.CSharp.ResolveContext.flags" />
      <Member Id="F:Mono.CSharp.ResolveContext.MemberContext" />
      <Member Id="M:Mono.CSharp.ResolveContext.#ctor(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.ResolveContext.#ctor(Mono.CSharp.IMemberContext,Mono.CSharp.ResolveContext.Options)" />
      <Member Id="M:Mono.CSharp.ResolveContext.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.ResolveContext.HasAny(Mono.CSharp.ResolveContext.Options)" />
      <Member Id="M:Mono.CSharp.ResolveContext.HasSet(Mono.CSharp.ResolveContext.Options)" />
      <Member Id="M:Mono.CSharp.ResolveContext.LookupExtensionMethod(System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.ResolveContext.LookupNamespaceAlias(System.String)" />
      <Member Id="M:Mono.CSharp.ResolveContext.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ResolveContext.MustCaptureVariable(Mono.CSharp.INamedBlockVariable)" />
      <Member Id="M:Mono.CSharp.ResolveContext.Set(Mono.CSharp.ResolveContext.Options)" />
      <Member Id="M:Mono.CSharp.ResolveContext.With(Mono.CSharp.ResolveContext.Options,System.Boolean)" />
      <Member Id="P:Mono.CSharp.ResolveContext.BuiltinTypes" />
      <Member Id="P:Mono.CSharp.ResolveContext.ConstantCheckState" />
      <Member Id="P:Mono.CSharp.ResolveContext.ConstructorBlock" />
      <Member Id="P:Mono.CSharp.ResolveContext.CurrentIterator" />
      <Member Id="P:Mono.CSharp.ResolveContext.CurrentMemberDefinition" />
      <Member Id="P:Mono.CSharp.ResolveContext.CurrentType" />
      <Member Id="P:Mono.CSharp.ResolveContext.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.ResolveContext.IsInProbingMode" />
      <Member Id="P:Mono.CSharp.ResolveContext.IsObsolete" />
      <Member Id="P:Mono.CSharp.ResolveContext.IsRuntimeBinder" />
      <Member Id="P:Mono.CSharp.ResolveContext.IsStatic" />
      <Member Id="P:Mono.CSharp.ResolveContext.IsUnsafe" />
      <Member Id="P:Mono.CSharp.ResolveContext.IsVariableCapturingRequired" />
      <Member Id="P:Mono.CSharp.ResolveContext.Module" />
      <Member Id="P:Mono.CSharp.ResolveContext.Report" />
    </Type>
    <Type Name="Mono.CSharp.ResolveFlags" Id="T:Mono.CSharp.ResolveFlags">
      <Member Id="F:Mono.CSharp.ResolveFlags.MaskExprClass" />
      <Member Id="F:Mono.CSharp.ResolveFlags.MethodGroup" />
      <Member Id="F:Mono.CSharp.ResolveFlags.Type" />
      <Member Id="F:Mono.CSharp.ResolveFlags.TypeParameter" />
      <Member Id="F:Mono.CSharp.ResolveFlags.VariableOrValue" />
    </Type>
    <Type Name="Mono.CSharp.ResumableStatement" Id="T:Mono.CSharp.ResumableStatement">
      <Member Id="F:Mono.CSharp.ResumableStatement.resume_point" />
      <Member Id="M:Mono.CSharp.ResumableStatement.#ctor" />
      <Member Id="M:Mono.CSharp.ResumableStatement.EmitForDispose(Mono.CSharp.EmitContext,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ResumableStatement.PrepareForDispose(Mono.CSharp.EmitContext,System.Reflection.Emit.Label)" />
      <Member Id="M:Mono.CSharp.ResumableStatement.PrepareForEmit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.Return" Id="T:Mono.CSharp.Return">
      <Member Id="M:Mono.CSharp.Return.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Return.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Return.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Return.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Return.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Return.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Return.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="P:Mono.CSharp.Return.Expr" />
      <Member Id="P:Mono.CSharp.Return.IsLocalExit" />
    </Type>
    <Type Name="Mono.CSharp.ReturnParameter" Id="T:Mono.CSharp.ReturnParameter">
      <Member Id="M:Mono.CSharp.ReturnParameter.#ctor(Mono.CSharp.MemberCore,System.Reflection.Emit.MethodBuilder,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ReturnParameter.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="P:Mono.CSharp.ReturnParameter.AttributeTargets" />
      <Member Id="P:Mono.CSharp.ReturnParameter.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.RootContext" Id="T:Mono.CSharp.RootContext">
      <Member Id="M:Mono.CSharp.RootContext.#ctor" />
      <Member Id="P:Mono.CSharp.RootContext.ToplevelTypes" />
    </Type>
    <Type Name="Mono.CSharp.RootNamespace" Id="T:Mono.CSharp.RootNamespace">
      <Member Id="M:Mono.CSharp.RootNamespace.#ctor(System.String)" />
      <Member Id="M:Mono.CSharp.RootNamespace.Error_GlobalNamespaceRedefined(Mono.CSharp.Report,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.RootNamespace.FindExtensionMethodNamespaces(Mono.CSharp.IMemberContext,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.RootNamespace.FindTypeNamespaces(Mono.CSharp.IMemberContext,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.RootNamespace.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.RootNamespace.RegisterNamespace(Mono.CSharp.Namespace)" />
      <Member Id="P:Mono.CSharp.RootNamespace.Alias" />
    </Type>
    <Type Name="Mono.CSharp.RuntimeExplicitAssign" Id="T:Mono.CSharp.RuntimeExplicitAssign">
      <Member Id="M:Mono.CSharp.RuntimeExplicitAssign.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.RuntimeExplicitAssign.ResolveConversions(Mono.CSharp.ResolveContext)" />
    </Type>
    <Type Name="Mono.CSharp.RuntimeValueExpression" Id="T:Mono.CSharp.RuntimeValueExpression">
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.#ctor(System.Dynamic.DynamicMetaObject,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.MakeAssignExpression(Mono.CSharp.BuilderContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.RuntimeValueExpression.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.RuntimeValueExpression.IsSuggestionOnly" />
      <Member Id="P:Mono.CSharp.RuntimeValueExpression.MetaObject" />
    </Type>
    <Type Name="Mono.CSharp.RuntimeVersion" Id="T:Mono.CSharp.RuntimeVersion">
      <Member Id="F:Mono.CSharp.RuntimeVersion.v1" />
      <Member Id="F:Mono.CSharp.RuntimeVersion.v2" />
      <Member Id="F:Mono.CSharp.RuntimeVersion.v4" />
    </Type>
    <Type Name="Mono.CSharp.SByteConstant" Id="T:Mono.CSharp.SByteConstant">
      <Member Id="F:Mono.CSharp.SByteConstant.Value" />
      <Member Id="M:Mono.CSharp.SByteConstant.#ctor(Mono.CSharp.BuiltinTypes,System.SByte,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SByteConstant.#ctor(Mono.CSharp.TypeSpec,System.SByte,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SByteConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.SByteConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.SByteConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.SByteConstant.GetValue" />
      <Member Id="M:Mono.CSharp.SByteConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.SByteConstant.Increment" />
      <Member Id="P:Mono.CSharp.SByteConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.SByteConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.SByteConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.SByteConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.SeekableStreamReader" Id="T:Mono.CSharp.SeekableStreamReader">
      <Member Id="F:Mono.CSharp.SeekableStreamReader.DefaultReadAheadSize" />
      <Member Id="M:Mono.CSharp.SeekableStreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Char[])" />
      <Member Id="M:Mono.CSharp.SeekableStreamReader.Dispose" />
      <Member Id="M:Mono.CSharp.SeekableStreamReader.Peek" />
      <Member Id="M:Mono.CSharp.SeekableStreamReader.Read" />
      <Member Id="M:Mono.CSharp.SeekableStreamReader.ReadChars(System.Int32,System.Int32)" />
      <Member Id="P:Mono.CSharp.SeekableStreamReader.Position" />
    </Type>
    <Type Name="Mono.CSharp.ShimExpression" Id="T:Mono.CSharp.ShimExpression">
      <Member Id="F:Mono.CSharp.ShimExpression.expr" />
      <Member Id="M:Mono.CSharp.ShimExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ShimExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.ShimExpression.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.ShimExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.ShimExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.ShimExpression.Expr" />
    </Type>
    <Type Name="Mono.CSharp.ShortConstant" Id="T:Mono.CSharp.ShortConstant">
      <Member Id="F:Mono.CSharp.ShortConstant.Value" />
      <Member Id="M:Mono.CSharp.ShortConstant.#ctor(Mono.CSharp.BuiltinTypes,System.Int16,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ShortConstant.#ctor(Mono.CSharp.TypeSpec,System.Int16,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ShortConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ShortConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ShortConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ShortConstant.GetValue" />
      <Member Id="M:Mono.CSharp.ShortConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.ShortConstant.Increment" />
      <Member Id="P:Mono.CSharp.ShortConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.ShortConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.ShortConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.ShortConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.SideEffectConstant" Id="T:Mono.CSharp.SideEffectConstant">
      <Member Id="F:Mono.CSharp.SideEffectConstant.value" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.#ctor(Mono.CSharp.Constant,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.GetValue" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.SideEffectConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.SideEffectConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.SideEffectConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.SideEffectConstant.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.SideEffectConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.SimpleAssign" Id="T:Mono.CSharp.SimpleAssign">
      <Member Id="M:Mono.CSharp.SimpleAssign.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.SimpleAssign.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SimpleAssign.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.SimpleAssign.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.SimpleAssign.MarkReachable(Mono.CSharp.Reachability)" />
    </Type>
    <Type Name="Mono.CSharp.SimpleMemberName" Id="T:Mono.CSharp.SimpleMemberName">
      <Member Id="F:Mono.CSharp.SimpleMemberName.Location" />
      <Member Id="F:Mono.CSharp.SimpleMemberName.Value" />
      <Member Id="M:Mono.CSharp.SimpleMemberName.#ctor(System.String,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.SimpleName" Id="T:Mono.CSharp.SimpleName">
      <Member Id="M:Mono.CSharp.SimpleName.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SimpleName.#ctor(System.String,Mono.CSharp.TypeArguments,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SimpleName.#ctor(System.String,System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SimpleName.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.SimpleName.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.SimpleName.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.SimpleName.Error_NameDoesNotExist(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.SimpleName.Error_TypeOrNamespaceNotFound(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.SimpleName.GetMethodGroup" />
      <Member Id="M:Mono.CSharp.SimpleName.IsPossibleType(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.SimpleName.IsPossibleTypeOrNamespace(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.SimpleName.LookupNameExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Expression.MemberLookupRestrictions)" />
      <Member Id="M:Mono.CSharp.SimpleName.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.SizeOf" Id="T:Mono.CSharp.SizeOf">
      <Member Id="M:Mono.CSharp.SizeOf.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SizeOf.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.SizeOf.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.SizeOf.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.SizeOf.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.SizeOf.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.SizeOf.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.SizeOf.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.SizeOf.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.SourceFile" Id="T:Mono.CSharp.SourceFile">
      <Member Id="F:Mono.CSharp.SourceFile.AutoGenerated" />
      <Member Id="F:Mono.CSharp.SourceFile.Index" />
      <Member Id="F:Mono.CSharp.SourceFile.Name" />
      <Member Id="F:Mono.CSharp.SourceFile.OriginalFullPathName" />
      <Member Id="M:Mono.CSharp.SourceFile.#ctor(System.String,System.String,System.Int32)" />
      <Member Id="M:Mono.CSharp.SourceFile.CreateSymbolInfo(Mono.CompilerServices.SymbolWriter.MonoSymbolFile,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <Member Id="M:Mono.CSharp.SourceFile.Equals(Mono.CSharp.SourceFile)" />
      <Member Id="M:Mono.CSharp.SourceFile.GetFullPathName(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.String}})" />
      <Member Id="M:Mono.CSharp.SourceFile.IsHiddenLocation(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SourceFile.RegisterHiddenScope(Mono.CSharp.Location,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SourceFile.SetChecksum(System.Byte[])" />
      <Member Id="M:Mono.CSharp.SourceFile.SetChecksum(System.Byte[],System.Byte[])" />
      <Member Id="M:Mono.CSharp.SourceFile.ToString" />
      <Member Id="P:Mono.CSharp.SourceFile.Checksum" />
      <Member Id="P:Mono.CSharp.SourceFile.HasChecksum" />
      <Member Id="P:Mono.CSharp.SourceFile.SourceFileEntry" />
    </Type>
    <Type Name="Mono.CSharp.SpecialConstraint" Id="T:Mono.CSharp.SpecialConstraint">
      <Member Id="F:Mono.CSharp.SpecialConstraint.Class" />
      <Member Id="F:Mono.CSharp.SpecialConstraint.Constructor" />
      <Member Id="F:Mono.CSharp.SpecialConstraint.None" />
      <Member Id="F:Mono.CSharp.SpecialConstraint.Struct" />
    </Type>
    <Type Name="Mono.CSharp.SpecialContraintExpr" Id="T:Mono.CSharp.SpecialContraintExpr">
      <Member Id="M:Mono.CSharp.SpecialContraintExpr.#ctor(Mono.CSharp.SpecialConstraint,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SpecialContraintExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.SpecialContraintExpr.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="P:Mono.CSharp.SpecialContraintExpr.Constraint" />
    </Type>
    <Type Name="Mono.CSharp.StackAlloc" Id="T:Mono.CSharp.StackAlloc">
      <Member Id="M:Mono.CSharp.StackAlloc.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StackAlloc.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.StackAlloc.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.StackAlloc.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.StackAlloc.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.StackAlloc.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.StackAlloc.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.StackAlloc.CountExpression" />
      <Member Id="P:Mono.CSharp.StackAlloc.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.StackFieldExpr" Id="T:Mono.CSharp.StackFieldExpr">
      <Member Id="M:Mono.CSharp.StackFieldExpr.#ctor(Mono.CSharp.Field)" />
      <Member Id="M:Mono.CSharp.StackFieldExpr.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.StackFieldExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StackFieldExpr.EmitLoad(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StackFieldExpr.Mono#CSharp#IExpressionCleanup#EmitCleanup(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StackFieldExpr.PrepareCleanup(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.StackFieldExpr.AutomaticallyReuse" />
      <Member Id="P:Mono.CSharp.StackFieldExpr.IsAvailableForReuse" />
    </Type>
    <Type Name="Mono.CSharp.StateMachine" Id="T:Mono.CSharp.StateMachine">
      <Member Id="M:Mono.CSharp.StateMachine.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.TypeDefinition,Mono.CSharp.MemberBase,Mono.CSharp.TypeParameters,System.String,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.StateMachine.AddEntryMethod(Mono.CSharp.StateMachineMethod)" />
      <Member Id="M:Mono.CSharp.StateMachine.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.StateMachine.GetVariableMangledName(Mono.CSharp.ResolveContext,Mono.CSharp.LocalVariable)" />
      <Member Id="P:Mono.CSharp.StateMachine.OriginalTypeParameters" />
      <Member Id="P:Mono.CSharp.StateMachine.PC" />
      <Member Id="P:Mono.CSharp.StateMachine.StateMachineMethod" />
    </Type>
    <Type Name="Mono.CSharp.StateMachineInitializer" Id="T:Mono.CSharp.StateMachineInitializer">
      <Member Id="F:Mono.CSharp.StateMachineInitializer.current_pc" />
      <Member Id="F:Mono.CSharp.StateMachineInitializer.Host" />
      <Member Id="F:Mono.CSharp.StateMachineInitializer.move_next_error" />
      <Member Id="F:Mono.CSharp.StateMachineInitializer.move_next_ok" />
      <Member Id="F:Mono.CSharp.StateMachineInitializer.resume_points" />
      <Member Id="F:Mono.CSharp.StateMachineInitializer.storey" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.TypeDefinition,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.AddResumePoint(Mono.CSharp.ResumableStatement)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.CreateBlockContext(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.EmitLeave(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.EmitMoveNextEpilogue(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.InjectYield(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Int32,System.Boolean,System.Reflection.Emit.Label)" />
      <Member Id="M:Mono.CSharp.StateMachineInitializer.SetStateMachine(Mono.CSharp.StateMachine)" />
      <Member Id="P:Mono.CSharp.StateMachineInitializer.BodyEnd" />
      <Member Id="P:Mono.CSharp.StateMachineInitializer.CurrentPC" />
      <Member Id="P:Mono.CSharp.StateMachineInitializer.SkipFinally" />
      <Member Id="P:Mono.CSharp.StateMachineInitializer.Storey" />
    </Type>
    <Type Name="Mono.CSharp.StateMachineMethod" Id="T:Mono.CSharp.StateMachineMethod">
      <Member Id="M:Mono.CSharp.StateMachineMethod.#ctor(Mono.CSharp.StateMachine,Mono.CSharp.StateMachineInitializer,Mono.CSharp.FullNamedExpression,Mono.CSharp.Modifiers,Mono.CSharp.MemberName,Mono.CSharp.Block.Flags)" />
      <Member Id="M:Mono.CSharp.StateMachineMethod.CreateEmitContext(System.Reflection.Emit.ILGenerator,Mono.CompilerServices.SymbolWriter.SourceMethodBuilder)" />
    </Type>
    <Type Name="Mono.CSharp.Statement" Id="T:Mono.CSharp.Statement">
      <Member Id="F:Mono.CSharp.Statement.loc" />
      <Member Id="F:Mono.CSharp.Statement.reachable" />
      <Member Id="M:Mono.CSharp.Statement.#ctor" />
      <Member Id="M:Mono.CSharp.Statement.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Statement.CheckExitBoundaries(Mono.CSharp.BlockContext,Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.Statement.Clone(Mono.CSharp.CloneContext)" />
      <Member Id="M:Mono.CSharp.Statement.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Statement.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Statement.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Statement.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Statement.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Statement.Error_FinallyClauseExit(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Statement.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Statement.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Statement.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Statement.IsUnreachable" />
    </Type>
    <Type Name="Mono.CSharp.StatementErrorExpression" Id="T:Mono.CSharp.StatementErrorExpression">
      <Member Id="M:Mono.CSharp.StatementErrorExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.StatementErrorExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.StatementErrorExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.StatementErrorExpression.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StatementErrorExpression.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.StatementErrorExpression.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.StatementErrorExpression.Expr" />
    </Type>
    <Type Name="Mono.CSharp.StatementExpression" Id="T:Mono.CSharp.StatementExpression">
      <Member Id="M:Mono.CSharp.StatementExpression.#ctor(Mono.CSharp.ExpressionStatement)" />
      <Member Id="M:Mono.CSharp.StatementExpression.#ctor(Mono.CSharp.ExpressionStatement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StatementExpression.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.StatementExpression.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.StatementExpression.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StatementExpression.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.StatementExpression.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.StatementExpression.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.StatementExpression.Expr" />
    </Type>
    <Type Name="Mono.CSharp.StatementList" Id="T:Mono.CSharp.StatementList">
      <Member Id="M:Mono.CSharp.StatementList.#ctor(Mono.CSharp.Statement,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.StatementList.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.StatementList.Add(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.StatementList.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.StatementList.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StatementList.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.StatementList.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.StatementList.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.StatementList.Statements" />
    </Type>
    <Type Name="Mono.CSharp.StreamReportPrinter" Id="T:Mono.CSharp.StreamReportPrinter">
      <Member Id="M:Mono.CSharp.StreamReportPrinter.#ctor(System.IO.TextWriter)" />
      <Member Id="M:Mono.CSharp.StreamReportPrinter.Print(Mono.CSharp.AbstractMessage,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.StringConcat" Id="T:Mono.CSharp.StringConcat">
      <Member Id="M:Mono.CSharp.StringConcat.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.StringConcat.Create(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StringConcat.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.StringConcat.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.StringConcat.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StringConcat.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.StringConcat.MakeExpression(Mono.CSharp.BuilderContext)" />
    </Type>
    <Type Name="Mono.CSharp.StringConstant" Id="T:Mono.CSharp.StringConstant">
      <Member Id="M:Mono.CSharp.StringConstant.#ctor(Mono.CSharp.BuiltinTypes,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StringConstant.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StringConstant.#ctor(Mono.CSharp.TypeSpec,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StringConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.StringConstant.ConvertImplicitly(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.StringConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.StringConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.StringConstant.GetValue" />
      <Member Id="M:Mono.CSharp.StringConstant.GetValueAsLiteral" />
      <Member Id="M:Mono.CSharp.StringConstant.GetValueAsLong" />
      <Member Id="P:Mono.CSharp.StringConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.StringConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.StringConstant.IsNull" />
      <Member Id="P:Mono.CSharp.StringConstant.Value" />
    </Type>
    <Type Name="Mono.CSharp.StringLiteral" Id="T:Mono.CSharp.StringLiteral">
      <Member Id="M:Mono.CSharp.StringLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.StringLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.StringLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.Struct" Id="T:Mono.CSharp.Struct">
      <Member Id="M:Mono.CSharp.Struct.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Modifiers,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.Struct.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Struct.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.Struct.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.Struct.Emit" />
      <Member Id="M:Mono.CSharp.Struct.IsUnmanagedType" />
      <Member Id="M:Mono.CSharp.Struct.ResolveBaseTypes(Mono.CSharp.FullNamedExpression@)" />
      <Member Id="P:Mono.CSharp.Struct.AttributeTargets" />
      <Member Id="P:Mono.CSharp.Struct.HasUnmanagedCheckDone" />
    </Type>
    <Type Name="Mono.CSharp.StructuralVisitor" Id="T:Mono.CSharp.StructuralVisitor">
      <Member Id="M:Mono.CSharp.StructuralVisitor.#ctor" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.AnonymousMethodExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Arglist)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ArglistAccess)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ArrayCreation)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ArrayInitializer)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.As)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Await)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.BaseThis)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Binary)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.BlockConstant)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.BlockVariable)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.BooleanExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Break)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Cast)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Checked)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.CheckedExpr)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Class)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.CompilationSourceFile)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ComposedCast)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.CompoundAssign)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Conditional)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Const)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ConstInitializer)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Constructor)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Continue)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.DefaultParameterValueExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.DefaultValueExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Delegate)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Destructor)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Do)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ElementAccess)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.EmptyExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.EmptyExpressionStatement)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.EmptyStatement)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Enum)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.EnumMember)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ErrorExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.EventField)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.EventProperty)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Field)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Fixed)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.FixedField)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.For)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Foreach)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Goto)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.GotoCase)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.GotoDefault)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.If)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Indexer)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Indirection)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Interface)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Invocation)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Is)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.LabeledStatement)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.LambdaExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.GroupBy)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.GroupJoin)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.Join)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.Let)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.OrderByAscending)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.OrderByDescending)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.QueryExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.QueryStartClause)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.Select)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.SelectMany)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.ThenByAscending)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.ThenByDescending)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Linq.Where)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.LocalVariableReference)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Lock)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.MakeRefExpr)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.MemberAccess)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Method)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ModuleContainer)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.NamespaceContainer)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.New)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.NewAnonymousType)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.NewInitialize)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Nullable.NullCoalescingOperator)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Operator)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.ParenthesizedExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Property)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.QualifiedAliasMember)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.RefTypeExpr)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.RefValueExpr)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Return)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.SimpleAssign)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.SimpleName)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.SizeOf)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.StackAlloc)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.StatementErrorExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.StatementExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.StatementList)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Struct)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Switch)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.SwitchLabel)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.This)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Throw)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.TryCatch)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.TryFinally)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.TypeExpression)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.TypeOf)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Unary)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.UnaryMutator)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Unchecked)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.UnCheckedExpr)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Unsafe)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Using)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.UsingAliasNamespace)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.UsingExternAlias)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.UsingNamespace)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.While)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.Yield)" />
      <Member Id="M:Mono.CSharp.StructuralVisitor.Visit(Mono.CSharp.YieldBreak)" />
    </Type>
    <Type Name="Mono.CSharp.Switch" Id="T:Mono.CSharp.Switch">
      <Member Id="F:Mono.CSharp.Switch.Expr" />
      <Member Id="F:Mono.CSharp.Switch.SwitchType" />
      <Member Id="M:Mono.CSharp.Switch.#ctor(Mono.CSharp.Expression,Mono.CSharp.ExplicitBlock,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Switch.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Switch.AddEndDefiniteAssignment(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Switch.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Switch.CreateSwitchUserTypes(Mono.CSharp.ModuleContainer,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Switch.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Switch.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Switch.FindLabel(Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.Switch.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Switch.RegisterGotoCase(Mono.CSharp.GotoCase,Mono.CSharp.Constant)" />
      <Member Id="M:Mono.CSharp.Switch.RegisterLabel(Mono.CSharp.BlockContext,Mono.CSharp.SwitchLabel)" />
      <Member Id="M:Mono.CSharp.Switch.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.Switch.SetEndReachable" />
      <Member Id="P:Mono.CSharp.Switch.ActiveLabel" />
      <Member Id="P:Mono.CSharp.Switch.Block" />
      <Member Id="P:Mono.CSharp.Switch.DefaultLabel" />
      <Member Id="P:Mono.CSharp.Switch.ExpressionValue" />
      <Member Id="P:Mono.CSharp.Switch.IsNullable" />
      <Member Id="P:Mono.CSharp.Switch.IsPatternMatching" />
      <Member Id="P:Mono.CSharp.Switch.RegisteredLabels" />
    </Type>
    <Type Name="Mono.CSharp.SwitchGoto" Id="T:Mono.CSharp.SwitchGoto">
      <Member Id="F:Mono.CSharp.SwitchGoto.switch_statement" />
      <Member Id="F:Mono.CSharp.SwitchGoto.unwind_protect" />
      <Member Id="M:Mono.CSharp.SwitchGoto.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SwitchGoto.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.SwitchGoto.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.SwitchGoto.Error_GotoCaseRequiresSwitchBlock(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.SwitchGoto.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.SwitchGoto.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.SwitchLabel" Id="T:Mono.CSharp.SwitchLabel">
      <Member Id="M:Mono.CSharp.SwitchLabel.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.Error_AlreadyOccurs(Mono.CSharp.ResolveContext,Mono.CSharp.SwitchLabel)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.GetILLabel(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.SwitchLabel.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.SwitchLabel.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.SwitchLabel.Converted" />
      <Member Id="P:Mono.CSharp.SwitchLabel.IsDefault" />
      <Member Id="P:Mono.CSharp.SwitchLabel.Label" />
      <Member Id="P:Mono.CSharp.SwitchLabel.Location" />
      <Member Id="P:Mono.CSharp.SwitchLabel.PatternMatching" />
      <Member Id="P:Mono.CSharp.SwitchLabel.SectionStart" />
    </Type>
    <Type Name="Mono.CSharp.Target" Id="T:Mono.CSharp.Target">
      <Member Id="F:Mono.CSharp.Target.Exe" />
      <Member Id="F:Mono.CSharp.Target.Library" />
      <Member Id="F:Mono.CSharp.Target.Module" />
      <Member Id="F:Mono.CSharp.Target.WinExe" />
    </Type>
    <Type Name="Mono.CSharp.TemporaryVariableReference" Id="T:Mono.CSharp.TemporaryVariableReference">
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.#ctor(Mono.CSharp.LocalVariable,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Create(Mono.CSharp.TypeSpec,Mono.CSharp.Block,Mono.CSharp.Location,System.Boolean)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.GetHoistedVariable(Mono.CSharp.AnonymousExpression)" />
      <Member Id="M:Mono.CSharp.TemporaryVariableReference.SetHasAddressTaken" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.IsFixed" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.IsLockedByStatement" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.IsRef" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.LocalInfo" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.Name" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.Variable" />
      <Member Id="P:Mono.CSharp.TemporaryVariableReference.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.This" Id="T:Mono.CSharp.This">
      <Member Id="F:Mono.CSharp.This.variable_info" />
      <Member Id="M:Mono.CSharp.This.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.This.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.This.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.This.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.This.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.This.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.This.Error_ThisNotAvailable(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.This.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.This.GetHashCode" />
      <Member Id="M:Mono.CSharp.This.GetHoistedVariable(Mono.CSharp.AnonymousExpression)" />
      <Member Id="M:Mono.CSharp.This.IsThisAvailable(Mono.CSharp.ResolveContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.This.ResolveBase(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.This.SetHasAddressTaken" />
      <Member Id="P:Mono.CSharp.This.IsFixed" />
      <Member Id="P:Mono.CSharp.This.IsLockedByStatement" />
      <Member Id="P:Mono.CSharp.This.IsRef" />
      <Member Id="P:Mono.CSharp.This.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.This.Name" />
      <Member Id="P:Mono.CSharp.This.Variable" />
      <Member Id="P:Mono.CSharp.This.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.Throw" Id="T:Mono.CSharp.Throw">
      <Member Id="M:Mono.CSharp.Throw.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Throw.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Throw.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Throw.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Throw.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Throw.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Throw.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Throw.Expr" />
    </Type>
    <Type Name="Mono.CSharp.Tokenizer" Id="T:Mono.CSharp.Tokenizer">
      <Member Id="F:Mono.CSharp.Tokenizer.CompleteOnEOF" />
      <Member Id="F:Mono.CSharp.Tokenizer.DocumentationXref" />
      <Member Id="F:Mono.CSharp.Tokenizer.EvalCompilationUnitParserCharacter" />
      <Member Id="F:Mono.CSharp.Tokenizer.EvalStatementParserCharacter" />
      <Member Id="F:Mono.CSharp.Tokenizer.EvalUsingDeclarationsParserCharacter" />
      <Member Id="F:Mono.CSharp.Tokenizer.MaxIdentifierLength" />
      <Member Id="F:Mono.CSharp.Tokenizer.MaxNumberLength" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_attribute_section" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_block" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_catch_when" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_declaration" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_generic_declaration" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_generic_declaration_doc" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_interpolation_format" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_modifiers" />
      <Member Id="F:Mono.CSharp.Tokenizer.parsing_type" />
      <Member Id="M:Mono.CSharp.Tokenizer.#ctor(Mono.CSharp.SeekableStreamReader,Mono.CSharp.CompilationSourceFile,Mono.CSharp.ParserSession,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.Tokenizer.advance" />
      <Member Id="M:Mono.CSharp.Tokenizer.check_incorrect_doc_comment" />
      <Member Id="M:Mono.CSharp.Tokenizer.cleanup" />
      <Member Id="M:Mono.CSharp.Tokenizer.consume_doc_comment" />
      <Member Id="M:Mono.CSharp.Tokenizer.DiscardPosition" />
      <Member Id="M:Mono.CSharp.Tokenizer.IsEscapedIdentifier(Mono.CSharp.ATypeNameExpression)" />
      <Member Id="M:Mono.CSharp.Tokenizer.IsKeyword(System.String)" />
      <Member Id="M:Mono.CSharp.Tokenizer.IsValidIdentifier(System.String)" />
      <Member Id="M:Mono.CSharp.Tokenizer.peek_token" />
      <Member Id="M:Mono.CSharp.Tokenizer.PopPosition" />
      <Member Id="M:Mono.CSharp.Tokenizer.PushPosition" />
      <Member Id="M:Mono.CSharp.Tokenizer.putback(System.Int32)" />
      <Member Id="M:Mono.CSharp.Tokenizer.token" />
      <Member Id="M:Mono.CSharp.Tokenizer.value" />
      <Member Id="M:Mono.CSharp.Tokenizer.xtoken" />
      <Member Id="P:Mono.CSharp.Tokenizer.ConstraintsParsing" />
      <Member Id="P:Mono.CSharp.Tokenizer.doc_state" />
      <Member Id="P:Mono.CSharp.Tokenizer.EventParsing" />
      <Member Id="P:Mono.CSharp.Tokenizer.Line" />
      <Member Id="P:Mono.CSharp.Tokenizer.Location" />
      <Member Id="P:Mono.CSharp.Tokenizer.PropertyParsing" />
      <Member Id="P:Mono.CSharp.Tokenizer.Value" />
    </Type>
    <Type Name="Mono.CSharp.ToplevelBlock" Id="T:Mono.CSharp.ToplevelBlock">
      <Member Id="M:Mono.CSharp.ToplevelBlock.#ctor(Mono.CSharp.CompilerContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.#ctor(Mono.CSharp.CompilerContext,Mono.CSharp.ParametersCompiled,Mono.CSharp.Location,Mono.CSharp.Block.Flags)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.#ctor(Mono.CSharp.ParametersBlock,Mono.CSharp.ParametersCompiled)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.AddLabel(System.String,Mono.CSharp.LabeledStatement)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.AddLocalName(System.String,Mono.CSharp.INamedBlockVariable,System.Boolean)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.AddThisReferenceFromChildrenBlock(Mono.CSharp.ExplicitBlock)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.AddThisVariable(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.CheckControlExit(Mono.CSharp.FlowAnalysisContext,Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.GetAllParametersArguments" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.GetLocalName(System.String,Mono.CSharp.Block,Mono.CSharp.INamedBlockVariable@)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.GetUndeclaredVariables" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.IncludeBlock(Mono.CSharp.ParametersBlock,Mono.CSharp.ToplevelBlock)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.RemoveThisReferenceFromChildrenBlock(Mono.CSharp.ExplicitBlock)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.Resolve(Mono.CSharp.BlockContext,Mono.CSharp.IMethodData)" />
      <Member Id="M:Mono.CSharp.ToplevelBlock.SetUndeclaredVariables(System.Collections.Generic.HashSet{Mono.CSharp.LocalVariable})" />
      <Member Id="P:Mono.CSharp.ToplevelBlock.IsIterator" />
      <Member Id="P:Mono.CSharp.ToplevelBlock.Report" />
      <Member Id="P:Mono.CSharp.ToplevelBlock.ThisReferencesFromChildrenBlock" />
      <Member Id="P:Mono.CSharp.ToplevelBlock.ThisVariable" />
    </Type>
    <Type Name="Mono.CSharp.TryCatch" Id="T:Mono.CSharp.TryCatch">
      <Member Id="F:Mono.CSharp.TryCatch.Block" />
      <Member Id="M:Mono.CSharp.TryCatch.#ctor(Mono.CSharp.Block,System.Collections.Generic.List{Mono.CSharp.Catch},Mono.CSharp.Location,System.Boolean)" />
      <Member Id="M:Mono.CSharp.TryCatch.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.TryCatch.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.TryCatch.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryCatch.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.TryCatch.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.TryCatch.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.TryCatch.Clauses" />
      <Member Id="P:Mono.CSharp.TryCatch.HasClauseWithAwait" />
      <Member Id="P:Mono.CSharp.TryCatch.IsTryCatchFinally" />
    </Type>
    <Type Name="Mono.CSharp.TryFinally" Id="T:Mono.CSharp.TryFinally">
      <Member Id="M:Mono.CSharp.TryFinally.#ctor(Mono.CSharp.Statement,Mono.CSharp.ExplicitBlock,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TryFinally.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.TryFinally.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.TryFinally.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.TryFinally.EmitBeginFinallyBlock(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinally.EmitFinallyBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinally.EmitRedirectedJump(Mono.CSharp.EmitContext,Mono.CSharp.AsyncInitializer,System.Reflection.Emit.Label,Mono.CSharp.Block)" />
      <Member Id="M:Mono.CSharp.TryFinally.EmitRedirectedReturn(Mono.CSharp.EmitContext,Mono.CSharp.AsyncInitializer)" />
      <Member Id="M:Mono.CSharp.TryFinally.EmitTryBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinally.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.TryFinally.RegisterForControlExitCheck(Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.TryFinally.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.TryFinally.FinallyBlock" />
    </Type>
    <Type Name="Mono.CSharp.TryFinallyBlock" Id="T:Mono.CSharp.TryFinallyBlock">
      <Member Id="F:Mono.CSharp.TryFinallyBlock.stmt" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.#ctor(Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.EmitBeginFinallyBlock(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.EmitFinallyBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.EmitForDispose(Mono.CSharp.EmitContext,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.EmitTryBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.PrepareForDispose(Mono.CSharp.EmitContext,System.Reflection.Emit.Label)" />
      <Member Id="M:Mono.CSharp.TryFinallyBlock.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.TryFinallyBlock.Statement" />
    </Type>
    <Type Name="Mono.CSharp.TypeArguments" Id="T:Mono.CSharp.TypeArguments">
      <Member Id="M:Mono.CSharp.TypeArguments.#ctor(Mono.CSharp.FullNamedExpression[])" />
      <Member Id="M:Mono.CSharp.TypeArguments.Add(Mono.CSharp.FullNamedExpression)" />
      <Member Id="M:Mono.CSharp.TypeArguments.Clone" />
      <Member Id="M:Mono.CSharp.TypeArguments.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeArguments.Resolve(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="P:Mono.CSharp.TypeArguments.Arguments" />
      <Member Id="P:Mono.CSharp.TypeArguments.Count" />
      <Member Id="P:Mono.CSharp.TypeArguments.IsEmpty" />
      <Member Id="P:Mono.CSharp.TypeArguments.TypeExpressions" />
    </Type>
    <Type Name="Mono.CSharp.TypeCast" Id="T:Mono.CSharp.TypeCast">
      <Member Id="F:Mono.CSharp.TypeCast.child" />
      <Member Id="M:Mono.CSharp.TypeCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeCast.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.TypeCast.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.TypeCast.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TypeCast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TypeCast.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TypeCast.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.TypeCast.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.TypeCast.Child" />
      <Member Id="P:Mono.CSharp.TypeCast.IsNull" />
    </Type>
    <Type Name="Mono.CSharp.TypeContainer" Id="T:Mono.CSharp.TypeContainer">
      <Member Id="F:Mono.CSharp.TypeContainer.containers" />
      <Member Id="F:Mono.CSharp.TypeContainer.defined_names" />
      <Member Id="F:Mono.CSharp.TypeContainer.is_defined" />
      <Member Id="F:Mono.CSharp.TypeContainer.Kind" />
      <Member Id="M:Mono.CSharp.TypeContainer.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Attributes,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.TypeContainer.AddCompilerGeneratedClass(Mono.CSharp.CompilerGeneratedContainer)" />
      <Member Id="M:Mono.CSharp.TypeContainer.AddPartial(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.TypeContainer.AddPartial(Mono.CSharp.TypeDefinition,Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.TypeContainer.AddTypeContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeContainer.AddTypeContainerMember(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeContainer.CloseContainer" />
      <Member Id="M:Mono.CSharp.TypeContainer.CreateContainer" />
      <Member Id="M:Mono.CSharp.TypeContainer.CreateMetadataName(System.Text.StringBuilder)" />
      <Member Id="M:Mono.CSharp.TypeContainer.Define" />
      <Member Id="M:Mono.CSharp.TypeContainer.DefineContainer" />
      <Member Id="M:Mono.CSharp.TypeContainer.DefineNamespace" />
      <Member Id="M:Mono.CSharp.TypeContainer.DoDefineContainer" />
      <Member Id="M:Mono.CSharp.TypeContainer.EmitContainer" />
      <Member Id="M:Mono.CSharp.TypeContainer.Error_MissingPartialModifier(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.TypeContainer.ExpandBaseInterfaces" />
      <Member Id="M:Mono.CSharp.TypeContainer.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.TypeContainer.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeContainer.GetSignatureForMetadata" />
      <Member Id="M:Mono.CSharp.TypeContainer.PrepareEmit" />
      <Member Id="M:Mono.CSharp.TypeContainer.RemoveContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeContainer.VerifyMembers" />
      <Member Id="M:Mono.CSharp.TypeContainer.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.TypeContainer.Containers" />
      <Member Id="P:Mono.CSharp.TypeContainer.CounterAnonymousContainers" />
      <Member Id="P:Mono.CSharp.TypeContainer.CounterAnonymousMethods" />
      <Member Id="P:Mono.CSharp.TypeContainer.CounterSwitchTypes" />
      <Member Id="P:Mono.CSharp.TypeContainer.CurrentType" />
      <Member Id="P:Mono.CSharp.TypeContainer.DefinedNames" />
      <Member Id="P:Mono.CSharp.TypeContainer.PartialContainer" />
      <Member Id="P:Mono.CSharp.TypeContainer.UnattachedAttributes" />
    </Type>
    <Type Name="Mono.CSharp.TypeDefinition" Id="T:Mono.CSharp.TypeDefinition">
      <Member Id="F:Mono.CSharp.TypeDefinition.AnonymousMethodsCounter" />
      <Member Id="F:Mono.CSharp.TypeDefinition.base_type" />
      <Member Id="F:Mono.CSharp.TypeDefinition.DefaultIndexerName" />
      <Member Id="F:Mono.CSharp.TypeDefinition.DynamicSitesCounter" />
      <Member Id="F:Mono.CSharp.TypeDefinition.first_nonstatic_field" />
      <Member Id="F:Mono.CSharp.TypeDefinition.has_static_constructor" />
      <Member Id="F:Mono.CSharp.TypeDefinition.iface_exprs" />
      <Member Id="F:Mono.CSharp.TypeDefinition.initialized_fields" />
      <Member Id="F:Mono.CSharp.TypeDefinition.initialized_static_fields" />
      <Member Id="F:Mono.CSharp.TypeDefinition.MethodGroupsCounter" />
      <Member Id="F:Mono.CSharp.TypeDefinition.spec" />
      <Member Id="F:Mono.CSharp.TypeDefinition.type_bases" />
      <Member Id="F:Mono.CSharp.TypeDefinition.TypeBuilder" />
      <Member Id="M:Mono.CSharp.TypeDefinition.#ctor(Mono.CSharp.TypeContainer,Mono.CSharp.MemberName,Mono.CSharp.Attributes,Mono.CSharp.MemberKind)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddConstructor(Mono.CSharp.Constructor)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddConstructor(Mono.CSharp.Constructor,System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddField(Mono.CSharp.FieldBase)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddIndexer(Mono.CSharp.Indexer)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddMember(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddNameToContainer(Mono.CSharp.MemberCore,System.String)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddOperator(Mono.CSharp.Operator)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddPartialPart(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddTypeContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.AddTypeContainerMember(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.CloseContainer" />
      <Member Id="M:Mono.CSharp.TypeDefinition.CreateContainer" />
      <Member Id="M:Mono.CSharp.TypeDefinition.CreateHoistedBaseCallProxy(Mono.CSharp.ResolveContext,Mono.CSharp.MethodSpec)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.CreateMetadataName(System.Text.StringBuilder)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.CreateMethodSymbolEntry" />
      <Member Id="M:Mono.CSharp.TypeDefinition.Define" />
      <Member Id="M:Mono.CSharp.TypeDefinition.DefineBaseTypes" />
      <Member Id="M:Mono.CSharp.TypeDefinition.DoDefineContainer" />
      <Member Id="M:Mono.CSharp.TypeDefinition.DoDefineMembers" />
      <Member Id="M:Mono.CSharp.TypeDefinition.DoExpandBaseInterfaces" />
      <Member Id="M:Mono.CSharp.TypeDefinition.DoResolveTypeParameters" />
      <Member Id="M:Mono.CSharp.TypeDefinition.Emit" />
      <Member Id="M:Mono.CSharp.TypeDefinition.EmitContainer" />
      <Member Id="M:Mono.CSharp.TypeDefinition.ExpandBaseInterfaces" />
      <Member Id="M:Mono.CSharp.TypeDefinition.FilterNestedName(System.String)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.GetAttributeCoClass" />
      <Member Id="M:Mono.CSharp.TypeDefinition.GetAttributeDefaultMember" />
      <Member Id="M:Mono.CSharp.TypeDefinition.GetAttributeUsage(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.GetCompilationSourceFile" />
      <Member Id="M:Mono.CSharp.TypeDefinition.GetSignatureForMetadata" />
      <Member Id="M:Mono.CSharp.TypeDefinition.IsBaseTypeDefinition(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.IsClsComplianceRequired" />
      <Member Id="M:Mono.CSharp.TypeDefinition.IsUnmanagedType" />
      <Member Id="M:Mono.CSharp.TypeDefinition.LoadMembers(Mono.CSharp.TypeSpec,System.Boolean,Mono.CSharp.MemberCache@)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.LookupNamespaceOrType(System.String,System.Int32,Mono.CSharp.LookupMode,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.Mark_HasEquals" />
      <Member Id="M:Mono.CSharp.TypeDefinition.Mark_HasGetHashCode" />
      <Member Id="M:Mono.CSharp.TypeDefinition.MethodModifiersValid(Mono.CSharp.MemberCore)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.Mono#CSharp#ITypeDefinition#IsInternalAsPublic(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.PrepareEmit" />
      <Member Id="M:Mono.CSharp.TypeDefinition.RegisterFieldForInitialization(Mono.CSharp.MemberCore,Mono.CSharp.FieldInitializer)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.RemoveContainer(Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.ResolveBaseTypes(Mono.CSharp.FullNamedExpression@)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.ResolveFieldInitializers(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.SetBaseTypes(System.Collections.Generic.List{Mono.CSharp.FullNamedExpression})" />
      <Member Id="M:Mono.CSharp.TypeDefinition.SetPredefinedSpec(Mono.CSharp.BuiltinTypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.VerifyClsCompliance" />
      <Member Id="M:Mono.CSharp.TypeDefinition.VerifyImplements(Mono.CSharp.InterfaceMemberBase)" />
      <Member Id="M:Mono.CSharp.TypeDefinition.VerifyMembers" />
      <Member Id="M:Mono.CSharp.TypeDefinition.WriteDebugSymbol(Mono.CompilerServices.SymbolWriter.MonoSymbolFile)" />
      <Member Id="P:Mono.CSharp.TypeDefinition.AttributeTargets" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseType" />
      <Member Id="P:Mono.CSharp.TypeDefinition.BaseTypeExpressions" />
      <Member Id="P:Mono.CSharp.TypeDefinition.CurrentType" />
      <Member Id="P:Mono.CSharp.TypeDefinition.CurrentTypeParameters" />
      <Member Id="P:Mono.CSharp.TypeDefinition.DeclaringAssembly" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Definition" />
      <Member Id="P:Mono.CSharp.TypeDefinition.DocComment" />
      <Member Id="P:Mono.CSharp.TypeDefinition.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasEquals" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasExplicitLayout" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasGetHashCode" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasInstanceConstructor" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasMembersDefined" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasOperators" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasStaticFieldInitializer" />
      <Member Id="P:Mono.CSharp.TypeDefinition.HasStructLayout" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Interfaces" />
      <Member Id="P:Mono.CSharp.TypeDefinition.IsComImport" />
      <Member Id="P:Mono.CSharp.TypeDefinition.IsGenericOrParentIsGeneric" />
      <Member Id="P:Mono.CSharp.TypeDefinition.IsPartial" />
      <Member Id="P:Mono.CSharp.TypeDefinition.IsTopLevel" />
      <Member Id="P:Mono.CSharp.TypeDefinition.MemberCache" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Members" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Mono#CSharp#ITypeDefinition#DeclaringAssembly" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Mono#CSharp#ITypeDefinition#IsCyclicTypeForwarder" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Mono#CSharp#ITypeDefinition#IsTypeForwarder" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Mono#CSharp#ITypeDefinition#Namespace" />
      <Member Id="P:Mono.CSharp.TypeDefinition.Mono#CSharp#ITypeDefinition#TypeParameters" />
      <Member Id="P:Mono.CSharp.TypeDefinition.PendingImplementations" />
      <Member Id="P:Mono.CSharp.TypeDefinition.PrimaryConstructorBaseArguments" />
      <Member Id="P:Mono.CSharp.TypeDefinition.PrimaryConstructorBaseArgumentsStart" />
      <Member Id="P:Mono.CSharp.TypeDefinition.PrimaryConstructorParameters" />
      <Member Id="P:Mono.CSharp.TypeDefinition.TypeAttr" />
      <Member Id="P:Mono.CSharp.TypeDefinition.TypeParametersAll" />
      <Member Id="P:Mono.CSharp.TypeDefinition.TypeParametersCount" />
      <Member Id="P:Mono.CSharp.TypeDefinition.ValidAttributeTargets" />
    </Type>
    <Type Name="Mono.CSharp.TypeExpr" Id="T:Mono.CSharp.TypeExpr">
      <Member Id="M:Mono.CSharp.TypeExpr.#ctor" />
      <Member Id="M:Mono.CSharp.TypeExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TypeExpr.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.TypeExpr.GetHashCode" />
      <Member Id="M:Mono.CSharp.TypeExpr.ResolveAsTypeOrNamespace(Mono.CSharp.IMemberContext,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.TypeExpression" Id="T:Mono.CSharp.TypeExpression">
      <Member Id="M:Mono.CSharp.TypeExpression.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TypeExpression.ResolveAsType(Mono.CSharp.IMemberContext,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.TypeExtensions" Id="T:Mono.CSharp.TypeExtensions">
      <Member Id="M:Mono.CSharp.TypeExtensions.GetNamespace(System.Type)" />
    </Type>
    <Type Name="Mono.CSharp.TypeInferenceContext" Id="T:Mono.CSharp.TypeInferenceContext">
      <Member Id="M:Mono.CSharp.TypeInferenceContext.#ctor" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.#ctor(Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.AddCommonTypeBound(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.AddCommonTypeBoundAsync(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.ExactInference(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.FixAllTypes(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.FixDependentTypes(Mono.CSharp.ResolveContext,System.Boolean@)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.FixIndependentTypeArguments(Mono.CSharp.ResolveContext,Mono.CSharp.TypeSpec[],System.Boolean@)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.FixType(Mono.CSharp.ResolveContext,System.Int32)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.HasBounds(System.Int32)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.InflateGenericArgument(Mono.CSharp.IModuleContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.IsReturnTypeNonDependent(Mono.CSharp.MethodSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.LowerBoundInference(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeInferenceContext.OutputTypeInference(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.TypeInferenceContext.InferredTypeArguments" />
      <Member Id="P:Mono.CSharp.TypeInferenceContext.UnfixedVariableExists" />
    </Type>
    <Type Name="Mono.CSharp.TypeInfo" Id="T:Mono.CSharp.TypeInfo">
      <Member Id="F:Mono.CSharp.TypeInfo.IsStruct" />
      <Member Id="F:Mono.CSharp.TypeInfo.Length" />
      <Member Id="F:Mono.CSharp.TypeInfo.Offset" />
      <Member Id="F:Mono.CSharp.TypeInfo.SubStructInfo" />
      <Member Id="F:Mono.CSharp.TypeInfo.TotalLength" />
      <Member Id="M:Mono.CSharp.TypeInfo.GetFieldIndex(System.String)" />
      <Member Id="M:Mono.CSharp.TypeInfo.GetStructField(System.String)" />
      <Member Id="M:Mono.CSharp.TypeInfo.GetTypeInfo(Mono.CSharp.TypeSpec,Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.TypeInfo.IsFullyInitialized(Mono.CSharp.FlowAnalysisContext,Mono.CSharp.VariableInfo,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TypeInfo.Reset" />
      <Member Id="M:Mono.CSharp.TypeInfo.ToString" />
    </Type>
    <Type Name="Mono.CSharp.TypeOf" Id="T:Mono.CSharp.TypeOf">
      <Member Id="M:Mono.CSharp.TypeOf.#ctor(Mono.CSharp.FullNamedExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TypeOf.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.TypeOf.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.TypeOf.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.TypeOf.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.TypeOf.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TypeOf.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.TypeOf.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.TypeOf.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.TypeOf.IsSideEffectFree" />
      <Member Id="P:Mono.CSharp.TypeOf.TypeArgument" />
      <Member Id="P:Mono.CSharp.TypeOf.TypeExpression" />
    </Type>
    <Type Name="Mono.CSharp.TypeParameter" Id="T:Mono.CSharp.TypeParameter">
      <Member Id="M:Mono.CSharp.TypeParameter.#ctor(Mono.CSharp.MemberName,Mono.CSharp.Attributes,Mono.CSharp.VarianceDecl)" />
      <Member Id="M:Mono.CSharp.TypeParameter.#ctor(Mono.CSharp.TypeParameterSpec,Mono.CSharp.TypeSpec,Mono.CSharp.MemberName,Mono.CSharp.Attributes)" />
      <Member Id="M:Mono.CSharp.TypeParameter.#ctor(System.Int32,Mono.CSharp.MemberName,Mono.CSharp.Constraints,Mono.CSharp.Attributes,Mono.CSharp.Variance)" />
      <Member Id="M:Mono.CSharp.TypeParameter.AddPartialConstraints(Mono.CSharp.TypeDefinition,Mono.CSharp.TypeParameter)" />
      <Member Id="M:Mono.CSharp.TypeParameter.ApplyAttributeBuilder(Mono.CSharp.Attribute,Mono.CSharp.MethodSpec,System.Byte[],Mono.CSharp.PredefinedAttributes)" />
      <Member Id="M:Mono.CSharp.TypeParameter.CheckGenericConstraints(System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeParameter.Create(Mono.CSharp.TypeSpec,Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeParameter.CreateHoistedCopy(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameter.Define" />
      <Member Id="M:Mono.CSharp.TypeParameter.Define(Mono.CSharp.TypeParameter)" />
      <Member Id="M:Mono.CSharp.TypeParameter.Define(System.Reflection.Emit.GenericTypeParameterBuilder)" />
      <Member Id="M:Mono.CSharp.TypeParameter.Emit" />
      <Member Id="M:Mono.CSharp.TypeParameter.EmitConstraints(System.Reflection.Emit.GenericTypeParameterBuilder)" />
      <Member Id="M:Mono.CSharp.TypeParameter.ErrorInvalidVariance(Mono.CSharp.IMemberContext,Mono.CSharp.Variance)" />
      <Member Id="M:Mono.CSharp.TypeParameter.GetAttributeCoClass" />
      <Member Id="M:Mono.CSharp.TypeParameter.GetAttributeDefaultMember" />
      <Member Id="M:Mono.CSharp.TypeParameter.GetAttributeUsage(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.TypeParameter.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.TypeParameter.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeParameter.IsClsComplianceRequired" />
      <Member Id="M:Mono.CSharp.TypeParameter.LoadMembers(Mono.CSharp.TypeSpec,System.Boolean,Mono.CSharp.MemberCache@)" />
      <Member Id="M:Mono.CSharp.TypeParameter.Mono#CSharp#ITypeDefinition#IsInternalAsPublic(Mono.CSharp.IAssemblyDefinition)" />
      <Member Id="M:Mono.CSharp.TypeParameter.ResolveConstraints(Mono.CSharp.IMemberContext)" />
      <Member Id="M:Mono.CSharp.TypeParameter.VerifyClsCompliance" />
      <Member Id="M:Mono.CSharp.TypeParameter.WarningParentNameConflict(Mono.CSharp.TypeParameter)" />
      <Member Id="P:Mono.CSharp.TypeParameter.AttributeTargets" />
      <Member Id="P:Mono.CSharp.TypeParameter.Constraints" />
      <Member Id="P:Mono.CSharp.TypeParameter.DeclaringAssembly" />
      <Member Id="P:Mono.CSharp.TypeParameter.DocCommentHeader" />
      <Member Id="P:Mono.CSharp.TypeParameter.IsMethodTypeParameter" />
      <Member Id="P:Mono.CSharp.TypeParameter.Mono#CSharp#ITypeDefinition#IsComImport" />
      <Member Id="P:Mono.CSharp.TypeParameter.Mono#CSharp#ITypeDefinition#IsCyclicTypeForwarder" />
      <Member Id="P:Mono.CSharp.TypeParameter.Mono#CSharp#ITypeDefinition#IsPartial" />
      <Member Id="P:Mono.CSharp.TypeParameter.Mono#CSharp#ITypeDefinition#IsTypeForwarder" />
      <Member Id="P:Mono.CSharp.TypeParameter.Name" />
      <Member Id="P:Mono.CSharp.TypeParameter.Namespace" />
      <Member Id="P:Mono.CSharp.TypeParameter.Type" />
      <Member Id="P:Mono.CSharp.TypeParameter.TypeParameters" />
      <Member Id="P:Mono.CSharp.TypeParameter.TypeParametersCount" />
      <Member Id="P:Mono.CSharp.TypeParameter.ValidAttributeTargets" />
      <Member Id="P:Mono.CSharp.TypeParameter.Variance" />
      <Member Id="P:Mono.CSharp.TypeParameter.VarianceDecl" />
    </Type>
    <Type Name="Mono.CSharp.TypeParameterExpr" Id="T:Mono.CSharp.TypeParameterExpr">
      <Member Id="M:Mono.CSharp.TypeParameterExpr.#ctor(Mono.CSharp.TypeParameter,Mono.CSharp.Location)" />
    </Type>
    <Type Name="Mono.CSharp.TypeParameterInflator" Id="T:Mono.CSharp.TypeParameterInflator">
      <Member Id="M:Mono.CSharp.TypeParameterInflator.#ctor(Mono.CSharp.IModuleContext,Mono.CSharp.TypeSpec,Mono.CSharp.TypeParameterSpec[],Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.TypeParameterInflator.#ctor(Mono.CSharp.TypeParameterInflator,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterInflator.Inflate(Mono.CSharp.TypeParameterSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterInflator.Inflate(Mono.CSharp.TypeSpec)" />
      <Member Id="P:Mono.CSharp.TypeParameterInflator.Context" />
      <Member Id="P:Mono.CSharp.TypeParameterInflator.TypeInstance" />
      <Member Id="P:Mono.CSharp.TypeParameterInflator.TypeParameters" />
    </Type>
    <Type Name="Mono.CSharp.TypeParameterMutator" Id="T:Mono.CSharp.TypeParameterMutator">
      <Member Id="M:Mono.CSharp.TypeParameterMutator.#ctor(Mono.CSharp.TypeParameters,Mono.CSharp.TypeParameters)" />
      <Member Id="M:Mono.CSharp.TypeParameterMutator.#ctor(Mono.CSharp.TypeParameterSpec[],Mono.CSharp.TypeParameters)" />
      <Member Id="M:Mono.CSharp.TypeParameterMutator.GetMemberDeclaringType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterMutator.Mutate(Mono.CSharp.TypeParameterSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterMutator.Mutate(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterMutator.Mutate(Mono.CSharp.TypeSpec[])" />
      <Member Id="P:Mono.CSharp.TypeParameterMutator.MethodTypeParameters" />
    </Type>
    <Type Name="Mono.CSharp.TypeParameters" Id="T:Mono.CSharp.TypeParameters">
      <Member Id="M:Mono.CSharp.TypeParameters.#ctor" />
      <Member Id="M:Mono.CSharp.TypeParameters.#ctor(System.Int32)" />
      <Member Id="M:Mono.CSharp.TypeParameters.Add(Mono.CSharp.TypeParameter)" />
      <Member Id="M:Mono.CSharp.TypeParameters.Add(Mono.CSharp.TypeParameters)" />
      <Member Id="M:Mono.CSharp.TypeParameters.CheckPartialConstraints(Mono.CSharp.Method)" />
      <Member Id="M:Mono.CSharp.TypeParameters.Create(Mono.CSharp.TypeSpec,System.Int32,Mono.CSharp.TypeContainer)" />
      <Member Id="M:Mono.CSharp.TypeParameters.Define(System.Reflection.Emit.GenericTypeParameterBuilder[])" />
      <Member Id="M:Mono.CSharp.TypeParameters.Find(System.String)" />
      <Member Id="M:Mono.CSharp.TypeParameters.GetAllNames" />
      <Member Id="M:Mono.CSharp.TypeParameters.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeParameters.UpdateConstraints(Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.TypeParameters.VerifyClsCompliance" />
      <Member Id="P:Mono.CSharp.TypeParameters.Count" />
      <Member Id="P:Mono.CSharp.TypeParameters.Item(System.Int32)" />
      <Member Id="P:Mono.CSharp.TypeParameters.Types" />
    </Type>
    <Type Name="Mono.CSharp.TypeParameterSpec" Id="T:Mono.CSharp.TypeParameterSpec">
      <Member Id="F:Mono.CSharp.TypeParameterSpec.EmptyTypes" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.#ctor(Mono.CSharp.TypeSpec,System.Int32,Mono.CSharp.ITypeDefinition,Mono.CSharp.SpecialConstraint,Mono.CSharp.Variance,System.Type)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.#ctor(System.Int32,Mono.CSharp.ITypeDefinition,Mono.CSharp.SpecialConstraint,Mono.CSharp.Variance,System.Type)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.DisplayDebugInfo" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.GetEffectiveBase" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.GetSignatureForDocumentation(System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.HasAnyTypeParameterConstrained(Mono.CSharp.IGenericMethodDefinition)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.HasAnyTypeParameterTypeConstrained(Mono.CSharp.IGenericMethodDefinition)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.HasDependencyOn(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.HasSameConstraintsDefinition(Mono.CSharp.TypeParameterSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.HasSameConstraintsImplementation(Mono.CSharp.TypeParameterSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.InflateConstraints(Mono.CSharp.TypeParameterInflator,Mono.CSharp.TypeParameterSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.InflateConstraints(Mono.CSharp.TypeParameterInflator,Mono.CSharp.TypeParameterSpec[])" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.InflateConstraints``1(Mono.CSharp.TypeParameterSpec[],System.Func{``0,Mono.CSharp.TypeParameterInflator},``0)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.InitializeMemberCache(System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.IsConvertibleToInterface(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeParameterSpec.Mutate(Mono.CSharp.TypeParameterMutator)" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.DeclaredPosition" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.HasAnyTypeConstraint" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.HasSpecialClass" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.HasSpecialConstructor" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.HasSpecialStruct" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.HasTypeConstraint" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.InterfaceCache" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.Interfaces" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.InterfacesDefined" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.IsConstrained" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.IsMethodOwned" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.IsReferenceType" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.IsValueType" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.Name" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.SpecialConstraint" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.TypeArguments" />
      <Member Id="P:Mono.CSharp.TypeParameterSpec.Variance" />
    </Type>
    <Type Name="Mono.CSharp.TypeSpec" Id="T:Mono.CSharp.TypeSpec">
      <Member Id="F:Mono.CSharp.TypeSpec.cache" />
      <Member Id="F:Mono.CSharp.TypeSpec.EmptyTypes" />
      <Member Id="F:Mono.CSharp.TypeSpec.ifaces" />
      <Member Id="F:Mono.CSharp.TypeSpec.info" />
      <Member Id="M:Mono.CSharp.TypeSpec.#ctor(Mono.CSharp.MemberKind,Mono.CSharp.TypeSpec,Mono.CSharp.ITypeDefinition,System.Type,Mono.CSharp.Modifiers)" />
      <Member Id="M:Mono.CSharp.TypeSpec.AddInterface(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.AddInterfaceDefined(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetAllTypeArguments(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetAttributeUsage(Mono.CSharp.PredefinedAttribute)" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetDefinition" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetMetaInfo" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetSignatureForDocumentation" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetSignatureForDocumentation(System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetSignatureForErrorIncludingAssemblyName" />
      <Member Id="M:Mono.CSharp.TypeSpec.GetTypeNameSignature" />
      <Member Id="M:Mono.CSharp.TypeSpec.ImplementsInterface(Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeSpec.InflateMember(Mono.CSharp.TypeParameterInflator)" />
      <Member Id="M:Mono.CSharp.TypeSpec.InitializeMemberCache(System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeSpec.IsBaseClass(Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec,System.Boolean)" />
      <Member Id="M:Mono.CSharp.TypeSpec.IsNonNullableValueType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.IsReferenceType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.IsValueType(Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.MakeGenericType(Mono.CSharp.IModuleContext,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.TypeSpec.Mutate(Mono.CSharp.TypeParameterMutator)" />
      <Member Id="M:Mono.CSharp.TypeSpec.ResolveMissingDependencies(Mono.CSharp.MemberSpec)" />
      <Member Id="M:Mono.CSharp.TypeSpec.SetExtensionMethodContainer" />
      <Member Id="M:Mono.CSharp.TypeSpec.SetMetaInfo(System.Type)" />
      <Member Id="M:Mono.CSharp.TypeSpec.UpdateInflatedInstancesBaseType" />
      <Member Id="P:Mono.CSharp.TypeSpec.Arity" />
      <Member Id="P:Mono.CSharp.TypeSpec.BaseType" />
      <Member Id="P:Mono.CSharp.TypeSpec.BuiltinType" />
      <Member Id="P:Mono.CSharp.TypeSpec.HasDynamicElement" />
      <Member Id="P:Mono.CSharp.TypeSpec.Interfaces" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsArray" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsArrayGenericInterface" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsAttribute" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsClass" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsConstantCompatible" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsDelegate" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsEnum" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsExpressionTreeType" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsGenericOrParentIsGeneric" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsGenericParameter" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsGenericTask" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsInterface" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsNested" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsNullableType" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsPointer" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsSealed" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsSpecialRuntimeType" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsStruct" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsStructOrEnum" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsTypeBuilder" />
      <Member Id="P:Mono.CSharp.TypeSpec.IsUnmanaged" />
      <Member Id="P:Mono.CSharp.TypeSpec.MemberCache" />
      <Member Id="P:Mono.CSharp.TypeSpec.MemberCacheTypes" />
      <Member Id="P:Mono.CSharp.TypeSpec.MemberDefinition" />
      <Member Id="P:Mono.CSharp.TypeSpec.TypeArguments" />
    </Type>
    <Type Name="Mono.CSharp.UIntConstant" Id="T:Mono.CSharp.UIntConstant">
      <Member Id="F:Mono.CSharp.UIntConstant.Value" />
      <Member Id="M:Mono.CSharp.UIntConstant.#ctor(Mono.CSharp.BuiltinTypes,System.UInt32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UIntConstant.#ctor(Mono.CSharp.TypeSpec,System.UInt32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UIntConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.UIntConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UIntConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.UIntConstant.GetValue" />
      <Member Id="M:Mono.CSharp.UIntConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.UIntConstant.Increment" />
      <Member Id="P:Mono.CSharp.UIntConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.UIntConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.UIntConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.UIntConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.UIntLiteral" Id="T:Mono.CSharp.UIntLiteral">
      <Member Id="M:Mono.CSharp.UIntLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.UInt32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UIntLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.UIntLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.ULongConstant" Id="T:Mono.CSharp.ULongConstant">
      <Member Id="F:Mono.CSharp.ULongConstant.Value" />
      <Member Id="M:Mono.CSharp.ULongConstant.#ctor(Mono.CSharp.BuiltinTypes,System.UInt64,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ULongConstant.#ctor(Mono.CSharp.TypeSpec,System.UInt64,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ULongConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ULongConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.ULongConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.ULongConstant.GetValue" />
      <Member Id="M:Mono.CSharp.ULongConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.ULongConstant.Increment" />
      <Member Id="P:Mono.CSharp.ULongConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.ULongConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.ULongConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.ULongConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.ULongLiteral" Id="T:Mono.CSharp.ULongLiteral">
      <Member Id="M:Mono.CSharp.ULongLiteral.#ctor(Mono.CSharp.BuiltinTypes,System.UInt64,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.ULongLiteral.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.ULongLiteral.IsLiteral" />
    </Type>
    <Type Name="Mono.CSharp.Unary" Id="T:Mono.CSharp.Unary">
      <Member Id="F:Mono.CSharp.Unary.Expr" />
      <Member Id="F:Mono.CSharp.Unary.Oper" />
      <Member Id="M:Mono.CSharp.Unary.#ctor(Mono.CSharp.Unary.Operator,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Unary.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Unary.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Unary.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Unary.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Unary.CreatePredefinedOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <Member Id="M:Mono.CSharp.Unary.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Unary.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Unary.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Unary.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Unary.EmitOperator(Mono.CSharp.EmitContext,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Unary.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Unary.Error_Ambiguous(Mono.CSharp.ResolveContext,System.String,Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Unary.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Unary.FlowAnalysisConditional(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Unary.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Unary.OperName(Mono.CSharp.Unary.Operator)" />
      <Member Id="M:Mono.CSharp.Unary.ResolveEnumOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.Unary.ResolveOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Unary.ResolveUserOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
    </Type>
    <Type Name="Mono.CSharp.UnaryMutator" Id="T:Mono.CSharp.UnaryMutator">
      <Member Id="F:Mono.CSharp.UnaryMutator.expr" />
      <Member Id="M:Mono.CSharp.UnaryMutator.#ctor(Mono.CSharp.UnaryMutator.Mode,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.UnaryMutator.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.CreatePredefinedOperatorsTable(Mono.CSharp.BuiltinTypes)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.DoResolveOperation(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.EmitOperation(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.EmitStatement(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.UnaryMutator.OperName(Mono.CSharp.UnaryMutator.Mode)" />
      <Member Id="P:Mono.CSharp.UnaryMutator.Expr" />
      <Member Id="P:Mono.CSharp.UnaryMutator.StartLocation" />
      <Member Id="P:Mono.CSharp.UnaryMutator.UnaryMutatorMode" />
    </Type>
    <Type Name="Mono.CSharp.UnboundTypeArguments" Id="T:Mono.CSharp.UnboundTypeArguments">
      <Member Id="M:Mono.CSharp.UnboundTypeArguments.#ctor(System.Int32,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UnboundTypeArguments.Resolve(Mono.CSharp.IMemberContext,System.Boolean)" />
      <Member Id="P:Mono.CSharp.UnboundTypeArguments.IsEmpty" />
    </Type>
    <Type Name="Mono.CSharp.UnboxCast" Id="T:Mono.CSharp.UnboxCast">
      <Member Id="M:Mono.CSharp.UnboxCast.#ctor(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.UnboxCast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnboxCast.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.Unchecked" Id="T:Mono.CSharp.Unchecked">
      <Member Id="F:Mono.CSharp.Unchecked.Block" />
      <Member Id="M:Mono.CSharp.Unchecked.#ctor(Mono.CSharp.Block,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Unchecked.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Unchecked.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Unchecked.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Unchecked.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Unchecked.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Unchecked.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.UnCheckedExpr" Id="T:Mono.CSharp.UnCheckedExpr">
      <Member Id="F:Mono.CSharp.UnCheckedExpr.Expr" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.UnCheckedExpr.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
    </Type>
    <Type Name="Mono.CSharp.Undo" Id="T:Mono.CSharp.Undo">
      <Member Id="M:Mono.CSharp.Undo.#ctor" />
      <Member Id="M:Mono.CSharp.Undo.AddTypeContainer(Mono.CSharp.TypeContainer,Mono.CSharp.TypeDefinition)" />
      <Member Id="M:Mono.CSharp.Undo.ExecuteUndo" />
    </Type>
    <Type Name="Mono.CSharp.UnixUtils" Id="T:Mono.CSharp.UnixUtils">
      <Member Id="M:Mono.CSharp.UnixUtils.#ctor" />
      <Member Id="M:Mono.CSharp.UnixUtils.isatty(System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.UnreachableExpression" Id="T:Mono.CSharp.UnreachableExpression">
      <Member Id="M:Mono.CSharp.UnreachableExpression.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.UnreachableExpression.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnreachableExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UnreachableExpression.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UnreachableExpression.EmitBranchable(Mono.CSharp.EmitContext,System.Reflection.Emit.Label,System.Boolean)" />
      <Member Id="M:Mono.CSharp.UnreachableExpression.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
    </Type>
    <Type Name="Mono.CSharp.Unsafe" Id="T:Mono.CSharp.Unsafe">
      <Member Id="F:Mono.CSharp.Unsafe.Block" />
      <Member Id="M:Mono.CSharp.Unsafe.#ctor(Mono.CSharp.Block,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Unsafe.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Unsafe.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Unsafe.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Unsafe.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Unsafe.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Unsafe.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.UserCast" Id="T:Mono.CSharp.UserCast">
      <Member Id="M:Mono.CSharp.UserCast.#ctor(Mono.CSharp.MethodSpec,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UserCast.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.UserCast.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UserCast.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UserCast.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UserCast.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.UserCast.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.UserCast.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="P:Mono.CSharp.UserCast.Source" />
    </Type>
    <Type Name="Mono.CSharp.UserOperatorCall" Id="T:Mono.CSharp.UserOperatorCall">
      <Member Id="F:Mono.CSharp.UserOperatorCall.arguments" />
      <Member Id="F:Mono.CSharp.UserOperatorCall.oper" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.#ctor(Mono.CSharp.MethodSpec,Mono.CSharp.Arguments,System.Func{Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Expression},Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.UserOperatorCall.MakeExpression(Mono.CSharp.BuilderContext)" />
    </Type>
    <Type Name="Mono.CSharp.UShortConstant" Id="T:Mono.CSharp.UShortConstant">
      <Member Id="F:Mono.CSharp.UShortConstant.Value" />
      <Member Id="M:Mono.CSharp.UShortConstant.#ctor(Mono.CSharp.BuiltinTypes,System.UInt16,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UShortConstant.#ctor(Mono.CSharp.TypeSpec,System.UInt16,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UShortConstant.ConvertExplicitly(System.Boolean,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.UShortConstant.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.UShortConstant.EncodeAttributeValue(Mono.CSharp.IMemberContext,Mono.CSharp.AttributeEncoder,Mono.CSharp.TypeSpec,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.UShortConstant.GetValue" />
      <Member Id="M:Mono.CSharp.UShortConstant.GetValueAsLong" />
      <Member Id="M:Mono.CSharp.UShortConstant.Increment" />
      <Member Id="P:Mono.CSharp.UShortConstant.IsDefaultValue" />
      <Member Id="P:Mono.CSharp.UShortConstant.IsNegative" />
      <Member Id="P:Mono.CSharp.UShortConstant.IsOneInteger" />
      <Member Id="P:Mono.CSharp.UShortConstant.IsZeroInteger" />
    </Type>
    <Type Name="Mono.CSharp.Using" Id="T:Mono.CSharp.Using">
      <Member Id="M:Mono.CSharp.Using.#ctor(Mono.CSharp.Expression,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Using.#ctor(Mono.CSharp.Using.VariableDeclaration,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Using.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Using.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.Using.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Using.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Using.EmitFinallyBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Using.EmitTryBody(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Using.EmitTryBodyPrepare(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Using.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.Using.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.Using.Expr" />
      <Member Id="P:Mono.CSharp.Using.Variables" />
    </Type>
    <Type Name="Mono.CSharp.UsingAliasNamespace" Id="T:Mono.CSharp.UsingAliasNamespace">
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.#ctor(Mono.CSharp.SimpleMemberName,Mono.CSharp.ATypeNameExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UsingAliasNamespace.Define(Mono.CSharp.NamespaceContainer)" />
      <Member Id="P:Mono.CSharp.UsingAliasNamespace.Alias" />
    </Type>
    <Type Name="Mono.CSharp.UsingClause" Id="T:Mono.CSharp.UsingClause">
      <Member Id="F:Mono.CSharp.UsingClause.resolved" />
      <Member Id="M:Mono.CSharp.UsingClause.#ctor(Mono.CSharp.ATypeNameExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UsingClause.Define(Mono.CSharp.NamespaceContainer)" />
      <Member Id="M:Mono.CSharp.UsingClause.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.UsingClause.ToString" />
      <Member Id="P:Mono.CSharp.UsingClause.Alias" />
      <Member Id="P:Mono.CSharp.UsingClause.Location" />
      <Member Id="P:Mono.CSharp.UsingClause.NamespaceExpression" />
      <Member Id="P:Mono.CSharp.UsingClause.ResolvedExpression" />
    </Type>
    <Type Name="Mono.CSharp.UsingExternAlias" Id="T:Mono.CSharp.UsingExternAlias">
      <Member Id="M:Mono.CSharp.UsingExternAlias.#ctor(Mono.CSharp.SimpleMemberName,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UsingExternAlias.Define(Mono.CSharp.NamespaceContainer)" />
    </Type>
    <Type Name="Mono.CSharp.UsingNamespace" Id="T:Mono.CSharp.UsingNamespace">
      <Member Id="M:Mono.CSharp.UsingNamespace.#ctor(Mono.CSharp.ATypeNameExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UsingNamespace.Define(Mono.CSharp.NamespaceContainer)" />
    </Type>
    <Type Name="Mono.CSharp.UsingType" Id="T:Mono.CSharp.UsingType">
      <Member Id="M:Mono.CSharp.UsingType.#ctor(Mono.CSharp.ATypeNameExpression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.UsingType.Define(Mono.CSharp.NamespaceContainer)" />
    </Type>
    <Type Name="Mono.CSharp.ValueModificationHandler" Id="T:Mono.CSharp.ValueModificationHandler" />
    <Type Name="Mono.CSharp.VariableInfo" Id="T:Mono.CSharp.VariableInfo">
      <Member Id="F:Mono.CSharp.VariableInfo.IsParameter" />
      <Member Id="M:Mono.CSharp.VariableInfo.Create(Mono.CSharp.BlockContext,Mono.CSharp.LocalVariable)" />
      <Member Id="M:Mono.CSharp.VariableInfo.Create(Mono.CSharp.BlockContext,Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.VariableInfo.GetStructFieldInfo(System.String)" />
      <Member Id="M:Mono.CSharp.VariableInfo.IsAssigned(Mono.CSharp.DefiniteAssignmentBitSet)" />
      <Member Id="M:Mono.CSharp.VariableInfo.IsFullyInitialized(Mono.CSharp.FlowAnalysisContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.VariableInfo.IsStructFieldAssigned(Mono.CSharp.DefiniteAssignmentBitSet,System.String)" />
      <Member Id="M:Mono.CSharp.VariableInfo.SetAssigned(Mono.CSharp.DefiniteAssignmentBitSet,System.Boolean)" />
      <Member Id="M:Mono.CSharp.VariableInfo.SetStructFieldAssigned(Mono.CSharp.DefiniteAssignmentBitSet,System.String)" />
      <Member Id="M:Mono.CSharp.VariableInfo.ToString" />
      <Member Id="P:Mono.CSharp.VariableInfo.IsEverAssigned" />
    </Type>
    <Type Name="Mono.CSharp.VariableReference" Id="T:Mono.CSharp.VariableReference">
      <Member Id="M:Mono.CSharp.VariableReference.#ctor" />
      <Member Id="M:Mono.CSharp.VariableReference.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.VariableReference.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.VariableReference.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.VariableReference.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.Emit(Mono.CSharp.EmitContext,System.Boolean)" />
      <Member Id="M:Mono.CSharp.VariableReference.EmitAssign(Mono.CSharp.EmitContext,Mono.CSharp.Expression,System.Boolean,System.Boolean)" />
      <Member Id="M:Mono.CSharp.VariableReference.EmitLoad(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.GetHoistedVariable(Mono.CSharp.AnonymousExpression)" />
      <Member Id="M:Mono.CSharp.VariableReference.GetHoistedVariable(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.GetHoistedVariable(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.VariableReference.GetSignatureForError" />
      <Member Id="M:Mono.CSharp.VariableReference.SetHasAddressTaken" />
      <Member Id="P:Mono.CSharp.VariableReference.IsFixed" />
      <Member Id="P:Mono.CSharp.VariableReference.IsHoisted" />
      <Member Id="P:Mono.CSharp.VariableReference.IsLockedByStatement" />
      <Member Id="P:Mono.CSharp.VariableReference.IsRef" />
      <Member Id="P:Mono.CSharp.VariableReference.Name" />
      <Member Id="P:Mono.CSharp.VariableReference.Variable" />
      <Member Id="P:Mono.CSharp.VariableReference.VariableInfo" />
    </Type>
    <Type Name="Mono.CSharp.Variance" Id="T:Mono.CSharp.Variance">
      <Member Id="F:Mono.CSharp.Variance.Contravariant" />
      <Member Id="F:Mono.CSharp.Variance.Covariant" />
      <Member Id="F:Mono.CSharp.Variance.None" />
    </Type>
    <Type Name="Mono.CSharp.VarianceDecl" Id="T:Mono.CSharp.VarianceDecl">
      <Member Id="M:Mono.CSharp.VarianceDecl.#ctor(Mono.CSharp.Variance,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.VarianceDecl.CheckTypeVariance(Mono.CSharp.TypeSpec,Mono.CSharp.Variance,Mono.CSharp.IMemberContext)" />
      <Member Id="P:Mono.CSharp.VarianceDecl.Location" />
      <Member Id="P:Mono.CSharp.VarianceDecl.Variance" />
    </Type>
    <Type Name="Mono.CSharp.WarningRegions" Id="T:Mono.CSharp.WarningRegions">
      <Member Id="M:Mono.CSharp.WarningRegions.#ctor" />
      <Member Id="M:Mono.CSharp.WarningRegions.IsWarningEnabled(System.Int32,System.Int32)" />
      <Member Id="M:Mono.CSharp.WarningRegions.WarningDisable(Mono.CSharp.Location,System.Int32,Mono.CSharp.Report)" />
      <Member Id="M:Mono.CSharp.WarningRegions.WarningDisable(System.Int32)" />
      <Member Id="M:Mono.CSharp.WarningRegions.WarningEnable(Mono.CSharp.Location,System.Int32,Mono.CSharp.CompilerContext)" />
      <Member Id="M:Mono.CSharp.WarningRegions.WarningEnable(System.Int32)" />
    </Type>
    <Type Name="Mono.CSharp.While" Id="T:Mono.CSharp.While">
      <Member Id="F:Mono.CSharp.While.expr" />
      <Member Id="M:Mono.CSharp.While.#ctor(Mono.CSharp.BooleanExpression,Mono.CSharp.Statement,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.While.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.While.AddEndDefiniteAssignment(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.While.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.While.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.While.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.While.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="M:Mono.CSharp.While.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.While.SetEndReachable" />
    </Type>
    <Type Name="Mono.CSharp.XmlCommentState" Id="T:Mono.CSharp.XmlCommentState">
      <Member Id="F:Mono.CSharp.XmlCommentState.Allowed" />
      <Member Id="F:Mono.CSharp.XmlCommentState.Error" />
      <Member Id="F:Mono.CSharp.XmlCommentState.NotAllowed" />
    </Type>
    <Type Name="Mono.CSharp.Yield" Id="T:Mono.CSharp.Yield">
      <Member Id="M:Mono.CSharp.Yield.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Yield.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Yield.CheckContext(Mono.CSharp.BlockContext,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Yield.Resolve(Mono.CSharp.BlockContext)" />
    </Type>
    <Type Name="Mono.CSharp.YieldBreak" Id="T:Mono.CSharp.YieldBreak">
      <Member Id="M:Mono.CSharp.YieldBreak.#ctor(Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.YieldBreak.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.YieldBreak.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.YieldBreak.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.YieldBreak.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.YieldBreak.DoResolve(Mono.CSharp.BlockContext)" />
      <Member Id="M:Mono.CSharp.YieldBreak.MarkReachable(Mono.CSharp.Reachability)" />
      <Member Id="P:Mono.CSharp.YieldBreak.IsLocalExit" />
    </Type>
    <Type Name="Mono.CSharp.YieldStatement`1" Id="T:Mono.CSharp.YieldStatement`1">
      <Member Id="F:Mono.CSharp.YieldStatement`1.expr" />
      <Member Id="F:Mono.CSharp.YieldStatement`1.machine_initializer" />
      <Member Id="F:Mono.CSharp.YieldStatement`1.unwind_protect" />
      <Member Id="M:Mono.CSharp.YieldStatement`1.#ctor(Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.YieldStatement`1.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Statement)" />
      <Member Id="M:Mono.CSharp.YieldStatement`1.DoEmit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.YieldStatement`1.DoFlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.YieldStatement`1.RegisterResumePoint" />
      <Member Id="M:Mono.CSharp.YieldStatement`1.Resolve(Mono.CSharp.BlockContext)" />
      <Member Id="P:Mono.CSharp.YieldStatement`1.Expr" />
    </Type>
  </Namespace>
  <Namespace Name="Mono.CSharp.Linq">
    <Type Name="Mono.CSharp.Linq.AQueryClause" Id="T:Mono.CSharp.Linq.AQueryClause">
      <Member Id="F:Mono.CSharp.Linq.AQueryClause.block" />
      <Member Id="F:Mono.CSharp.Linq.AQueryClause.next" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.BuildQueryClause(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.CreateArguments(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter,Mono.CSharp.Arguments@)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.CreateChildrenParameters(Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.CreateQueryExpression(Mono.CSharp.Expression,Mono.CSharp.Arguments)" />
      <Member Id="M:Mono.CSharp.Linq.AQueryClause.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Linq.AQueryClause.MethodName" />
      <Member Id="P:Mono.CSharp.Linq.AQueryClause.Next" />
      <Member Id="P:Mono.CSharp.Linq.AQueryClause.Tail" />
    </Type>
    <Type Name="Mono.CSharp.Linq.ARangeVariableQueryClause" Id="T:Mono.CSharp.Linq.ARangeVariableQueryClause">
      <Member Id="F:Mono.CSharp.Linq.ARangeVariableQueryClause.identifier" />
      <Member Id="M:Mono.CSharp.Linq.ARangeVariableQueryClause.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.ARangeVariableQueryClause.CreateCastExpression(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.ARangeVariableQueryClause.CreateChildrenParameters(Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.Linq.ARangeVariableQueryClause.CreateRangeVariableType(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.ARangeVariableQueryClause.GetIntoVariable" />
      <Member Id="P:Mono.CSharp.Linq.ARangeVariableQueryClause.Identifier" />
      <Member Id="P:Mono.CSharp.Linq.ARangeVariableQueryClause.IdentifierType" />
    </Type>
    <Type Name="Mono.CSharp.Linq.GroupBy" Id="T:Mono.CSharp.Linq.GroupBy">
      <Member Id="M:Mono.CSharp.Linq.GroupBy.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression,Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.GroupBy.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Linq.GroupBy.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.GroupBy.CreateArguments(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter,Mono.CSharp.Arguments@)" />
      <Member Id="P:Mono.CSharp.Linq.GroupBy.MethodName" />
      <Member Id="P:Mono.CSharp.Linq.GroupBy.SelectorExpression" />
    </Type>
    <Type Name="Mono.CSharp.Linq.GroupJoin" Id="T:Mono.CSharp.Linq.GroupJoin">
      <Member Id="M:Mono.CSharp.Linq.GroupJoin.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Expression,Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.GroupJoin.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Linq.GroupJoin.GetIntoVariable" />
      <Member Id="P:Mono.CSharp.Linq.GroupJoin.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.Join" Id="T:Mono.CSharp.Linq.Join">
      <Member Id="M:Mono.CSharp.Linq.Join.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Expression,Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.Join.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Linq.Join.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.Join.CreateArguments(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter,Mono.CSharp.Arguments@)" />
      <Member Id="P:Mono.CSharp.Linq.Join.InnerSelector" />
      <Member Id="P:Mono.CSharp.Linq.Join.MethodName" />
      <Member Id="P:Mono.CSharp.Linq.Join.OuterSelector" />
    </Type>
    <Type Name="Mono.CSharp.Linq.Let" Id="T:Mono.CSharp.Linq.Let">
      <Member Id="M:Mono.CSharp.Linq.Let.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.Let.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Linq.Let.CreateArguments(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter,Mono.CSharp.Arguments@)" />
      <Member Id="P:Mono.CSharp.Linq.Let.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.OrderByAscending" Id="T:Mono.CSharp.Linq.OrderByAscending">
      <Member Id="M:Mono.CSharp.Linq.OrderByAscending.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.OrderByAscending.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.Linq.OrderByAscending.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.OrderByDescending" Id="T:Mono.CSharp.Linq.OrderByDescending">
      <Member Id="M:Mono.CSharp.Linq.OrderByDescending.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.OrderByDescending.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.Linq.OrderByDescending.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.QueryBlock" Id="T:Mono.CSharp.Linq.QueryBlock">
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.#ctor(Mono.CSharp.Block,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.AddRangeVariable(Mono.CSharp.Linq.RangeVariable)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.Error_AlreadyDeclared(System.String,Mono.CSharp.INamedBlockVariable)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.Error_AlreadyDeclared(System.String,Mono.CSharp.INamedBlockVariable,System.String)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.Error_AlreadyDeclaredTypeParameter(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.SetParameter(Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.Linq.QueryBlock.SetParameters(Mono.CSharp.Parameter,Mono.CSharp.Parameter)" />
    </Type>
    <Type Name="Mono.CSharp.Linq.QueryExpression" Id="T:Mono.CSharp.Linq.QueryExpression">
      <Member Id="M:Mono.CSharp.Linq.QueryExpression.#ctor(Mono.CSharp.Linq.AQueryClause)" />
      <Member Id="M:Mono.CSharp.Linq.QueryExpression.BuildQueryClause(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.Linq.QueryExpression.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Linq.QueryExpression.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.QueryStartClause" Id="T:Mono.CSharp.Linq.QueryStartClause">
      <Member Id="M:Mono.CSharp.Linq.QueryStartClause.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.QueryStartClause.BuildQueryClause(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.Parameter)" />
      <Member Id="M:Mono.CSharp.Linq.QueryStartClause.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="P:Mono.CSharp.Linq.QueryStartClause.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.RangeVariable" Id="T:Mono.CSharp.Linq.RangeVariable">
      <Member Id="M:Mono.CSharp.Linq.RangeVariable.#ctor(System.String,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.RangeVariable.CreateReferenceExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Location)" />
      <Member Id="P:Mono.CSharp.Linq.RangeVariable.Block" />
      <Member Id="P:Mono.CSharp.Linq.RangeVariable.IsDeclared" />
      <Member Id="P:Mono.CSharp.Linq.RangeVariable.IsParameter" />
      <Member Id="P:Mono.CSharp.Linq.RangeVariable.Location" />
      <Member Id="P:Mono.CSharp.Linq.RangeVariable.Name" />
    </Type>
    <Type Name="Mono.CSharp.Linq.Select" Id="T:Mono.CSharp.Linq.Select">
      <Member Id="M:Mono.CSharp.Linq.Select.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.Select.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Linq.Select.IsRequired(Mono.CSharp.Parameter)" />
      <Member Id="P:Mono.CSharp.Linq.Select.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.SelectMany" Id="T:Mono.CSharp.Linq.SelectMany">
      <Member Id="M:Mono.CSharp.Linq.SelectMany.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Linq.RangeVariable,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.SelectMany.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Linq.SelectMany.CreateArguments(Mono.CSharp.ResolveContext,Mono.CSharp.Parameter,Mono.CSharp.Arguments@)" />
      <Member Id="P:Mono.CSharp.Linq.SelectMany.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.ThenByAscending" Id="T:Mono.CSharp.Linq.ThenByAscending">
      <Member Id="M:Mono.CSharp.Linq.ThenByAscending.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.ThenByAscending.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.Linq.ThenByAscending.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.ThenByDescending" Id="T:Mono.CSharp.Linq.ThenByDescending">
      <Member Id="M:Mono.CSharp.Linq.ThenByDescending.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Linq.ThenByDescending.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.Linq.ThenByDescending.MethodName" />
    </Type>
    <Type Name="Mono.CSharp.Linq.Where" Id="T:Mono.CSharp.Linq.Where">
      <Member Id="M:Mono.CSharp.Linq.Where.#ctor(Mono.CSharp.Linq.QueryBlock,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Linq.Where.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="P:Mono.CSharp.Linq.Where.MethodName" />
    </Type>
  </Namespace>
  <Namespace Name="Mono.CSharp.Nullable">
    <Type Name="Mono.CSharp.Nullable.LiftedConversion" Id="T:Mono.CSharp.Nullable.LiftedConversion">
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.#ctor(Mono.CSharp.Expression,Mono.CSharp.Nullable.Unwrap,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedConversion.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.Nullable.LiftedConversion.IsNull" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.LiftedNull" Id="T:Mono.CSharp.Nullable.LiftedNull">
      <Member Id="M:Mono.CSharp.Nullable.LiftedNull.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedNull.Create(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedNull.CreateFromExpression(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedNull.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.LiftedUnaryOperator" Id="T:Mono.CSharp.Nullable.LiftedUnaryOperator">
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.#ctor(Mono.CSharp.Unary.Operator,Mono.CSharp.Expression,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.ResolveEnumOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Expression,Mono.CSharp.TypeSpec[])" />
      <Member Id="M:Mono.CSharp.Nullable.LiftedUnaryOperator.ResolveUserOperator(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.NullableType" Id="T:Mono.CSharp.Nullable.NullableType">
      <Member Id="M:Mono.CSharp.Nullable.NullableType.#ctor(Mono.CSharp.TypeSpec,Mono.CSharp.Location)" />
      <Member Id="M:Mono.CSharp.Nullable.NullableType.ResolveAsType(Mono.CSharp.IMemberContext,System.Boolean)" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.NullCoalescingOperator" Id="T:Mono.CSharp.Nullable.NullCoalescingOperator">
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.#ctor(Mono.CSharp.Expression,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.Accept(Mono.CSharp.StructuralVisitor)" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.CloneTo(Mono.CSharp.CloneContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.NullCoalescingOperator.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="P:Mono.CSharp.Nullable.NullCoalescingOperator.LeftExpression" />
      <Member Id="P:Mono.CSharp.Nullable.NullCoalescingOperator.RightExpression" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.Unwrap" Id="T:Mono.CSharp.Nullable.Unwrap">
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.#ctor(Mono.CSharp.Expression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.AddressOf(Mono.CSharp.EmitContext,Mono.CSharp.AddressOp)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.ContainsEmitWithAwait" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.Create(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.Create(Mono.CSharp.Expression,System.Boolean)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.CreateUnwrapped(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.DoResolveLValue(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.Emit(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.EmitCheck(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.EmitSideEffect(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.EmitToField(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.Equals(System.Object)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.FlowAnalysis(Mono.CSharp.FlowAnalysisContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.GetHashCode" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.Load(Mono.CSharp.EmitContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.MakeExpression(Mono.CSharp.BuilderContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Unwrap.Store(Mono.CSharp.EmitContext)" />
      <Member Id="P:Mono.CSharp.Nullable.Unwrap.IsNull" />
      <Member Id="P:Mono.CSharp.Nullable.Unwrap.Original" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.UnwrapCall" Id="T:Mono.CSharp.Nullable.UnwrapCall">
      <Member Id="M:Mono.CSharp.Nullable.UnwrapCall.#ctor(Mono.CSharp.Expression)" />
      <Member Id="M:Mono.CSharp.Nullable.UnwrapCall.DoResolve(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.UnwrapCall.Emit(Mono.CSharp.EmitContext)" />
    </Type>
    <Type Name="Mono.CSharp.Nullable.Wrap" Id="T:Mono.CSharp.Nullable.Wrap">
      <Member Id="M:Mono.CSharp.Nullable.Wrap.Create(Mono.CSharp.Expression,Mono.CSharp.TypeSpec)" />
      <Member Id="M:Mono.CSharp.Nullable.Wrap.CreateExpressionTree(Mono.CSharp.ResolveContext)" />
      <Member Id="M:Mono.CSharp.Nullable.Wrap.Emit(Mono.CSharp.EmitContext)" />
    </Type>
  </Namespace>
  <Namespace Name="Mono.Security.Cryptography">
    <Type Name="Mono.Security.Cryptography.CryptoConvert" Id="T:Mono.Security.Cryptography.CryptoConvert">
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiKeyBlob(System.Byte[])" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiKeyBlob(System.Byte[],System.Int32)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiKeyBlobDSA(System.Byte[])" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiKeyBlobDSA(System.Byte[],System.Int32)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPrivateKeyBlob(System.Byte[])" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPrivateKeyBlob(System.Byte[],System.Int32)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPrivateKeyBlobDSA(System.Byte[])" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPrivateKeyBlobDSA(System.Byte[],System.Int32)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPublicKeyBlob(System.Byte[])" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPublicKeyBlob(System.Byte[],System.Int32)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPublicKeyBlobDSA(System.Byte[])" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromCapiPublicKeyBlobDSA(System.Byte[],System.Int32)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.FromHex(System.String)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiKeyBlob(System.Security.Cryptography.AsymmetricAlgorithm,System.Boolean)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiKeyBlob(System.Security.Cryptography.DSA,System.Boolean)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiKeyBlob(System.Security.Cryptography.RSA,System.Boolean)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiPrivateKeyBlob(System.Security.Cryptography.DSA)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiPrivateKeyBlob(System.Security.Cryptography.RSA)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiPublicKeyBlob(System.Security.Cryptography.DSA)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToCapiPublicKeyBlob(System.Security.Cryptography.RSA)" />
      <Member Id="M:Mono.Security.Cryptography.CryptoConvert.ToHex(System.Byte[])" />
    </Type>
  </Namespace>
</Framework>