<Type Name="Schedule" FullName="Microsoft.Azure.Batch.Protocol.Models.Schedule">
  <TypeSignature Language="C#" Value="public class Schedule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Schedule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Batch.Protocol.Models.Schedule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
    <AssemblyVersion>6.1.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.1.0</AssemblyVersion>
    <AssemblyVersion>7.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The schedule according to which jobs will be created
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Schedule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the Schedule class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Schedule (Nullable&lt;DateTime&gt; doNotRunUntil = null, Nullable&lt;DateTime&gt; doNotRunAfter = null, Nullable&lt;TimeSpan&gt; startWindow = null, Nullable&lt;TimeSpan&gt; recurrenceInterval = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; doNotRunUntil, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; doNotRunAfter, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; startWindow, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; recurrenceInterval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Batch.Protocol.Models.Schedule.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="doNotRunUntil" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="doNotRunAfter" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="startWindow" Type="System.Nullable&lt;System.TimeSpan&gt;" />
        <Parameter Name="recurrenceInterval" Type="System.Nullable&lt;System.TimeSpan&gt;" />
      </Parameters>
      <Docs>
        <param name="doNotRunUntil">The earliest time at which any job may
            be created under this job schedule.</param>
        <param name="doNotRunAfter">A time after which no job will be
            created under this job schedule. The schedule will move to the
            completed state as soon as this deadline is past and there is no
            active job under this job schedule.</param>
        <param name="startWindow">The time interval, starting from the time
            at which the schedule indicates a job should be created, within
            which a job must be created.</param>
        <param name="recurrenceInterval">The time interval between the
            start times of two successive jobs under the job schedule. A job
            schedule can have at most one active job under it at any given
            time.</param>
        <summary>
            Initializes a new instance of the Schedule class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotRunAfter">
      <MemberSignature Language="C#" Value="public Nullable&lt;DateTime&gt; DoNotRunAfter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; DoNotRunAfter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="doNotRunAfter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a time after which no job will be created under this
            job schedule. The schedule will move to the completed state as soon
            as this deadline is past and there is no active job under this job
            schedule.
            </summary>
        <value>To be added.</value>
        <remarks>
            If you do not specify a doNotRunAfter time, and you are creating a
            recurring job schedule, the job schedule will remain active until
            you explicitly terminate it.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotRunUntil">
      <MemberSignature Language="C#" Value="public Nullable&lt;DateTime&gt; DoNotRunUntil { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; DoNotRunUntil" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Batch.Protocol.Models.Schedule.DoNotRunUntil" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="doNotRunUntil")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DateTime&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the earliest time at which any job may be created
            under this job schedule.
            </summary>
        <value>To be added.</value>
        <remarks>
            If you do not specify a doNotRunUntil time, the schedule becomes
            ready to create jobs immediately.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RecurrenceInterval">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; RecurrenceInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; RecurrenceInterval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Batch.Protocol.Models.Schedule.RecurrenceInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="recurrenceInterval")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the time interval between the start times of two
            successive jobs under the job schedule. A job schedule can have at
            most one active job under it at any given time.
            </summary>
        <value>To be added.</value>
        <remarks>
            Because a job schedule can have at most one active job under it at
            any given time, if it is time to create a new job under a job
            schedule, but the previous job is still running, the Batch service
            will not create the new job until the previous job finishes. If the
            previous job does not finish within the startWindow period of the
            new recurrenceInterval, then no new job will be scheduled for that
            interval. For recurring jobs, you should normally specify a
            jobManagerTask in the jobSpecification. If you do not use
            jobManagerTask, you will need an external process to monitor when
            jobs are created, add tasks to the jobs and terminate the jobs
            ready for the next recurrence. The default is that the schedule
            does not recur: one job is created, within the startWindow after
            the doNotRunUntil time, and the schedule is complete as soon as
            that job finishes. The minimum value is 1 minute. If you specify a
            lower value, the Batch service rejects the schedule with an error;
            if you are calling the REST API directly, the HTTP status code is
            400 (Bad Request).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartWindow">
      <MemberSignature Language="C#" Value="public Nullable&lt;TimeSpan&gt; StartWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; StartWindow" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Batch.Protocol.Models.Schedule.StartWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Batch</AssemblyName>
        <AssemblyVersion>6.1.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.1.0</AssemblyVersion>
        <AssemblyVersion>7.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="startWindow")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the time interval, starting from the time at which the
            schedule indicates a job should be created, within which a job must
            be created.
            </summary>
        <value>To be added.</value>
        <remarks>
            If a job is not created within the startWindow interval, then the
            'opportunity' is lost; no job will be created until the next
            recurrence of the schedule. If the schedule is recurring, and the
            startWindow is longer than the recurrence interval, then this is
            equivalent to an infinite startWindow, because the job that is
            'due' in one recurrenceInterval is not carried forward into the
            next recurrence interval. The default is infinite. The minimum
            value is 1 minute. If you specify a lower value, the Batch service
            rejects the schedule with an error; if you are calling the REST API
            directly, the HTTP status code is 400 (Bad Request).
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>