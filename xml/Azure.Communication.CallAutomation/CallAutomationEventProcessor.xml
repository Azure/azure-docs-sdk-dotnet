<Type Name="CallAutomationEventProcessor" FullName="Azure.Communication.CallAutomation.CallAutomationEventProcessor">
  <TypeSignature Language="C#" Value="public class CallAutomationEventProcessor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CallAutomationEventProcessor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Communication.CallAutomation.CallAutomationEventProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Class CallAutomationEventProcessor" />
  <TypeSignature Language="F#" Value="type CallAutomationEventProcessor = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Call Automation's EventProcessor for incoming events for ease of use.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AttachOngoingEventProcessor&lt;TEvent&gt;">
      <MemberSignature Language="C#" Value="public void AttachOngoingEventProcessor&lt;TEvent&gt; (string callConnectionId, Action&lt;TEvent&gt; eventProcessor) where TEvent : Azure.Communication.CallAutomation.CallAutomationEventBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachOngoingEventProcessor&lt;(class Azure.Communication.CallAutomation.CallAutomationEventBase) TEvent&gt;(string callConnectionId, class System.Action`1&lt;!!TEvent&gt; eventProcessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.AttachOngoingEventProcessor``1(System.String,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachOngoingEventProcessor(Of TEvent As CallAutomationEventBase) (callConnectionId As String, eventProcessor As Action(Of TEvent))" />
      <MemberSignature Language="F#" Value="member this.AttachOngoingEventProcessor : string * Action&lt;'Event (requires 'Event :&gt; Azure.Communication.CallAutomation.CallAutomationEventBase)&gt; -&gt; unit (requires 'Event :&gt; Azure.Communication.CallAutomation.CallAutomationEventBase)" Usage="callAutomationEventProcessor.AttachOngoingEventProcessor (callConnectionId, eventProcessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEvent">
          <Constraints>
            <BaseTypeName>Azure.Communication.CallAutomation.CallAutomationEventBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="callConnectionId" Type="System.String" />
        <Parameter Name="eventProcessor" Type="System.Action&lt;TEvent&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TEvent">Call Automation Event Type.</typeparam>
        <param name="callConnectionId">CallConnectionId of the call.</param>
        <param name="eventProcessor">EventProcessor to be fired when the specified event arrives.</param>
        <summary>
            Attach Ongoing EventProcessor for specific event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachOngoingEventProcessor&lt;TEvent&gt;">
      <MemberSignature Language="C#" Value="public void DetachOngoingEventProcessor&lt;TEvent&gt; (string callConnectionId) where TEvent : Azure.Communication.CallAutomation.CallAutomationEventBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachOngoingEventProcessor&lt;(class Azure.Communication.CallAutomation.CallAutomationEventBase) TEvent&gt;(string callConnectionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.DetachOngoingEventProcessor``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetachOngoingEventProcessor(Of TEvent As CallAutomationEventBase) (callConnectionId As String)" />
      <MemberSignature Language="F#" Value="member this.DetachOngoingEventProcessor : string -&gt; unit (requires 'Event :&gt; Azure.Communication.CallAutomation.CallAutomationEventBase)" Usage="callAutomationEventProcessor.DetachOngoingEventProcessor callConnectionId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEvent">
          <Constraints>
            <BaseTypeName>Azure.Communication.CallAutomation.CallAutomationEventBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="callConnectionId" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TEvent">Call Automation Event Type.</typeparam>
        <param name="callConnectionId">CallConnectionId of the call.</param>
        <summary>
            Detach Ongoing EventProcessor for specific event.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEvents">
      <MemberSignature Language="C#" Value="public void ProcessEvents (System.Collections.Generic.IEnumerable&lt;Azure.Communication.CallAutomation.CallAutomationEventBase&gt; events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProcessEvents(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Communication.CallAutomation.CallAutomationEventBase&gt; events) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.ProcessEvents(System.Collections.Generic.IEnumerable{Azure.Communication.CallAutomation.CallAutomationEventBase})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessEvents (events As IEnumerable(Of CallAutomationEventBase))" />
      <MemberSignature Language="F#" Value="member this.ProcessEvents : seq&lt;Azure.Communication.CallAutomation.CallAutomationEventBase&gt; -&gt; unit" Usage="callAutomationEventProcessor.ProcessEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.Generic.IEnumerable&lt;Azure.Communication.CallAutomation.CallAutomationEventBase&gt;" />
      </Parameters>
      <Docs>
        <param name="events">Incoming <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" />.</param>
        <summary>
            Process incoming events. Pass incoming events to get it processed to have other method like WaitForEventProcessor to function.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEvents">
      <MemberSignature Language="C#" Value="public void ProcessEvents (System.Collections.Generic.IEnumerable&lt;Azure.Messaging.CloudEvent&gt; events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ProcessEvents(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Messaging.CloudEvent&gt; events) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.ProcessEvents(System.Collections.Generic.IEnumerable{Azure.Messaging.CloudEvent})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessEvents (events As IEnumerable(Of CloudEvent))" />
      <MemberSignature Language="F#" Value="member this.ProcessEvents : seq&lt;Azure.Messaging.CloudEvent&gt; -&gt; unit" Usage="callAutomationEventProcessor.ProcessEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="System.Collections.Generic.IEnumerable&lt;Azure.Messaging.CloudEvent&gt;" />
      </Parameters>
      <Docs>
        <param name="events">Incoming CloudEvent object.</param>
        <summary>
            Process incoming events. Pass incoming events to get it processed to have other method like WaitForEventProcessor to function.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForEventProcessor">
      <MemberSignature Language="C#" Value="public Azure.Communication.CallAutomation.CallAutomationEventBase WaitForEventProcessor (Func&lt;Azure.Communication.CallAutomation.CallAutomationEventBase,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Azure.Communication.CallAutomation.CallAutomationEventBase WaitForEventProcessor(class System.Func`2&lt;class Azure.Communication.CallAutomation.CallAutomationEventBase, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessor(System.Func{Azure.Communication.CallAutomation.CallAutomationEventBase,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForEventProcessor (predicate As Func(Of CallAutomationEventBase, Boolean), Optional cancellationToken As CancellationToken = Nothing) As CallAutomationEventBase" />
      <MemberSignature Language="F#" Value="member this.WaitForEventProcessor : Func&lt;Azure.Communication.CallAutomation.CallAutomationEventBase, bool&gt; * System.Threading.CancellationToken -&gt; Azure.Communication.CallAutomation.CallAutomationEventBase" Usage="callAutomationEventProcessor.WaitForEventProcessor (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Communication.CallAutomation.CallAutomationEventBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Azure.Communication.CallAutomation.CallAutomationEventBase,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate">Predicate for waiting on event.</param>
        <param name="cancellationToken">Cancellation Token can be used to set timeout or cancel this WaitForEventProcessor.</param>
        <summary>
            Wait for matching incoming event. This is blocking Call. Returns the <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" /> once it arrives in ProcessEvent method.
            </summary>
        <returns>Returns <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" /> once matching event arrives.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForEventProcessor&lt;TEvent&gt;">
      <MemberSignature Language="C#" Value="public TEvent WaitForEventProcessor&lt;TEvent&gt; (string connectionId = default, string operationContext = default, System.Threading.CancellationToken cancellationToken = default) where TEvent : Azure.Communication.CallAutomation.CallAutomationEventBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEvent WaitForEventProcessor&lt;(class Azure.Communication.CallAutomation.CallAutomationEventBase) TEvent&gt;(string connectionId, string operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessor``1(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForEventProcessor(Of TEvent As CallAutomationEventBase) (Optional connectionId As String = Nothing, Optional operationContext As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As TEvent" />
      <MemberSignature Language="F#" Value="member this.WaitForEventProcessor : string * string * System.Threading.CancellationToken -&gt; 'Event (requires 'Event :&gt; Azure.Communication.CallAutomation.CallAutomationEventBase)" Usage="callAutomationEventProcessor.WaitForEventProcessor (connectionId, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEvent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEvent">
          <Constraints>
            <BaseTypeName>Azure.Communication.CallAutomation.CallAutomationEventBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="connectionId" Type="System.String" />
        <Parameter Name="operationContext" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TEvent">Matching event type.</typeparam>
        <param name="connectionId">CallConnectionId of the call.</param>
        <param name="operationContext">OperationContext of the method.</param>
        <param name="cancellationToken">Cancellation Token can be used to set timeout or cancel this WaitForEventProcessor.</param>
        <summary>
            Wait for matching incoming event. This is blocking Call. Returns the <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" /> once it arrives in ProcessEvent method.
            </summary>
        <returns>Returns the event once matching event arrives.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForEventProcessorAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Azure.Communication.CallAutomation.CallAutomationEventBase&gt; WaitForEventProcessorAsync (Func&lt;Azure.Communication.CallAutomation.CallAutomationEventBase,bool&gt; predicate, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Azure.Communication.CallAutomation.CallAutomationEventBase&gt; WaitForEventProcessorAsync(class System.Func`2&lt;class Azure.Communication.CallAutomation.CallAutomationEventBase, bool&gt; predicate, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync(System.Func{Azure.Communication.CallAutomation.CallAutomationEventBase,System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForEventProcessorAsync (predicate As Func(Of CallAutomationEventBase, Boolean), Optional cancellationToken As CancellationToken = Nothing) As Task(Of CallAutomationEventBase)" />
      <MemberSignature Language="F#" Value="member this.WaitForEventProcessorAsync : Func&lt;Azure.Communication.CallAutomation.CallAutomationEventBase, bool&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Communication.CallAutomation.CallAutomationEventBase&gt;" Usage="callAutomationEventProcessor.WaitForEventProcessorAsync (predicate, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Communication.CallAutomation.CallAutomationEventBase&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.Func&lt;Azure.Communication.CallAutomation.CallAutomationEventBase,System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="predicate">Predicate for waiting on event.</param>
        <param name="cancellationToken">Cancellation Token can be used to set timeout or cancel this WaitForEventProcessor.</param>
        <summary>
            Wait for matching incoming event. Returns the <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" /> once it arrives in ProcessEvent method.
            </summary>
        <returns>Returns <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" /> once matching event arrives.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForEventProcessorAsync&lt;TEvent&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TEvent&gt; WaitForEventProcessorAsync&lt;TEvent&gt; (string connectionId = default, string operationContext = default, System.Threading.CancellationToken cancellationToken = default) where TEvent : Azure.Communication.CallAutomation.CallAutomationEventBase;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TEvent&gt; WaitForEventProcessorAsync&lt;(class Azure.Communication.CallAutomation.CallAutomationEventBase) TEvent&gt;(string connectionId, string operationContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync``1(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForEventProcessorAsync(Of TEvent As CallAutomationEventBase) (Optional connectionId As String = Nothing, Optional operationContext As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TEvent)" />
      <MemberSignature Language="F#" Value="member this.WaitForEventProcessorAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Event (requires 'Event :&gt; Azure.Communication.CallAutomation.CallAutomationEventBase)&gt; (requires 'Event :&gt; Azure.Communication.CallAutomation.CallAutomationEventBase)" Usage="callAutomationEventProcessor.WaitForEventProcessorAsync (connectionId, operationContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.CallAutomation</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TEvent&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEvent">
          <Constraints>
            <BaseTypeName>Azure.Communication.CallAutomation.CallAutomationEventBase</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="connectionId" Type="System.String" />
        <Parameter Name="operationContext" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TEvent">Matching event type.</typeparam>
        <param name="connectionId">CallConnectionId of the call.</param>
        <param name="operationContext">OperationContext of the method.</param>
        <param name="cancellationToken">Cancellation Token can be used to set timeout or cancel this WaitForEventProcessor.</param>
        <summary>
            Wait for matching incoming event. Returns the <see cref="T:Azure.Communication.CallAutomation.CallAutomationEventBase" /> once it arrives in ProcessEvent method.
            </summary>
        <returns>Returns the event once matching event arrives.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
