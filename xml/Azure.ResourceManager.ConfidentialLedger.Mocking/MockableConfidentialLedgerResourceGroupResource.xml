<Type Name="MockableConfidentialLedgerResourceGroupResource" FullName="Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource">
  <TypeSignature Language="C#" Value="public class MockableConfidentialLedgerResourceGroupResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableConfidentialLedgerResourceGroupResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableConfidentialLedgerResourceGroupResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableConfidentialLedgerResourceGroupResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ResourceGroupResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableConfidentialLedgerResourceGroupResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedger">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedger (string ledgerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedger(string ledgerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.GetConfidentialLedger(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConfidentialLedger (ledgerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfidentialLedgerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetConfidentialLedger : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&#xA;override this.GetConfidentialLedger : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;" Usage="mockableConfidentialLedgerResourceGroupResource.GetConfidentialLedger (ledgerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ledgerName"> Name of the Confidential Ledger. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of a Confidential Ledger.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}</description></item><item><term>Operation Id</term><description>Ledger_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt; GetConfidentialLedgerAsync (string ledgerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt; GetConfidentialLedgerAsync(string ledgerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.GetConfidentialLedgerAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConfidentialLedgerAsync (ledgerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfidentialLedgerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetConfidentialLedgerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt;&#xA;override this.GetConfidentialLedgerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt;" Usage="mockableConfidentialLedgerResourceGroupResource.GetConfidentialLedgerAsync (ledgerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ledgerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ledgerName"> Name of the Confidential Ledger. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of a Confidential Ledger.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}</description></item><item><term>Operation Id</term><description>Ledger_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ledgerName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ledgerName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgers">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection GetConfidentialLedgers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection GetConfidentialLedgers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.GetConfidentialLedgers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConfidentialLedgers () As ConfidentialLedgerCollection" />
      <MemberSignature Language="F#" Value="abstract member GetConfidentialLedgers : unit -&gt; Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection&#xA;override this.GetConfidentialLedgers : unit -&gt; Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection" Usage="mockableConfidentialLedgerResourceGroupResource.GetConfidentialLedgers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ConfidentialLedgerResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of ConfidentialLedgerResources and their operations over a ConfidentialLedgerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedCcf">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt; GetManagedCcf (string appName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt; GetManagedCcf(string appName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.GetManagedCcf(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedCcf (appName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ManagedCcfResource)" />
      <MemberSignature Language="F#" Value="abstract member GetManagedCcf : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&#xA;override this.GetManagedCcf : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;" Usage="mockableConfidentialLedgerResourceGroupResource.GetManagedCcf (appName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="appName"> Name of the Managed CCF. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of a Managed CCF app.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/managedCCFs/{appName}</description></item><item><term>Operation Id</term><description>ManagedCCF_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="appName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetManagedCcfAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&gt; GetManagedCcfAsync (string appName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&gt; GetManagedCcfAsync(string appName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.GetManagedCcfAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedCcfAsync (appName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ManagedCcfResource))" />
      <MemberSignature Language="F#" Value="abstract member GetManagedCcfAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&gt;&#xA;override this.GetManagedCcfAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&gt;" Usage="mockableConfidentialLedgerResourceGroupResource.GetManagedCcfAsync (appName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="appName"> Name of the Managed CCF. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of a Managed CCF app.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/managedCCFs/{appName}</description></item><item><term>Operation Id</term><description>ManagedCCF_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="appName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetManagedCcfs">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ConfidentialLedger.ManagedCcfCollection GetManagedCcfs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ConfidentialLedger.ManagedCcfCollection GetManagedCcfs() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerResourceGroupResource.GetManagedCcfs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedCcfs () As ManagedCcfCollection" />
      <MemberSignature Language="F#" Value="abstract member GetManagedCcfs : unit -&gt; Azure.ResourceManager.ConfidentialLedger.ManagedCcfCollection&#xA;override this.GetManagedCcfs : unit -&gt; Azure.ResourceManager.ConfidentialLedger.ManagedCcfCollection" Usage="mockableConfidentialLedgerResourceGroupResource.GetManagedCcfs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ConfidentialLedger.ManagedCcfCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ManagedCcfResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of ManagedCcfResources and their operations over a ManagedCcfResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
