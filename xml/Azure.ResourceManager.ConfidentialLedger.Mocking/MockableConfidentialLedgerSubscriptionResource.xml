<Type Name="MockableConfidentialLedgerSubscriptionResource" FullName="Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource">
  <TypeSignature Language="C#" Value="public class MockableConfidentialLedgerSubscriptionResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableConfidentialLedgerSubscriptionResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableConfidentialLedgerSubscriptionResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableConfidentialLedgerSubscriptionResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to SubscriptionResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableConfidentialLedgerSubscriptionResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckConfidentialLedgerNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt; CheckConfidentialLedgerNameAvailability (Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt; CheckConfidentialLedgerNameAvailability(class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.CheckConfidentialLedgerNameAvailability(Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckConfidentialLedgerNameAvailability (content As ConfidentialLedgerNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ConfidentialLedgerNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckConfidentialLedgerNameAvailability : Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&#xA;override this.CheckConfidentialLedgerNameAvailability : Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;" Usage="mockableConfidentialLedgerSubscriptionResource.CheckConfidentialLedgerNameAvailability (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Name availability request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            To check whether a resource name is available.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/checkNameAvailability</description></item><item><term>Operation Id</term><description>CheckNameAvailability</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckConfidentialLedgerNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt; CheckConfidentialLedgerNameAvailabilityAsync (Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt; CheckConfidentialLedgerNameAvailabilityAsync(class Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.CheckConfidentialLedgerNameAvailabilityAsync(Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckConfidentialLedgerNameAvailabilityAsync (content As ConfidentialLedgerNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ConfidentialLedgerNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckConfidentialLedgerNameAvailabilityAsync : Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt;&#xA;override this.CheckConfidentialLedgerNameAvailabilityAsync : Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt;" Usage="mockableConfidentialLedgerSubscriptionResource.CheckConfidentialLedgerNameAvailabilityAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.ConfidentialLedger.Models.ConfidentialLedgerNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> Name availability request payload. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            To check whether a resource name is available.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/checkNameAvailability</description></item><item><term>Operation Id</term><description>CheckNameAvailability</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgers (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgers(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.GetConfidentialLedgers(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConfidentialLedgers (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ConfidentialLedgerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetConfidentialLedgers : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&#xA;override this.GetConfidentialLedgers : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;" Usage="mockableConfidentialLedgerSubscriptionResource.GetConfidentialLedgers (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of all Confidential Ledgers.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/ledgers</description></item><item><term>Operation Id</term><description>Ledger_ListBySubscription</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfidentialLedgersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgersAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt; GetConfidentialLedgersAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.GetConfidentialLedgersAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetConfidentialLedgersAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ConfidentialLedgerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetConfidentialLedgersAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;&#xA;override this.GetConfidentialLedgersAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;" Usage="mockableConfidentialLedgerSubscriptionResource.GetConfidentialLedgersAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of all Confidential Ledgers.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/ledgers</description></item><item><term>Operation Id</term><description>Ledger_ListBySubscription</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ConfidentialLedger.ConfidentialLedgerResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedCcfs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt; GetManagedCcfs (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt; GetManagedCcfs(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.GetManagedCcfs(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedCcfs (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of ManagedCcfResource)" />
      <MemberSignature Language="F#" Value="abstract member GetManagedCcfs : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&#xA;override this.GetManagedCcfs : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;" Usage="mockableConfidentialLedgerSubscriptionResource.GetManagedCcfs (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of all Managed CCF.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/managedCCFs</description></item><item><term>Operation Id</term><description>ManagedCCF_ListBySubscription</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManagedCcfsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt; GetManagedCcfsAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt; GetManagedCcfsAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ConfidentialLedger.Mocking.MockableConfidentialLedgerSubscriptionResource.GetManagedCcfsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetManagedCcfsAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of ManagedCcfResource)" />
      <MemberSignature Language="F#" Value="abstract member GetManagedCcfsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;&#xA;override this.GetManagedCcfsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;" Usage="mockableConfidentialLedgerSubscriptionResource.GetManagedCcfsAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ConfidentialLedger</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> The filter to apply on the list operation. eg. $filter=ledgerType eq 'Public'. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieves the properties of all Managed CCF.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.ConfidentialLedger/managedCCFs</description></item><item><term>Operation Id</term><description>ManagedCCF_ListBySubscription</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.ConfidentialLedger.ManagedCcfResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
