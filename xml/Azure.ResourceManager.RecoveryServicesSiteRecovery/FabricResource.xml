<Type Name="FabricResource" FullName="Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource">
  <TypeSignature Language="C#" Value="public class FabricResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FabricResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource" />
  <TypeSignature Language="VB.NET" Value="Public Class FabricResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type FabricResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a Fabric along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetFabricResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Resources.ResourceGroupResource" /> using the GetFabric method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FabricResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckConsistency">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; CheckConsistency (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; CheckConsistency(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.CheckConsistency(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckConsistency (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of FabricResource)" />
      <MemberSignature Language="F#" Value="abstract member CheckConsistency : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&#xA;override this.CheckConsistency : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;" Usage="fabricResource.CheckConsistency (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to perform a consistency check on the fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency
            Operation Id: ReplicationFabrics_CheckConsistency
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckConsistencyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; CheckConsistencyAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; CheckConsistencyAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.CheckConsistencyAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckConsistencyAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of FabricResource))" />
      <MemberSignature Language="F#" Value="abstract member CheckConsistencyAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;&#xA;override this.CheckConsistencyAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;" Usage="fabricResource.CheckConsistencyAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to perform a consistency check on the fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/checkConsistency
            Operation Id: ReplicationFabrics_CheckConsistency
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string resourceName, string fabricName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string resourceName, string fabricName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, resourceName As String, fabricName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, resourceName, fabricName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="fabricName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="resourceName">To be added.</param>
        <param name="fabricName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As FabricData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricData" Usage="Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="fabricResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to delete or remove an Azure Site Recovery fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove
            Operation Id: ReplicationFabrics_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="fabricResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to delete or remove an Azure Site Recovery fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/remove
            Operation Id: ReplicationFabrics_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; Get (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; Get(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.Get(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of FabricResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&#xA;override this.Get : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;" Usage="fabricResource.Get (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> OData filter options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of an Azure Site Recovery fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}
            Operation Id: ReplicationFabrics_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; GetAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; GetAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of FabricResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;&#xA;override this.GetAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;" Usage="fabricResource.GetAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> OData filter options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of an Azure Site Recovery fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}
            Operation Id: ReplicationFabrics_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalNetwork">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt; GetLogicalNetwork (string logicalNetworkName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt; GetLogicalNetwork(string logicalNetworkName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetLogicalNetwork(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicalNetwork (logicalNetworkName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogicalNetworkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalNetwork : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;&#xA;override this.GetLogicalNetwork : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;" Usage="fabricResource.GetLogicalNetwork (logicalNetworkName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalNetworkName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="logicalNetworkName"> Logical network name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a logical network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks/{logicalNetworkName}
            Operation Id: ReplicationLogicalNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="logicalNetworkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="logicalNetworkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalNetworkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;&gt; GetLogicalNetworkAsync (string logicalNetworkName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;&gt; GetLogicalNetworkAsync(string logicalNetworkName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetLogicalNetworkAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicalNetworkAsync (logicalNetworkName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of LogicalNetworkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalNetworkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;&gt;&#xA;override this.GetLogicalNetworkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;&gt;" Usage="fabricResource.GetLogicalNetworkAsync (logicalNetworkName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalNetworkName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="logicalNetworkName"> Logical network name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a logical network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationLogicalNetworks/{logicalNetworkName}
            Operation Id: ReplicationLogicalNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="logicalNetworkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="logicalNetworkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalNetworks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkCollection GetLogicalNetworks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkCollection GetLogicalNetworks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetLogicalNetworks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLogicalNetworks () As LogicalNetworkCollection" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalNetworks : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkCollection&#xA;override this.GetLogicalNetworks : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkCollection" Usage="fabricResource.GetLogicalNetworks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.LogicalNetworkCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of LogicalNetworkResources in the Fabric. </summary>
        <returns> An object representing collection of LogicalNetworkResources and their operations over a LogicalNetworkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNetwork">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt; GetNetwork (string networkName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt; GetNetwork(string networkName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetNetwork(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNetwork (networkName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of NetworkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetNetwork : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;&#xA;override this.GetNetwork : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;" Usage="fabricResource.GetNetwork (networkName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="networkName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="networkName"> Primary network name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}
            Operation Id: ReplicationNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="networkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="networkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNetworkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;&gt; GetNetworkAsync (string networkName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;&gt; GetNetworkAsync(string networkName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetNetworkAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNetworkAsync (networkName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of NetworkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetNetworkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;&gt;&#xA;override this.GetNetworkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;&gt;" Usage="fabricResource.GetNetworkAsync (networkName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="networkName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="networkName"> Primary network name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a network.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}
            Operation Id: ReplicationNetworks_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="networkName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="networkName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetNetworks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkCollection GetNetworks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkCollection GetNetworks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetNetworks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNetworks () As NetworkCollection" />
      <MemberSignature Language="F#" Value="abstract member GetNetworks : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkCollection&#xA;override this.GetNetworks : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkCollection" Usage="fabricResource.GetNetworks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.NetworkCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of NetworkResources in the Fabric. </summary>
        <returns> An object representing collection of NetworkResources and their operations over a NetworkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProtectionContainer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt; GetProtectionContainer (string protectionContainerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt; GetProtectionContainer(string protectionContainerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetProtectionContainer(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProtectionContainer (protectionContainerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ProtectionContainerResource)" />
      <MemberSignature Language="F#" Value="abstract member GetProtectionContainer : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;&#xA;override this.GetProtectionContainer : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;" Usage="fabricResource.GetProtectionContainer (protectionContainerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectionContainerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="protectionContainerName"> Protection container name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a protection container.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}
            Operation Id: ReplicationProtectionContainers_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="protectionContainerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="protectionContainerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProtectionContainerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;&gt; GetProtectionContainerAsync (string protectionContainerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;&gt; GetProtectionContainerAsync(string protectionContainerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetProtectionContainerAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProtectionContainerAsync (protectionContainerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ProtectionContainerResource))" />
      <MemberSignature Language="F#" Value="abstract member GetProtectionContainerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;&gt;&#xA;override this.GetProtectionContainerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;&gt;" Usage="fabricResource.GetProtectionContainerAsync (protectionContainerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectionContainerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="protectionContainerName"> Protection container name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a protection container.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}
            Operation Id: ReplicationProtectionContainers_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="protectionContainerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="protectionContainerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetProtectionContainers">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerCollection GetProtectionContainers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerCollection GetProtectionContainers() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetProtectionContainers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProtectionContainers () As ProtectionContainerCollection" />
      <MemberSignature Language="F#" Value="abstract member GetProtectionContainers : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerCollection&#xA;override this.GetProtectionContainers : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerCollection" Usage="fabricResource.GetProtectionContainers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.ProtectionContainerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ProtectionContainerResources in the Fabric. </summary>
        <returns> An object representing collection of ProtectionContainerResources and their operations over a ProtectionContainerResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecoveryServicesProvider">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt; GetRecoveryServicesProvider (string providerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt; GetRecoveryServicesProvider(string providerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetRecoveryServicesProvider(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecoveryServicesProvider (providerName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RecoveryServicesProviderResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRecoveryServicesProvider : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;&#xA;override this.GetRecoveryServicesProvider : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;" Usage="fabricResource.GetRecoveryServicesProvider (providerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="providerName"> Recovery services provider name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of registered recovery services provider.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}
            Operation Id: ReplicationRecoveryServicesProviders_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRecoveryServicesProviderAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;&gt; GetRecoveryServicesProviderAsync (string providerName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;&gt; GetRecoveryServicesProviderAsync(string providerName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetRecoveryServicesProviderAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecoveryServicesProviderAsync (providerName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RecoveryServicesProviderResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRecoveryServicesProviderAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;&gt;&#xA;override this.GetRecoveryServicesProviderAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;&gt;" Usage="fabricResource.GetRecoveryServicesProviderAsync (providerName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="providerName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="providerName"> Recovery services provider name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of registered recovery services provider.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}
            Operation Id: ReplicationRecoveryServicesProviders_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providerName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="providerName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRecoveryServicesProviders">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderCollection GetRecoveryServicesProviders ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderCollection GetRecoveryServicesProviders() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetRecoveryServicesProviders" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecoveryServicesProviders () As RecoveryServicesProviderCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRecoveryServicesProviders : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderCollection&#xA;override this.GetRecoveryServicesProviders : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderCollection" Usage="fabricResource.GetRecoveryServicesProviders " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.RecoveryServicesProviderCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RecoveryServicesProviderResources in the Fabric. </summary>
        <returns> An object representing collection of RecoveryServicesProviderResources and their operations over a RecoveryServicesProviderResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStorageClassification">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt; GetStorageClassification (string storageClassificationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt; GetStorageClassification(string storageClassificationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetStorageClassification(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStorageClassification (storageClassificationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of StorageClassificationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetStorageClassification : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;&#xA;override this.GetStorageClassification : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;" Usage="fabricResource.GetStorageClassification (storageClassificationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storageClassificationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="storageClassificationName"> Storage classification name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of the specified storage classification.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}
            Operation Id: ReplicationStorageClassifications_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="storageClassificationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="storageClassificationName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStorageClassificationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;&gt; GetStorageClassificationAsync (string storageClassificationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;&gt; GetStorageClassificationAsync(string storageClassificationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetStorageClassificationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStorageClassificationAsync (storageClassificationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of StorageClassificationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetStorageClassificationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;&gt;&#xA;override this.GetStorageClassificationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;&gt;" Usage="fabricResource.GetStorageClassificationAsync (storageClassificationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storageClassificationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="storageClassificationName"> Storage classification name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of the specified storage classification.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationStorageClassifications/{storageClassificationName}
            Operation Id: ReplicationStorageClassifications_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="storageClassificationName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="storageClassificationName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetStorageClassifications">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationCollection GetStorageClassifications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationCollection GetStorageClassifications() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetStorageClassifications" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStorageClassifications () As StorageClassificationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetStorageClassifications : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationCollection&#xA;override this.GetStorageClassifications : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationCollection" Usage="fabricResource.GetStorageClassifications " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.StorageClassificationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of StorageClassificationResources in the Fabric. </summary>
        <returns> An object representing collection of StorageClassificationResources and their operations over a StorageClassificationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVCenter">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt; GetVCenter (string vCenterName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt; GetVCenter(string vCenterName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetVCenter(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVCenter (vCenterName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VCenterResource)" />
      <MemberSignature Language="F#" Value="abstract member GetVCenter : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;&#xA;override this.GetVCenter : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;" Usage="fabricResource.GetVCenter (vCenterName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vCenterName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vCenterName"> vcenter name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a registered vCenter server(Add vCenter server).
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}
            Operation Id: ReplicationvCenters_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="vCenterName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vCenterName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVCenterAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;&gt; GetVCenterAsync (string vCenterName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;&gt; GetVCenterAsync(string vCenterName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetVCenterAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVCenterAsync (vCenterName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VCenterResource))" />
      <MemberSignature Language="F#" Value="abstract member GetVCenterAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;&gt;&#xA;override this.GetVCenterAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;&gt;" Usage="fabricResource.GetVCenterAsync (vCenterName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vCenterName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vCenterName"> vcenter name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the details of a registered vCenter server(Add vCenter server).
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationvCenters/{vcenterName}
            Operation Id: ReplicationvCenters_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="vCenterName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="vCenterName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetVCenters">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterCollection GetVCenters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterCollection GetVCenters() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.GetVCenters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVCenters () As VCenterCollection" />
      <MemberSignature Language="F#" Value="abstract member GetVCenters : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterCollection&#xA;override this.GetVCenters : unit -&gt; Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterCollection" Usage="fabricResource.GetVCenters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.RecoveryServicesSiteRecovery.VCenterCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of VCenterResources in the Fabric. </summary>
        <returns> An object representing collection of VCenterResources and their operations over a VCenterResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MigrateToAad">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation MigrateToAad (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation MigrateToAad(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.MigrateToAad(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MigrateToAad (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member MigrateToAad : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.MigrateToAad : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="fabricResource.MigrateToAad (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to migrate an Azure Site Recovery fabric to AAD.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad
            Operation Id: ReplicationFabrics_MigrateToAad
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MigrateToAadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; MigrateToAadAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; MigrateToAadAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.MigrateToAadAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MigrateToAadAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member MigrateToAadAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.MigrateToAadAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="fabricResource.MigrateToAadAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to migrate an Azure Site Recovery fabric to AAD.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/migratetoaad
            Operation Id: ReplicationFabrics_MigrateToAad
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReassociateGateway">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; ReassociateGateway (Azure.WaitUntil waitUntil, Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; ReassociateGateway(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.ReassociateGateway(Azure.WaitUntil,Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReassociateGateway (waitUntil As WaitUntil, content As FailoverProcessServerContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of FabricResource)" />
      <MemberSignature Language="F#" Value="abstract member ReassociateGateway : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&#xA;override this.ReassociateGateway : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;" Usage="fabricResource.ReassociateGateway (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The input to the failover process server operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to move replications from a process server to another process server.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway
            Operation Id: ReplicationFabrics_ReassociateGateway
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ReassociateGatewayAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; ReassociateGatewayAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; ReassociateGatewayAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.ReassociateGatewayAsync(Azure.WaitUntil,Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReassociateGatewayAsync (waitUntil As WaitUntil, content As FailoverProcessServerContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of FabricResource))" />
      <MemberSignature Language="F#" Value="abstract member ReassociateGatewayAsync : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;&#xA;override this.ReassociateGatewayAsync : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;" Usage="fabricResource.ReassociateGatewayAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FailoverProcessServerContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The input to the failover process server operation. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to move replications from a process server to another process server.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/reassociateGateway
            Operation Id: ReplicationFabrics_ReassociateGateway
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewCertificate">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; RenewCertificate (Azure.WaitUntil waitUntil, Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; RenewCertificate(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.RenewCertificate(Azure.WaitUntil,Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewCertificate (waitUntil As WaitUntil, content As RenewCertificateContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of FabricResource)" />
      <MemberSignature Language="F#" Value="abstract member RenewCertificate : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&#xA;override this.RenewCertificate : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;" Usage="fabricResource.RenewCertificate (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Renew certificate input. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Renews the connection certificate for the ASR replication fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate
            Operation Id: ReplicationFabrics_RenewCertificate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenewCertificateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; RenewCertificateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; RenewCertificateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.RenewCertificateAsync(Azure.WaitUntil,Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenewCertificateAsync (waitUntil As WaitUntil, content As RenewCertificateContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of FabricResource))" />
      <MemberSignature Language="F#" Value="abstract member RenewCertificateAsync : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;&#xA;override this.RenewCertificateAsync : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;" Usage="fabricResource.RenewCertificateAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.RenewCertificateContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Renew certificate input. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Renews the connection certificate for the ASR replication fabric.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/renewCertificate
            Operation Id: ReplicationFabrics_RenewCertificate
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.Update(Azure.WaitUntil,Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, content As FabricCreateOrUpdateContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of FabricResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;" Usage="fabricResource.Update (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Fabric creation input. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}
            Operation Id: ReplicationFabrics_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, content As FabricCreateOrUpdateContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of FabricResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;" Usage="fabricResource.UpdateAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.RecoveryServicesSiteRecovery</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.RecoveryServicesSiteRecovery.FabricResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.RecoveryServicesSiteRecovery.Models.FabricCreateOrUpdateContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> Fabric creation input. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            The operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}
            Operation Id: ReplicationFabrics_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
