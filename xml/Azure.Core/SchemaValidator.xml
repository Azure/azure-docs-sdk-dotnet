<Type Name="SchemaValidator" FullName="Azure.Core.SchemaValidator">
  <TypeSignature Language="C#" Value="public abstract class SchemaValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SchemaValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Core.SchemaValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SchemaValidator" />
  <TypeSignature Language="F#" Value="type SchemaValidator = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core.Experimental</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This abstract class allows any available library to be used to generate schemas from .NET types and validate
            objects against schemas.
            </summary>
    <remarks>
            Defining both <see cref="M:Azure.Core.SchemaValidator.GenerateSchema(System.Type)" /> and <see cref="M:Azure.Core.SchemaValidator.TryValidate(System.Object,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Exception}@)" /> is required. If you
            do not wish to validate, then evaluate all schemas as valid.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SchemaValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.SchemaValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSchema">
      <MemberSignature Language="C#" Value="public abstract string GenerateSchema (Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GenerateSchema(class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.SchemaValidator.GenerateSchema(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GenerateSchema (dataType As Type) As String" />
      <MemberSignature Language="F#" Value="abstract member GenerateSchema : Type -&gt; string" Usage="schemaValidator.GenerateSchema dataType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="dataType">The type of the data to use when generating the schema.</param>
        <summary>
            Generates a schema from <paramref name="dataType" /> and returns it as a string.
            </summary>
        <returns>The generated schema in string format.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryValidate">
      <MemberSignature Language="C#" Value="public abstract bool TryValidate (object data, Type dataType, string schemaDefinition, out System.Collections.Generic.IEnumerable&lt;Exception&gt; validationErrors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryValidate(object data, class System.Type dataType, string schemaDefinition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.Exception&gt;&amp; validationErrors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.SchemaValidator.TryValidate(System.Object,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Exception}@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryValidate (data As Object, dataType As Type, schemaDefinition As String, ByRef validationErrors As IEnumerable(Of Exception)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryValidate : obj * Type * string * seq -&gt; bool" Usage="schemaValidator.TryValidate (data, dataType, schemaDefinition, validationErrors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="schemaDefinition" Type="System.String" />
        <Parameter Name="validationErrors" Type="System.Collections.Generic.IEnumerable&lt;System.Exception&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">The data to validate.</param>
        <param name="dataType">The type of data to validate.</param>
        <param name="schemaDefinition">The schema definition to validate against.</param>
        <param name="validationErrors">When this method returns, contains the validation errors if <paramref name="data" /> was invalid according to
            the <paramref name="schemaDefinition" />.</param>
        <summary>
            Validates that <paramref name="data" /> is valid according to <paramref name="schemaDefinition" />.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual void Validate (object data, Type dataType, string schemaDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(object data, class System.Type dataType, string schemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.SchemaValidator.Validate(System.Object,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Validate (data As Object, dataType As Type, schemaDefinition As String)" />
      <MemberSignature Language="F#" Value="abstract member Validate : obj * Type * string -&gt; unit&#xA;override this.Validate : obj * Type * string -&gt; unit" Usage="schemaValidator.Validate (data, dataType, schemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Experimental</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="schemaDefinition" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">The data to validate.</param>
        <param name="dataType">The type of data to validate.</param>
        <param name="schemaDefinition">The schema definition to validate against.</param>
        <summary>
            Validates that <paramref name="data" /> is valid according to <paramref name="schemaDefinition" />. If the object is not valid,
            this method throws an <see cref="T:System.AggregateException" /> containing all of the validation errors.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AggregateException">
          <paramref name="data" /> is not valid according to the <paramref name="schemaDefinition" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
