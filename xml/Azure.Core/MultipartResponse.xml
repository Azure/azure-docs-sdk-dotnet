<Type Name="MultipartResponse" FullName="Azure.Core.MultipartResponse">
  <TypeSignature Language="C#" Value="public static class MultipartResponse" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MultipartResponse extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Core.MultipartResponse" />
  <TypeSignature Language="VB.NET" Value="Public Module MultipartResponse" />
  <TypeSignature Language="F#" Value="type MultipartResponse = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core</AssemblyName>
    <AssemblyVersion>1.25.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides support for creating and parsing multipart/mixed content.
            This is implementing a couple of layered standards as mentioned at
            https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch and
            https://docs.microsoft.com/en-us/rest/api/storageservices/performing-entity-group-transactions
            including https://www.odata.org/documentation/odata-version-3-0/batch-processing/
            and https://www.ietf.org/rfc/rfc2046.txt.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Azure.Response[] Parse (Azure.Response response, bool expectCrLf, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Response[] Parse(class Azure.Response response, bool expectCrLf, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.MultipartResponse.Parse(Azure.Response,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (response As Response, expectCrLf As Boolean, cancellationToken As CancellationToken) As Response()" />
      <MemberSignature Language="F#" Value="static member Parse : Azure.Response * bool * System.Threading.CancellationToken -&gt; Azure.Response[]" Usage="Azure.Core.MultipartResponse.Parse (response, expectCrLf, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="response" Type="Azure.Response" />
        <Parameter Name="expectCrLf" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="response">The response containing multi-part content.</param>
        <param name="expectCrLf">Controls whether the parser will expect all multi-part boundaries to use CRLF line breaks. This should be true unless more permissive line break parsing is required.</param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <summary>
            Parse a multipart/mixed response body into several responses.
            </summary>
        <returns>The parsed <see cref="T:Azure.Response" />s.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Azure.Response[]&gt; ParseAsync (Azure.Response response, bool expectCrLf, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Azure.Response[]&gt; ParseAsync(class Azure.Response response, bool expectCrLf, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.MultipartResponse.ParseAsync(Azure.Response,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ParseAsync (response As Response, expectCrLf As Boolean, cancellationToken As CancellationToken) As Task(Of Response())" />
      <MemberSignature Language="F#" Value="static member ParseAsync : Azure.Response * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response[]&gt;" Usage="Azure.Core.MultipartResponse.ParseAsync (response, expectCrLf, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core</AssemblyName>
        <AssemblyVersion>1.25.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="response" Type="Azure.Response" />
        <Parameter Name="expectCrLf" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="response">The response containing multi-part content.</param>
        <param name="expectCrLf">Controls whether the parser will expect all multi-part boundaries to use CRLF line breaks. This should be true unless more permissive line break parsing is required.</param>
        <param name="cancellationToken">
            Optional <see cref="T:System.Threading.CancellationToken" /> to propagate notifications
            that the operation should be cancelled.
            </param>
        <summary>
            Parse a multipart/mixed response body into several responses.
            </summary>
        <returns>The parsed <see cref="T:Azure.Response" />s.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
