<Type Name="MockableMonitorResourceGroupResource" FullName="Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource">
  <TypeSignature Language="C#" Value="public class MockableMonitorResourceGroupResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableMonitorResourceGroupResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableMonitorResourceGroupResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableMonitorResourceGroupResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ResourceGroupResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableMonitorResourceGroupResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNotifications">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt; CreateNotifications (Azure.WaitUntil waitUntil, Azure.ResourceManager.Monitor.Models.NotificationContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Monitor.Models.NotificationStatus&gt; CreateNotifications(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Monitor.Models.NotificationContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.CreateNotifications(Azure.WaitUntil,Azure.ResourceManager.Monitor.Models.NotificationContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNotifications (waitUntil As WaitUntil, content As NotificationContent, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of NotificationStatus)" />
      <MemberSignature Language="F#" Value="abstract member CreateNotifications : Azure.WaitUntil * Azure.ResourceManager.Monitor.Models.NotificationContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&#xA;override this.CreateNotifications : Azure.WaitUntil * Azure.ResourceManager.Monitor.Models.NotificationContent * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;" Usage="mockableMonitorResourceGroupResource.CreateNotifications (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.Monitor.Models.NotificationContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The notification request body which includes the contact details. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Send test notifications to a set of provided receivers
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/createNotifications</description></item><item><term>Operation Id</term><description>ActionGroups_CreateNotificationsAtResourceGroupLevel</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNotificationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt; CreateNotificationsAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Monitor.Models.NotificationContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt; CreateNotificationsAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Monitor.Models.NotificationContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.CreateNotificationsAsync(Azure.WaitUntil,Azure.ResourceManager.Monitor.Models.NotificationContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateNotificationsAsync (waitUntil As WaitUntil, content As NotificationContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of NotificationStatus))" />
      <MemberSignature Language="F#" Value="abstract member CreateNotificationsAsync : Azure.WaitUntil * Azure.ResourceManager.Monitor.Models.NotificationContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt;&#xA;override this.CreateNotificationsAsync : Azure.WaitUntil * Azure.ResourceManager.Monitor.Models.NotificationContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt;" Usage="mockableMonitorResourceGroupResource.CreateNotificationsAsync (waitUntil, content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.ResourceManager.Monitor.Models.NotificationContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The notification request body which includes the contact details. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Send test notifications to a set of provided receivers
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/createNotifications</description></item><item><term>Operation Id</term><description>ActionGroups_CreateNotificationsAtResourceGroupLevel</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt; GetActionGroup (string actionGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.ActionGroupResource&gt; GetActionGroup(string actionGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetActionGroup(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActionGroup (actionGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ActionGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetActionGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;&#xA;override this.GetActionGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;" Usage="mockableMonitorResourceGroupResource.GetActionGroup (actionGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="actionGroupName"> The name of the action group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get an action group.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}</description></item><item><term>Operation Id</term><description>ActionGroups_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionGroupName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="actionGroupName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetActionGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;&gt; GetActionGroupAsync (string actionGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.ActionGroupResource&gt;&gt; GetActionGroupAsync(string actionGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetActionGroupAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActionGroupAsync (actionGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ActionGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetActionGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;&gt;&#xA;override this.GetActionGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetActionGroupAsync (actionGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActionGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="actionGroupName"> The name of the action group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get an action group.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/actionGroups/{actionGroupName}</description></item><item><term>Operation Id</term><description>ActionGroups_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="actionGroupName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="actionGroupName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetActionGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.ActionGroupCollection GetActionGroups ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.ActionGroupCollection GetActionGroups() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetActionGroups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActionGroups () As ActionGroupCollection" />
      <MemberSignature Language="F#" Value="abstract member GetActionGroups : unit -&gt; Azure.ResourceManager.Monitor.ActionGroupCollection&#xA;override this.GetActionGroups : unit -&gt; Azure.ResourceManager.Monitor.ActionGroupCollection" Usage="mockableMonitorResourceGroupResource.GetActionGroups " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.ActionGroupCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ActionGroupResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of ActionGroupResources and their operations over a ActionGroupResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActivityLogAlert">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt; GetActivityLogAlert (string activityLogAlertName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt; GetActivityLogAlert(string activityLogAlertName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetActivityLogAlert(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityLogAlert (activityLogAlertName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ActivityLogAlertResource)" />
      <MemberSignature Language="F#" Value="abstract member GetActivityLogAlert : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;&#xA;override this.GetActivityLogAlert : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;" Usage="mockableMonitorResourceGroupResource.GetActivityLogAlert (activityLogAlertName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityLogAlertName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="activityLogAlertName"> The name of the Activity Log Alert rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get an Activity Log Alert rule.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}</description></item><item><term>Operation Id</term><description>ActivityLogAlerts_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activityLogAlertName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="activityLogAlertName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetActivityLogAlertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;&gt; GetActivityLogAlertAsync (string activityLogAlertName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;&gt; GetActivityLogAlertAsync(string activityLogAlertName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetActivityLogAlertAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityLogAlertAsync (activityLogAlertName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ActivityLogAlertResource))" />
      <MemberSignature Language="F#" Value="abstract member GetActivityLogAlertAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;&gt;&#xA;override this.GetActivityLogAlertAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetActivityLogAlertAsync (activityLogAlertName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ActivityLogAlertResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityLogAlertName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="activityLogAlertName"> The name of the Activity Log Alert rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get an Activity Log Alert rule.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/activityLogAlerts/{activityLogAlertName}</description></item><item><term>Operation Id</term><description>ActivityLogAlerts_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activityLogAlertName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="activityLogAlertName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetActivityLogAlerts">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.ActivityLogAlertCollection GetActivityLogAlerts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.ActivityLogAlertCollection GetActivityLogAlerts() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetActivityLogAlerts" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetActivityLogAlerts () As ActivityLogAlertCollection" />
      <MemberSignature Language="F#" Value="abstract member GetActivityLogAlerts : unit -&gt; Azure.ResourceManager.Monitor.ActivityLogAlertCollection&#xA;override this.GetActivityLogAlerts : unit -&gt; Azure.ResourceManager.Monitor.ActivityLogAlertCollection" Usage="mockableMonitorResourceGroupResource.GetActivityLogAlerts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.ActivityLogAlertCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ActivityLogAlertResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of ActivityLogAlertResources and their operations over a ActivityLogAlertResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAlertRule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt; GetAlertRule (string ruleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.AlertRuleResource&gt; GetAlertRule(string ruleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetAlertRule(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAlertRule (ruleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AlertRuleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAlertRule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;&#xA;override this.GetAlertRule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;" Usage="mockableMonitorResourceGroupResource.GetAlertRule (ruleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ruleName"> The name of the rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a classic metric alert rule
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/alertrules/{ruleName}</description></item><item><term>Operation Id</term><description>AlertRules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertRuleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;&gt; GetAlertRuleAsync (string ruleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.AlertRuleResource&gt;&gt; GetAlertRuleAsync(string ruleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetAlertRuleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAlertRuleAsync (ruleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AlertRuleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAlertRuleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;&gt;&#xA;override this.GetAlertRuleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetAlertRuleAsync (ruleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AlertRuleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ruleName"> The name of the rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a classic metric alert rule
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/alertrules/{ruleName}</description></item><item><term>Operation Id</term><description>AlertRules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAlertRules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.AlertRuleCollection GetAlertRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.AlertRuleCollection GetAlertRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetAlertRules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAlertRules () As AlertRuleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetAlertRules : unit -&gt; Azure.ResourceManager.Monitor.AlertRuleCollection&#xA;override this.GetAlertRules : unit -&gt; Azure.ResourceManager.Monitor.AlertRuleCollection" Usage="mockableMonitorResourceGroupResource.GetAlertRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.AlertRuleCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of AlertRuleResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of AlertRuleResources and their operations over a AlertRuleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAutoscaleSetting">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt; GetAutoscaleSetting (string autoscaleSettingName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt; GetAutoscaleSetting(string autoscaleSettingName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetAutoscaleSetting(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAutoscaleSetting (autoscaleSettingName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AutoscaleSettingResource)" />
      <MemberSignature Language="F#" Value="abstract member GetAutoscaleSetting : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;&#xA;override this.GetAutoscaleSetting : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;" Usage="mockableMonitorResourceGroupResource.GetAutoscaleSetting (autoscaleSettingName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoscaleSettingName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="autoscaleSettingName"> The autoscale setting name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an autoscale setting
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}</description></item><item><term>Operation Id</term><description>AutoscaleSettings_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="autoscaleSettingName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoscaleSettingName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAutoscaleSettingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;&gt; GetAutoscaleSettingAsync (string autoscaleSettingName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;&gt; GetAutoscaleSettingAsync(string autoscaleSettingName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetAutoscaleSettingAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAutoscaleSettingAsync (autoscaleSettingName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AutoscaleSettingResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAutoscaleSettingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;&gt;&#xA;override this.GetAutoscaleSettingAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetAutoscaleSettingAsync (autoscaleSettingName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.AutoscaleSettingResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoscaleSettingName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="autoscaleSettingName"> The autoscale setting name. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an autoscale setting
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/autoscalesettings/{autoscaleSettingName}</description></item><item><term>Operation Id</term><description>AutoscaleSettings_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="autoscaleSettingName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="autoscaleSettingName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetAutoscaleSettings">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.AutoscaleSettingCollection GetAutoscaleSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.AutoscaleSettingCollection GetAutoscaleSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetAutoscaleSettings" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAutoscaleSettings () As AutoscaleSettingCollection" />
      <MemberSignature Language="F#" Value="abstract member GetAutoscaleSettings : unit -&gt; Azure.ResourceManager.Monitor.AutoscaleSettingCollection&#xA;override this.GetAutoscaleSettings : unit -&gt; Azure.ResourceManager.Monitor.AutoscaleSettingCollection" Usage="mockableMonitorResourceGroupResource.GetAutoscaleSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.AutoscaleSettingCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of AutoscaleSettingResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of AutoscaleSettingResources and their operations over a AutoscaleSettingResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataCollectionEndpoint">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt; GetDataCollectionEndpoint (string dataCollectionEndpointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt; GetDataCollectionEndpoint(string dataCollectionEndpointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetDataCollectionEndpoint(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataCollectionEndpoint (dataCollectionEndpointName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataCollectionEndpointResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataCollectionEndpoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;&#xA;override this.GetDataCollectionEndpoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;" Usage="mockableMonitorResourceGroupResource.GetDataCollectionEndpoint (dataCollectionEndpointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataCollectionEndpointName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataCollectionEndpointName"> The name of the data collection endpoint. The name is case insensitive. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the specified data collection endpoint.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}</description></item><item><term>Operation Id</term><description>DataCollectionEndpoints_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataCollectionEndpointName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataCollectionEndpointName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataCollectionEndpointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;&gt; GetDataCollectionEndpointAsync (string dataCollectionEndpointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;&gt; GetDataCollectionEndpointAsync(string dataCollectionEndpointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetDataCollectionEndpointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataCollectionEndpointAsync (dataCollectionEndpointName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataCollectionEndpointResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataCollectionEndpointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;&gt;&#xA;override this.GetDataCollectionEndpointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetDataCollectionEndpointAsync (dataCollectionEndpointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionEndpointResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataCollectionEndpointName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataCollectionEndpointName"> The name of the data collection endpoint. The name is case insensitive. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the specified data collection endpoint.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionEndpoints/{dataCollectionEndpointName}</description></item><item><term>Operation Id</term><description>DataCollectionEndpoints_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataCollectionEndpointName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataCollectionEndpointName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataCollectionEndpoints">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.DataCollectionEndpointCollection GetDataCollectionEndpoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.DataCollectionEndpointCollection GetDataCollectionEndpoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetDataCollectionEndpoints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataCollectionEndpoints () As DataCollectionEndpointCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataCollectionEndpoints : unit -&gt; Azure.ResourceManager.Monitor.DataCollectionEndpointCollection&#xA;override this.GetDataCollectionEndpoints : unit -&gt; Azure.ResourceManager.Monitor.DataCollectionEndpointCollection" Usage="mockableMonitorResourceGroupResource.GetDataCollectionEndpoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.DataCollectionEndpointCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataCollectionEndpointResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of DataCollectionEndpointResources and their operations over a DataCollectionEndpointResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataCollectionRule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt; GetDataCollectionRule (string dataCollectionRuleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt; GetDataCollectionRule(string dataCollectionRuleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetDataCollectionRule(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataCollectionRule (dataCollectionRuleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataCollectionRuleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataCollectionRule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;&#xA;override this.GetDataCollectionRule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;" Usage="mockableMonitorResourceGroupResource.GetDataCollectionRule (dataCollectionRuleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataCollectionRuleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataCollectionRuleName"> The name of the data collection rule. The name is case insensitive. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the specified data collection rule.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dataCollectionRuleName}</description></item><item><term>Operation Id</term><description>DataCollectionRules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataCollectionRuleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataCollectionRuleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataCollectionRuleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;&gt; GetDataCollectionRuleAsync (string dataCollectionRuleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;&gt; GetDataCollectionRuleAsync(string dataCollectionRuleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetDataCollectionRuleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataCollectionRuleAsync (dataCollectionRuleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataCollectionRuleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataCollectionRuleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;&gt;&#xA;override this.GetDataCollectionRuleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetDataCollectionRuleAsync (dataCollectionRuleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.DataCollectionRuleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataCollectionRuleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataCollectionRuleName"> The name of the data collection rule. The name is case insensitive. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the specified data collection rule.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dataCollectionRuleName}</description></item><item><term>Operation Id</term><description>DataCollectionRules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataCollectionRuleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataCollectionRuleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDataCollectionRules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.DataCollectionRuleCollection GetDataCollectionRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.DataCollectionRuleCollection GetDataCollectionRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetDataCollectionRules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataCollectionRules () As DataCollectionRuleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataCollectionRules : unit -&gt; Azure.ResourceManager.Monitor.DataCollectionRuleCollection&#xA;override this.GetDataCollectionRules : unit -&gt; Azure.ResourceManager.Monitor.DataCollectionRuleCollection" Usage="mockableMonitorResourceGroupResource.GetDataCollectionRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.DataCollectionRuleCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataCollectionRuleResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of DataCollectionRuleResources and their operations over a DataCollectionRuleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetricAlert">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt; GetMetricAlert (string ruleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.MetricAlertResource&gt; GetMetricAlert(string ruleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMetricAlert(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricAlert (ruleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of MetricAlertResource)" />
      <MemberSignature Language="F#" Value="abstract member GetMetricAlert : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;&#xA;override this.GetMetricAlert : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;" Usage="mockableMonitorResourceGroupResource.GetMetricAlert (ruleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ruleName"> The name of the rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieve an alert rule definition.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}</description></item><item><term>Operation Id</term><description>MetricAlerts_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetricAlertAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;&gt; GetMetricAlertAsync (string ruleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.MetricAlertResource&gt;&gt; GetMetricAlertAsync(string ruleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMetricAlertAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricAlertAsync (ruleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of MetricAlertResource))" />
      <MemberSignature Language="F#" Value="abstract member GetMetricAlertAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;&gt;&#xA;override this.GetMetricAlertAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetMetricAlertAsync (ruleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MetricAlertResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ruleName"> The name of the rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieve an alert rule definition.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/metricAlerts/{ruleName}</description></item><item><term>Operation Id</term><description>MetricAlerts_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetricAlerts">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.MetricAlertCollection GetMetricAlerts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.MetricAlertCollection GetMetricAlerts() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMetricAlerts" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetricAlerts () As MetricAlertCollection" />
      <MemberSignature Language="F#" Value="abstract member GetMetricAlerts : unit -&gt; Azure.ResourceManager.Monitor.MetricAlertCollection&#xA;override this.GetMetricAlerts : unit -&gt; Azure.ResourceManager.Monitor.MetricAlertCollection" Usage="mockableMonitorResourceGroupResource.GetMetricAlerts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.MetricAlertCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of MetricAlertResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of MetricAlertResources and their operations over a MetricAlertResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMonitorPrivateLinkScope">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt; GetMonitorPrivateLinkScope (string scopeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt; GetMonitorPrivateLinkScope(string scopeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMonitorPrivateLinkScope(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitorPrivateLinkScope (scopeName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of MonitorPrivateLinkScopeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetMonitorPrivateLinkScope : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;&#xA;override this.GetMonitorPrivateLinkScope : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;" Usage="mockableMonitorResourceGroupResource.GetMonitorPrivateLinkScope (scopeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scopeName"> The name of the Azure Monitor PrivateLinkScope resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a Azure Monitor PrivateLinkScope.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scopeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="scopeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonitorPrivateLinkScopeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;&gt; GetMonitorPrivateLinkScopeAsync (string scopeName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;&gt; GetMonitorPrivateLinkScopeAsync(string scopeName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMonitorPrivateLinkScopeAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitorPrivateLinkScopeAsync (scopeName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of MonitorPrivateLinkScopeResource))" />
      <MemberSignature Language="F#" Value="abstract member GetMonitorPrivateLinkScopeAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;&gt;&#xA;override this.GetMonitorPrivateLinkScopeAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetMonitorPrivateLinkScopeAsync (scopeName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopeName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scopeName"> The name of the Azure Monitor PrivateLinkScope resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a Azure Monitor PrivateLinkScope.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopes/{scopeName}</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scopeName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="scopeName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonitorPrivateLinkScopes">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeCollection GetMonitorPrivateLinkScopes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeCollection GetMonitorPrivateLinkScopes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMonitorPrivateLinkScopes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitorPrivateLinkScopes () As MonitorPrivateLinkScopeCollection" />
      <MemberSignature Language="F#" Value="abstract member GetMonitorPrivateLinkScopes : unit -&gt; Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeCollection&#xA;override this.GetMonitorPrivateLinkScopes : unit -&gt; Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeCollection" Usage="mockableMonitorResourceGroupResource.GetMonitorPrivateLinkScopes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.MonitorPrivateLinkScopeCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of MonitorPrivateLinkScopeResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of MonitorPrivateLinkScopeResources and their operations over a MonitorPrivateLinkScopeResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMonitorWorkspaceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt; GetMonitorWorkspaceResource (string azureMonitorWorkspaceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt; GetMonitorWorkspaceResource(string azureMonitorWorkspaceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMonitorWorkspaceResource(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitorWorkspaceResource (azureMonitorWorkspaceName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of MonitorWorkspaceResource)" />
      <MemberSignature Language="F#" Value="abstract member GetMonitorWorkspaceResource : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;&#xA;override this.GetMonitorWorkspaceResource : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;" Usage="mockableMonitorResourceGroupResource.GetMonitorWorkspaceResource (azureMonitorWorkspaceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="azureMonitorWorkspaceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="azureMonitorWorkspaceName"> The name of the Azure Monitor workspace.  The name is case insensitive. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the specific Azure Monitor workspace
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{azureMonitorWorkspaceName}</description></item><item><term>Operation Id</term><description>AzureMonitorWorkspaces_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="azureMonitorWorkspaceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="azureMonitorWorkspaceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonitorWorkspaceResourceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;&gt; GetMonitorWorkspaceResourceAsync (string azureMonitorWorkspaceName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;&gt; GetMonitorWorkspaceResourceAsync(string azureMonitorWorkspaceName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMonitorWorkspaceResourceAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitorWorkspaceResourceAsync (azureMonitorWorkspaceName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of MonitorWorkspaceResource))" />
      <MemberSignature Language="F#" Value="abstract member GetMonitorWorkspaceResourceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;&gt;&#xA;override this.GetMonitorWorkspaceResourceAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetMonitorWorkspaceResourceAsync (azureMonitorWorkspaceName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.MonitorWorkspaceResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="azureMonitorWorkspaceName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="azureMonitorWorkspaceName"> The name of the Azure Monitor workspace.  The name is case insensitive. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the specific Azure Monitor workspace
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/accounts/{azureMonitorWorkspaceName}</description></item><item><term>Operation Id</term><description>AzureMonitorWorkspaces_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="azureMonitorWorkspaceName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="azureMonitorWorkspaceName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMonitorWorkspaceResources">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.MonitorWorkspaceResourceCollection GetMonitorWorkspaceResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.MonitorWorkspaceResourceCollection GetMonitorWorkspaceResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetMonitorWorkspaceResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMonitorWorkspaceResources () As MonitorWorkspaceResourceCollection" />
      <MemberSignature Language="F#" Value="abstract member GetMonitorWorkspaceResources : unit -&gt; Azure.ResourceManager.Monitor.MonitorWorkspaceResourceCollection&#xA;override this.GetMonitorWorkspaceResources : unit -&gt; Azure.ResourceManager.Monitor.MonitorWorkspaceResourceCollection" Usage="mockableMonitorResourceGroupResource.GetMonitorWorkspaceResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.MonitorWorkspaceResourceCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of MonitorWorkspaceResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of MonitorWorkspaceResources and their operations over a MonitorWorkspaceResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt; GetNotificationStatus (string notificationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.Models.NotificationStatus&gt; GetNotificationStatus(string notificationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetNotificationStatus(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNotificationStatus (notificationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of NotificationStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationStatus : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&#xA;override this.GetNotificationStatus : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;" Usage="mockableMonitorResourceGroupResource.GetNotificationStatus (notificationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notificationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="notificationId"> The notification id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the test notifications by the notification id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/notificationStatus/{notificationId}</description></item><item><term>Operation Id</term><description>ActionGroups_GetTestNotificationsAtResourceGroupLevel</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt; GetNotificationStatusAsync (string notificationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt; GetNotificationStatusAsync(string notificationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetNotificationStatusAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNotificationStatusAsync (notificationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of NotificationStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationStatusAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt;&#xA;override this.GetNotificationStatusAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetNotificationStatusAsync (notificationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.NotificationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notificationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="notificationId"> The notification id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the test notifications by the notification id
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/notificationStatus/{notificationId}</description></item><item><term>Operation Id</term><description>ActionGroups_GetTestNotificationsAtResourceGroupLevel</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrivateLinkScopeOperationStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt; GetPrivateLinkScopeOperationStatus (string asyncOperationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt; GetPrivateLinkScopeOperationStatus(string asyncOperationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetPrivateLinkScopeOperationStatus(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrivateLinkScopeOperationStatus (asyncOperationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of MonitorPrivateLinkScopeOperationStatus)" />
      <MemberSignature Language="F#" Value="abstract member GetPrivateLinkScopeOperationStatus : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;&#xA;override this.GetPrivateLinkScopeOperationStatus : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;" Usage="mockableMonitorResourceGroupResource.GetPrivateLinkScopeOperationStatus (asyncOperationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncOperationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="asyncOperationId"> The operation Id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the status of an azure asynchronous operation associated with a private link scope operation.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}</description></item><item><term>Operation Id</term><description>PrivateLinkScopeOperationStatus_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncOperationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncOperationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPrivateLinkScopeOperationStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;&gt; GetPrivateLinkScopeOperationStatusAsync (string asyncOperationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;&gt; GetPrivateLinkScopeOperationStatusAsync(string asyncOperationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetPrivateLinkScopeOperationStatusAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPrivateLinkScopeOperationStatusAsync (asyncOperationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of MonitorPrivateLinkScopeOperationStatus))" />
      <MemberSignature Language="F#" Value="abstract member GetPrivateLinkScopeOperationStatusAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;&gt;&#xA;override this.GetPrivateLinkScopeOperationStatusAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetPrivateLinkScopeOperationStatusAsync (asyncOperationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.Models.MonitorPrivateLinkScopeOperationStatus&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncOperationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="asyncOperationId"> The operation Id. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the status of an azure asynchronous operation associated with a private link scope operation.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.insights/privateLinkScopeOperationStatuses/{asyncOperationId}</description></item><item><term>Operation Id</term><description>PrivateLinkScopeOperationStatus_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncOperationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncOperationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledQueryRule">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt; GetScheduledQueryRule (string ruleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt; GetScheduledQueryRule(string ruleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetScheduledQueryRule(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledQueryRule (ruleName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ScheduledQueryRuleResource)" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledQueryRule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;&#xA;override this.GetScheduledQueryRule : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;" Usage="mockableMonitorResourceGroupResource.GetScheduledQueryRule (ruleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ruleName"> The name of the rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieve an scheduled query rule definition.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/scheduledQueryRules/{ruleName}</description></item><item><term>Operation Id</term><description>ScheduledQueryRules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledQueryRuleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;&gt; GetScheduledQueryRuleAsync (string ruleName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;&gt; GetScheduledQueryRuleAsync(string ruleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetScheduledQueryRuleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledQueryRuleAsync (ruleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ScheduledQueryRuleResource))" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledQueryRuleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;&gt;&#xA;override this.GetScheduledQueryRuleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;&gt;" Usage="mockableMonitorResourceGroupResource.GetScheduledQueryRuleAsync (ruleName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Monitor.ScheduledQueryRuleResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="ruleName"> The name of the rule. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Retrieve an scheduled query rule definition.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/scheduledQueryRules/{ruleName}</description></item><item><term>Operation Id</term><description>ScheduledQueryRules_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ruleName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetScheduledQueryRules">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Monitor.ScheduledQueryRuleCollection GetScheduledQueryRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Monitor.ScheduledQueryRuleCollection GetScheduledQueryRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Monitor.Mocking.MockableMonitorResourceGroupResource.GetScheduledQueryRules" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetScheduledQueryRules () As ScheduledQueryRuleCollection" />
      <MemberSignature Language="F#" Value="abstract member GetScheduledQueryRules : unit -&gt; Azure.ResourceManager.Monitor.ScheduledQueryRuleCollection&#xA;override this.GetScheduledQueryRules : unit -&gt; Azure.ResourceManager.Monitor.ScheduledQueryRuleCollection" Usage="mockableMonitorResourceGroupResource.GetScheduledQueryRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Monitor</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Monitor.ScheduledQueryRuleCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ScheduledQueryRuleResources in the ResourceGroupResource. </summary>
        <returns> An object representing collection of ScheduledQueryRuleResources and their operations over a ScheduledQueryRuleResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
