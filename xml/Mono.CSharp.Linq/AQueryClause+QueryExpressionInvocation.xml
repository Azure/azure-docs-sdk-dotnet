<Type Name="AQueryClause+QueryExpressionInvocation" FullName="Mono.CSharp.Linq.AQueryClause+QueryExpressionInvocation">
  <TypeSignature Language="C#" Value="protected class AQueryClause.QueryExpressionInvocation : Mono.CSharp.Invocation, Mono.CSharp.OverloadResolver.IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit AQueryClause/QueryExpressionInvocation extends Mono.CSharp.Invocation implements class Mono.CSharp.OverloadResolver/IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation" />
  <AssemblyInfo>
    <AssemblyName>Mono.CSharp</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Mono.CSharp.Invocation</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Mono.CSharp.OverloadResolver+IErrorHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public QueryExpressionInvocation (Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess expr, Mono.CSharp.Arguments arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Mono.CSharp.Linq.AQueryClause/QueryExpressionAccess expr, class Mono.CSharp.Arguments arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.#ctor(Mono.CSharp.Linq.AQueryClause.QueryExpressionAccess,Mono.CSharp.Arguments)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expr" Type="Mono.CSharp.Linq.AQueryClause+QueryExpressionAccess" />
        <Parameter Name="arguments" Type="Mono.CSharp.Arguments" />
      </Parameters>
      <Docs>
        <param name="expr">To be added.</param>
        <param name="arguments">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolveDynamic">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.Expression DoResolveDynamic (Mono.CSharp.ResolveContext ec, Mono.CSharp.Expression memberExpr);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.Expression DoResolveDynamic(class Mono.CSharp.ResolveContext ec, class Mono.CSharp.Expression memberExpr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.DoResolveDynamic(Mono.CSharp.ResolveContext,Mono.CSharp.Expression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="memberExpr" Type="Mono.CSharp.Expression" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <param name="memberExpr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoResolveOverload">
      <MemberSignature Language="C#" Value="protected override Mono.CSharp.MethodGroupExpr DoResolveOverload (Mono.CSharp.ResolveContext ec);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Mono.CSharp.MethodGroupExpr DoResolveOverload(class Mono.CSharp.ResolveContext ec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.DoResolveOverload(Mono.CSharp.ResolveContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Mono.CSharp.MethodGroupExpr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ec" Type="Mono.CSharp.ResolveContext" />
      </Parameters>
      <Docs>
        <param name="ec">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mono.CSharp.OverloadResolver+IErrorHandler.NoArgumentMatch">
      <MemberSignature Language="C#" Value="bool OverloadResolver.IErrorHandler.NoArgumentMatch (Mono.CSharp.ResolveContext rc, Mono.CSharp.MemberSpec best);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Mono.CSharp.OverloadResolver.IErrorHandler.NoArgumentMatch(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.MemberSpec best) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.Mono#CSharp#OverloadResolver#IErrorHandler#NoArgumentMatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="best" Type="Mono.CSharp.MemberSpec" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="best">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mono.CSharp.OverloadResolver+IErrorHandler.NoArgumentMatch">
      <MemberSignature Language="C#" Value="bool OverloadResolver.IErrorHandler.NoArgumentMatch (Mono.CSharp.ResolveContext rc, Mono.CSharp.MemberSpec best);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Mono.CSharp.OverloadResolver.IErrorHandler.NoArgumentMatch(class Mono.CSharp.ResolveContext rc, class Mono.CSharp.MemberSpec best) cil managed" />
      <MemberSignature Language="DocId" Value="M:Mono.CSharp.Linq.AQueryClause.QueryExpressionInvocation.Mono#CSharp#OverloadResolver#IErrorHandler#NoArgumentMatch(Mono.CSharp.ResolveContext,Mono.CSharp.MemberSpec)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.CSharp</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="Mono.CSharp.ResolveContext" />
        <Parameter Name="best" Type="Mono.CSharp.MemberSpec" />
      </Parameters>
      <Docs>
        <param name="rc">To be added.</param>
        <param name="best">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>