<Type Name="JsonExtensions" FullName="Microsoft.Azure.Search.Serialization.JsonExtensions">
  <TypeSignature Language="C#" Value="public static class JsonExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Search.Serialization.JsonExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module JsonExtensions" />
  <TypeSignature Language="F#" Value="type JsonExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.1.0</AssemblyVersion>
    <AssemblyVersion>10.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines extension methods for various JSON.NET types that make it easier to implement a custom JsonConverter.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Advance">
      <MemberSignature Language="C#" Value="public static void Advance (this Newtonsoft.Json.JsonReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Advance(class Newtonsoft.Json.JsonReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.Advance(Newtonsoft.Json.JsonReader)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Advance (reader As JsonReader)" />
      <MemberSignature Language="F#" Value="static member Advance : Newtonsoft.Json.JsonReader -&gt; unit" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.Advance reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
      </Parameters>
      <Docs>
        <param name="reader">The JSON reader to advance.</param>
        <summary>
            Advances the given JSON reader, or throws a JsonSerializationException if it cannot be advanced.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect">
      <MemberSignature Language="C#" Value="public static void Expect (this Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.JsonToken expectedToken, params object[] expectedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Expect(class Newtonsoft.Json.JsonReader reader, valuetype Newtonsoft.Json.JsonToken expectedToken, object[] expectedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Expect (reader As JsonReader, expectedToken As JsonToken, ParamArray expectedValues As Object())" />
      <MemberSignature Language="F#" Value="static member Expect : Newtonsoft.Json.JsonReader * Newtonsoft.Json.JsonToken * obj[] -&gt; unit" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.Expect (reader, expectedToken, expectedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="expectedToken" Type="Newtonsoft.Json.JsonToken" />
        <Parameter Name="expectedValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">The JSON reader.</param>
        <param name="expectedToken">The JSON token on which the reader is expected to be positioned.</param>
        <param name="expectedValues">Optional; The expected possible values of the current JSON token.</param>
        <summary>
            Asserts that the given JSON reader is positioned on a token with the expected type. Optionally asserts
            that the value of the token matches a given expected value. If any of the assertions fail, this method
            throws a JsonSerializationException.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expect&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Expect&lt;TValue&gt; (this Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.JsonToken expectedToken, params object[] expectedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Expect&lt;TValue&gt;(class Newtonsoft.Json.JsonReader reader, valuetype Newtonsoft.Json.JsonToken expectedToken, object[] expectedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Expect(Of TValue) (reader As JsonReader, expectedToken As JsonToken, ParamArray expectedValues As Object()) As TValue" />
      <MemberSignature Language="F#" Value="static member Expect : Newtonsoft.Json.JsonReader * Newtonsoft.Json.JsonToken * obj[] -&gt; 'Value" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.Expect (reader, expectedToken, expectedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="expectedToken" Type="Newtonsoft.Json.JsonToken" />
        <Parameter Name="expectedValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">The expected type of the value of the current JSON token.</typeparam>
        <param name="reader">The JSON reader.</param>
        <param name="expectedToken">The JSON token on which the reader is expected to be positioned.</param>
        <param name="expectedValues">Optional; The expected possible values of the current JSON token.</param>
        <summary>
            Asserts that the given JSON reader is positioned on a token with the expected type and retrieves the
            value of the token, if any. Optionally asserts that the value of the token matches a given expected
            value. If any of the assertions fail, this method throws a JsonSerializationException.
            </summary>
        <returns>
            The value of the current JSON token, or default(TValue) if the current token has no value.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpectAndAdvance">
      <MemberSignature Language="C#" Value="public static void ExpectAndAdvance (this Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.JsonToken expectedToken, params object[] expectedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExpectAndAdvance(class Newtonsoft.Json.JsonReader reader, valuetype Newtonsoft.Json.JsonToken expectedToken, object[] expectedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ExpectAndAdvance (reader As JsonReader, expectedToken As JsonToken, ParamArray expectedValues As Object())" />
      <MemberSignature Language="F#" Value="static member ExpectAndAdvance : Newtonsoft.Json.JsonReader * Newtonsoft.Json.JsonToken * obj[] -&gt; unit" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.ExpectAndAdvance (reader, expectedToken, expectedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="expectedToken" Type="Newtonsoft.Json.JsonToken" />
        <Parameter Name="expectedValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader">The JSON reader.</param>
        <param name="expectedToken">The JSON token on which the reader is expected to be positioned.</param>
        <param name="expectedValues">Optional; The expected possible values of the current JSON token.</param>
        <summary>
            Asserts that the given JSON reader is positioned on a token with the expected type. Optionally asserts
            that the value of the token matches a given expected value. If any of the assertions fail, this method
            throws a JsonSerializationException. Otherwise, this method attempts to advance the JSON reader to the
            next position.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpectAndAdvance&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue ExpectAndAdvance&lt;TValue&gt; (this Newtonsoft.Json.JsonReader reader, Newtonsoft.Json.JsonToken expectedToken, params object[] expectedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue ExpectAndAdvance&lt;TValue&gt;(class Newtonsoft.Json.JsonReader reader, valuetype Newtonsoft.Json.JsonToken expectedToken, object[] expectedValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExpectAndAdvance(Of TValue) (reader As JsonReader, expectedToken As JsonToken, ParamArray expectedValues As Object()) As TValue" />
      <MemberSignature Language="F#" Value="static member ExpectAndAdvance : Newtonsoft.Json.JsonReader * Newtonsoft.Json.JsonToken * obj[] -&gt; 'Value" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.ExpectAndAdvance (reader, expectedToken, expectedValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="expectedToken" Type="Newtonsoft.Json.JsonToken" />
        <Parameter Name="expectedValues" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TValue">The expected type of the value of the current JSON token.</typeparam>
        <param name="reader">The JSON reader.</param>
        <param name="expectedToken">The JSON token on which the reader is expected to be positioned.</param>
        <param name="expectedValues">Optional; The expected possible values of the current JSON token.</param>
        <summary>
            Asserts that the given JSON reader is positioned on a token with the expected type and retrieves the
            value of the token, if any. Optionally asserts that the value of the token matches a given expected
            value. If any of the assertions fail, this method throws a JsonSerializationException. Otherwise, this
            method attempts to advance the JSON reader to the next position.
            </summary>
        <returns>
            The value of the JSON token before advancing the reader, or default(TValue) if the token has no value.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (this Newtonsoft.Json.Linq.JToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(class Newtonsoft.Json.Linq.JToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.IsNumber(Newtonsoft.Json.Linq.JToken)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsNumber (token As JToken) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsNumber : Newtonsoft.Json.Linq.JToken -&gt; bool" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.IsNumber token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Newtonsoft.Json.Linq.JToken" RefType="this" />
      </Parameters>
      <Docs>
        <param name="token">The token to check.</param>
        <summary>
            Indicates whether or not the given JSON token is a numeric literal.
            </summary>
        <returns>
          <c>true</c> if the given JSON token represents a number, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsString">
      <MemberSignature Language="C#" Value="public static bool IsString (this Newtonsoft.Json.Linq.JToken token, string expectedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsString(class Newtonsoft.Json.Linq.JToken token, string expectedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.IsString(Newtonsoft.Json.Linq.JToken,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsString (token As JToken, expectedValue As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsString : Newtonsoft.Json.Linq.JToken * string -&gt; bool" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.IsString (token, expectedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="Newtonsoft.Json.Linq.JToken" RefType="this" />
        <Parameter Name="expectedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="token">The token to check.</param>
        <param name="expectedValue">The expected string value.</param>
        <summary>
            Indicates whether or not the given JSON token matches the expected string.
            </summary>
        <returns>
          <c>true</c> if the given JSON token matches the expected string, <c>false</c> otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public static bool IsValid (this Newtonsoft.Json.Linq.JObject obj, System.Collections.Generic.IEnumerable&lt;string&gt; requiredProperties, Func&lt;Newtonsoft.Json.Linq.JProperty,bool&gt; isPropertyValid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValid(class Newtonsoft.Json.Linq.JObject obj, class System.Collections.Generic.IEnumerable`1&lt;string&gt; requiredProperties, class System.Func`2&lt;class Newtonsoft.Json.Linq.JProperty, bool&gt; isPropertyValid) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.IsValid(Newtonsoft.Json.Linq.JObject,System.Collections.Generic.IEnumerable{System.String},System.Func{Newtonsoft.Json.Linq.JProperty,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsValid (obj As JObject, requiredProperties As IEnumerable(Of String), isPropertyValid As Func(Of JProperty, Boolean)) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsValid : Newtonsoft.Json.Linq.JObject * seq&lt;string&gt; * Func&lt;Newtonsoft.Json.Linq.JProperty, bool&gt; -&gt; bool" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.IsValid (obj, requiredProperties, isPropertyValid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Newtonsoft.Json.Linq.JObject" RefType="this" />
        <Parameter Name="requiredProperties" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="isPropertyValid" Type="System.Func&lt;Newtonsoft.Json.Linq.JProperty,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="obj">The JSON object to validate.</param>
        <param name="requiredProperties">
            The names of all JSON properties that are expected to be present in the given object.
            </param>
        <param name="isPropertyValid">
            A predicate that determines whether the name and value of given <c cref="T:Newtonsoft.Json.Linq.JProperty">JProperty</c> are valid.
            </param>
        <summary>
            Validates the properties of the given JSON object, enforcing the presence of required properties and ignoring
            the order of properties.
            </summary>
        <returns>
          <c>true</c> if all properties of the given JSON object pass the given validation function and all required properties exist,
            <c>false</c> otherwise.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadObject">
      <MemberSignature Language="C#" Value="public static void ReadObject (this Newtonsoft.Json.JsonReader reader, System.Collections.Generic.IEnumerable&lt;string&gt; requiredProperties, Action&lt;Newtonsoft.Json.JsonReader,string&gt; readProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadObject(class Newtonsoft.Json.JsonReader reader, class System.Collections.Generic.IEnumerable`1&lt;string&gt; requiredProperties, class System.Action`2&lt;class Newtonsoft.Json.JsonReader, string&gt; readProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.ReadObject(Newtonsoft.Json.JsonReader,System.Collections.Generic.IEnumerable{System.String},System.Action{Newtonsoft.Json.JsonReader,System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ReadObject (reader As JsonReader, requiredProperties As IEnumerable(Of String), readProperty As Action(Of JsonReader, String))" />
      <MemberSignature Language="F#" Value="static member ReadObject : Newtonsoft.Json.JsonReader * seq&lt;string&gt; * Action&lt;Newtonsoft.Json.JsonReader, string&gt; -&gt; unit" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.ReadObject (reader, requiredProperties, readProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="requiredProperties" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="readProperty" Type="System.Action&lt;Newtonsoft.Json.JsonReader,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="reader">The JSON reader to use to read an object.</param>
        <param name="requiredProperties">
            The names of all JSON properties that are expected to be present in the parsed object.
            </param>
        <param name="readProperty">
            A callback that reads a property value with the given name from the given <c cref="T:Newtonsoft.Json.JsonReader">JsonReader</c>. It must
            advance the reader to the name of the next property, or the end of the object if there are no more properties to read.
            </param>
        <summary>
            Reads the properties of JSON objects, enforcing the presence of required properties and ignoring the order of properties.
            </summary>
        <remarks>
            This method will leave the reader positioned on the end of the object.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadObject">
      <MemberSignature Language="C#" Value="public static void ReadObject (this Newtonsoft.Json.JsonReader reader, System.Collections.Generic.IEnumerable&lt;string&gt; requiredProperties, System.Collections.Generic.IEnumerable&lt;string&gt; optionalProperties, Action&lt;Newtonsoft.Json.JsonReader,string&gt; readProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadObject(class Newtonsoft.Json.JsonReader reader, class System.Collections.Generic.IEnumerable`1&lt;string&gt; requiredProperties, class System.Collections.Generic.IEnumerable`1&lt;string&gt; optionalProperties, class System.Action`2&lt;class Newtonsoft.Json.JsonReader, string&gt; readProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.ReadObject(Newtonsoft.Json.JsonReader,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Action{Newtonsoft.Json.JsonReader,System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ReadObject (reader As JsonReader, requiredProperties As IEnumerable(Of String), optionalProperties As IEnumerable(Of String), readProperty As Action(Of JsonReader, String))" />
      <MemberSignature Language="F#" Value="static member ReadObject : Newtonsoft.Json.JsonReader * seq&lt;string&gt; * seq&lt;string&gt; * Action&lt;Newtonsoft.Json.JsonReader, string&gt; -&gt; unit" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.ReadObject (reader, requiredProperties, optionalProperties, readProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="requiredProperties" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="optionalProperties" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="readProperty" Type="System.Action&lt;Newtonsoft.Json.JsonReader,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="reader">The JSON reader to use to read an object.</param>
        <param name="requiredProperties">
            The names of all JSON properties that are expected to be present in the parsed object.
            </param>
        <param name="optionalProperties">
            The names of JSON properties besides the required properties that may be present in the parsed object.
            </param>
        <param name="readProperty">
            A callback that reads a property value with the given name from the given <c cref="T:Newtonsoft.Json.JsonReader">JsonReader</c>. It must
            advance the reader to the name of the next property, or the end of the object if there are no more properties to read.
            </param>
        <summary>
            Reads the properties of JSON objects, enforcing the presence of required properties and ignoring the order of properties.
            </summary>
        <remarks>
            This method will leave the reader positioned on the end of the object.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadObjectAndAdvance">
      <MemberSignature Language="C#" Value="public static void ReadObjectAndAdvance (this Newtonsoft.Json.JsonReader reader, System.Collections.Generic.IEnumerable&lt;string&gt; requiredProperties, Action&lt;Newtonsoft.Json.JsonReader,string&gt; readProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReadObjectAndAdvance(class Newtonsoft.Json.JsonReader reader, class System.Collections.Generic.IEnumerable`1&lt;string&gt; requiredProperties, class System.Action`2&lt;class Newtonsoft.Json.JsonReader, string&gt; readProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Serialization.JsonExtensions.ReadObjectAndAdvance(Newtonsoft.Json.JsonReader,System.Collections.Generic.IEnumerable{System.String},System.Action{Newtonsoft.Json.JsonReader,System.String})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ReadObjectAndAdvance (reader As JsonReader, requiredProperties As IEnumerable(Of String), readProperty As Action(Of JsonReader, String))" />
      <MemberSignature Language="F#" Value="static member ReadObjectAndAdvance : Newtonsoft.Json.JsonReader * seq&lt;string&gt; * Action&lt;Newtonsoft.Json.JsonReader, string&gt; -&gt; unit" Usage="Microsoft.Azure.Search.Serialization.JsonExtensions.ReadObjectAndAdvance (reader, requiredProperties, readProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Common</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" RefType="this" />
        <Parameter Name="requiredProperties" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="readProperty" Type="System.Action&lt;Newtonsoft.Json.JsonReader,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="reader">The JSON reader to use to read an object.</param>
        <param name="requiredProperties">
            The names of all JSON properties that are expected to be present in the parsed object.
            </param>
        <param name="readProperty">
            A callback that reads a property value with the given name from the given <c cref="T:Newtonsoft.Json.JsonReader">JsonReader</c>. It must
            advance the reader to the name of the next property, or the end of the object if there are no more properties to read.
            </param>
        <summary>
            Reads the properties of JSON objects, enforcing the presence of required properties and ignoring the order of properties,
            and then advances the given reader to the next token after the end of the object.
            </summary>
        <remarks>
            This method will advance the reader to the next position after the end of the object.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
