<Type Name="TokenCachePersistenceOptions" FullName="Azure.Identity.TokenCachePersistenceOptions">
  <TypeSignature Language="C#" Value="public class TokenCachePersistenceOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TokenCachePersistenceOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Identity.TokenCachePersistenceOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class TokenCachePersistenceOptions" />
  <TypeSignature Language="F#" Value="type TokenCachePersistenceOptions = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Identity</AssemblyName>
    <AssemblyVersion>1.4.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <AssemblyVersion>1.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.6.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Options controlling the storage of the token cache.
             </summary>
    <remarks>To be added.</remarks>
    <example>
      <para>
             This is an example showing how TokenCachePersistenceOptions and an AuthenticationRecord can be used together to enable silent authentication
             across executions of a client application.
             </para>
      <code snippet="Snippet:AuthenticationRecord_TokenCachePersistenceOptions" language="csharp">
             const string TOKEN_CACHE_NAME = "MyTokenCache";
             InteractiveBrowserCredential credential;
             AuthenticationRecord authRecord;
            
             // Check if an AuthenticationRecord exists on disk.
             // If it does not exist, get one and serialize it to disk.
             // If it does exist, load it from disk and deserialize it.
             if (!File.Exists(AUTH_RECORD_PATH))
             {
                 // Construct a credential with TokenCachePersistenceOptions specified to ensure that the token cache is persisted to disk.
                 // We can also optionally specify a name for the cache to avoid having it cleared by other applications.
                 credential = new InteractiveBrowserCredential(
                     new InteractiveBrowserCredentialOptions { TokenCachePersistenceOptions = new TokenCachePersistenceOptions { Name = TOKEN_CACHE_NAME } });
            
                 // Call AuthenticateAsync to fetch a new AuthenticationRecord.
                 authRecord = await credential.AuthenticateAsync();
            
                 // Serialize the AuthenticationRecord to disk so that it can be re-used across executions of this initialization code.
                 using var authRecordStream = new FileStream(AUTH_RECORD_PATH, FileMode.Create, FileAccess.Write);
                 await authRecord.SerializeAsync(authRecordStream);
             }
             else
             {
                 // Load the previously serialized AuthenticationRecord from disk and deserialize it.
                 using var authRecordStream = new FileStream(AUTH_RECORD_PATH, FileMode.Open, FileAccess.Read);
                 authRecord = await AuthenticationRecord.DeserializeAsync(authRecordStream);
            
                 // Construct a new client with our TokenCachePersistenceOptions with the addition of the AuthenticationRecord property.
                 // This tells the credential to use the same token cache in addition to which account to try and fetch from cache when GetToken is called.
                 credential = new InteractiveBrowserCredential(
                     new InteractiveBrowserCredentialOptions
                     {
                         TokenCachePersistenceOptions = new TokenCachePersistenceOptions { Name = TOKEN_CACHE_NAME },
                         AuthenticationRecord = authRecord
                     });
             }
            
             // Construct our client with the credential which is connected to the token cache
             // with the capability of silent authentication for the account specified in the AuthenticationRecord.
             var client = new SecretClient(new Uri("https://myvault.vault.azure.net/"), credential);
             </code>
    </example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TokenCachePersistenceOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Identity.TokenCachePersistenceOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Identity</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Azure.Identity.TokenCachePersistenceOptions.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="Azure.Identity.TokenCachePersistenceOptions.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Identity</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Name uniquely identifying the <see cref="T:Azure.Identity.TokenCachePersistenceOptions" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnsafeAllowUnencryptedStorage">
      <MemberSignature Language="C#" Value="public bool UnsafeAllowUnencryptedStorage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnsafeAllowUnencryptedStorage" />
      <MemberSignature Language="DocId" Value="P:Azure.Identity.TokenCachePersistenceOptions.UnsafeAllowUnencryptedStorage" />
      <MemberSignature Language="VB.NET" Value="Public Property UnsafeAllowUnencryptedStorage As Boolean" />
      <MemberSignature Language="F#" Value="member this.UnsafeAllowUnencryptedStorage : bool with get, set" Usage="Azure.Identity.TokenCachePersistenceOptions.UnsafeAllowUnencryptedStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Identity</AssemblyName>
        <AssemblyVersion>1.4.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.5.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.6.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If set to true the token cache may be persisted as an unencrypted file if no OS level user encryption is available. When set to false the token cache
            will throw a <see cref="T:Azure.Identity.CredentialUnavailableException" /> in the event no OS level user encryption is available.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
