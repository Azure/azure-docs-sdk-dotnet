<Type Name="SearchParameters" FullName="Microsoft.Azure.Search.Models.SearchParameters">
  <TypeSignature Language="C#" Value="public class SearchParameters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchParameters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Search.Models.SearchParameters" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchParameters" />
  <TypeSignature Language="F#" Value="type SearchParameters = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
    <AssemblyVersion>10.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Parameters for filtering, sorting, faceting, paging, and other search query behaviors.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Models.SearchParameters.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the SearchParameters class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchParameters (bool includeTotalResultCount = false, System.Collections.Generic.IList&lt;string&gt; facets = default, string filter = default, System.Collections.Generic.IList&lt;string&gt; highlightFields = default, string highlightPostTag = default, string highlightPreTag = default, double? minimumCoverage = default, System.Collections.Generic.IList&lt;string&gt; orderBy = default, Microsoft.Azure.Search.Models.QueryType queryType = Microsoft.Azure.Search.Models.QueryType.Simple, System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.ScoringParameter&gt; scoringParameters = default, string scoringProfile = default, System.Collections.Generic.IList&lt;string&gt; searchFields = default, Microsoft.Azure.Search.Models.SearchMode searchMode = Microsoft.Azure.Search.Models.SearchMode.Any, System.Collections.Generic.IList&lt;string&gt; select = default, int? skip = default, int? top = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool includeTotalResultCount, class System.Collections.Generic.IList`1&lt;string&gt; facets, string filter, class System.Collections.Generic.IList`1&lt;string&gt; highlightFields, string highlightPostTag, string highlightPreTag, valuetype System.Nullable`1&lt;float64&gt; minimumCoverage, class System.Collections.Generic.IList`1&lt;string&gt; orderBy, valuetype Microsoft.Azure.Search.Models.QueryType queryType, class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Search.Models.ScoringParameter&gt; scoringParameters, string scoringProfile, class System.Collections.Generic.IList`1&lt;string&gt; searchFields, valuetype Microsoft.Azure.Search.Models.SearchMode searchMode, class System.Collections.Generic.IList`1&lt;string&gt; select, valuetype System.Nullable`1&lt;int32&gt; skip, valuetype System.Nullable`1&lt;int32&gt; top) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Models.SearchParameters.#ctor(System.Boolean,System.Collections.Generic.IList{System.String},System.String,System.Collections.Generic.IList{System.String},System.String,System.String,System.Nullable{System.Double},System.Collections.Generic.IList{System.String},Microsoft.Azure.Search.Models.QueryType,System.Collections.Generic.IList{Microsoft.Azure.Search.Models.ScoringParameter},System.String,System.Collections.Generic.IList{System.String},Microsoft.Azure.Search.Models.SearchMode,System.Collections.Generic.IList{System.String},System.Nullable{System.Int32},System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional includeTotalResultCount As Boolean = false, Optional facets As IList(Of String) = Nothing, Optional filter As String = Nothing, Optional highlightFields As IList(Of String) = Nothing, Optional highlightPostTag As String = Nothing, Optional highlightPreTag As String = Nothing, Optional minimumCoverage As Nullable(Of Double) = Nothing, Optional orderBy As IList(Of String) = Nothing, Optional queryType As QueryType = Microsoft.Azure.Search.Models.QueryType.Simple, Optional scoringParameters As IList(Of ScoringParameter) = Nothing, Optional scoringProfile As String = Nothing, Optional searchFields As IList(Of String) = Nothing, Optional searchMode As SearchMode = Microsoft.Azure.Search.Models.SearchMode.Any, Optional select As IList(Of String) = Nothing, Optional skip As Nullable(Of Integer) = Nothing, Optional top As Nullable(Of Integer) = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Search.Models.SearchParameters : bool * System.Collections.Generic.IList&lt;string&gt; * string * System.Collections.Generic.IList&lt;string&gt; * string * string * Nullable&lt;double&gt; * System.Collections.Generic.IList&lt;string&gt; * Microsoft.Azure.Search.Models.QueryType * System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.ScoringParameter&gt; * string * System.Collections.Generic.IList&lt;string&gt; * Microsoft.Azure.Search.Models.SearchMode * System.Collections.Generic.IList&lt;string&gt; * Nullable&lt;int&gt; * Nullable&lt;int&gt; -&gt; Microsoft.Azure.Search.Models.SearchParameters" Usage="new Microsoft.Azure.Search.Models.SearchParameters (includeTotalResultCount, facets, filter, highlightFields, highlightPostTag, highlightPreTag, minimumCoverage, orderBy, queryType, scoringParameters, scoringProfile, searchFields, searchMode, select, skip, top)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="includeTotalResultCount" Type="System.Boolean" />
        <Parameter Name="facets" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="highlightFields" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="highlightPostTag" Type="System.String" />
        <Parameter Name="highlightPreTag" Type="System.String" />
        <Parameter Name="minimumCoverage" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="orderBy" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="queryType" Type="Microsoft.Azure.Search.Models.QueryType" />
        <Parameter Name="scoringParameters" Type="System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.ScoringParameter&gt;" />
        <Parameter Name="scoringProfile" Type="System.String" />
        <Parameter Name="searchFields" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="searchMode" Type="Microsoft.Azure.Search.Models.SearchMode" />
        <Parameter Name="select" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
        <Parameter Name="skip" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="top" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="includeTotalResultCount">A value that specifies
            whether to fetch the total count of results. Default is false.
            Setting this value to true may have a performance impact. Note that
            the count returned is an approximation.</param>
        <param name="facets">The list of facet expressions to apply to the
            search query. Each facet expression contains a field name,
            optionally followed by a comma-separated list of name:value
            pairs.</param>
        <param name="filter">The OData $filter expression to apply to the
            search query.</param>
        <param name="highlightFields">The list of field names to use for
            hit highlights. Only searchable fields can be used for hit
            highlighting.</param>
        <param name="highlightPostTag">A string tag that is appended to hit
            highlights. Must be set with highlightPreTag. Default is
            &amp;lt;/em&amp;gt;.</param>
        <param name="highlightPreTag">A string tag that is prepended to hit
            highlights. Must be set with highlightPostTag. Default is
            &amp;lt;em&amp;gt;.</param>
        <param name="minimumCoverage">A number between 0 and 100 indicating
            the percentage of the index that must be covered by a search query
            in order for the query to be reported as a success. This parameter
            can be useful for ensuring search availability even for services
            with only one replica. The default is 100.</param>
        <param name="orderBy">The list of OData $orderby expressions by
            which to sort the results. Each expression can be either a field
            name or a call to either the geo.distance() or the search.score()
            functions. Each expression can be followed by asc to indicate
            ascending, and desc to indicate descending. The default is
            ascending order. Ties will be broken by the match scores of
            documents. If no OrderBy is specified, the default sort order is
            descending by document match score. There can be at most 32
            $orderby clauses.</param>
        <param name="queryType">A value that specifies the syntax of the
            search query. The default is 'simple'. Use 'full' if your query
            uses the Lucene query syntax. Possible values include: 'simple',
            'full'</param>
        <param name="scoringParameters">The list of parameter values to be
            used in scoring functions (for example, referencePointParameter)
            using the format name-values. For example, if the scoring profile
            defines a function with a parameter called 'mylocation' the
            parameter string would be "mylocation--122.2,44.8" (without the
            quotes).</param>
        <param name="scoringProfile">The name of a scoring profile to
            evaluate match scores for matching documents in order to sort the
            results.</param>
        <param name="searchFields">The list of field names to which to
            scope the full-text search. When using fielded search
            (fieldName:searchExpression) in a full Lucene query, the field
            names of each fielded search expression take precedence over any
            field names listed in this parameter.</param>
        <param name="searchMode">A value that specifies whether any or all
            of the search terms must be matched in order to count the document
            as a match. Possible values include: 'any', 'all'</param>
        <param name="select">The list of fields to retrieve. If
            unspecified, all fields marked as retrievable in the schema are
            included.</param>
        <param name="skip">The number of search results to skip. This value
            cannot be greater than 100,000. If you need to scan documents in
            sequence, but cannot use $skip due to this limitation, consider
            using $orderby on a totally-ordered key and $filter with a range
            query instead.</param>
        <param name="top">The number of search results to retrieve. This
            can be used in conjunction with $skip to implement client-side
            paging of search results. If results are truncated due to
            server-side paging, the response will include a continuation token
            that can be used to issue another Search request for the next page
            of results.</param>
        <summary>
            Initializes a new instance of the SearchParameters class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Facets">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Facets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Facets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.Facets" />
      <MemberSignature Language="VB.NET" Value="Public Property Facets As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.Facets : System.Collections.Generic.IList&lt;string&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.Facets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of facet expressions to apply to the search
            query. Each facet expression contains a field name, optionally
            followed by a comma-separated list of name:value pairs.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the OData $filter expression to apply to the search
            query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightFields">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; HighlightFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; HighlightFields" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.HighlightFields" />
      <MemberSignature Language="VB.NET" Value="Public Property HighlightFields As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.HighlightFields : System.Collections.Generic.IList&lt;string&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.HighlightFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of field names to use for hit highlights.
            Only searchable fields can be used for hit highlighting.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightPostTag">
      <MemberSignature Language="C#" Value="public string HighlightPostTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HighlightPostTag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.HighlightPostTag" />
      <MemberSignature Language="VB.NET" Value="Public Property HighlightPostTag As String" />
      <MemberSignature Language="F#" Value="member this.HighlightPostTag : string with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.HighlightPostTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a string tag that is appended to hit highlights. Must
            be set with highlightPreTag. Default is
            &amp;amp;lt;/em&amp;amp;gt;.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighlightPreTag">
      <MemberSignature Language="C#" Value="public string HighlightPreTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HighlightPreTag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.HighlightPreTag" />
      <MemberSignature Language="VB.NET" Value="Public Property HighlightPreTag As String" />
      <MemberSignature Language="F#" Value="member this.HighlightPreTag : string with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.HighlightPreTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a string tag that is prepended to hit highlights. Must
            be set with highlightPostTag. Default is
            &amp;amp;lt;em&amp;amp;gt;.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeTotalResultCount">
      <MemberSignature Language="C#" Value="public bool IncludeTotalResultCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeTotalResultCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.IncludeTotalResultCount" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeTotalResultCount As Boolean" />
      <MemberSignature Language="F#" Value="member this.IncludeTotalResultCount : bool with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.IncludeTotalResultCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value that specifies whether to fetch the total
            count of results. Default is false. Setting this value to true may
            have a performance impact. Note that the count returned is an
            approximation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumCoverage">
      <MemberSignature Language="C#" Value="public double? MinimumCoverage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; MinimumCoverage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.MinimumCoverage" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumCoverage As Nullable(Of Double)" />
      <MemberSignature Language="F#" Value="member this.MinimumCoverage : Nullable&lt;double&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.MinimumCoverage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a number between 0 and 100 indicating the percentage
            of the index that must be covered by a search query in order for
            the query to be reported as a success. This parameter can be useful
            for ensuring search availability even for services with only one
            replica. The default is 100.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; OrderBy" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.OrderBy : System.Collections.Generic.IList&lt;string&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of OData $orderby expressions by which to
            sort the results. Each expression can be either a field name or a
            call to either the geo.distance() or the search.score() functions.
            Each expression can be followed by asc to indicate ascending, and
            desc to indicate descending. The default is ascending order. Ties
            will be broken by the match scores of documents. If no OrderBy is
            specified, the default sort order is descending by document match
            score. There can be at most 32 $orderby clauses.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryType">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Search.Models.QueryType QueryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Search.Models.QueryType QueryType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.QueryType" />
      <MemberSignature Language="VB.NET" Value="Public Property QueryType As QueryType" />
      <MemberSignature Language="F#" Value="member this.QueryType : Microsoft.Azure.Search.Models.QueryType with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.QueryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Search.Models.QueryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value that specifies the syntax of the search query.
            The default is 'simple'. Use 'full' if your query uses the Lucene
            query syntax. Possible values include: 'simple', 'full'
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScoringParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.ScoringParameter&gt; ScoringParameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Search.Models.ScoringParameter&gt; ScoringParameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.ScoringParameters" />
      <MemberSignature Language="VB.NET" Value="Public Property ScoringParameters As IList(Of ScoringParameter)" />
      <MemberSignature Language="F#" Value="member this.ScoringParameters : System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.ScoringParameter&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.ScoringParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.ScoringParameter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of parameter values to be used in scoring
            functions (for example, referencePointParameter) using the format
            name-values. For example, if the scoring profile defines a function
            with a parameter called 'mylocation' the parameter string would be
            "mylocation--122.2,44.8" (without the quotes).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScoringProfile">
      <MemberSignature Language="C#" Value="public string ScoringProfile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScoringProfile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.ScoringProfile" />
      <MemberSignature Language="VB.NET" Value="Public Property ScoringProfile As String" />
      <MemberSignature Language="F#" Value="member this.ScoringProfile : string with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.ScoringProfile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the name of a scoring profile to evaluate match scores
            for matching documents in order to sort the results.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchFields">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; SearchFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; SearchFields" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.SearchFields" />
      <MemberSignature Language="VB.NET" Value="Public Property SearchFields As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.SearchFields : System.Collections.Generic.IList&lt;string&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.SearchFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of field names to which to scope the
            full-text search. When using fielded search
            (fieldName:searchExpression) in a full Lucene query, the field
            names of each fielded search expression take precedence over any
            field names listed in this parameter.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchMode">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Search.Models.SearchMode SearchMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Azure.Search.Models.SearchMode SearchMode" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.SearchMode" />
      <MemberSignature Language="VB.NET" Value="Public Property SearchMode As SearchMode" />
      <MemberSignature Language="F#" Value="member this.SearchMode : Microsoft.Azure.Search.Models.SearchMode with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.SearchMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Search.Models.SearchMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a value that specifies whether any or all of the
            search terms must be matched in order to count the document as a
            match. Possible values include: 'any', 'all'
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;string&gt; Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;string&gt; Select" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As IList(Of String)" />
      <MemberSignature Language="F#" Value="member this.Select : System.Collections.Generic.IList&lt;string&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the list of fields to retrieve. If unspecified, all
            fields marked as retrievable in the schema are included.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public int? Skip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Skip" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Property Skip As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.Skip : Nullable&lt;int&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.Skip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the number of search results to skip. This value
            cannot be greater than 100,000. If you need to scan documents in
            sequence, but cannot use $skip due to this limitation, consider
            using $orderby on a totally-ordered key and $filter with a range
            query instead.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int? Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.SearchParameters.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.Top : Nullable&lt;int&gt; with get, set" Usage="Microsoft.Azure.Search.Models.SearchParameters.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Newtonsoft.Json.JsonIgnore]</AttributeName>
          <AttributeName Language="F#">[&lt;Newtonsoft.Json.JsonIgnore&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the number of search results to retrieve. This can be
            used in conjunction with $skip to implement client-side paging of
            search results. If results are truncated due to server-side paging,
            the response will include a continuation token that can be used to
            issue another Search request for the next page of results.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
