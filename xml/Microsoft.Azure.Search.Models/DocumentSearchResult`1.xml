<Type Name="DocumentSearchResult&lt;T&gt;" FullName="Microsoft.Azure.Search.Models.DocumentSearchResult&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class DocumentSearchResult&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DocumentSearchResult`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Search.Models.DocumentSearchResult`1" />
  <TypeSignature Language="VB.NET" Value="Public Class DocumentSearchResult(Of T)" />
  <TypeSignature Language="F#" Value="type DocumentSearchResult&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.1.0</AssemblyVersion>
    <AssemblyVersion>10.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>
            Response containing search results from an index.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DocumentSearchResult (System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.SearchResult&lt;T&gt;&gt; results, Nullable&lt;long&gt; count, Nullable&lt;double&gt; coverage, System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.FacetResult&gt;&gt; facets, Microsoft.Azure.Search.Models.SearchContinuationToken continuationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Search.Models.SearchResult`1&lt;!T&gt;&gt; results, valuetype System.Nullable`1&lt;int64&gt; count, valuetype System.Nullable`1&lt;float64&gt; coverage, class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Search.Models.FacetResult&gt;&gt; facets, class Microsoft.Azure.Search.Models.SearchContinuationToken continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Search.Models.DocumentSearchResult`1.#ctor(System.Collections.Generic.IList{Microsoft.Azure.Search.Models.SearchResult{`0}},System.Nullable{System.Int64},System.Nullable{System.Double},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{Microsoft.Azure.Search.Models.FacetResult}},Microsoft.Azure.Search.Models.SearchContinuationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (results As IList(Of SearchResult(Of T)), count As Nullable(Of Long), coverage As Nullable(Of Double), facets As IDictionary(Of String, IList(Of FacetResult)), continuationToken As SearchContinuationToken)" />
      <MemberSignature Language="F#" Value="new Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt; : System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.SearchResult&lt;'T&gt;&gt; * Nullable&lt;int64&gt; * Nullable&lt;double&gt; * System.Collections.Generic.IDictionary&lt;string, System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.FacetResult&gt;&gt; * Microsoft.Azure.Search.Models.SearchContinuationToken -&gt; Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt;" Usage="new Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt; (results, count, coverage, facets, continuationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="results" Type="System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.SearchResult&lt;T&gt;&gt;" />
        <Parameter Name="count" Type="System.Nullable&lt;System.Int64&gt;" />
        <Parameter Name="coverage" Type="System.Nullable&lt;System.Double&gt;" />
        <Parameter Name="facets" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.FacetResult&gt;&gt;" />
        <Parameter Name="continuationToken" Type="Microsoft.Azure.Search.Models.SearchContinuationToken" />
      </Parameters>
      <Docs>
        <param name="results">The sequence of results returned by the query.</param>
        <param name="count">The total count of results found by the search operation, or null if the count was not requested.</param>
        <param name="coverage">A value indicating the percentage of the index that was included in the query, or null if
            MinimumCoverage was not set in the <c cref="T:Microsoft.Azure.Search.Models.SearchParameters">SearchParameters</c>.</param>
        <param name="facets">The facet query results for the search operation, or null if the query did not include any facet
            expressions.</param>
        <param name="continuationToken">A continuation token that is used to continue fetching search results. This is necessary when
            Azure Cognitive Search cannot fulfill a search request with a single response.</param>
        <summary>
            Initializes a new instance of the DocumentSearchResult class. This constructor is intended to be used for test purposes, since
            the properties of this class are immutable.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinuationToken">
      <MemberSignature Language="C#" Value="public Microsoft.Azure.Search.Models.SearchContinuationToken ContinuationToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Azure.Search.Models.SearchContinuationToken ContinuationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.DocumentSearchResult`1.ContinuationToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContinuationToken As SearchContinuationToken" />
      <MemberSignature Language="F#" Value="member this.ContinuationToken : Microsoft.Azure.Search.Models.SearchContinuationToken" Usage="Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt;.ContinuationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Search.Models.SearchContinuationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a continuation token that is used to continue fetching search results. This is necessary when Azure
            Search cannot fulfill a search request with a single response.
            </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            This property will be null unless Azure Cognitive Search can't return all the requested documents in a single Search
            response. That can happen for different reasons which are implementation-specific and subject to change.
            Robust clients should always be ready to handle cases where fewer documents than expected are returned and
            a continuation token is included to continue retrieving documents. If this property is not null, you can
            pass its value to the
            <c cref="M:Microsoft.Azure.Search.IDocumentsOperations.ContinueSearchWithHttpMessagesAsync(Microsoft.Azure.Search.Models.SearchContinuationToken,Microsoft.Azure.Search.Models.SearchRequestOptions,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">ContinueSearchAsync</c>
            method to retrieve more search results.
            </para>
          <para>
            Note that this property is not meant to help you implement paging of search results. You can implement
            paging using the <c cref="P:Microsoft.Azure.Search.Models.SearchParameters.Top">Top</c> and <c cref="P:Microsoft.Azure.Search.Models.SearchParameters.Skip">Skip</c>
            search parameters.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.DocumentSearchResult`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Nullable(Of Long)" />
      <MemberSignature Language="F#" Value="member this.Count : Nullable&lt;int64&gt;" Usage="Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="@odata.count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the total count of results found by the search operation, or
            null if the count was not requested. If present, the count may be
            greater than the number of results in this response. This can
            happen if you use the $top or $skip parameters, or if Azure
            Cognitive Search can't return all the requested documents in a
            single Search response.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Coverage">
      <MemberSignature Language="C#" Value="public Nullable&lt;double&gt; Coverage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; Coverage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.DocumentSearchResult`1.Coverage" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Coverage As Nullable(Of Double)" />
      <MemberSignature Language="F#" Value="member this.Coverage : Nullable&lt;double&gt;" Usage="Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt;.Coverage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="@search.coverage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value indicating the percentage of the index that was
            included in the query, or null if minimumCoverage was not specified
            in the request.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Facets">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.FacetResult&gt;&gt; Facets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Search.Models.FacetResult&gt;&gt; Facets" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.DocumentSearchResult`1.Facets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Facets As IDictionary(Of String, IList(Of FacetResult))" />
      <MemberSignature Language="F#" Value="member this.Facets : System.Collections.Generic.IDictionary&lt;string, System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.FacetResult&gt;&gt;" Usage="Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt;.Facets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="@search.facets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.FacetResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the facet query results for the search operation, organized as
            a collection of buckets for each faceted field; null if the query
            did not include any facet expressions.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Results">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.SearchResult&lt;T&gt;&gt; Results { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Azure.Search.Models.SearchResult`1&lt;!T&gt;&gt; Results" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Azure.Search.Models.DocumentSearchResult`1.Results" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Results As IList(Of SearchResult(Of T))" />
      <MemberSignature Language="F#" Value="member this.Results : System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.SearchResult&lt;'T&gt;&gt;" Usage="Microsoft.Azure.Search.Models.DocumentSearchResult&lt;'T&gt;.Results" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Search.Data</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.1.0</AssemblyVersion>
        <AssemblyVersion>10.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Newtonsoft.Json.JsonProperty(PropertyName="value")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Azure.Search.Models.SearchResult&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the sequence of results returned by the query.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
