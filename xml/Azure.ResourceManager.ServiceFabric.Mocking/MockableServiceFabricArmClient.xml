<Type Name="MockableServiceFabricArmClient" FullName="Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient">
  <TypeSignature Language="C#" Value="public class MockableServiceFabricArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableServiceFabricArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableServiceFabricArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableServiceFabricArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableServiceFabricArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceFabricApplicationResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource GetServiceFabricApplicationResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource GetServiceFabricApplicationResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient.GetServiceFabricApplicationResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceFabricApplicationResource (id As ResourceIdentifier) As ServiceFabricApplicationResource" />
      <MemberSignature Language="F#" Value="abstract member GetServiceFabricApplicationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource&#xA;override this.GetServiceFabricApplicationResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource" Usage="mockableServiceFabricArmClient.GetServiceFabricApplicationResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceFabricApplicationTypeResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource GetServiceFabricApplicationTypeResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource GetServiceFabricApplicationTypeResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient.GetServiceFabricApplicationTypeResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceFabricApplicationTypeResource (id As ResourceIdentifier) As ServiceFabricApplicationTypeResource" />
      <MemberSignature Language="F#" Value="abstract member GetServiceFabricApplicationTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource&#xA;override this.GetServiceFabricApplicationTypeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource" Usage="mockableServiceFabricArmClient.GetServiceFabricApplicationTypeResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceFabricApplicationTypeVersionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource GetServiceFabricApplicationTypeVersionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource GetServiceFabricApplicationTypeVersionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient.GetServiceFabricApplicationTypeVersionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceFabricApplicationTypeVersionResource (id As ResourceIdentifier) As ServiceFabricApplicationTypeVersionResource" />
      <MemberSignature Language="F#" Value="abstract member GetServiceFabricApplicationTypeVersionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource&#xA;override this.GetServiceFabricApplicationTypeVersionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource" Usage="mockableServiceFabricArmClient.GetServiceFabricApplicationTypeVersionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricApplicationTypeVersionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceFabricClusterResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource GetServiceFabricClusterResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource GetServiceFabricClusterResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient.GetServiceFabricClusterResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceFabricClusterResource (id As ResourceIdentifier) As ServiceFabricClusterResource" />
      <MemberSignature Language="F#" Value="abstract member GetServiceFabricClusterResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource&#xA;override this.GetServiceFabricClusterResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource" Usage="mockableServiceFabricArmClient.GetServiceFabricClusterResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricClusterResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServiceFabricServiceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource GetServiceFabricServiceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource GetServiceFabricServiceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ServiceFabric.Mocking.MockableServiceFabricArmClient.GetServiceFabricServiceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetServiceFabricServiceResource (id As ResourceIdentifier) As ServiceFabricServiceResource" />
      <MemberSignature Language="F#" Value="abstract member GetServiceFabricServiceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource&#xA;override this.GetServiceFabricServiceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource" Usage="mockableServiceFabricArmClient.GetServiceFabricServiceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ServiceFabric</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ServiceFabric.ServiceFabricServiceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
