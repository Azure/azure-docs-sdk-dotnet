<Type Name="DataLakeDirectoryClient" FullName="Azure.Storage.Files.DataLake.DataLakeDirectoryClient">
  <TypeSignature Language="C#" Value="public class DataLakeDirectoryClient : Azure.Storage.Files.DataLake.DataLakePathClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataLakeDirectoryClient extends Azure.Storage.Files.DataLake.DataLakePathClient" />
  <TypeSignature Language="DocId" Value="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
  <TypeSignature Language="VB.NET" Value="Public Class DataLakeDirectoryClient&#xA;Inherits DataLakePathClient" />
  <TypeSignature Language="F#" Value="type DataLakeDirectoryClient = class&#xA;    inherit DataLakePathClient" />
  <AssemblyInfo>
    <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
    <AssemblyVersion>12.0.0.0</AssemblyVersion>
    <AssemblyVersion>12.1.0.0</AssemblyVersion>
    <AssemblyVersion>12.2.0.0</AssemblyVersion>
    <AssemblyVersion>12.2.1.0</AssemblyVersion>
    <AssemblyVersion>12.2.2.0</AssemblyVersion>
    <AssemblyVersion>12.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Storage.Files.DataLake.DataLakePathClient</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A DirectoryClient represents a URI to the Azure DataLake service allowing you to manipulate a directory.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataLakeDirectoryClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class for mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeDirectoryClient (Uri directoryUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri directoryUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directoryUri As Uri)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient : Uri -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient directoryUri" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directoryUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeDirectoryClient (Uri directoryUri, Azure.Core.TokenCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri directoryUri, class Azure.Core.TokenCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Core.TokenCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directoryUri As Uri, credential As TokenCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient : Uri * Azure.Core.TokenCredential -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient (directoryUri, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directoryUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
      </Parameters>
      <Docs>
        <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeDirectoryClient (Uri directoryUri, Azure.Storage.Files.DataLake.DataLakeClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri directoryUri, class Azure.Storage.Files.DataLake.DataLakeClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.Files.DataLake.DataLakeClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directoryUri As Uri, options As DataLakeClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient : Uri * Azure.Storage.Files.DataLake.DataLakeClientOptions -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient (directoryUri, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directoryUri" Type="System.Uri" />
        <Parameter Name="options" Type="Azure.Storage.Files.DataLake.DataLakeClientOptions" />
      </Parameters>
      <Docs>
        <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        <param name="options">
            Optional <see cref="T:Azure.Storage.Files.DataLake.DataLakeClientOptions" /> that define the transport
            pipeline policies for authentication, retries, etc., that are
            applied to every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeDirectoryClient (Uri directoryUri, Azure.Storage.StorageSharedKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri directoryUri, class Azure.Storage.StorageSharedKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directoryUri As Uri, credential As StorageSharedKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient : Uri * Azure.Storage.StorageSharedKeyCredential -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient (directoryUri, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directoryUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
      </Parameters>
      <Docs>
        <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeDirectoryClient (Uri directoryUri, Azure.Core.TokenCredential credential, Azure.Storage.Files.DataLake.DataLakeClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri directoryUri, class Azure.Core.TokenCredential credential, class Azure.Storage.Files.DataLake.DataLakeClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directoryUri As Uri, credential As TokenCredential, options As DataLakeClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient : Uri * Azure.Core.TokenCredential * Azure.Storage.Files.DataLake.DataLakeClientOptions -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient (directoryUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directoryUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Storage.Files.DataLake.DataLakeClientOptions" />
      </Parameters>
      <Docs>
        <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        <param name="credential">
            The token credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLakeDirectoryClient (Uri directoryUri, Azure.Storage.StorageSharedKeyCredential credential, Azure.Storage.Files.DataLake.DataLakeClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri directoryUri, class Azure.Storage.StorageSharedKeyCredential credential, class Azure.Storage.Files.DataLake.DataLakeClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.#ctor(System.Uri,Azure.Storage.StorageSharedKeyCredential,Azure.Storage.Files.DataLake.DataLakeClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (directoryUri As Uri, credential As StorageSharedKeyCredential, options As DataLakeClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient : Uri * Azure.Storage.StorageSharedKeyCredential * Azure.Storage.Files.DataLake.DataLakeClientOptions -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="new Azure.Storage.Files.DataLake.DataLakeDirectoryClient (directoryUri, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="directoryUri" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Storage.StorageSharedKeyCredential" />
        <Parameter Name="options" Type="Azure.Storage.Files.DataLake.DataLakeClientOptions" />
      </Parameters>
      <Docs>
        <param name="directoryUri">
            A <see cref="T:System.Uri" /> referencing the directory that includes the
            name of the account, the name of the file system, and the path of the
            directory.
            </param>
        <param name="credential">
            The shared key credential used to sign requests.
            </param>
        <param name="options">
            Optional client options that define the transport pipeline
            policies for authentication, retries, etc., that are applied to
            every request.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />
            class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt; Create (Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt; Create(class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Create (Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathInfo)" />
      <MemberSignature Language="F#" Value="override this.Create : Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;" Usage="dataLakeDirectoryClient.Create (httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a directory.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; CreateAsync (Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; CreateAsync(class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathInfo))" />
      <MemberSignature Language="F#" Value="override this.CreateAsync : Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;" Usage="dataLakeDirectoryClient.CreateAsync (httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a directory.
             If the directory already exists, it will be overwritten.  If you don't intent to overwrite
             an existing directory, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt; CreateFile (string fileName, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeFileClient&gt; CreateFile(string fileName, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFile (fileName As String, Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataLakeFileClient)" />
      <MemberSignature Language="F#" Value="abstract member CreateFile : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&#xA;override this.CreateFile : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;" Usage="dataLakeDirectoryClient.CreateFile (fileName, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">
             The name of the file to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFile(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file in this directory.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created file.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt; CreateFileAsync (string fileName, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt; CreateFileAsync(string fileName, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateFileAsync (fileName As String, Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataLakeFileClient))" />
      <MemberSignature Language="F#" Value="abstract member CreateFileAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt;&#xA;override this.CreateFileAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt;" Usage="dataLakeDirectoryClient.CreateFileAsync (fileName, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeFileClient&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">
             Name of the file to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory.
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateFileAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a new file in this directory.
             If the file already exists, it will be overwritten.  If you don't intent to overwrite
             an existing file, consider using the <see cref="M:Azure.Storage.Files.DataLake.DataLakeFileClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" /> API.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created file.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt; CreateIfNotExists (Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt; CreateIfNotExists(class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExists(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExists (Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathInfo)" />
      <MemberSignature Language="F#" Value="override this.CreateIfNotExists : Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;" Usage="dataLakeDirectoryClient.CreateIfNotExists (httpHeaders, metadata, permissions, umask, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIfNotExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; CreateIfNotExistsAsync (Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; CreateIfNotExistsAsync(class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateIfNotExistsAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateIfNotExistsAsync (Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathInfo))" />
      <MemberSignature Language="F#" Value="override this.CreateIfNotExistsAsync : Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;" Usage="dataLakeDirectoryClient.CreateIfNotExistsAsync (httpHeaders, metadata, permissions, umask, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Create(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubDirectory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt; CreateSubDirectory (string path, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt; CreateSubDirectory(string path, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSubDirectory (path As String, Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataLakeDirectoryClient)" />
      <MemberSignature Language="F#" Value="abstract member CreateSubDirectory : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&#xA;override this.CreateSubDirectory : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;" Usage="dataLakeDirectoryClient.CreateSubDirectory (path, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectory(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a sub directory in this directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubDirectoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt; CreateSubDirectoryAsync (string path, Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, System.Collections.Generic.IDictionary&lt;string,string&gt; metadata = default, string permissions = default, string umask = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt; CreateSubDirectoryAsync(string path, class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, string permissions, string umask, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSubDirectoryAsync (path As String, Optional httpHeaders As PathHttpHeaders = Nothing, Optional metadata As IDictionary(Of String, String) = Nothing, Optional permissions As String = Nothing, Optional umask As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataLakeDirectoryClient))" />
      <MemberSignature Language="F#" Value="abstract member CreateSubDirectoryAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;&#xA;override this.CreateSubDirectoryAsync : string * Azure.Storage.Files.DataLake.Models.PathHttpHeaders * System.Collections.Generic.IDictionary&lt;string, string&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;" Usage="dataLakeDirectoryClient.CreateSubDirectoryAsync (path, httpHeaders, metadata, permissions, umask, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="permissions" Type="System.String" />
        <Parameter Name="umask" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to create.
             </param>
        <param name="httpHeaders">
             Optional standard HTTP header properties that can be set for the
             new file or directory..
             </param>
        <param name="metadata">
             Optional custom metadata to set for this file or directory..
             </param>
        <param name="permissions">
             Optional and only valid if Hierarchical Namespace is enabled for the account. Sets POSIX access
             permissions for the file owner, the file owning group, and others. Each class may be granted read,
             write, or execute permission. The sticky bit is also supported. Both symbolic (rwxrw-rw-) and 4-digit
             octal notation (e.g. 0766) are supported.
             </param>
        <param name="umask">
             Optional and only valid if Hierarchical Namespace is enabled for the account.
             When creating a file or directory and the parent folder does not have a default ACL,
             the umask restricts the permissions of the file or directory to be created. The resulting
             permission is given by p bitwise-and ^u, where p is the permission and u is the umask. For example,
             if p is 0777 and u is 0057, then the resulting permission is 0720. The default permission is
             0777 for a directory and 0666 for a file. The default umask is 0027. The umask must be specified
             in 4-digit octal notation (e.g. 0766).
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory..
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.CreateSubDirectoryAsync(System.String,Azure.Storage.Files.DataLake.Models.PathHttpHeaders,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation creates a sub directory in this directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Delete (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Delete(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="override this.Delete : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataLakeDirectoryClient.Delete (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Delete(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteAsync (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteAsync(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="override this.DeleteAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataLakeDirectoryClient.DeleteAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified path
             deletion. The path is later deleted during
             garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFile">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteFile (string fileName, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteFile(string fileName, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteFile (fileName As String, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteFile : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteFile : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataLakeDirectoryClient.DeleteFile (fileName, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">
             The name of the file to delete.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFile(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation deletes a file
             in this directory.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteFileAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteFileAsync (string fileName, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteFileAsync(string fileName, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteFileAsync (fileName As String, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteFileAsync : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteFileAsync : string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataLakeDirectoryClient.DeleteFileAsync (fileName, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="fileName">
             The name of the file to delete.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteFileAsync(System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation deletes a file
             in this directory.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIfExists">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;bool&gt; DeleteIfExists (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;bool&gt; DeleteIfExists(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteIfExists (Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boolean)" />
      <MemberSignature Language="F#" Value="override this.DeleteIfExists : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;bool&gt;" Usage="dataLakeDirectoryClient.DeleteIfExists (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExists(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified directory
             for deletion, if the directory exists. The directory is later deleted during
             garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteIfExistsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt; DeleteIfExistsAsync (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;bool&gt;&gt; DeleteIfExistsAsync(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteIfExistsAsync (Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boolean))" />
      <MemberSignature Language="F#" Value="override this.DeleteIfExistsAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;bool&gt;&gt;" Usage="dataLakeDirectoryClient.DeleteIfExistsAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.Boolean&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteIfExistsAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation marks the specified directory
             for deletion, if the directory exists. The directory is later deleted during
             garbage collection.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSubDirectory">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteSubDirectory (string path, string continuation = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteSubDirectory(string path, string continuation, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectory(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteSubDirectory (path As String, Optional continuation As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteSubDirectory : string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeleteSubDirectory : string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="dataLakeDirectoryClient.DeleteSubDirectory (path, continuation, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="continuation" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to delete.
             </param>
        <param name="continuation">
             Optional. When deleting a directory, the number of paths that are deleted with each invocation is limited.
             If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.
             When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete
             operation to continue deleting the directory.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectory(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a sub directory in this directory.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSubDirectoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteSubDirectoryAsync (string path, string continuation = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteSubDirectoryAsync(string path, string continuation, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectoryAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteSubDirectoryAsync (path As String, Optional continuation As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteSubDirectoryAsync : string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteSubDirectoryAsync : string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="dataLakeDirectoryClient.DeleteSubDirectoryAsync (path, continuation, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="continuation" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="path">
             The path to the directory to delete.
             </param>
        <param name="continuation">
             Optional. When deleting a directory, the number of paths that are deleted with each invocation is limited.
             If the number of paths to be deleted exceeds this limit, a continuation token is returned in this response header.
             When a continuation token is returned in the response, it must be specified in a subsequent invocation of the delete
             operation to continue deleting the directory.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             deleting this path.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.DeleteSubDirectoryAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> deletes a sub directory in this directory.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response" /> on successfully deleting.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControl">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathAccessControl&gt; GetAccessControl (bool? userPrincipalName = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathAccessControl&gt; GetAccessControl(valuetype System.Nullable`1&lt;bool&gt; userPrincipalName, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAccessControl (Optional userPrincipalName As Nullable(Of Boolean) = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathAccessControl)" />
      <MemberSignature Language="F#" Value="override this.GetAccessControl : Nullable&lt;bool&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathAccessControl&gt;" Usage="dataLakeDirectoryClient.GetAccessControl (userPrincipalName, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathAccessControl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userPrincipalName" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControl(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessControlAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathAccessControl&gt;&gt; GetAccessControlAsync (bool? userPrincipalName = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathAccessControl&gt;&gt; GetAccessControlAsync(valuetype System.Nullable`1&lt;bool&gt; userPrincipalName, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAccessControlAsync (Optional userPrincipalName As Nullable(Of Boolean) = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathAccessControl))" />
      <MemberSignature Language="F#" Value="override this.GetAccessControlAsync : Nullable&lt;bool&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathAccessControl&gt;&gt;" Usage="dataLakeDirectoryClient.GetAccessControlAsync (userPrincipalName, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathAccessControl&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userPrincipalName" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userPrincipalName">
             Optional.Valid only when Hierarchical Namespace is enabled for the account.If "true",
             the user identity values returned in the x-ms-owner, x-ms-group, and x-ms-acl response
             headers will be transformed from Azure Active Directory Object IDs to User Principal Names.
             If "false", the values will be returned as Azure Active Directory Object IDs.The default
             value is false. Note that group and application Object IDs are not translated because they
             do not have unique friendly names.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's access control.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetAccessControlAsync(System.Nullable{System.Boolean},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns the
             access control data for a path.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's access control.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Files.DataLake.DataLakeFileClient GetFileClient (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Files.DataLake.DataLakeFileClient GetFileClient(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetFileClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileClient (fileName As String) As DataLakeFileClient" />
      <MemberSignature Language="F#" Value="abstract member GetFileClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeFileClient&#xA;override this.GetFileClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeFileClient" Usage="dataLakeDirectoryClient.GetFileClient fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Files.DataLake.DataLakeFileClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">The name of the file.</param>
        <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> object by appending
            <paramref name="fileName" /> to the end of <see cref="T:System.Uri" />.  The
            new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeFileClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathProperties&gt; GetProperties (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathProperties&gt; GetProperties(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProperties (Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathProperties)" />
      <MemberSignature Language="F#" Value="override this.GetProperties : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathProperties&gt;" Usage="dataLakeDirectoryClient.GetProperties (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetProperties(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             path's properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathProperties&gt;&gt; GetPropertiesAsync (Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathProperties&gt;&gt; GetPropertiesAsync(class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPropertiesAsync (Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathProperties))" />
      <MemberSignature Language="F#" Value="override this.GetPropertiesAsync : Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathProperties&gt;&gt;" Usage="dataLakeDirectoryClient.GetPropertiesAsync (conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathProperties&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on getting the path's properties.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetPropertiesAsync(Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation returns all
             user-defined metadata, standard HTTP properties, and system
             properties for the path. It does not return the content of the
             path.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/get-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the
             paths's properties.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubDirectoryClient">
      <MemberSignature Language="C#" Value="public virtual Azure.Storage.Files.DataLake.DataLakeDirectoryClient GetSubDirectoryClient (string subdirectoryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Storage.Files.DataLake.DataLakeDirectoryClient GetSubDirectoryClient(string subdirectoryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.GetSubDirectoryClient(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSubDirectoryClient (subdirectoryName As String) As DataLakeDirectoryClient" />
      <MemberSignature Language="F#" Value="abstract member GetSubDirectoryClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient&#xA;override this.GetSubDirectoryClient : string -&gt; Azure.Storage.Files.DataLake.DataLakeDirectoryClient" Usage="dataLakeDirectoryClient.GetSubDirectoryClient subdirectoryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Storage.Files.DataLake.DataLakeDirectoryClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subdirectoryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subdirectoryName">The name of the subdirectory.</param>
        <summary>
            Creates a new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> object by appending
            <paramref name="subdirectoryName" /> to the end of <see cref="T:System.Uri" />.
            The new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> uses the same request policy
            pipeline as the <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" />.
            </summary>
        <returns>A new <see cref="T:Azure.Storage.Files.DataLake.DataLakeDirectoryClient" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt; Rename (string destinationPath, string destinationFileSystem = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions sourceConditions = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions destinationConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt; Rename(string destinationPath, string destinationFileSystem, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions sourceConditions, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions destinationConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Rename (destinationPath As String, Optional destinationFileSystem As String = Nothing, Optional sourceConditions As DataLakeRequestConditions = Nothing, Optional destinationConditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataLakeDirectoryClient)" />
      <MemberSignature Language="F#" Value="override this.Rename : string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;" Usage="dataLakeDirectoryClient.Rename (destinationPath, destinationFileSystem, sourceConditions, destinationConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationPath" Type="System.String" />
        <Parameter Name="destinationFileSystem" Type="System.String" />
        <Parameter Name="sourceConditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="destinationConditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destinationPath">
             The destination path to rename the path to.
             </param>
        <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
        <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
        <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.Rename(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a Directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> for the
             newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt; RenameAsync (string destinationPath, string destinationFileSystem = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions sourceConditions = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions destinationConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt; RenameAsync(string destinationPath, string destinationFileSystem, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions sourceConditions, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions destinationConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenameAsync (destinationPath As String, Optional destinationFileSystem As String = Nothing, Optional sourceConditions As DataLakeRequestConditions = Nothing, Optional destinationConditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataLakeDirectoryClient))" />
      <MemberSignature Language="F#" Value="override this.RenameAsync : string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;" Usage="dataLakeDirectoryClient.RenameAsync (destinationPath, destinationFileSystem, sourceConditions, destinationConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.DataLakeDirectoryClient&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationPath" Type="System.String" />
        <Parameter Name="destinationFileSystem" Type="System.String" />
        <Parameter Name="sourceConditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="destinationConditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destinationPath">
             The destination path to rename the path to.
             </param>
        <param name="destinationFileSystem">
             Optional destination file system.  If null, path will be renamed within the
             current file system.
             </param>
        <param name="sourceConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the source on the creation of this file or directory.
             </param>
        <param name="destinationConditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add
             conditions on the creation of this file or directory.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.RenameAsync(System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation renames a file or directory.
            
             For more information, see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> for
             the newly created directory.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControlList">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetAccessControlList (System.Collections.Generic.IList&lt;Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt; accessControlList, string owner = default, string group = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetAccessControlList(class System.Collections.Generic.IList`1&lt;class Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt; accessControlList, string owner, string group, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetAccessControlList (accessControlList As IList(Of PathAccessControlItem), Optional owner As String = Nothing, Optional group As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathInfo)" />
      <MemberSignature Language="F#" Value="override this.SetAccessControlList : System.Collections.Generic.IList&lt;Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;" Usage="dataLakeDirectoryClient.SetAccessControlList (accessControlList, owner, group, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessControlList" Type="System.Collections.Generic.IList&lt;Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt;" />
        <Parameter Name="owner" Type="System.String" />
        <Parameter Name="group" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
        <param name="owner">
             The owner of the file or directory.
             </param>
        <param name="group">
             The owning group of the file or directory.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlList(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessControlListAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetAccessControlListAsync (System.Collections.Generic.IList&lt;Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt; accessControlList, string owner = default, string group = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetAccessControlListAsync(class System.Collections.Generic.IList`1&lt;class Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt; accessControlList, string owner, string group, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetAccessControlListAsync (accessControlList As IList(Of PathAccessControlItem), Optional owner As String = Nothing, Optional group As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathInfo))" />
      <MemberSignature Language="F#" Value="override this.SetAccessControlListAsync : System.Collections.Generic.IList&lt;Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt; * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;" Usage="dataLakeDirectoryClient.SetAccessControlListAsync (accessControlList, owner, group, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessControlList" Type="System.Collections.Generic.IList&lt;Azure.Storage.Files.DataLake.Models.PathAccessControlItem&gt;" />
        <Parameter Name="owner" Type="System.String" />
        <Parameter Name="group" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="accessControlList">
             The POSIX access control list for the file or directory.
             </param>
        <param name="owner">
             The owner of the file or directory.
             </param>
        <param name="group">
             The owning group of the file or directory.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetAccessControlListAsync(System.Collections.Generic.IList{Azure.Storage.Files.DataLake.Models.PathAccessControlItem},System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             Access Control on a path
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHttpHeaders">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetHttpHeaders (Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetHttpHeaders(class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetHttpHeaders (Optional httpHeaders As PathHttpHeaders = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathInfo)" />
      <MemberSignature Language="F#" Value="override this.SetHttpHeaders : Azure.Storage.Files.DataLake.Models.PathHttpHeaders * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;" Usage="dataLakeDirectoryClient.SetHttpHeaders (httpHeaders, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.  If not specified, existing values will be cleared.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the paths's HTTP headers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeaders(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the path.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetHttpHeadersAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetHttpHeadersAsync (Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetHttpHeadersAsync(class Azure.Storage.Files.DataLake.Models.PathHttpHeaders httpHeaders, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetHttpHeadersAsync (Optional httpHeaders As PathHttpHeaders = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathInfo))" />
      <MemberSignature Language="F#" Value="override this.SetHttpHeadersAsync : Azure.Storage.Files.DataLake.Models.PathHttpHeaders * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;" Usage="dataLakeDirectoryClient.SetHttpHeadersAsync (httpHeaders, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpHeaders" Type="Azure.Storage.Files.DataLake.Models.PathHttpHeaders" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="httpHeaders">
             Optional. The standard HTTP header system properties to set.  If not specified, existing values will be cleared.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's HTTP headers.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetHttpHeadersAsync(Azure.Storage.Files.DataLake.Models.PathHttpHeaders,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets system
             properties on the PATH.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-properties" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadata">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetMetadata (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetMetadata(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetMetadata (metadata As IDictionary(Of String, String), Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathInfo)" />
      <MemberSignature Language="F#" Value="override this.SetMetadata : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;" Usage="dataLakeDirectoryClient.SetMetadata (metadata, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this path.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadata(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMetadataAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetMetadataAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; metadata, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetMetadataAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; metadata, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetMetadataAsync (metadata As IDictionary(Of String, String), Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathInfo))" />
      <MemberSignature Language="F#" Value="override this.SetMetadataAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;" Usage="dataLakeDirectoryClient.SetMetadataAsync (metadata, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="metadata">
             Custom metadata to set for this path.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the path's metadata.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetMetadataAsync(System.Collections.Generic.IDictionary{System.String,System.String},Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets user-defined
             metadata for the specified path as one or more name-value pairs.
            
             For more information, see <see href="https://docs.microsoft.com/rest/api/storageservices/set-blob-metadata" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPermissions">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetPermissions (Azure.Storage.Files.DataLake.Models.PathPermissions permissions, string owner = default, string group = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt; SetPermissions(class Azure.Storage.Files.DataLake.Models.PathPermissions permissions, string owner, string group, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetPermissions (permissions As PathPermissions, Optional owner As String = Nothing, Optional group As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PathInfo)" />
      <MemberSignature Language="F#" Value="override this.SetPermissions : Azure.Storage.Files.DataLake.Models.PathPermissions * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;" Usage="dataLakeDirectoryClient.SetPermissions (permissions, owner, group, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="Azure.Storage.Files.DataLake.Models.PathPermissions" />
        <Parameter Name="owner" Type="System.String" />
        <Parameter Name="group" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
        <param name="owner">
             The owner of the file or directory.
             </param>
        <param name="group">
             The owning group of the file or directory.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissions(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPermissionsAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetPermissionsAsync (Azure.Storage.Files.DataLake.Models.PathPermissions permissions, string owner = default, string group = default, Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt; SetPermissionsAsync(class Azure.Storage.Files.DataLake.Models.PathPermissions permissions, string owner, string group, class Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions conditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function SetPermissionsAsync (permissions As PathPermissions, Optional owner As String = Nothing, Optional group As String = Nothing, Optional conditions As DataLakeRequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PathInfo))" />
      <MemberSignature Language="F#" Value="override this.SetPermissionsAsync : Azure.Storage.Files.DataLake.Models.PathPermissions * string * string * Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;" Usage="dataLakeDirectoryClient.SetPermissionsAsync (permissions, owner, group, conditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Storage.Files.DataLake</AssemblyName>
        <AssemblyVersion>12.0.0.0</AssemblyVersion>
        <AssemblyVersion>12.1.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.0.0</AssemblyVersion>
        <AssemblyVersion>12.2.1.0</AssemblyVersion>
        <AssemblyVersion>12.2.2.0</AssemblyVersion>
        <AssemblyVersion>12.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Storage.Files.DataLake.Models.PathInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="Azure.Storage.Files.DataLake.Models.PathPermissions" />
        <Parameter Name="owner" Type="System.String" />
        <Parameter Name="group" Type="System.String" />
        <Parameter Name="conditions" Type="Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="permissions">
              The POSIX access permissions for the file owner, the file owning group, and others.
             </param>
        <param name="owner">
             The owner of the file or directory.
             </param>
        <param name="group">
             The owning group of the file or directory.
             </param>
        <param name="conditions">
             Optional <see cref="T:Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions" /> to add conditions on
             setting the the path's access control.
             </param>
        <param name="cancellationToken">
             Optional <see cref="T:System.Threading.CancellationToken" /> to propagate
             notifications that the operation should be cancelled.
             </param>
        <summary>
             The <see cref="M:Azure.Storage.Files.DataLake.DataLakeDirectoryClient.SetPermissionsAsync(Azure.Storage.Files.DataLake.Models.PathPermissions,System.String,System.String,Azure.Storage.Files.DataLake.Models.DataLakeRequestConditions,System.Threading.CancellationToken)" /> operation sets the
             file permissions on a path.
            
             For more information, see <see href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update" />.
             </summary>
        <returns>
             A <see cref="T:Azure.Response`1" /> describing the updated
             path.
             </returns>
        <remarks>
             A <see cref="T:Azure.RequestFailedException" /> will be thrown if
             a failure occurs.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
