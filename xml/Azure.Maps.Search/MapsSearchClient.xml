<Type Name="MapsSearchClient" FullName="Azure.Maps.Search.MapsSearchClient">
  <TypeSignature Language="C#" Value="public class MapsSearchClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MapsSearchClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Maps.Search.MapsSearchClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MapsSearchClient" />
  <TypeSignature Language="F#" Value="type MapsSearchClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Maps.Search</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The Search service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MapsSearchClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsSearchClient (Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor(Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.MapsSearchClient : Azure.AzureKeyCredential -&gt; Azure.Maps.Search.MapsSearchClient" Usage="new Azure.Maps.Search.MapsSearchClient credential" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="credential"> Shared key credential used to authenticate to an Azure Maps Search Service. </param>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsSearchClient (Azure.AzureSasCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureSasCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor(Azure.AzureSasCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureSasCredential)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.MapsSearchClient : Azure.AzureSasCredential -&gt; Azure.Maps.Search.MapsSearchClient" Usage="new Azure.Maps.Search.MapsSearchClient credential" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureSasCredential" />
      </Parameters>
      <Docs>
        <param name="credential"> The Shared Access Signature credential used to connect to Azure. This signature
            can be constructed using the <see cref="T:Azure.AzureSasCredential" />.</param>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsSearchClient (Azure.AzureKeyCredential credential, Azure.Maps.Search.MapsSearchClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureKeyCredential credential, class Azure.Maps.Search.MapsSearchClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor(Azure.AzureKeyCredential,Azure.Maps.Search.MapsSearchClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureKeyCredential, options As MapsSearchClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.MapsSearchClient : Azure.AzureKeyCredential * Azure.Maps.Search.MapsSearchClientOptions -&gt; Azure.Maps.Search.MapsSearchClient" Usage="new Azure.Maps.Search.MapsSearchClient (credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Maps.Search.MapsSearchClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential"> Shared key credential used to authenticate to an Azure Maps Search Service. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsSearchClient (Azure.AzureSasCredential credential, Azure.Maps.Search.MapsSearchClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.AzureSasCredential credential, class Azure.Maps.Search.MapsSearchClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor(Azure.AzureSasCredential,Azure.Maps.Search.MapsSearchClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As AzureSasCredential, options As MapsSearchClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.MapsSearchClient : Azure.AzureSasCredential * Azure.Maps.Search.MapsSearchClientOptions -&gt; Azure.Maps.Search.MapsSearchClient" Usage="new Azure.Maps.Search.MapsSearchClient (credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.AzureSasCredential" />
        <Parameter Name="options" Type="Azure.Maps.Search.MapsSearchClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential"> The Shared Access Signature credential used to connect to Azure. This signature
            can be constructed using the <see cref="T:Azure.AzureSasCredential" />.</param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsSearchClient (Azure.Core.TokenCredential credential, string clientId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, string clientId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor(Azure.Core.TokenCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, clientId As String)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.MapsSearchClient : Azure.Core.TokenCredential * string -&gt; Azure.Maps.Search.MapsSearchClient" Usage="new Azure.Maps.Search.MapsSearchClient (credential, clientId)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="clientId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"> A credential used to authenticate to an Azure Maps Search Service. </param>
        <param name="clientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following <see href="https://aka.ms/amauthdetails">articles</see> for guidance. </param>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> or <paramref name="clientId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MapsSearchClient (Azure.Core.TokenCredential credential, string clientId, Azure.Maps.Search.MapsSearchClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Core.TokenCredential credential, string clientId, class Azure.Maps.Search.MapsSearchClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.#ctor(Azure.Core.TokenCredential,System.String,Azure.Maps.Search.MapsSearchClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (credential As TokenCredential, clientId As String, options As MapsSearchClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.MapsSearchClient : Azure.Core.TokenCredential * string * Azure.Maps.Search.MapsSearchClientOptions -&gt; Azure.Maps.Search.MapsSearchClient" Usage="new Azure.Maps.Search.MapsSearchClient (credential, clientId, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="clientId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Maps.Search.MapsSearchClientOptions" />
      </Parameters>
      <Docs>
        <param name="credential"> A credential used to authenticate to an Azure Maps Search Service. </param>
        <param name="clientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following <see href="https://aka.ms/amauthdetails">articles</see> for guidance. </param>
        <param name="options"> The options for configuring the client. </param>
        <summary> Initializes a new instance of MapsSearchClient. </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> or <paramref name="clientId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGeocoding">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt; GetGeocoding (string query = default, Azure.Maps.Search.Models.GeocodingQuery options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingResponse&gt; GetGeocoding(string query, class Azure.Maps.Search.Models.GeocodingQuery options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetGeocoding(System.String,Azure.Maps.Search.Models.GeocodingQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeocoding (Optional query As String = Nothing, Optional options As GeocodingQuery = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GeocodingResponse)" />
      <MemberSignature Language="F#" Value="abstract member GetGeocoding : string * Azure.Maps.Search.Models.GeocodingQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&#xA;override this.GetGeocoding : string * Azure.Maps.Search.Models.GeocodingQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;" Usage="mapsSearchClient.GetGeocoding (query, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="options" Type="Azure.Maps.Search.Models.GeocodingQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="query"> A string that contains information about a location, such as an address or landmark name. </param>
        <param name="options"> additional options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties, states etc.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeocodingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt; GetGeocodingAsync (string query = default, Azure.Maps.Search.Models.GeocodingQuery options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingResponse&gt;&gt; GetGeocodingAsync(string query, class Azure.Maps.Search.Models.GeocodingQuery options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetGeocodingAsync(System.String,Azure.Maps.Search.Models.GeocodingQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeocodingAsync (Optional query As String = Nothing, Optional options As GeocodingQuery = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GeocodingResponse))" />
      <MemberSignature Language="F#" Value="abstract member GetGeocodingAsync : string * Azure.Maps.Search.Models.GeocodingQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt;&#xA;override this.GetGeocodingAsync : string * Azure.Maps.Search.Models.GeocodingQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt;" Usage="mapsSearchClient.GetGeocodingAsync (query, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="options" Type="Azure.Maps.Search.Models.GeocodingQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="query"> A string that contains information about a location, such as an address or landmark name. </param>
        <param name="options"> additional options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            In many cases, the complete search service might be too much, for instance if you are only interested in traditional geocoding. Search can also be accessed for address look up exclusively. The geocoding is performed by hitting the geocoding endpoint with just the address or partial address in question. The geocoding search index will be queried for everything above the street level data. No Point of Interest (POIs) will be returned. Note that the geocoder is very tolerant of typos and incomplete addresses. It will also handle everything from exact street addresses or street or intersections as well as higher level geographies such as city centers, counties, states etc.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeocodingBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt; GetGeocodingBatch (System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.GeocodingQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingBatchResponse&gt; GetGeocodingBatch(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Search.Models.GeocodingQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetGeocodingBatch(System.Collections.Generic.IEnumerable{Azure.Maps.Search.Models.GeocodingQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeocodingBatch (queries As IEnumerable(Of GeocodingQuery), Optional cancellationToken As CancellationToken = Nothing) As Response(Of GeocodingBatchResponse)" />
      <MemberSignature Language="F#" Value="abstract member GetGeocodingBatch : seq&lt;Azure.Maps.Search.Models.GeocodingQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&#xA;override this.GetGeocodingBatch : seq&lt;Azure.Maps.Search.Models.GeocodingQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;" Usage="mapsSearchClient.GetGeocodingBatch (queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.GeocodingQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries"> The list of address geocoding queries/requests to process. The list can contain a max of 100 queries and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetGeocodingBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt; GetGeocodingBatchAsync (System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.GeocodingQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt; GetGeocodingBatchAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Search.Models.GeocodingQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetGeocodingBatchAsync(System.Collections.Generic.IEnumerable{Azure.Maps.Search.Models.GeocodingQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeocodingBatchAsync (queries As IEnumerable(Of GeocodingQuery), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GeocodingBatchResponse))" />
      <MemberSignature Language="F#" Value="abstract member GetGeocodingBatchAsync : seq&lt;Azure.Maps.Search.Models.GeocodingQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt;&#xA;override this.GetGeocodingBatchAsync : seq&lt;Azure.Maps.Search.Models.GeocodingQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt;" Usage="mapsSearchClient.GetGeocodingBatchAsync (queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.GeocodingQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries"> The list of address geocoding queries/requests to process. The list can contain a max of 100 queries and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPolygon">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt; GetPolygon (Azure.Maps.Search.Models.GetPolygonOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.Boundary&gt; GetPolygon(class Azure.Maps.Search.Models.GetPolygonOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetPolygon(Azure.Maps.Search.Models.GetPolygonOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPolygon (Optional options As GetPolygonOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of Boundary)" />
      <MemberSignature Language="F#" Value="abstract member GetPolygon : Azure.Maps.Search.Models.GetPolygonOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;&#xA;override this.GetPolygon : Azure.Maps.Search.Models.GetPolygonOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;" Usage="mapsSearchClient.GetPolygon (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Maps.Search.Models.GetPolygonOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> additional options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Supplies polygon data of a geographical area outline such as a city or a country region.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPolygonAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;&gt; GetPolygonAsync (Azure.Maps.Search.Models.GetPolygonOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.Boundary&gt;&gt; GetPolygonAsync(class Azure.Maps.Search.Models.GetPolygonOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetPolygonAsync(Azure.Maps.Search.Models.GetPolygonOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPolygonAsync (Optional options As GetPolygonOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of Boundary))" />
      <MemberSignature Language="F#" Value="abstract member GetPolygonAsync : Azure.Maps.Search.Models.GetPolygonOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;&gt;&#xA;override this.GetPolygonAsync : Azure.Maps.Search.Models.GetPolygonOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;&gt;" Usage="mapsSearchClient.GetPolygonAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.Boundary&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Maps.Search.Models.GetPolygonOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> additional options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Supplies polygon data of a geographical area outline such as a city or a country region.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReverseGeocoding">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt; GetReverseGeocoding (Azure.Core.GeoJson.GeoPosition coordinates, Azure.Maps.Search.Models.ReverseGeocodingQuery options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingResponse&gt; GetReverseGeocoding(valuetype Azure.Core.GeoJson.GeoPosition coordinates, class Azure.Maps.Search.Models.ReverseGeocodingQuery options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetReverseGeocoding(Azure.Core.GeoJson.GeoPosition,Azure.Maps.Search.Models.ReverseGeocodingQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReverseGeocoding (coordinates As GeoPosition, Optional options As ReverseGeocodingQuery = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GeocodingResponse)" />
      <MemberSignature Language="F#" Value="abstract member GetReverseGeocoding : Azure.Core.GeoJson.GeoPosition * Azure.Maps.Search.Models.ReverseGeocodingQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&#xA;override this.GetReverseGeocoding : Azure.Core.GeoJson.GeoPosition * Azure.Maps.Search.Models.ReverseGeocodingQuery * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;" Usage="mapsSearchClient.GetReverseGeocoding (coordinates, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinates" Type="Azure.Core.GeoJson.GeoPosition" />
        <Parameter Name="options" Type="Azure.Maps.Search.Models.ReverseGeocodingQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="coordinates"> The coordinates of the location that you want to reverse geocode. Here it is represented by GeoPosition. Example: &amp;coordinates=lon,lat. </param>
        <param name="options"> additional options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Translate a coordinate (example: 37.786505, -122.3862) into a human understandable street address. Most often this is needed in tracking applications where you receive a GPS feed from the device or asset and wish to know what address where the coordinate is located. This endpoint will return address information for a given coordinate.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="coordinates" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReverseGeocodingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt; GetReverseGeocodingAsync (Azure.Core.GeoJson.GeoPosition coordinates, Azure.Maps.Search.Models.ReverseGeocodingQuery options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingResponse&gt;&gt; GetReverseGeocodingAsync(valuetype Azure.Core.GeoJson.GeoPosition coordinates, class Azure.Maps.Search.Models.ReverseGeocodingQuery options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetReverseGeocodingAsync(Azure.Core.GeoJson.GeoPosition,Azure.Maps.Search.Models.ReverseGeocodingQuery,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReverseGeocodingAsync (coordinates As GeoPosition, Optional options As ReverseGeocodingQuery = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GeocodingResponse))" />
      <MemberSignature Language="F#" Value="abstract member GetReverseGeocodingAsync : Azure.Core.GeoJson.GeoPosition * Azure.Maps.Search.Models.ReverseGeocodingQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt;&#xA;override this.GetReverseGeocodingAsync : Azure.Core.GeoJson.GeoPosition * Azure.Maps.Search.Models.ReverseGeocodingQuery * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt;" Usage="mapsSearchClient.GetReverseGeocodingAsync (coordinates, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinates" Type="Azure.Core.GeoJson.GeoPosition" />
        <Parameter Name="options" Type="Azure.Maps.Search.Models.ReverseGeocodingQuery" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="coordinates"> The coordinates of the location that you want to reverse geocode. Example: &amp;coordinates=lon,lat. </param>
        <param name="options"> additional options. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Translate a coordinate (example: 37.786505, -122.3862) into a human understandable street address. Most often this is needed in tracking applications where you receive a GPS feed from the device or asset and wish to know what address where the coordinate is located. This endpoint will return address information for a given coordinate.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="coordinates" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReverseGeocodingBatch">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt; GetReverseGeocodingBatch (System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingBatchResponse&gt; GetReverseGeocodingBatch(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetReverseGeocodingBatch(System.Collections.Generic.IEnumerable{Azure.Maps.Search.Models.ReverseGeocodingQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReverseGeocodingBatch (queries As IEnumerable(Of ReverseGeocodingQuery), Optional cancellationToken As CancellationToken = Nothing) As Response(Of GeocodingBatchResponse)" />
      <MemberSignature Language="F#" Value="abstract member GetReverseGeocodingBatch : seq&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&#xA;override this.GetReverseGeocodingBatch : seq&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;" Usage="mapsSearchClient.GetReverseGeocodingBatch (queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries"> The list of reverse geocoding queries/requests to process. The list can contain a max of 100 queries and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
             The Reverse Geocoding Batch API sends batches of queries to <see href="/rest/api/maps/search/get-reverse-geocoding">Reverse Geocoding API</see> using just a single API call. The API allows caller to batch up to <c>100</c> queries.
            
             A reverse geocoding batchItem object can accept any of the supported reverse geocoding  <see href="/rest/api/maps/search/get-reverse-geocoding#uri-parameters">URI parameters</see>.
            
            
             The batch should contain at least <c>1</c> query.
            
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReverseGeocodingBatchAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt; GetReverseGeocodingBatchAsync (System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; queries, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt; GetReverseGeocodingBatchAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; queries, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.MapsSearchClient.GetReverseGeocodingBatchAsync(System.Collections.Generic.IEnumerable{Azure.Maps.Search.Models.ReverseGeocodingQuery},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReverseGeocodingBatchAsync (queries As IEnumerable(Of ReverseGeocodingQuery), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GeocodingBatchResponse))" />
      <MemberSignature Language="F#" Value="abstract member GetReverseGeocodingBatchAsync : seq&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt;&#xA;override this.GetReverseGeocodingBatchAsync : seq&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt;" Usage="mapsSearchClient.GetReverseGeocodingBatchAsync (queries, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Maps.Search.Models.GeocodingBatchResponse&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queries" Type="System.Collections.Generic.IEnumerable&lt;Azure.Maps.Search.Models.ReverseGeocodingQuery&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queries"> The list of reverse geocoding queries/requests to process. The list can contain a max of 100 queries and must contain at least 1 query. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            
             The Reverse Geocoding Batch API sends batches of queries to <see href="/rest/api/maps/search/get-reverse-geocoding">Reverse Geocoding API</see> using just a single API call. The API allows caller to batch up to <c>100</c> queries.
            
            
             A reverse geocoding batchItem object can accept any of the supported reverse geocoding <see href="/rest/api/maps/search/get-reverse-geocoding#uri-parameters">URI parameters</see>.
            
            
             The batch should contain at least <c>1</c> query.
            
             </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queries" /> is empty. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
