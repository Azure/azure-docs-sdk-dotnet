<Type Name="GetReverseSearchAddressBatchOperation" FullName="Azure.Maps.Search.GetReverseSearchAddressBatchOperation">
  <TypeSignature Language="C#" Value="public class GetReverseSearchAddressBatchOperation : Azure.Operation&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GetReverseSearchAddressBatchOperation extends Azure.Operation`1&lt;class Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;" />
  <TypeSignature Language="DocId" Value="T:Azure.Maps.Search.GetReverseSearchAddressBatchOperation" />
  <TypeSignature Language="VB.NET" Value="Public Class GetReverseSearchAddressBatchOperation&#xA;Inherits Operation(Of ReverseSearchAddressBatchResult)" />
  <TypeSignature Language="F#" Value="type GetReverseSearchAddressBatchOperation = class&#xA;    inherit Operation&lt;ReverseSearchAddressBatchResult&gt;" />
  <AssemblyInfo>
    <AssemblyName>Azure.Maps.Search</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Operation&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">Azure.Maps.Search.Models.ReverseSearchAddressBatchResult</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            **Search Address Reverse Batch API**
            
            
            **Applies to**: S1 pricing tier.
            
            
            
            The Search Address Batch API sends batches of queries to [Search Address Reverse API](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse) using just a single API call. You can call Search Address Reverse Batch API to run either asynchronously (async) or synchronously (sync). The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries.
            ### Submit Synchronous Batch Request
            The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to **100** for this API.
            ```
            POST https://atlas.microsoft.com/search/address/reverse/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
            ```
            ### Submit Asynchronous Batch Request
            The Asynchronous API is appropriate for processing big volumes of relatively complex search requests
            - It allows the retrieval of results in a separate call (multiple downloads are possible).
            - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
            - The number of batch items is limited to **10,000** for this API.
            
            When you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available.
            The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.
            
            Please note that asynchronous batch request is a long-running request. Here's a typical sequence of operations:
            1. Client sends a Search Address Batch `POST` request to Azure Maps
            2. The server will respond with one of the following:
            
                &gt; HTTP `202 Accepted` - Batch request has been accepted.
            
                &gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.
            
            3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.
                This status URI looks like following:
            
            ```
                GET https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
            ```
            4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
            
            ### POST Body for Batch Request
            To send the _search address reverse_ queries you will use a `POST` request where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here's a sample request body containing 5 _search address reverse_ queries:
            
            
            ```json
            {
                "batchItems": [
                    {"query": "?query=48.858561,2.294911"},
                    {"query": "?query=47.639765,-122.127896&amp;radius=5000&amp;limit=2"},
                    {"query": "?query=47.621028,-122.348170"},
                    {"query": "?query=43.722990,10.396695"},
                    {"query": "?query=40.750958,-73.982336"}
                ]
            }
            ```
            
            A _search address reverse_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _search address reverse_ [URI parameters](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#uri-parameters). The string values in the _search address reverse_ query must be properly escaped (e.g. " character should be escaped with \\ ) and it should also be properly URL-encoded.
            
            
            The async API allows caller to batch up to **10,000** queries and sync API up to **100** queries, and the batch should contain at least **1** query.
            
            
            ### Download Asynchronous Batch Results
            To download the async batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:
            
            ```
            https://atlas.microsoft.com/search/address/reverse/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
            ```
            Here's the typical sequence of operations for downloading the batch results:
            1. Client sends a `GET` request using the _download URL_.
            2. The server will respond with one of the following:
            
                &gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.
            
                &gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
            
            
            
            ### Batch Response Model
            The returned data content is similar for async and sync requests. When downloading the results of an async batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch response also includes a `batchItems` array which contains a response for each and every query in the batch request. The `batchItems` will contain the results in the exact same order the original queries were sent in the batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following types:
            
              - [`SearchAddressReverseResponse`](https://docs.microsoft.com/rest/api/maps/search/getsearchaddressreverse#searchaddressreverseresponse) - If the query completed successfully.
            
              - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
            
            
            Here's a sample Batch Response with 2 _successful_ and 1 _failed_ result:
            
            
            ```json
            {
                "summary": {
                    "successfulRequests": 2,
                    "totalRequests": 3
                },
                "batchItems": [
                    {
                        "statusCode": 200,
                        "response":
                        {
                            "summary": {
                                "queryTime": 11
                            },
                            "addresses": [
                                {
                                    "address": {
                                        "country": "France",
                                        "freeformAddress": "Avenue Anatole France, 75007 Paris"
                                    },
                                    "position": "48.858490,2.294820"
                                }
                            ]
                        }
                    },
                    {
                        "statusCode": 200,
                        "response":
                        {
                            "summary": {
                                "queryTime": 1
                            },
                            "addresses": [
                                {
                                    "address": {
                                        "country": "United States of America",
                                        "freeformAddress": "157th Pl NE, Redmond WA 98052"
                                    },
                                    "position": "47.640470,-122.129430"
                                }
                            ]
                        }
                    },
                    {
                        "statusCode": 400,
                        "response":
                        {
                            "error":
                            {
                                "code": "400 BadRequest",
                                "message": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive."
                            }
                        }
                    }
                ]
            }
            ```
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected GetReverseSearchAddressBatchOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of SearchGetReverseSearchAddressBatchOperation for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GetReverseSearchAddressBatchOperation (Azure.Maps.Search.MapsSearchClient client, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Azure.Maps.Search.MapsSearchClient client, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.#ctor(Azure.Maps.Search.MapsSearchClient,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (client As MapsSearchClient, id As String)" />
      <MemberSignature Language="F#" Value="new Azure.Maps.Search.GetReverseSearchAddressBatchOperation : Azure.Maps.Search.MapsSearchClient * string -&gt; Azure.Maps.Search.GetReverseSearchAddressBatchOperation" Usage="new Azure.Maps.Search.GetReverseSearchAddressBatchOperation (client, id)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="client" Type="Azure.Maps.Search.MapsSearchClient" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="client">To be added.</param>
        <param name="id">To be added.</param>
        <summary>
            Initializes a new <see cref="T:Azure.Maps.Search.GetReverseSearchAddressBatchOperation" /> instance
            <param name="client"> The client used to check for completion. </param><param name="id"> An ID representing a specific operation.</param><exception cref="T:System.ArgumentNullException"><paramref name="client" /> or <paramref name="id" /> is null. </exception><exception cref="T:System.FormatException"><paramref name="id" /> format error. </exception></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRawResponse">
      <MemberSignature Language="C#" Value="public override Azure.Response GetRawResponse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response GetRawResponse() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.GetRawResponse" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRawResponse () As Response" />
      <MemberSignature Language="F#" Value="override this.GetRawResponse : unit -&gt; Azure.Response" Usage="getReverseSearchAddressBatchOperation.GetRawResponse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The last HTTP response received from the server.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCompleted">
      <MemberSignature Language="C#" Value="public override bool HasCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasCompleted" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.HasCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasCompleted As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasCompleted : bool" Usage="Azure.Maps.Search.GetReverseSearchAddressBatchOperation.HasCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the long-running operation completed.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="Azure.Maps.Search.GetReverseSearchAddressBatchOperation.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public override string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.Id" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Id As String" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="Azure.Maps.Search.GetReverseSearchAddressBatchOperation.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateStatus">
      <MemberSignature Language="C#" Value="public override Azure.Response UpdateStatus (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response UpdateStatus(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.UpdateStatus(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateStatus (Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="override this.UpdateStatus : System.Threading.CancellationToken -&gt; Azure.Response" Usage="getReverseSearchAddressBatchOperation.UpdateStatus cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param>
        <summary>
            Calls the server to get updated status of the long-running operation.
            </summary>
        <returns>The HTTP response received from the server.</returns>
        <remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateStatusAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;Azure.Response&gt; UpdateStatusAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Azure.Response&gt; UpdateStatusAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.UpdateStatusAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateStatusAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Response)" />
      <MemberSignature Language="F#" Value="override this.UpdateStatusAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Azure.Response&gt;" Usage="getReverseSearchAddressBatchOperation.UpdateStatusAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param>
        <summary>
            Calls the server to get updated status of the long-running operation.
            </summary>
        <returns>The HTTP response received from the server.</returns>
        <remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override Azure.Maps.Search.Models.ReverseSearchAddressBatchResult Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Maps.Search.Models.ReverseSearchAddressBatchResult Value" />
      <MemberSignature Language="DocId" Value="P:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As ReverseSearchAddressBatchResult" />
      <MemberSignature Language="F#" Value="member this.Value : Azure.Maps.Search.Models.ReverseSearchAddressBatchResult" Usage="Azure.Maps.Search.GetReverseSearchAddressBatchOperation.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Maps.Search.Models.ReverseSearchAddressBatchResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Final result of the long-running operation.
            </summary>
        <value>To be added.</value>
        <remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletion">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt; WaitForCompletion (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt; WaitForCompletion(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.WaitForCompletion(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WaitForCompletion (Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReverseSearchAddressBatchResult)" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletion : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&#xA;override this.WaitForCompletion : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;" Usage="getReverseSearchAddressBatchOperation.WaitForCompletion cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param>
        <summary>
            Periodically calls the server till the long-running operation completes.
            </summary>
        <returns>The last HTTP response received from the server.</returns>
        <remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletion">
      <MemberSignature Language="C#" Value="public override Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt; WaitForCompletion (TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class Azure.Response`1&lt;class Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt; WaitForCompletion(valuetype System.TimeSpan pollingInterval, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WaitForCompletion (pollingInterval As TimeSpan, cancellationToken As CancellationToken) As Response(Of ReverseSearchAddressBatchResult)" />
      <MemberSignature Language="F#" Value="abstract member WaitForCompletion : TimeSpan * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&#xA;override this.WaitForCompletion : TimeSpan * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;" Usage="getReverseSearchAddressBatchOperation.WaitForCompletion (pollingInterval, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pollingInterval" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param>
        <summary>
            Periodically calls the server till the long-running operation completes.
            </summary>
        <returns>The last HTTP response received from the server.</returns>
        <remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt; WaitForCompletionAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt; WaitForCompletionAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WaitForCompletionAsync (Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Response(Of ReverseSearchAddressBatchResult))" />
      <MemberSignature Language="F#" Value="override this.WaitForCompletionAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt;" Usage="getReverseSearchAddressBatchOperation.WaitForCompletionAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param>
        <summary>
            Periodically calls the server till the long-running operation completes.
            </summary>
        <returns>The last HTTP response received from the server.</returns>
        <remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForCompletionAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt; WaitForCompletionAsync (TimeSpan pollingInterval, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Azure.Response`1&lt;class Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt; WaitForCompletionAsync(valuetype System.TimeSpan pollingInterval, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Maps.Search.GetReverseSearchAddressBatchOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function WaitForCompletionAsync (pollingInterval As TimeSpan, Optional cancellationToken As CancellationToken = Nothing) As ValueTask(Of Response(Of ReverseSearchAddressBatchResult))" />
      <MemberSignature Language="F#" Value="override this.WaitForCompletionAsync : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt;" Usage="getReverseSearchAddressBatchOperation.WaitForCompletionAsync (pollingInterval, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Maps.Search</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Azure.Response&lt;Azure.Maps.Search.Models.ReverseSearchAddressBatchResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pollingInterval" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param>
        <summary>
            Periodically calls the server till the long-running operation completes.
            </summary>
        <returns>The last HTTP response received from the server.</returns>
        <remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
