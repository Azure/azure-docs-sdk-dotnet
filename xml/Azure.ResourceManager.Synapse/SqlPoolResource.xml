<Type Name="SqlPoolResource" FullName="Azure.ResourceManager.Synapse.SqlPoolResource">
  <TypeSignature Language="C#" Value="public class SqlPoolResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlPoolResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Synapse.SqlPoolResource" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlPoolResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type SqlPoolResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A Class representing a SqlPool along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Synapse.SqlPoolResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetSqlPoolResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Synapse.WorkspaceResource" /> using the GetSqlPool method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SqlPoolResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Synapse.SqlPoolResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;" Usage="sqlPoolResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;" Usage="sqlPoolResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string workspaceName, string sqlPoolName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName, string sqlPoolName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, workspaceName As String, sqlPoolName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.Synapse.SqlPoolResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, workspaceName, sqlPoolName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="workspaceName" Type="System.String" />
        <Parameter Name="sqlPoolName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">To be added.</param>
        <param name="resourceGroupName">To be added.</param>
        <param name="workspaceName">To be added.</param>
        <param name="sqlPoolName">To be added.</param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Synapse.SqlPoolResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSqlPoolRestorePoint">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt; CreateSqlPoolRestorePoint (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition createSqlPoolRestorePointDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Synapse.RestorePointResource&gt; CreateSqlPoolRestorePoint(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition createSqlPoolRestorePointDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.CreateSqlPoolRestorePoint(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSqlPoolRestorePoint (waitUntil As WaitUntil, createSqlPoolRestorePointDefinition As CreateSqlPoolRestorePointDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of RestorePointResource)" />
      <MemberSignature Language="F#" Value="abstract member CreateSqlPoolRestorePoint : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&#xA;override this.CreateSqlPoolRestorePoint : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;" Usage="sqlPoolResource.CreateSqlPoolRestorePoint (waitUntil, createSqlPoolRestorePointDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="createSqlPoolRestorePointDefinition" Type="Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="createSqlPoolRestorePointDefinition"> The definition for creating the restore point of this Sql pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a restore point for a data warehouse.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/restorePoints
            Operation Id: SqlPoolRestorePoints_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="createSqlPoolRestorePointDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSqlPoolRestorePointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt; CreateSqlPoolRestorePointAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition createSqlPoolRestorePointDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt; CreateSqlPoolRestorePointAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition createSqlPoolRestorePointDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.CreateSqlPoolRestorePointAsync(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateSqlPoolRestorePointAsync (waitUntil As WaitUntil, createSqlPoolRestorePointDefinition As CreateSqlPoolRestorePointDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of RestorePointResource))" />
      <MemberSignature Language="F#" Value="abstract member CreateSqlPoolRestorePointAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt;&#xA;override this.CreateSqlPoolRestorePointAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt;" Usage="sqlPoolResource.CreateSqlPoolRestorePointAsync (waitUntil, createSqlPoolRestorePointDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="createSqlPoolRestorePointDefinition" Type="Azure.ResourceManager.Synapse.Models.CreateSqlPoolRestorePointDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="createSqlPoolRestorePointDefinition"> The definition for creating the restore point of this Sql pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Creates a restore point for a data warehouse.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/restorePoints
            Operation Id: SqlPoolRestorePoints_Create
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="createSqlPoolRestorePointDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SqlPoolData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.Synapse.SqlPoolData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Synapse.SqlPoolResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As SqlPoolData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.Synapse.SqlPoolData" Usage="Azure.ResourceManager.Synapse.SqlPoolResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SqlPoolData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;BinaryData&gt; Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class System.BinaryData&gt; Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;" Usage="sqlPoolResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class System.BinaryData&gt;&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt;" Usage="sqlPoolResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Delete a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Delete
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;" Usage="sqlPoolResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get SQL pool properties
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;" Usage="sqlPoolResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get SQL pool properties
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSqlPoolSensitivityLabels">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetCurrentSqlPoolSensitivityLabels (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetCurrentSqlPoolSensitivityLabels(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetCurrentSqlPoolSensitivityLabels(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentSqlPoolSensitivityLabels (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SensitivityLabelResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSqlPoolSensitivityLabels : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;&#xA;override this.GetCurrentSqlPoolSensitivityLabels : string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;" Usage="sqlPoolResource.GetCurrentSqlPoolSensitivityLabels (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets SQL pool sensitivity labels.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/currentSensitivityLabels
            Operation Id: SqlPoolSensitivityLabels_ListCurrent
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.SensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentSqlPoolSensitivityLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetCurrentSqlPoolSensitivityLabelsAsync (string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetCurrentSqlPoolSensitivityLabelsAsync(string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetCurrentSqlPoolSensitivityLabelsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCurrentSqlPoolSensitivityLabelsAsync (Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SensitivityLabelResource)" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentSqlPoolSensitivityLabelsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;&#xA;override this.GetCurrentSqlPoolSensitivityLabelsAsync : string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;" Usage="sqlPoolResource.GetCurrentSqlPoolSensitivityLabelsAsync (filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets SQL pool sensitivity labels.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/currentSensitivityLabels
            Operation Id: SqlPoolSensitivityLabels_ListCurrent
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.SensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataMaskingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.DataMaskingPolicyResource GetDataMaskingPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.DataMaskingPolicyResource GetDataMaskingPolicy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetDataMaskingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataMaskingPolicy () As DataMaskingPolicyResource" />
      <MemberSignature Language="F#" Value="abstract member GetDataMaskingPolicy : unit -&gt; Azure.ResourceManager.Synapse.DataMaskingPolicyResource&#xA;override this.GetDataMaskingPolicy : unit -&gt; Azure.ResourceManager.Synapse.DataMaskingPolicyResource" Usage="sqlPoolResource.GetDataMaskingPolicy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.DataMaskingPolicyResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a DataMaskingPolicyResource along with the instance operations that can be performed on it in the SqlPool. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Synapse.DataMaskingPolicyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivities">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.DataWarehouseUserActivityCollection GetDataWarehouseUserActivities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.DataWarehouseUserActivityCollection GetDataWarehouseUserActivities() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetDataWarehouseUserActivities" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivities () As DataWarehouseUserActivityCollection" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivities : unit -&gt; Azure.ResourceManager.Synapse.DataWarehouseUserActivityCollection&#xA;override this.GetDataWarehouseUserActivities : unit -&gt; Azure.ResourceManager.Synapse.DataWarehouseUserActivityCollection" Usage="sqlPoolResource.GetDataWarehouseUserActivities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.DataWarehouseUserActivityCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of DataWarehouseUserActivityResources in the SqlPool. </summary>
        <returns> An object representing collection of DataWarehouseUserActivityResources and their operations over a DataWarehouseUserActivityResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivity">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt; GetDataWarehouseUserActivity (Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt; GetDataWarehouseUserActivity(valuetype Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetDataWarehouseUserActivity(Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivity (dataWarehouseUserActivityName As DataWarehouseUserActivityName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of DataWarehouseUserActivityResource)" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivity : Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;&#xA;override this.GetDataWarehouseUserActivity : Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;" Usage="sqlPoolResource.GetDataWarehouseUserActivity (dataWarehouseUserActivityName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataWarehouseUserActivityName" Type="Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataWarehouseUserActivityName"> The activity name of the Sql pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the user activities of a SQL pool which includes running and suspended queries
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}
            Operation Id: SqlPoolDataWarehouseUserActivities_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataWarehouseUserActivityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;&gt; GetDataWarehouseUserActivityAsync (Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;&gt; GetDataWarehouseUserActivityAsync(valuetype Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName dataWarehouseUserActivityName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetDataWarehouseUserActivityAsync(Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDataWarehouseUserActivityAsync (dataWarehouseUserActivityName As DataWarehouseUserActivityName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of DataWarehouseUserActivityResource))" />
      <MemberSignature Language="F#" Value="abstract member GetDataWarehouseUserActivityAsync : Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;&gt;&#xA;override this.GetDataWarehouseUserActivityAsync : Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;&gt;" Usage="sqlPoolResource.GetDataWarehouseUserActivityAsync (dataWarehouseUserActivityName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.DataWarehouseUserActivityResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataWarehouseUserActivityName" Type="Azure.ResourceManager.Synapse.Models.DataWarehouseUserActivityName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dataWarehouseUserActivityName"> The activity name of the Sql pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the user activities of a SQL pool which includes running and suspended queries
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}
            Operation Id: SqlPoolDataWarehouseUserActivities_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtendedSqlPoolBlobAuditingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.ExtendedSqlPoolBlobAuditingPolicyResource GetExtendedSqlPoolBlobAuditingPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.ExtendedSqlPoolBlobAuditingPolicyResource GetExtendedSqlPoolBlobAuditingPolicy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetExtendedSqlPoolBlobAuditingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtendedSqlPoolBlobAuditingPolicy () As ExtendedSqlPoolBlobAuditingPolicyResource" />
      <MemberSignature Language="F#" Value="abstract member GetExtendedSqlPoolBlobAuditingPolicy : unit -&gt; Azure.ResourceManager.Synapse.ExtendedSqlPoolBlobAuditingPolicyResource&#xA;override this.GetExtendedSqlPoolBlobAuditingPolicy : unit -&gt; Azure.ResourceManager.Synapse.ExtendedSqlPoolBlobAuditingPolicyResource" Usage="sqlPoolResource.GetExtendedSqlPoolBlobAuditingPolicy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.ExtendedSqlPoolBlobAuditingPolicyResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a ExtendedSqlPoolBlobAuditingPolicyResource along with the instance operations that can be performed on it in the SqlPool. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Synapse.ExtendedSqlPoolBlobAuditingPolicyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeoBackupPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.GeoBackupPolicyCollection GetGeoBackupPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.GeoBackupPolicyCollection GetGeoBackupPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetGeoBackupPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeoBackupPolicies () As GeoBackupPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetGeoBackupPolicies : unit -&gt; Azure.ResourceManager.Synapse.GeoBackupPolicyCollection&#xA;override this.GetGeoBackupPolicies : unit -&gt; Azure.ResourceManager.Synapse.GeoBackupPolicyCollection" Usage="sqlPoolResource.GetGeoBackupPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.GeoBackupPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of GeoBackupPolicyResources in the SqlPool. </summary>
        <returns> An object representing collection of GeoBackupPolicyResources and their operations over a GeoBackupPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeoBackupPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt; GetGeoBackupPolicy (Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName geoBackupPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt; GetGeoBackupPolicy(valuetype Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName geoBackupPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetGeoBackupPolicy(Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeoBackupPolicy (geoBackupPolicyName As GeoBackupPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of GeoBackupPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetGeoBackupPolicy : Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;&#xA;override this.GetGeoBackupPolicy : Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;" Usage="sqlPoolResource.GetGeoBackupPolicy (geoBackupPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geoBackupPolicyName" Type="Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="geoBackupPolicyName"> The name of the geo backup policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified SQL pool geo backup policy
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/geoBackupPolicies/{geoBackupPolicyName}
            Operation Id: SqlPoolGeoBackupPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGeoBackupPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;&gt; GetGeoBackupPolicyAsync (Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName geoBackupPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;&gt; GetGeoBackupPolicyAsync(valuetype Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName geoBackupPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetGeoBackupPolicyAsync(Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeoBackupPolicyAsync (geoBackupPolicyName As GeoBackupPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of GeoBackupPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetGeoBackupPolicyAsync : Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;&gt;&#xA;override this.GetGeoBackupPolicyAsync : Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;&gt;" Usage="sqlPoolResource.GetGeoBackupPolicyAsync (geoBackupPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.GeoBackupPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geoBackupPolicyName" Type="Azure.ResourceManager.Synapse.Models.GeoBackupPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="geoBackupPolicyName"> The name of the geo backup policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the specified SQL pool geo backup policy
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/geoBackupPolicies/{geoBackupPolicyName}
            Operation Id: SqlPoolGeoBackupPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLocationHeaderResultSqlPoolOperationResult">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;BinaryData&gt; GetLocationHeaderResultSqlPoolOperationResult (string operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class System.BinaryData&gt; GetLocationHeaderResultSqlPoolOperationResult(string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetLocationHeaderResultSqlPoolOperationResult(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLocationHeaderResultSqlPoolOperationResult (operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetLocationHeaderResultSqlPoolOperationResult : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;&#xA;override this.GetLocationHeaderResultSqlPoolOperationResult : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;BinaryData&gt;" Usage="sqlPoolResource.GetLocationHeaderResultSqlPoolOperationResult (operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> Operation ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the status of a SQL pool operation
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/operationResults/{operationId}
            Operation Id: SqlPoolOperationResults_GetLocationHeaderResult
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetLocationHeaderResultSqlPoolOperationResultAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt; GetLocationHeaderResultSqlPoolOperationResultAsync (string operationId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class System.BinaryData&gt;&gt; GetLocationHeaderResultSqlPoolOperationResultAsync(string operationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetLocationHeaderResultSqlPoolOperationResultAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLocationHeaderResultSqlPoolOperationResultAsync (operationId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member GetLocationHeaderResultSqlPoolOperationResultAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;&#xA;override this.GetLocationHeaderResultSqlPoolOperationResultAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;BinaryData&gt;&gt;" Usage="sqlPoolResource.GetLocationHeaderResultSqlPoolOperationResultAsync (operationId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="operationId"> Operation ID. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get the status of a SQL pool operation
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/operationResults/{operationId}
            Operation Id: SqlPoolOperationResults_GetLocationHeaderResult
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="operationId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="operationId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetMaintenanceWindow">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.MaintenanceWindowResource GetMaintenanceWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.MaintenanceWindowResource GetMaintenanceWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetMaintenanceWindow" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMaintenanceWindow () As MaintenanceWindowResource" />
      <MemberSignature Language="F#" Value="abstract member GetMaintenanceWindow : unit -&gt; Azure.ResourceManager.Synapse.MaintenanceWindowResource&#xA;override this.GetMaintenanceWindow : unit -&gt; Azure.ResourceManager.Synapse.MaintenanceWindowResource" Usage="sqlPoolResource.GetMaintenanceWindow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.MaintenanceWindowResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a MaintenanceWindowResource along with the instance operations that can be performed on it in the SqlPool. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Synapse.MaintenanceWindowResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMaintenanceWindowOption">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.MaintenanceWindowOptionResource GetMaintenanceWindowOption ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.MaintenanceWindowOptionResource GetMaintenanceWindowOption() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetMaintenanceWindowOption" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMaintenanceWindowOption () As MaintenanceWindowOptionResource" />
      <MemberSignature Language="F#" Value="abstract member GetMaintenanceWindowOption : unit -&gt; Azure.ResourceManager.Synapse.MaintenanceWindowOptionResource&#xA;override this.GetMaintenanceWindowOption : unit -&gt; Azure.ResourceManager.Synapse.MaintenanceWindowOptionResource" Usage="sqlPoolResource.GetMaintenanceWindowOption " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.MaintenanceWindowOptionResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a MaintenanceWindowOptionResource along with the instance operations that can be performed on it in the SqlPool. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Synapse.MaintenanceWindowOptionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataSyncConfig">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.MetadataSyncConfigResource GetMetadataSyncConfig ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.MetadataSyncConfigResource GetMetadataSyncConfig() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetMetadataSyncConfig" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMetadataSyncConfig () As MetadataSyncConfigResource" />
      <MemberSignature Language="F#" Value="abstract member GetMetadataSyncConfig : unit -&gt; Azure.ResourceManager.Synapse.MetadataSyncConfigResource&#xA;override this.GetMetadataSyncConfig : unit -&gt; Azure.ResourceManager.Synapse.MetadataSyncConfigResource" Usage="sqlPoolResource.GetMetadataSyncConfig " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.MetadataSyncConfigResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a MetadataSyncConfigResource along with the instance operations that can be performed on it in the SqlPool. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Synapse.MetadataSyncConfigResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecommendedSqlPoolSensitivityLabels">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetRecommendedSqlPoolSensitivityLabels (bool? includeDisabledRecommendations = default, string skipToken = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetRecommendedSqlPoolSensitivityLabels(valuetype System.Nullable`1&lt;bool&gt; includeDisabledRecommendations, string skipToken, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetRecommendedSqlPoolSensitivityLabels(System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecommendedSqlPoolSensitivityLabels (Optional includeDisabledRecommendations As Nullable(Of Boolean) = Nothing, Optional skipToken As String = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SensitivityLabelResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRecommendedSqlPoolSensitivityLabels : Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;&#xA;override this.GetRecommendedSqlPoolSensitivityLabels : Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;" Usage="sqlPoolResource.GetRecommendedSqlPoolSensitivityLabels (includeDisabledRecommendations, skipToken, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeDisabledRecommendations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includeDisabledRecommendations"> Specifies whether to include disabled recommendations or not. </param>
        <param name="skipToken"> An OData query option to indicate how many elements to skip in the collection. </param>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets sensitivity labels of a given SQL pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/recommendedSensitivityLabels
            Operation Id: SqlPoolSensitivityLabels_ListRecommended
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.SensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRecommendedSqlPoolSensitivityLabelsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetRecommendedSqlPoolSensitivityLabelsAsync (bool? includeDisabledRecommendations = default, string skipToken = default, string filter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.SensitivityLabelResource&gt; GetRecommendedSqlPoolSensitivityLabelsAsync(valuetype System.Nullable`1&lt;bool&gt; includeDisabledRecommendations, string skipToken, string filter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetRecommendedSqlPoolSensitivityLabelsAsync(System.Nullable{System.Boolean},System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRecommendedSqlPoolSensitivityLabelsAsync (Optional includeDisabledRecommendations As Nullable(Of Boolean) = Nothing, Optional skipToken As String = Nothing, Optional filter As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SensitivityLabelResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRecommendedSqlPoolSensitivityLabelsAsync : Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;&#xA;override this.GetRecommendedSqlPoolSensitivityLabelsAsync : Nullable&lt;bool&gt; * string * string * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;" Usage="sqlPoolResource.GetRecommendedSqlPoolSensitivityLabelsAsync (includeDisabledRecommendations, skipToken, filter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.SensitivityLabelResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeDisabledRecommendations" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="skipToken" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="includeDisabledRecommendations"> Specifies whether to include disabled recommendations or not. </param>
        <param name="skipToken"> An OData query option to indicate how many elements to skip in the collection. </param>
        <param name="filter"> An OData filter expression that filters elements in the collection. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets sensitivity labels of a given SQL pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/recommendedSensitivityLabels
            Operation Id: SqlPoolSensitivityLabels_ListRecommended
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.SensitivityLabelResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReplicationLink">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt; GetReplicationLink (string linkId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.ReplicationLinkResource&gt; GetReplicationLink(string linkId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetReplicationLink(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplicationLink (linkId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ReplicationLinkResource)" />
      <MemberSignature Language="F#" Value="abstract member GetReplicationLink : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;&#xA;override this.GetReplicationLink : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;" Usage="sqlPoolResource.GetReplicationLink (linkId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkId"> The ID of the replication link. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get SQL pool replication link by name.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/replicationLinks/{linkId}
            Operation Id: SqlPoolReplicationLinks_GetByName
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicationLinkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;&gt; GetReplicationLinkAsync (string linkId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;&gt; GetReplicationLinkAsync(string linkId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetReplicationLinkAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplicationLinkAsync (linkId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ReplicationLinkResource))" />
      <MemberSignature Language="F#" Value="abstract member GetReplicationLinkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;&gt;&#xA;override this.GetReplicationLinkAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;&gt;" Usage="sqlPoolResource.GetReplicationLinkAsync (linkId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.ReplicationLinkResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linkId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="linkId"> The ID of the replication link. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get SQL pool replication link by name.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/replicationLinks/{linkId}
            Operation Id: SqlPoolReplicationLinks_GetByName
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="linkId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="linkId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetReplicationLinks">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.ReplicationLinkCollection GetReplicationLinks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.ReplicationLinkCollection GetReplicationLinks() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetReplicationLinks" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetReplicationLinks () As ReplicationLinkCollection" />
      <MemberSignature Language="F#" Value="abstract member GetReplicationLinks : unit -&gt; Azure.ResourceManager.Synapse.ReplicationLinkCollection&#xA;override this.GetReplicationLinks : unit -&gt; Azure.ResourceManager.Synapse.ReplicationLinkCollection" Usage="sqlPoolResource.GetReplicationLinks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.ReplicationLinkCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of ReplicationLinkResources in the SqlPool. </summary>
        <returns> An object representing collection of ReplicationLinkResources and their operations over a ReplicationLinkResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRestorePoint">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt; GetRestorePoint (string restorePointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.RestorePointResource&gt; GetRestorePoint(string restorePointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetRestorePoint(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRestorePoint (restorePointName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RestorePointResource)" />
      <MemberSignature Language="F#" Value="abstract member GetRestorePoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&#xA;override this.GetRestorePoint : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;" Usage="sqlPoolResource.GetRestorePoint (restorePointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="restorePointName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="restorePointName"> The name of the restore point. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a restore point.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/restorePoints/{restorePointName}
            Operation Id: SqlPoolRestorePoints_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="restorePointName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="restorePointName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRestorePointAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt; GetRestorePointAsync (string restorePointName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt; GetRestorePointAsync(string restorePointName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetRestorePointAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRestorePointAsync (restorePointName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RestorePointResource))" />
      <MemberSignature Language="F#" Value="abstract member GetRestorePointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt;&#xA;override this.GetRestorePointAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt;" Usage="sqlPoolResource.GetRestorePointAsync (restorePointName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.RestorePointResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="restorePointName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="restorePointName"> The name of the restore point. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a restore point.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/restorePoints/{restorePointName}
            Operation Id: SqlPoolRestorePoints_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="restorePointName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="restorePointName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetRestorePoints">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.RestorePointCollection GetRestorePoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.RestorePointCollection GetRestorePoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetRestorePoints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRestorePoints () As RestorePointCollection" />
      <MemberSignature Language="F#" Value="abstract member GetRestorePoints : unit -&gt; Azure.ResourceManager.Synapse.RestorePointCollection&#xA;override this.GetRestorePoints : unit -&gt; Azure.ResourceManager.Synapse.RestorePointCollection" Usage="sqlPoolResource.GetRestorePoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.RestorePointCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of RestorePointResources in the SqlPool. </summary>
        <returns> An object representing collection of RestorePointResources and their operations over a RestorePointResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolBlobAuditingPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SqlPoolBlobAuditingPolicyResource GetSqlPoolBlobAuditingPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SqlPoolBlobAuditingPolicyResource GetSqlPoolBlobAuditingPolicy() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolBlobAuditingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolBlobAuditingPolicy () As SqlPoolBlobAuditingPolicyResource" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolBlobAuditingPolicy : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolBlobAuditingPolicyResource&#xA;override this.GetSqlPoolBlobAuditingPolicy : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolBlobAuditingPolicyResource" Usage="sqlPoolResource.GetSqlPoolBlobAuditingPolicy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SqlPoolBlobAuditingPolicyResource</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets an object representing a SqlPoolBlobAuditingPolicyResource along with the instance operations that can be performed on it in the SqlPool. </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.Synapse.SqlPoolBlobAuditingPolicyResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolConnectionPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyCollection GetSqlPoolConnectionPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyCollection GetSqlPoolConnectionPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolConnectionPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolConnectionPolicies () As SqlPoolConnectionPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolConnectionPolicies : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyCollection&#xA;override this.GetSqlPoolConnectionPolicies : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyCollection" Usage="sqlPoolResource.GetSqlPoolConnectionPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlPoolConnectionPolicyResources in the SqlPool. </summary>
        <returns> An object representing collection of SqlPoolConnectionPolicyResources and their operations over a SqlPoolConnectionPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolConnectionPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt; GetSqlPoolConnectionPolicy (Azure.ResourceManager.Synapse.Models.ConnectionPolicyName connectionPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt; GetSqlPoolConnectionPolicy(valuetype Azure.ResourceManager.Synapse.Models.ConnectionPolicyName connectionPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolConnectionPolicy(Azure.ResourceManager.Synapse.Models.ConnectionPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolConnectionPolicy (connectionPolicyName As ConnectionPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolConnectionPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolConnectionPolicy : Azure.ResourceManager.Synapse.Models.ConnectionPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;&#xA;override this.GetSqlPoolConnectionPolicy : Azure.ResourceManager.Synapse.Models.ConnectionPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;" Usage="sqlPoolResource.GetSqlPoolConnectionPolicy (connectionPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionPolicyName" Type="Azure.ResourceManager.Synapse.Models.ConnectionPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="connectionPolicyName"> The name of the connection policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a Sql pool's connection policy, which is used with table auditing.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/connectionPolicies/{connectionPolicyName}
            Operation Id: SqlPoolConnectionPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolConnectionPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;&gt; GetSqlPoolConnectionPolicyAsync (Azure.ResourceManager.Synapse.Models.ConnectionPolicyName connectionPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;&gt; GetSqlPoolConnectionPolicyAsync(valuetype Azure.ResourceManager.Synapse.Models.ConnectionPolicyName connectionPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolConnectionPolicyAsync(Azure.ResourceManager.Synapse.Models.ConnectionPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolConnectionPolicyAsync (connectionPolicyName As ConnectionPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolConnectionPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolConnectionPolicyAsync : Azure.ResourceManager.Synapse.Models.ConnectionPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;&gt;&#xA;override this.GetSqlPoolConnectionPolicyAsync : Azure.ResourceManager.Synapse.Models.ConnectionPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;&gt;" Usage="sqlPoolResource.GetSqlPoolConnectionPolicyAsync (connectionPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolConnectionPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionPolicyName" Type="Azure.ResourceManager.Synapse.Models.ConnectionPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="connectionPolicyName"> The name of the connection policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a Sql pool's connection policy, which is used with table auditing.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/connectionPolicies/{connectionPolicyName}
            Operation Id: SqlPoolConnectionPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolOperations">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt; GetSqlPoolOperations (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt; GetSqlPoolOperations(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolOperations(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolOperations (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlPoolOperation)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt;&#xA;override this.GetSqlPoolOperations : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt;" Usage="sqlPoolResource.GetSqlPoolOperations cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of operations performed on the SQL pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/operations
            Operation Id: SqlPoolOperations_List
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SqlPoolOperation" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolOperationsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt; GetSqlPoolOperationsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt; GetSqlPoolOperationsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolOperationsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolOperationsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlPoolOperation)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt;&#xA;override this.GetSqlPoolOperationsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt;" Usage="sqlPoolResource.GetSqlPoolOperationsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of operations performed on the SQL pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/operations
            Operation Id: SqlPoolOperations_List
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SqlPoolOperation" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolSchema">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt; GetSqlPoolSchema (string schemaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt; GetSqlPoolSchema(string schemaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolSchema(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolSchema (schemaName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolSchemaResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolSchema : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;&#xA;override this.GetSqlPoolSchema : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;" Usage="sqlPoolResource.GetSqlPoolSchema (schemaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="schemaName"> The name of the schema. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Sql Pool schema
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}
            Operation Id: SqlPoolSchemas_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="schemaName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolSchemaAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;&gt; GetSqlPoolSchemaAsync (string schemaName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;&gt; GetSqlPoolSchemaAsync(string schemaName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolSchemaAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolSchemaAsync (schemaName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolSchemaResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolSchemaAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;&gt;&#xA;override this.GetSqlPoolSchemaAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;&gt;" Usage="sqlPoolResource.GetSqlPoolSchemaAsync (schemaName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSchemaResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="schemaName"> The name of the schema. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get Sql Pool schema
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}
            Operation Id: SqlPoolSchemas_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="schemaName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolSchemas">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SqlPoolSchemaCollection GetSqlPoolSchemas ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SqlPoolSchemaCollection GetSqlPoolSchemas() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolSchemas" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolSchemas () As SqlPoolSchemaCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolSchemas : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolSchemaCollection&#xA;override this.GetSqlPoolSchemas : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolSchemaCollection" Usage="sqlPoolResource.GetSqlPoolSchemas " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SqlPoolSchemaCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlPoolSchemaResources in the SqlPool. </summary>
        <returns> An object representing collection of SqlPoolSchemaResources and their operations over a SqlPoolSchemaResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolSecurityAlertPolicies">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyCollection GetSqlPoolSecurityAlertPolicies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyCollection GetSqlPoolSecurityAlertPolicies() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolSecurityAlertPolicies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolSecurityAlertPolicies () As SqlPoolSecurityAlertPolicyCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolSecurityAlertPolicies : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyCollection&#xA;override this.GetSqlPoolSecurityAlertPolicies : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyCollection" Usage="sqlPoolResource.GetSqlPoolSecurityAlertPolicies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlPoolSecurityAlertPolicyResources in the SqlPool. </summary>
        <returns> An object representing collection of SqlPoolSecurityAlertPolicyResources and their operations over a SqlPoolSecurityAlertPolicyResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolSecurityAlertPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt; GetSqlPoolSecurityAlertPolicy (Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName securityAlertPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt; GetSqlPoolSecurityAlertPolicy(valuetype Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName securityAlertPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolSecurityAlertPolicy(Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolSecurityAlertPolicy (securityAlertPolicyName As SqlPoolSecurityAlertPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolSecurityAlertPolicyResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolSecurityAlertPolicy : Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;&#xA;override this.GetSqlPoolSecurityAlertPolicy : Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;" Usage="sqlPoolResource.GetSqlPoolSecurityAlertPolicy (securityAlertPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityAlertPolicyName" Type="Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a Sql pool's security alert policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/securityAlertPolicies/{securityAlertPolicyName}
            Operation Id: SqlPoolSecurityAlertPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolSecurityAlertPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;&gt; GetSqlPoolSecurityAlertPolicyAsync (Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName securityAlertPolicyName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;&gt; GetSqlPoolSecurityAlertPolicyAsync(valuetype Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName securityAlertPolicyName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolSecurityAlertPolicyAsync(Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolSecurityAlertPolicyAsync (securityAlertPolicyName As SqlPoolSecurityAlertPolicyName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolSecurityAlertPolicyResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolSecurityAlertPolicyAsync : Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;&gt;&#xA;override this.GetSqlPoolSecurityAlertPolicyAsync : Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;&gt;" Usage="sqlPoolResource.GetSqlPoolSecurityAlertPolicyAsync (securityAlertPolicyName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolSecurityAlertPolicyResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityAlertPolicyName" Type="Azure.ResourceManager.Synapse.Models.SqlPoolSecurityAlertPolicyName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="securityAlertPolicyName"> The name of the security alert policy. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a Sql pool's security alert policy.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/securityAlertPolicies/{securityAlertPolicyName}
            Operation Id: SqlPoolSecurityAlertPolicies_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolUsages">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt; GetSqlPoolUsages (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt; GetSqlPoolUsages(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolUsages(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolUsages (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SqlPoolUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolUsages : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt;&#xA;override this.GetSqlPoolUsages : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt;" Usage="sqlPoolResource.GetSqlPoolUsages cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets SQL pool usages.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/usages
            Operation Id: SqlPoolUsages_List
            </summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SqlPoolUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolUsagesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt; GetSqlPoolUsagesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt; GetSqlPoolUsagesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolUsagesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolUsagesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SqlPoolUsage)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolUsagesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt;&#xA;override this.GetSqlPoolUsagesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt;" Usage="sqlPoolResource.GetSqlPoolUsagesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SqlPoolUsage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets SQL pool usages.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/usages
            Operation Id: SqlPoolUsages_List
            </summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SqlPoolUsage" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolVulnerabilityAssessment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt; GetSqlPoolVulnerabilityAssessment (Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt; GetSqlPoolVulnerabilityAssessment(valuetype Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolVulnerabilityAssessment(Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolVulnerabilityAssessment (vulnerabilityAssessmentName As VulnerabilityAssessmentName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolVulnerabilityAssessmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolVulnerabilityAssessment : Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;&#xA;override this.GetSqlPoolVulnerabilityAssessment : Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;" Usage="sqlPoolResource.GetSqlPoolVulnerabilityAssessment (vulnerabilityAssessmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vulnerabilityAssessmentName" Type="Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the Sql pool's vulnerability assessment.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
            Operation Id: SqlPoolVulnerabilityAssessments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolVulnerabilityAssessmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;&gt; GetSqlPoolVulnerabilityAssessmentAsync (Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;&gt; GetSqlPoolVulnerabilityAssessmentAsync(valuetype Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName vulnerabilityAssessmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolVulnerabilityAssessmentAsync(Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolVulnerabilityAssessmentAsync (vulnerabilityAssessmentName As VulnerabilityAssessmentName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolVulnerabilityAssessmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolVulnerabilityAssessmentAsync : Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;&gt;&#xA;override this.GetSqlPoolVulnerabilityAssessmentAsync : Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;&gt;" Usage="sqlPoolResource.GetSqlPoolVulnerabilityAssessmentAsync (vulnerabilityAssessmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vulnerabilityAssessmentName" Type="Azure.ResourceManager.Synapse.Models.VulnerabilityAssessmentName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="vulnerabilityAssessmentName"> The name of the vulnerability assessment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets the Sql pool's vulnerability assessment.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}
            Operation Id: SqlPoolVulnerabilityAssessments_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSqlPoolVulnerabilityAssessments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentCollection GetSqlPoolVulnerabilityAssessments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentCollection GetSqlPoolVulnerabilityAssessments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetSqlPoolVulnerabilityAssessments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSqlPoolVulnerabilityAssessments () As SqlPoolVulnerabilityAssessmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSqlPoolVulnerabilityAssessments : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentCollection&#xA;override this.GetSqlPoolVulnerabilityAssessments : unit -&gt; Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentCollection" Usage="sqlPoolResource.GetSqlPoolVulnerabilityAssessments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SqlPoolVulnerabilityAssessmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SqlPoolVulnerabilityAssessmentResources in the SqlPool. </summary>
        <returns> An object representing collection of SqlPoolVulnerabilityAssessmentResources and their operations over a SqlPoolVulnerabilityAssessmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransparentDataEncryption">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt; GetTransparentDataEncryption (Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName transparentDataEncryptionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt; GetTransparentDataEncryption(valuetype Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName transparentDataEncryptionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetTransparentDataEncryption(Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTransparentDataEncryption (transparentDataEncryptionName As TransparentDataEncryptionName, Optional cancellationToken As CancellationToken = Nothing) As Response(Of TransparentDataEncryptionResource)" />
      <MemberSignature Language="F#" Value="abstract member GetTransparentDataEncryption : Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;&#xA;override this.GetTransparentDataEncryption : Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;" Usage="sqlPoolResource.GetTransparentDataEncryption (transparentDataEncryptionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transparentDataEncryptionName" Type="Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="transparentDataEncryptionName"> The name of the transparent data encryption configuration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a SQL pool's transparent data encryption configuration.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/transparentDataEncryption/{transparentDataEncryptionName}
            Operation Id: SqlPoolTransparentDataEncryptions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransparentDataEncryptionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;&gt; GetTransparentDataEncryptionAsync (Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName transparentDataEncryptionName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;&gt; GetTransparentDataEncryptionAsync(valuetype Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName transparentDataEncryptionName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetTransparentDataEncryptionAsync(Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTransparentDataEncryptionAsync (transparentDataEncryptionName As TransparentDataEncryptionName, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of TransparentDataEncryptionResource))" />
      <MemberSignature Language="F#" Value="abstract member GetTransparentDataEncryptionAsync : Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;&gt;&#xA;override this.GetTransparentDataEncryptionAsync : Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;&gt;" Usage="sqlPoolResource.GetTransparentDataEncryptionAsync (transparentDataEncryptionName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.TransparentDataEncryptionResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transparentDataEncryptionName" Type="Azure.ResourceManager.Synapse.Models.TransparentDataEncryptionName" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="transparentDataEncryptionName"> The name of the transparent data encryption configuration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a SQL pool's transparent data encryption configuration.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/transparentDataEncryption/{transparentDataEncryptionName}
            Operation Id: SqlPoolTransparentDataEncryptions_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransparentDataEncryptions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.TransparentDataEncryptionCollection GetTransparentDataEncryptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.TransparentDataEncryptionCollection GetTransparentDataEncryptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetTransparentDataEncryptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTransparentDataEncryptions () As TransparentDataEncryptionCollection" />
      <MemberSignature Language="F#" Value="abstract member GetTransparentDataEncryptions : unit -&gt; Azure.ResourceManager.Synapse.TransparentDataEncryptionCollection&#xA;override this.GetTransparentDataEncryptions : unit -&gt; Azure.ResourceManager.Synapse.TransparentDataEncryptionCollection" Usage="sqlPoolResource.GetTransparentDataEncryptions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.TransparentDataEncryptionCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of TransparentDataEncryptionResources in the SqlPool. </summary>
        <returns> An object representing collection of TransparentDataEncryptionResources and their operations over a TransparentDataEncryptionResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWorkloadGroup">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt; GetWorkloadGroup (string workloadGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.WorkloadGroupResource&gt; GetWorkloadGroup(string workloadGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetWorkloadGroup(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkloadGroup (workloadGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of WorkloadGroupResource)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkloadGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;&#xA;override this.GetWorkloadGroup : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;" Usage="sqlPoolResource.GetWorkloadGroup (workloadGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workloadGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workloadGroupName"> The name of the workload group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a Sql pool's workload group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}
            Operation Id: SqlPoolWorkloadGroup_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workloadGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workloadGroupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkloadGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;&gt; GetWorkloadGroupAsync (string workloadGroupName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;&gt; GetWorkloadGroupAsync(string workloadGroupName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetWorkloadGroupAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkloadGroupAsync (workloadGroupName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of WorkloadGroupResource))" />
      <MemberSignature Language="F#" Value="abstract member GetWorkloadGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;&gt;&#xA;override this.GetWorkloadGroupAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;&gt;" Usage="sqlPoolResource.GetWorkloadGroupAsync (workloadGroupName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.WorkloadGroupResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workloadGroupName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workloadGroupName"> The name of the workload group. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Get a Sql pool's workload group.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/workloadGroups/{workloadGroupName}
            Operation Id: SqlPoolWorkloadGroup_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workloadGroupName" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workloadGroupName" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkloadGroups">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.WorkloadGroupCollection GetWorkloadGroups ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.WorkloadGroupCollection GetWorkloadGroups() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.GetWorkloadGroups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkloadGroups () As WorkloadGroupCollection" />
      <MemberSignature Language="F#" Value="abstract member GetWorkloadGroups : unit -&gt; Azure.ResourceManager.Synapse.WorkloadGroupCollection&#xA;override this.GetWorkloadGroups : unit -&gt; Azure.ResourceManager.Synapse.WorkloadGroupCollection" Usage="sqlPoolResource.GetWorkloadGroups " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.WorkloadGroupCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of WorkloadGroupResources in the SqlPool. </summary>
        <returns> An object representing collection of WorkloadGroupResources and their operations over a WorkloadGroupResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Synapse.SqlPoolResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.Synapse.SqlPoolResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;BinaryData&gt; Pause (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class System.BinaryData&gt; Pause(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.Pause(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Pause (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Pause : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&#xA;override this.Pause : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;" Usage="sqlPoolResource.Pause (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Pause a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/pause
            Operation Id: SqlPools_Pause
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt; PauseAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class System.BinaryData&gt;&gt; PauseAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.PauseAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PauseAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member PauseAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt;&#xA;override this.PauseAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt;" Usage="sqlPoolResource.PauseAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Pause a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/pause
            Operation Id: SqlPools_Pause
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;" Usage="sqlPoolResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;" Usage="sqlPoolResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public virtual Azure.Response Rename (Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition resourceMoveDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response Rename(class Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition resourceMoveDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.Rename(Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Rename (resourceMoveDefinition As ResourceMoveDefinition, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member Rename : Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.Rename : Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlPoolResource.Rename (resourceMoveDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceMoveDefinition" Type="Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceMoveDefinition"> The resource move definition for renaming this Sql pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Rename a SQL pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/move
            Operation Id: SqlPools_Rename
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceMoveDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RenameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; RenameAsync (Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition resourceMoveDefinition, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; RenameAsync(class Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition resourceMoveDefinition, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.RenameAsync(Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RenameAsync (resourceMoveDefinition As ResourceMoveDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member RenameAsync : Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.RenameAsync : Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlPoolResource.RenameAsync (resourceMoveDefinition, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceMoveDefinition" Type="Azure.ResourceManager.Synapse.Models.ResourceMoveDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="resourceMoveDefinition"> The resource move definition for renaming this Sql pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Rename a SQL pool.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/move
            Operation Id: SqlPools_Rename
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceMoveDefinition" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.Synapse.SqlPoolResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.Synapse.SqlPoolResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;BinaryData&gt; Resume (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class System.BinaryData&gt; Resume(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.Resume(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Resume (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member Resume : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&#xA;override this.Resume : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;" Usage="sqlPoolResource.Resume (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Resume a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/resume
            Operation Id: SqlPools_Resume
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt; ResumeAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class System.BinaryData&gt;&gt; ResumeAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.ResumeAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResumeAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member ResumeAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt;&#xA;override this.ResumeAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;BinaryData&gt;&gt;" Usage="sqlPoolResource.ResumeAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Resume a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/resume
            Operation Id: SqlPools_Resume
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;" Usage="sqlPoolResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;" Usage="sqlPoolResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Get
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt; Update (Azure.ResourceManager.Synapse.Models.SqlPoolPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt; Update(class Azure.ResourceManager.Synapse.Models.SqlPoolPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.Update(Azure.ResourceManager.Synapse.Models.SqlPoolPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (patch As SqlPoolPatch, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SqlPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.ResourceManager.Synapse.Models.SqlPoolPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&#xA;override this.Update : Azure.ResourceManager.Synapse.Models.SqlPoolPatch * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;" Usage="sqlPoolResource.Update (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.Synapse.Models.SqlPoolPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> The updated SQL pool properties. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Apply a partial update to a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; UpdateAsync (Azure.ResourceManager.Synapse.Models.SqlPoolPatch patch, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt; UpdateAsync(class Azure.ResourceManager.Synapse.Models.SqlPoolPatch patch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.UpdateAsync(Azure.ResourceManager.Synapse.Models.SqlPoolPatch,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (patch As SqlPoolPatch, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SqlPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.ResourceManager.Synapse.Models.SqlPoolPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.ResourceManager.Synapse.Models.SqlPoolPatch * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;" Usage="sqlPoolResource.UpdateAsync (patch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SqlPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patch" Type="Azure.ResourceManager.Synapse.Models.SqlPoolPatch" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="patch"> The updated SQL pool properties. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Apply a partial update to a SQL pool
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}
            Operation Id: SqlPools_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSqlPoolRecommendedSensitivityLabel">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateSqlPoolRecommendedSensitivityLabel (Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateSqlPoolRecommendedSensitivityLabel(class Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.UpdateSqlPoolRecommendedSensitivityLabel(Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSqlPoolRecommendedSensitivityLabel (recommendedSensitivityLabelUpdateList As RecommendedSensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateSqlPoolRecommendedSensitivityLabel : Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdateSqlPoolRecommendedSensitivityLabel : Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlPoolResource.UpdateSqlPoolRecommendedSensitivityLabel (recommendedSensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recommendedSensitivityLabelUpdateList" Type="Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="recommendedSensitivityLabelUpdateList"> The RecommendedSensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update recommended sensitivity labels states of a given SQL Pool using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/recommendedSensitivityLabels
            Operation Id: SqlPoolRecommendedSensitivityLabels_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="recommendedSensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSqlPoolRecommendedSensitivityLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateSqlPoolRecommendedSensitivityLabelAsync (Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateSqlPoolRecommendedSensitivityLabelAsync(class Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList recommendedSensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.UpdateSqlPoolRecommendedSensitivityLabelAsync(Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSqlPoolRecommendedSensitivityLabelAsync (recommendedSensitivityLabelUpdateList As RecommendedSensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSqlPoolRecommendedSensitivityLabelAsync : Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateSqlPoolRecommendedSensitivityLabelAsync : Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlPoolResource.UpdateSqlPoolRecommendedSensitivityLabelAsync (recommendedSensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recommendedSensitivityLabelUpdateList" Type="Azure.ResourceManager.Synapse.Models.RecommendedSensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="recommendedSensitivityLabelUpdateList"> The RecommendedSensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update recommended sensitivity labels states of a given SQL Pool using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/recommendedSensitivityLabels
            Operation Id: SqlPoolRecommendedSensitivityLabels_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="recommendedSensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSqlPoolSensitivityLabel">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateSqlPoolSensitivityLabel (Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateSqlPoolSensitivityLabel(class Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.UpdateSqlPoolSensitivityLabel(Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSqlPoolSensitivityLabel (sensitivityLabelUpdateList As SensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateSqlPoolSensitivityLabel : Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.UpdateSqlPoolSensitivityLabel : Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; Azure.Response" Usage="sqlPoolResource.UpdateSqlPoolSensitivityLabel (sensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitivityLabelUpdateList" Type="Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sensitivityLabelUpdateList"> The SensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update sensitivity labels of a given SQL Pool using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/currentSensitivityLabels
            Operation Id: SqlPoolSensitivityLabels_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateSqlPoolSensitivityLabelAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateSqlPoolSensitivityLabelAsync (Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateSqlPoolSensitivityLabelAsync(class Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList sensitivityLabelUpdateList, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SqlPoolResource.UpdateSqlPoolSensitivityLabelAsync(Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateSqlPoolSensitivityLabelAsync (sensitivityLabelUpdateList As SensitivityLabelUpdateList, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateSqlPoolSensitivityLabelAsync : Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateSqlPoolSensitivityLabelAsync : Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="sqlPoolResource.UpdateSqlPoolSensitivityLabelAsync (sensitivityLabelUpdateList, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sensitivityLabelUpdateList" Type="Azure.ResourceManager.Synapse.Models.SensitivityLabelUpdateList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="sensitivityLabelUpdateList"> The SensitivityLabelUpdateList to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update sensitivity labels of a given SQL Pool using an operations batch.
            Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/currentSensitivityLabels
            Operation Id: SqlPoolSensitivityLabels_Update
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sensitivityLabelUpdateList" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
