<Type Name="SynapseKustoPoolResource" FullName="Azure.ResourceManager.Synapse.SynapseKustoPoolResource">
  <TypeSignature Language="C#" Value="public class SynapseKustoPoolResource : Azure.ResourceManager.ArmResource" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SynapseKustoPoolResource extends Azure.ResourceManager.ArmResource" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" />
  <TypeSignature Language="VB.NET" Value="Public Class SynapseKustoPoolResource&#xA;Inherits ArmResource" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="F#" Value="type SynapseKustoPoolResource = class&#xA;    inherit ArmResource" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="C#" Value="public class SynapseKustoPoolResource : Azure.ResourceManager.ArmResource, System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;, System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SynapseKustoPoolResource extends Azure.ResourceManager.ArmResource implements class System.ClientModel.Primitives.IJsonModel`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;, class System.ClientModel.Primitives.IPersistableModel`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="VB.NET" Value="Public Class SynapseKustoPoolResource&#xA;Inherits ArmResource&#xA;Implements IJsonModel(Of SynapseKustoPoolData), IPersistableModel(Of SynapseKustoPoolData)" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="F#" Value="type SynapseKustoPoolResource = class&#xA;    inherit ArmResource&#xA;    interface IJsonModel&lt;SynapseKustoPoolData&gt;&#xA;    interface IPersistableModel&lt;SynapseKustoPoolData&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A Class representing a SynapseKustoPool along with the instance operations that can be performed on it.
            If you have a <see cref="T:Azure.Core.ResourceIdentifier" /> you can construct a <see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" />
            from an instance of <see cref="T:Azure.ResourceManager.ArmClient" /> using the GetSynapseKustoPoolResource method.
            Otherwise you can get one from its parent resource <see cref="T:Azure.ResourceManager.Synapse.SynapseWorkspaceResource" /> using the GetSynapseKustoPool method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SynapseKustoPoolResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLanguageExtensions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation AddLanguageExtensions (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToAdd, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation AddLanguageExtensions(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToAdd, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.AddLanguageExtensions(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLanguageExtensions (waitUntil As WaitUntil, languageExtensionsToAdd As SynapseLanguageExtensionsList, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member AddLanguageExtensions : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.AddLanguageExtensions : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="synapseKustoPoolResource.AddLanguageExtensions (waitUntil, languageExtensionsToAdd, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="languageExtensionsToAdd" Type="Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="languageExtensionsToAdd"> The language extensions to add. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a list of language extensions that can run within KQL queries.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/addLanguageExtensions</description></item><item><term>Operation Id</term><description>KustoPools_AddLanguageExtensions</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="languageExtensionsToAdd" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddLanguageExtensionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; AddLanguageExtensionsAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToAdd, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; AddLanguageExtensionsAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToAdd, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.AddLanguageExtensionsAsync(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLanguageExtensionsAsync (waitUntil As WaitUntil, languageExtensionsToAdd As SynapseLanguageExtensionsList, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member AddLanguageExtensionsAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.AddLanguageExtensionsAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="synapseKustoPoolResource.AddLanguageExtensionsAsync (waitUntil, languageExtensionsToAdd, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="languageExtensionsToAdd" Type="Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="languageExtensionsToAdd"> The language extensions to add. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a list of language extensions that can run within KQL queries.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/addLanguageExtensions</description></item><item><term>Operation Id</term><description>KustoPools_AddLanguageExtensions</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="languageExtensionsToAdd" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; AddTag (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; AddTag(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.AddTag(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTag (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseKustoPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&#xA;override this.AddTag : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;" Usage="synapseKustoPoolResource.AddTag (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AddTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; AddTagAsync (string key, string value, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; AddTagAsync(string key, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.AddTagAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddTagAsync (key As String, value As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseKustoPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;&#xA;override this.AddTagAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;" Usage="synapseKustoPoolResource.AddTagAsync (key, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="value"> The value for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Add a tag to the current resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> or <paramref name="value" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckKustoPoolChildResourceNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt; CheckKustoPoolChildResourceNameAvailability (Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt; CheckKustoPoolChildResourceNameAvailability(class Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.CheckKustoPoolChildResourceNameAvailability(Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckKustoPoolChildResourceNameAvailability (content As KustoPoolChildResourceNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of KustoPoolNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckKustoPoolChildResourceNameAvailability : Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&#xA;override this.CheckKustoPoolChildResourceNameAvailability : Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;" Usage="synapseKustoPoolResource.CheckKustoPoolChildResourceNameAvailability (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The name of the Kusto Pool child resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the Kusto Pool child resource name is valid and is not already in use.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/checkNameAvailability</description></item><item><term>Operation Id</term><description>KustoPoolChildResource_CheckNameAvailability</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckKustoPoolChildResourceNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt; CheckKustoPoolChildResourceNameAvailabilityAsync (Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt; CheckKustoPoolChildResourceNameAvailabilityAsync(class Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.CheckKustoPoolChildResourceNameAvailabilityAsync(Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckKustoPoolChildResourceNameAvailabilityAsync (content As KustoPoolChildResourceNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of KustoPoolNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckKustoPoolChildResourceNameAvailabilityAsync : Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt;&#xA;override this.CheckKustoPoolChildResourceNameAvailabilityAsync : Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt;" Usage="synapseKustoPoolResource.CheckKustoPoolChildResourceNameAvailabilityAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Synapse.Models.KustoPoolChildResourceNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The name of the Kusto Pool child resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the Kusto Pool child resource name is valid and is not already in use.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/checkNameAvailability</description></item><item><term>Operation Id</term><description>KustoPoolChildResource_CheckNameAvailability</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckKustoPoolPrincipalAssignmentNameAvailability">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt; CheckKustoPoolPrincipalAssignmentNameAvailability (Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt; CheckKustoPoolPrincipalAssignmentNameAvailability(class Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.CheckKustoPoolPrincipalAssignmentNameAvailability(Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckKustoPoolPrincipalAssignmentNameAvailability (content As KustoPoolPrincipalAssignmentNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Response(Of KustoPoolNameAvailabilityResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckKustoPoolPrincipalAssignmentNameAvailability : Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&#xA;override this.CheckKustoPoolPrincipalAssignmentNameAvailability : Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;" Usage="synapseKustoPoolResource.CheckKustoPoolPrincipalAssignmentNameAvailability (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The name of the principal assignment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the principal assignment name is valid and is not already in use.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/checkPrincipalAssignmentNameAvailability</description></item><item><term>Operation Id</term><description>KustoPoolPrincipalAssignments_CheckNameAvailability</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt; CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync (Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent content, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt; CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync(class Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent content, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync(Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync (content As KustoPoolPrincipalAssignmentNameAvailabilityContent, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of KustoPoolNameAvailabilityResult))" />
      <MemberSignature Language="F#" Value="abstract member CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync : Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt;&#xA;override this.CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync : Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt;" Usage="synapseKustoPoolResource.CheckKustoPoolPrincipalAssignmentNameAvailabilityAsync (content, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.Models.KustoPoolNameAvailabilityResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.ResourceManager.Synapse.Models.KustoPoolPrincipalAssignmentNameAvailabilityContent" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="content"> The name of the principal assignment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Checks that the principal assignment name is valid and is not already in use.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/checkPrincipalAssignmentNameAvailability</description></item><item><term>Operation Id</term><description>KustoPoolPrincipalAssignments_CheckNameAvailability</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateResourceIdentifier">
      <MemberSignature Language="C#" Value="public static Azure.Core.ResourceIdentifier CreateResourceIdentifier (string subscriptionId, string resourceGroupName, string workspaceName, string kustoPoolName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.ResourceIdentifier CreateResourceIdentifier(string subscriptionId, string resourceGroupName, string workspaceName, string kustoPoolName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateResourceIdentifier (subscriptionId As String, resourceGroupName As String, workspaceName As String, kustoPoolName As String) As ResourceIdentifier" />
      <MemberSignature Language="F#" Value="static member CreateResourceIdentifier : string * string * string * string -&gt; Azure.Core.ResourceIdentifier" Usage="Azure.ResourceManager.Synapse.SynapseKustoPoolResource.CreateResourceIdentifier (subscriptionId, resourceGroupName, workspaceName, kustoPoolName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceIdentifier</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
        <Parameter Name="resourceGroupName" Type="System.String" />
        <Parameter Name="workspaceName" Type="System.String" />
        <Parameter Name="kustoPoolName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId"> The subscriptionId. </param>
        <param name="resourceGroupName"> The resourceGroupName. </param>
        <param name="workspaceName"> The workspaceName. </param>
        <param name="kustoPoolName"> The kustoPoolName. </param>
        <summary> Generate the resource identifier of a <see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /> instance. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SynapseKustoPoolData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.ResourceManager.Synapse.SynapseKustoPoolData Data" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As SynapseKustoPoolData" />
      <MemberSignature Language="F#" Value="member this.Data : Azure.ResourceManager.Synapse.SynapseKustoPoolData" Usage="Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SynapseKustoPoolData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the data representing this Feature. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"> Throws if there is no data loaded in the current instance. </exception>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Delete (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Delete(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Delete(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Delete (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Delete : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="synapseKustoPoolResource.Delete (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Delete</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DeleteAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DeleteAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.DeleteAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DeleteAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="synapseKustoPoolResource.DeleteAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Deletes a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Delete</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachFollowerDatabases">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation DetachFollowerDatabases (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition followerDatabaseToRemove, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation DetachFollowerDatabases(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition followerDatabaseToRemove, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.DetachFollowerDatabases(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DetachFollowerDatabases (waitUntil As WaitUntil, followerDatabaseToRemove As SynapseFollowerDatabaseDefinition, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member DetachFollowerDatabases : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.DetachFollowerDatabases : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="synapseKustoPoolResource.DetachFollowerDatabases (waitUntil, followerDatabaseToRemove, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="followerDatabaseToRemove" Type="Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="followerDatabaseToRemove"> The follower databases properties to remove. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Detaches all followers of a database owned by this Kusto Pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/detachFollowerDatabases</description></item><item><term>Operation Id</term><description>KustoPools_DetachFollowerDatabases</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="followerDatabaseToRemove" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="DetachFollowerDatabasesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; DetachFollowerDatabasesAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition followerDatabaseToRemove, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; DetachFollowerDatabasesAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition followerDatabaseToRemove, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.DetachFollowerDatabasesAsync(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DetachFollowerDatabasesAsync (waitUntil As WaitUntil, followerDatabaseToRemove As SynapseFollowerDatabaseDefinition, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member DetachFollowerDatabasesAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.DetachFollowerDatabasesAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="synapseKustoPoolResource.DetachFollowerDatabasesAsync (waitUntil, followerDatabaseToRemove, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="followerDatabaseToRemove" Type="Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="followerDatabaseToRemove"> The follower databases properties to remove. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Detaches all followers of a database owned by this Kusto Pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/detachFollowerDatabases</description></item><item><term>Operation Id</term><description>KustoPools_DetachFollowerDatabases</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="followerDatabaseToRemove" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; Get (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; Get(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Get(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Get (Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseKustoPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&#xA;override this.Get : System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;" Usage="synapseKustoPoolResource.Get cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllKustoPoolPrivateLinkData">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt; GetAllKustoPoolPrivateLinkData (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt; GetAllKustoPoolPrivateLinkData(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetAllKustoPoolPrivateLinkData(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllKustoPoolPrivateLinkData (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SynapseKustoPoolPrivateLinkData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllKustoPoolPrivateLinkData : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt;&#xA;override this.GetAllKustoPoolPrivateLinkData : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt;" Usage="synapseKustoPoolResource.GetAllKustoPoolPrivateLinkData cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all Kusto pool PrivateLinkResources.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/privateLinkResources</description></item><item><term>Operation Id</term><description>KustoPoolPrivateLinkResources_List</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllKustoPoolPrivateLinkDataAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt; GetAllKustoPoolPrivateLinkDataAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt; GetAllKustoPoolPrivateLinkDataAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetAllKustoPoolPrivateLinkDataAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllKustoPoolPrivateLinkDataAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SynapseKustoPoolPrivateLinkData)" />
      <MemberSignature Language="F#" Value="abstract member GetAllKustoPoolPrivateLinkDataAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt;&#xA;override this.GetAllKustoPoolPrivateLinkDataAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt;" Usage="synapseKustoPoolResource.GetAllKustoPoolPrivateLinkDataAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all Kusto pool PrivateLinkResources.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/privateLinkResources</description></item><item><term>Operation Id</term><description>KustoPoolPrivateLinkResources_List</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPrivateLinkData" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; GetAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; GetAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAsync (Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseKustoPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;&#xA;override this.GetAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;" Usage="synapseKustoPoolResource.GetAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFollowerDatabases">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt; GetFollowerDatabases (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt; GetFollowerDatabases(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetFollowerDatabases(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFollowerDatabases (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SynapseFollowerDatabaseDefinition)" />
      <MemberSignature Language="F#" Value="abstract member GetFollowerDatabases : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt;&#xA;override this.GetFollowerDatabases : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt;" Usage="synapseKustoPoolResource.GetFollowerDatabases cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto Pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listFollowerDatabases</description></item><item><term>Operation Id</term><description>KustoPools_ListFollowerDatabases</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFollowerDatabasesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt; GetFollowerDatabasesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt; GetFollowerDatabasesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetFollowerDatabasesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFollowerDatabasesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SynapseFollowerDatabaseDefinition)" />
      <MemberSignature Language="F#" Value="abstract member GetFollowerDatabasesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt;&#xA;override this.GetFollowerDatabasesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt;" Usage="synapseKustoPoolResource.GetFollowerDatabasesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto Pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listFollowerDatabases</description></item><item><term>Operation Id</term><description>KustoPools_ListFollowerDatabases</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseFollowerDatabaseDefinition" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLanguageExtensions">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt; GetLanguageExtensions (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt; GetLanguageExtensions(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetLanguageExtensions(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLanguageExtensions (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SynapseLanguageExtension)" />
      <MemberSignature Language="F#" Value="abstract member GetLanguageExtensions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt;&#xA;override this.GetLanguageExtensions : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt;" Usage="synapseKustoPoolResource.GetLanguageExtensions cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of language extensions that can run within KQL queries.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listLanguageExtensions</description></item><item><term>Operation Id</term><description>KustoPools_ListLanguageExtensions</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLanguageExtensionsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt; GetLanguageExtensionsAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt; GetLanguageExtensionsAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetLanguageExtensionsAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLanguageExtensionsAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SynapseLanguageExtension)" />
      <MemberSignature Language="F#" Value="abstract member GetLanguageExtensionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt;&#xA;override this.GetLanguageExtensionsAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt;" Usage="synapseKustoPoolResource.GetLanguageExtensionsAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a list of language extensions that can run within KQL queries.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listLanguageExtensions</description></item><item><term>Operation Id</term><description>KustoPools_ListLanguageExtensions</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseLanguageExtension" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSkusByResource">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt; GetSkusByResource (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt; GetSkusByResource(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSkusByResource(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSkusByResource (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of SynapseDataSourceResourceSku)" />
      <MemberSignature Language="F#" Value="abstract member GetSkusByResource : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt;&#xA;override this.GetSkusByResource : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt;" Usage="synapseKustoPoolResource.GetSkusByResource cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the SKUs available for the provided resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/skus</description></item><item><term>Operation Id</term><description>KustoPools_ListSkusByResource</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSkusByResourceAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt; GetSkusByResourceAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt; GetSkusByResourceAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSkusByResourceAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSkusByResourceAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of SynapseDataSourceResourceSku)" />
      <MemberSignature Language="F#" Value="abstract member GetSkusByResourceAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt;&#xA;override this.GetSkusByResourceAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt;" Usage="synapseKustoPoolResource.GetSkusByResourceAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns the SKUs available for the provided resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/skus</description></item><item><term>Operation Id</term><description>KustoPools_ListSkusByResource</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.Synapse.Models.SynapseDataSourceResourceSku" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseAttachedDatabaseConfiguration">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt; GetSynapseAttachedDatabaseConfiguration (string attachedDatabaseConfigurationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt; GetSynapseAttachedDatabaseConfiguration(string attachedDatabaseConfigurationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseAttachedDatabaseConfiguration(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseAttachedDatabaseConfiguration (attachedDatabaseConfigurationName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseAttachedDatabaseConfigurationResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseAttachedDatabaseConfiguration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;&#xA;override this.GetSynapseAttachedDatabaseConfiguration : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;" Usage="synapseKustoPoolResource.GetSynapseAttachedDatabaseConfiguration (attachedDatabaseConfigurationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachedDatabaseConfigurationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attachedDatabaseConfigurationName"> The name of the attached database configuration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns an attached database configuration.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}</description></item><item><term>Operation Id</term><description>KustoPoolAttachedDatabaseConfigurations_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachedDatabaseConfigurationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attachedDatabaseConfigurationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseAttachedDatabaseConfigurationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;&gt; GetSynapseAttachedDatabaseConfigurationAsync (string attachedDatabaseConfigurationName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;&gt; GetSynapseAttachedDatabaseConfigurationAsync(string attachedDatabaseConfigurationName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseAttachedDatabaseConfigurationAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseAttachedDatabaseConfigurationAsync (attachedDatabaseConfigurationName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseAttachedDatabaseConfigurationResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseAttachedDatabaseConfigurationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;&gt;&#xA;override this.GetSynapseAttachedDatabaseConfigurationAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;&gt;" Usage="synapseKustoPoolResource.GetSynapseAttachedDatabaseConfigurationAsync (attachedDatabaseConfigurationName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachedDatabaseConfigurationName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="attachedDatabaseConfigurationName"> The name of the attached database configuration. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns an attached database configuration.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/attachedDatabaseConfigurations/{attachedDatabaseConfigurationName}</description></item><item><term>Operation Id</term><description>KustoPoolAttachedDatabaseConfigurations_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="attachedDatabaseConfigurationName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attachedDatabaseConfigurationName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseAttachedDatabaseConfigurations">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationCollection GetSynapseAttachedDatabaseConfigurations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationCollection GetSynapseAttachedDatabaseConfigurations() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseAttachedDatabaseConfigurations" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseAttachedDatabaseConfigurations () As SynapseAttachedDatabaseConfigurationCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseAttachedDatabaseConfigurations : unit -&gt; Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationCollection&#xA;override this.GetSynapseAttachedDatabaseConfigurations : unit -&gt; Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationCollection" Usage="synapseKustoPoolResource.GetSynapseAttachedDatabaseConfigurations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SynapseAttachedDatabaseConfigurationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SynapseAttachedDatabaseConfigurationResources in the SynapseKustoPool. </summary>
        <returns> An object representing collection of SynapseAttachedDatabaseConfigurationResources and their operations over a SynapseAttachedDatabaseConfigurationResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseClusterPrincipalAssignment">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt; GetSynapseClusterPrincipalAssignment (string principalAssignmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt; GetSynapseClusterPrincipalAssignment(string principalAssignmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseClusterPrincipalAssignment(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseClusterPrincipalAssignment (principalAssignmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseClusterPrincipalAssignmentResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseClusterPrincipalAssignment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;&#xA;override this.GetSynapseClusterPrincipalAssignment : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;" Usage="synapseKustoPoolResource.GetSynapseClusterPrincipalAssignment (principalAssignmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalAssignmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="principalAssignmentName"> The name of the Kusto principalAssignment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Kusto pool principalAssignment.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/principalAssignments/{principalAssignmentName}</description></item><item><term>Operation Id</term><description>KustoPoolPrincipalAssignments_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="principalAssignmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="principalAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseClusterPrincipalAssignmentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;&gt; GetSynapseClusterPrincipalAssignmentAsync (string principalAssignmentName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;&gt; GetSynapseClusterPrincipalAssignmentAsync(string principalAssignmentName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseClusterPrincipalAssignmentAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseClusterPrincipalAssignmentAsync (principalAssignmentName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseClusterPrincipalAssignmentResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseClusterPrincipalAssignmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;&gt;&#xA;override this.GetSynapseClusterPrincipalAssignmentAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;&gt;" Usage="synapseKustoPoolResource.GetSynapseClusterPrincipalAssignmentAsync (principalAssignmentName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principalAssignmentName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="principalAssignmentName"> The name of the Kusto principalAssignment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a Kusto pool principalAssignment.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/principalAssignments/{principalAssignmentName}</description></item><item><term>Operation Id</term><description>KustoPoolPrincipalAssignments_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="principalAssignmentName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="principalAssignmentName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseClusterPrincipalAssignments">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentCollection GetSynapseClusterPrincipalAssignments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentCollection GetSynapseClusterPrincipalAssignments() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseClusterPrincipalAssignments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseClusterPrincipalAssignments () As SynapseClusterPrincipalAssignmentCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseClusterPrincipalAssignments : unit -&gt; Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentCollection&#xA;override this.GetSynapseClusterPrincipalAssignments : unit -&gt; Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentCollection" Usage="synapseKustoPoolResource.GetSynapseClusterPrincipalAssignments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SynapseClusterPrincipalAssignmentCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SynapseClusterPrincipalAssignmentResources in the SynapseKustoPool. </summary>
        <returns> An object representing collection of SynapseClusterPrincipalAssignmentResources and their operations over a SynapseClusterPrincipalAssignmentResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseDatabase">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt; GetSynapseDatabase (string databaseName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt; GetSynapseDatabase(string databaseName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseDatabase(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseDatabase (databaseName As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseDatabaseResource)" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseDatabase : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;&#xA;override this.GetSynapseDatabase : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;" Usage="synapseKustoPoolResource.GetSynapseDatabase (databaseName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="databaseName"> The name of the database in the Kusto pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a database.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/databases/{databaseName}</description></item><item><term>Operation Id</term><description>KustoPoolDatabases_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseDatabaseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="databaseName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="databaseName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseDatabaseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;&gt; GetSynapseDatabaseAsync (string databaseName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;&gt; GetSynapseDatabaseAsync(string databaseName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseDatabaseAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseDatabaseAsync (databaseName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseDatabaseResource))" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseDatabaseAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;&gt;&#xA;override this.GetSynapseDatabaseAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;&gt;" Usage="synapseKustoPoolResource.GetSynapseDatabaseAsync (databaseName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseDatabaseResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="databaseName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="databaseName"> The name of the database in the Kusto pool. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a database.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/databases/{databaseName}</description></item><item><term>Operation Id</term><description>KustoPoolDatabases_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseDatabaseResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="databaseName" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="databaseName" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSynapseDatabases">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.Synapse.SynapseDatabaseCollection GetSynapseDatabases ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SynapseDatabaseCollection GetSynapseDatabases() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.GetSynapseDatabases" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSynapseDatabases () As SynapseDatabaseCollection" />
      <MemberSignature Language="F#" Value="abstract member GetSynapseDatabases : unit -&gt; Azure.ResourceManager.Synapse.SynapseDatabaseCollection&#xA;override this.GetSynapseDatabases : unit -&gt; Azure.ResourceManager.Synapse.SynapseDatabaseCollection" Usage="synapseKustoPoolResource.GetSynapseDatabases " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SynapseDatabaseCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Gets a collection of SynapseDatabaseResources in the SynapseKustoPool. </summary>
        <returns> An object representing collection of SynapseDatabaseResources and their operations over a SynapseDatabaseResource. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasData">
      <MemberSignature Language="C#" Value="public virtual bool HasData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasData" />
      <MemberSignature Language="DocId" Value="P:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.HasData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HasData As Boolean" />
      <MemberSignature Language="F#" Value="member this.HasData : bool" Usage="Azure.ResourceManager.Synapse.SynapseKustoPoolResource.HasData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets whether or not the current instance has data. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLanguageExtensions">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation RemoveLanguageExtensions (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToRemove, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation RemoveLanguageExtensions(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToRemove, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.RemoveLanguageExtensions(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveLanguageExtensions (waitUntil As WaitUntil, languageExtensionsToRemove As SynapseLanguageExtensionsList, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member RemoveLanguageExtensions : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.RemoveLanguageExtensions : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="synapseKustoPoolResource.RemoveLanguageExtensions (waitUntil, languageExtensionsToRemove, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="languageExtensionsToRemove" Type="Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="languageExtensionsToRemove"> The language extensions to remove. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Remove a list of language extensions that can run within KQL queries.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/removeLanguageExtensions</description></item><item><term>Operation Id</term><description>KustoPools_RemoveLanguageExtensions</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="languageExtensionsToRemove" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveLanguageExtensionsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; RemoveLanguageExtensionsAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToRemove, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; RemoveLanguageExtensionsAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList languageExtensionsToRemove, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.RemoveLanguageExtensionsAsync(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveLanguageExtensionsAsync (waitUntil As WaitUntil, languageExtensionsToRemove As SynapseLanguageExtensionsList, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member RemoveLanguageExtensionsAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.RemoveLanguageExtensionsAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="synapseKustoPoolResource.RemoveLanguageExtensionsAsync (waitUntil, languageExtensionsToRemove, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="languageExtensionsToRemove" Type="Azure.ResourceManager.Synapse.Models.SynapseLanguageExtensionsList" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="languageExtensionsToRemove"> The language extensions to remove. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Remove a list of language extensions that can run within KQL queries.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/removeLanguageExtensions</description></item><item><term>Operation Id</term><description>KustoPools_RemoveLanguageExtensions</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="languageExtensionsToRemove" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTag">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; RemoveTag (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; RemoveTag(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.RemoveTag(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTag (key As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseKustoPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&#xA;override this.RemoveTag : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;" Usage="synapseKustoPoolResource.RemoveTag (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveTagAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; RemoveTagAsync (string key, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; RemoveTagAsync(string key, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.RemoveTagAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveTagAsync (key As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseKustoPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;&#xA;override this.RemoveTagAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;" Usage="synapseKustoPoolResource.RemoveTagAsync (key, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="key"> The key for the tag. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Removes a tag by key from the resource.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="ResourceType">
      <MemberSignature Language="C#" Value="public static readonly Azure.Core.ResourceType ResourceType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype Azure.Core.ResourceType ResourceType" />
      <MemberSignature Language="DocId" Value="F:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.ResourceType" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResourceType As ResourceType " />
      <MemberSignature Language="F#" Value=" staticval mutable ResourceType : Azure.Core.ResourceType" Usage="Azure.ResourceManager.Synapse.SynapseKustoPoolResource.ResourceType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.ResourceType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> Gets the resource type for the operations. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTags">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; SetTags (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; SetTags(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.SetTags(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTags (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Response(Of SynapseKustoPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&#xA;override this.SetTags : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;" Usage="synapseKustoPoolResource.SetTags (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SetTagsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; SetTagsAsync (System.Collections.Generic.IDictionary&lt;string,string&gt; tags, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; SetTagsAsync(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; tags, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.SetTagsAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTagsAsync (tags As IDictionary(Of String, String), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of SynapseKustoPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;&#xA;override this.SetTagsAsync : System.Collections.Generic.IDictionary&lt;string, string&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;" Usage="synapseKustoPoolResource.SetTagsAsync (tags, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tags" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tags"> The set of tags to use as replacement. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Replace the tags on the resource with the given set.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Get</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tags" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Start (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Start(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Start(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Start (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Start : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Start : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="synapseKustoPoolResource.Start (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Starts a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/start</description></item><item><term>Operation Id</term><description>KustoPools_Start</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; StartAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; StartAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.StartAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member StartAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.StartAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="synapseKustoPoolResource.StartAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Starts a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/start</description></item><item><term>Operation Id</term><description>KustoPools_Start</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation Stop (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation Stop(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Stop(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Stop (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation" />
      <MemberSignature Language="F#" Value="abstract member Stop : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&#xA;override this.Stop : Azure.WaitUntil * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation" Usage="synapseKustoPoolResource.Stop (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Stops a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/stop</description></item><item><term>Operation Id</term><description>KustoPools_Stop</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt; StopAsync (Azure.WaitUntil waitUntil, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation&gt; StopAsync(valuetype Azure.WaitUntil waitUntil, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.StopAsync(Azure.WaitUntil,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopAsync (waitUntil As WaitUntil, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;&#xA;override this.StopAsync : Azure.WaitUntil * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;" Usage="synapseKustoPoolResource.StopAsync (waitUntil, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Stops a Kusto pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/stop</description></item><item><term>Operation Id</term><description>KustoPools_Stop</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.Synapse.SynapseKustoPoolData IJsonModel&lt;SynapseKustoPoolData&gt;.Create (ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SynapseKustoPoolData System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#Synapse#SynapseKustoPoolData&gt;#Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (ByRef reader As Utf8JsonReader, options As ModelReaderWriterOptions) As SynapseKustoPoolData Implements IJsonModel(Of SynapseKustoPoolData).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.Synapse.SynapseKustoPoolData&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.Synapse.SynapseKustoPoolData" Usage="synapseKustoPoolResource.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create (reader, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SynapseKustoPoolData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Reads one JSON value (including objects or arrays) from the provided reader and converts it to a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the JSON value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write">
      <MemberSignature Language="C#" Value="void IJsonModel&lt;SynapseKustoPoolData&gt;.Write (System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write(class System.Text.Json.Utf8JsonWriter writer, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.System#ClientModel#Primitives#IJsonModel&lt;Azure#ResourceManager#Synapse#SynapseKustoPoolData&gt;#Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub Write (writer As Utf8JsonWriter, options As ModelReaderWriterOptions) Implements IJsonModel(Of SynapseKustoPoolData).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit" Usage="synapseKustoPoolResource.System.ClientModel.Primitives.IJsonModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write (writer, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write into.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model to the provided <see cref="T:System.Text.Json.Utf8JsonWriter" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.ResourceManager.Synapse.SynapseKustoPoolData IPersistableModel&lt;SynapseKustoPoolData&gt;.Create (BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.ResourceManager.Synapse.SynapseKustoPoolData System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create(class System.BinaryData data, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#Synapse#SynapseKustoPoolData&gt;#Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (data As BinaryData, options As ModelReaderWriterOptions) As SynapseKustoPoolData Implements IPersistableModel(Of SynapseKustoPoolData).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.Synapse.SynapseKustoPoolData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.ResourceManager.Synapse.SynapseKustoPoolData" Usage="synapseKustoPoolResource.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Create (data, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.Synapse.SynapseKustoPoolData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.BinaryData" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.BinaryData" /> to parse.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Converts the provided <see cref="T:System.BinaryData" /> into a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.GetFormatFromOptions">
      <MemberSignature Language="C#" Value="string IPersistableModel&lt;SynapseKustoPoolData&gt;.GetFormatFromOptions (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.GetFormatFromOptions(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#Synapse#SynapseKustoPoolData&gt;#GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function GetFormatFromOptions (options As ModelReaderWriterOptions) As String Implements IPersistableModel(Of SynapseKustoPoolData).GetFormatFromOptions" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string" Usage="synapseKustoPoolResource.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.GetFormatFromOptions options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>
            Gets the data interchange format (JSON, Xml, etc) that the model uses when communicating with the service.
            <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param></summary>
        <returns>The format that the model uses when communicating with the serivce.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write">
      <MemberSignature Language="C#" Value="BinaryData IPersistableModel&lt;SynapseKustoPoolData&gt;.Write (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.BinaryData System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.System#ClientModel#Primitives#IPersistableModel&lt;Azure#ResourceManager#Synapse#SynapseKustoPoolData&gt;#Write(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Write (options As ModelReaderWriterOptions) As BinaryData Implements IPersistableModel(Of SynapseKustoPoolData).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData" Usage="synapseKustoPoolResource.System.ClientModel.Primitives.IPersistableModel&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolData&gt;.Write options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Write(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model into a <see cref="T:System.BinaryData" />.
            </summary>
        <returns>A binary representation of the written model.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; Update (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch patch, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt; Update(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch patch, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.Update(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Update (waitUntil As WaitUntil, patch As SynapseKustoPoolPatch, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As ArmOperation(Of SynapseKustoPoolResource)" />
      <MemberSignature Language="F#" Value="abstract member Update : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&#xA;override this.Update : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch * string * System.Threading.CancellationToken -&gt; Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;" Usage="synapseKustoPoolResource.Update (waitUntil, patch, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> The Kusto pool parameters supplied to the Update operation. </param>
        <param name="ifMatch"> The ETag of the Kusto Pool. Omit this value to always overwrite the current Kusto Pool. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update a Kusto Kusto Pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Update</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; UpdateAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch patch, string ifMatch = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.ResourceManager.ArmOperation`1&lt;class Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt; UpdateAsync(valuetype Azure.WaitUntil waitUntil, class Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch patch, string ifMatch, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.Synapse.SynapseKustoPoolResource.UpdateAsync(Azure.WaitUntil,Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (waitUntil As WaitUntil, patch As SynapseKustoPoolPatch, Optional ifMatch As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation(Of SynapseKustoPoolResource))" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;&#xA;override this.UpdateAsync : Azure.WaitUntil * Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;" Usage="synapseKustoPoolResource.UpdateAsync (waitUntil, patch, ifMatch, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.Synapse</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.ResourceManager.ArmOperation&lt;Azure.ResourceManager.Synapse.SynapseKustoPoolResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="patch" Type="Azure.ResourceManager.Synapse.Models.SynapseKustoPoolPatch" />
        <Parameter Name="ifMatch" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="patch"> The Kusto pool parameters supplied to the Update operation. </param>
        <param name="ifMatch"> The ETag of the Kusto Pool. Omit this value to always overwrite the current Kusto Pool. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Update a Kusto Kusto Pool.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}</description></item><item><term>Operation Id</term><description>KustoPools_Update</description></item><item><term>Default Api Version</term><description>2021-06-01-preview</description></item><item><term>Resource</term><description><see cref="T:Azure.ResourceManager.Synapse.SynapseKustoPoolResource" /></description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patch" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
