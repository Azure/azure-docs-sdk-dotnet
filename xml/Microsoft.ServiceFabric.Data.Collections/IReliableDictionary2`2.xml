<Type Name="IReliableDictionary2&lt;TKey,TValue&gt;" FullName="Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public interface IReliableDictionary2&lt;TKey,TValue&gt; : Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt; where TKey : IComparable&lt;TKey&gt;, IEquatable&lt;TKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableDictionary2`2&lt;(class System.IComparable`1&lt;!TKey&gt;, class System.IEquatable`1&lt;!TKey&gt;) TKey, TValue&gt; implements class Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2&lt;!TKey, !TValue&gt;, class Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <InterfaceName>System.IComparable&lt;TKey&gt;</InterfaceName>
        <InterfaceName>System.IEquatable&lt;TKey&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The type of the keys in the reliable dictionary.</typeparam>
    <typeparam name="TValue">
            The type of the values in the reliable dictionary.</typeparam>
    <summary>
            Represents a reliable collection of key/value pairs that are persisted and replicated.
            </summary>
    <remarks>Keys or values stored in this dictionary MUST NOT be mutated outside the context of an operation on the 
            dictionary.  It is highly recommended to make both <typeparamref name="TKey" /> and <typeparamref name="TValue" /> 
            immutable in order to avoid accidental data corruption.
            
            <para>
            The transaction is the unit of concurrency. Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.
            When calling any asynchronous Reliable Collection method that takes an <see cref="T:Microsoft.ServiceFabric.Data.ITransaction" />, you must wait for completion of the returned Task before calling
            another method using the same transaction.
            </para></remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public long Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the number of key-value pairs contained in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" />.
            </summary>
        <value>To be added.</value>
        <remarks>
            This property does not have transactional semantics. It represents the best effort number of items 
            in the dictionary at the moment when the property was accessed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;TKey&gt;&gt; CreateKeyEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;!TKey&gt;&gt; CreateKeyEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.CreateKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;TKey&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="txn">Transaction to associate this operation with.</param>
        <summary>
            Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> to enumerate the keys.
            </summary>
        <returns>An enumerable for the reliable dictionary keys.</returns>
        <remarks>
            The enumerarable returned from the reliable dictionary is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;TKey&gt;&gt; CreateKeyEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;!TKey&gt;&gt; CreateKeyEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, valuetype Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.CreateKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;TKey&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="enumerationMode" Type="Microsoft.ServiceFabric.Data.Collections.EnumerationMode" />
      </Parameters>
      <Docs>
        <param name="txn">Transaction to associate this operation with.</param>
        <param name="enumerationMode">The enumeration mode to use. The default is Unordered.</param>
        <summary>
            Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> to enumerate the keys.
            </summary>
        <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> keys.</returns>
        <remarks>
            The enumerarable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateKeyEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;TKey&gt;&gt; CreateKeyEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;!TKey&gt;&gt; CreateKeyEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, valuetype Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2.CreateKeyEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;TKey&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="enumerationMode" Type="Microsoft.ServiceFabric.Data.Collections.EnumerationMode" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="txn">Transaction to associate this operation with.</param>
        <param name="enumerationMode">The enumeration mode to use. The default is Unordered.</param>
        <param name="timeout">
            The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
            </param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Creates an async enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> to enumerate the keys.
            </summary>
        <returns>An enumerable for the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> keys.</returns>
        <remarks>
            The enumerarable returned from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary2`2" /> is safe to use concurrently with reads and writes
            to the dictionary. It represents a snapshot consistent view of the dictionary.
            </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the Reliable Dictionary cannot serve reads at the moment.
            <see cref="T:System.Fabric.FabricNotReadableException" /> can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
  </Members>
</Type>