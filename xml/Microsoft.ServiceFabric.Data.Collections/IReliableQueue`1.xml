<Type Name="IReliableQueue&lt;T&gt;" FullName="Microsoft.ServiceFabric.Data.Collections.IReliableQueue&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IReliableQueue&lt;T&gt; : Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableQueue`1&lt;T&gt; implements class Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1&lt;!T&gt;, class Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">The type of the elements contained in the reliable queue.</typeparam>
    <summary>
            Represents a reliable first-in, first-out collection of objects that are persisted and replicated.
            </summary>
    <remarks>
      <para>
            Values stored in this queue MUST NOT be mutated outside the context of an operation on the queue. It is
            highly recommended to make <typeparamref name="T" /> immutable in order to avoid accidental data corruption.
            </para>
      <para>
            Transaction is the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.
            So all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.
            <seealso cref="T:Microsoft.ServiceFabric.Data.ITransaction" /></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;T&gt;&gt; CreateEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction tx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;!T&gt;&gt; CreateEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction tx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <summary>
            Creates an async enumerable over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1" />.
            </summary>
        <returns>IEnumerable that represents all the values.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}" /> cannot serve reads at the moment.
            <cref name="FabricNotReadableException" /> can be thrown in all <cref name="ReplicaRole" />s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary" /> is loss of <cref name="IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary" /> is that Reliable Queue's state is not yet consistent.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task EnqueueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task EnqueueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="item">The object to add to the end of the queue. The value can be null for reference types.</param>
        <summary>
            Adds an object to the end of the reliable queue.
            </summary>
        <returns>Task that represents the asynchronous enqueue operation.</returns>
        <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx" /> and try again with a new transaction.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}" /> is not in <cref name="ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="EnqueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task EnqueueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, T item, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task EnqueueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !T item, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="item">The object to add to the end of the queue. The value can be null for reference types.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Adds an object to the end of the reliable queue.
            </summary>
        <returns>Task that represents the asynchronous enqueue operation.</returns>
        <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx" /> and try again with a new transaction.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}" /> is not in <cref name="ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryDequeueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryDequeueAsync (Microsoft.ServiceFabric.Data.ITransaction tx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryDequeueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <summary>
            Tries to remove and return the object at the beginning of the reliable queue.
            </summary>
        <returns>
            Task that represents the asynchronous dequeue operation. The task result is a tuple indicating
            whether an object was removed and if so, the object.
            </returns>
        <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx" /> and try again with a new transaction.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}" /> is not in <cref name="ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryDequeueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryDequeueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryDequeueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Tries to remove and return the object at the beginning of the reliable queue.
            </summary>
        <returns>
            Task that represents the asynchronous dequeue operation. The task result is a tuple indicating
            whether an object was removed and if so, the object.
            </returns>
        <remarks>If a retriable exception is thrown by this method, it is recommended to dispose the transaction <paramref name="tx" /> and try again with a new transaction.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <cref name="IReliableQueue{T}" /> is not in <cref name="ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryPeekAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryPeekAsync (Microsoft.ServiceFabric.Data.ITransaction tx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryPeekAsync(class Microsoft.ServiceFabric.Data.ITransaction tx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
        <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}" /> cannot serve reads at the moment.
            <cref name="FabricNotReadableException" /> can be thrown in all <cref name="ReplicaRole" />s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary" /> is loss of <cref name="IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary" /> is that Reliable Queue's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryPeekAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryPeekAsync (Microsoft.ServiceFabric.Data.ITransaction tx, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryPeekAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
        <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}" /> cannot serve reads at the moment.
            <cref name="FabricNotReadableException" /> can be thrown in all <cref name="ReplicaRole" />s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary" /> is loss of <cref name="IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary" /> is that Reliable Queue's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryPeekAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryPeekAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryPeekAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
        <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}" /> cannot serve reads at the moment.
            <cref name="FabricNotReadableException" /> can be thrown in all <cref name="ReplicaRole" />s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary" /> is loss of <cref name="IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary" /> is that Reliable Queue's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryPeekAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryPeekAsync (Microsoft.ServiceFabric.Data.ITransaction tx, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryPeekAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Tries to return an object from the beginning of the reliable queue without removing it.
            </summary>
        <returns>
            Task that represents the asynchronous peek operation. The task result is a tuple indicating
            whether an object was found at the beginning of the queue and if so, the object.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Exception indicates that the <cref name="IReliableQueue{T}" /> cannot serve reads at the moment.
            <cref name="FabricNotReadableException" /> can be thrown in all <cref name="ReplicaRole" />s.
            One example for it being thrown in the <cref name="ReplicaRole.Primary" /> is loss of <cref name="IStatefulServicePartition.ReadStatus" />.
            One example for it being thrown in the <cref name="ReplicaRole.ActiveSecondary" /> is that Reliable Queue's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
  </Members>
</Type>