<Type Name="IReliableConcurrentQueue&lt;T&gt;" FullName="Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IReliableConcurrentQueue&lt;T&gt; : Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableConcurrentQueue`1&lt;T&gt; implements class Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">
            The type of the values contained in the reliable queue slim.
            </typeparam>
    <summary>
      <para>
            Represents a reliable collection of persisted, replicated values with best-effort first-in first-out ordering.
            </para>
    </summary>
    <remarks>
      <para>
            Intended as an alternative to <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1" /> for workloads where strict ordering is not required, as by relaxing
            the ordering constraint, concurrency can be greatly improved.  <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1" /> restricts concurrent consumers
            and producers to a maximum of one each, while <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> imposes no such restriction.
            </para>
      <para>
        <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> does not offer the same transaction isolation semantics as the other reliable data structures.  See the 
            individual operations and properties (<see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" />, <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> and <see cref="P:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.Count" />) for details on what isolation, 
            if any, they provide.
            </para>
      <para>
            It is expected that values will be relatively short-lived in the queue; in other words, that the egress (<see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" />) rate is 
            equal to or greater than the ingress (<see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" />) rate.  Violating this expectation 
            may worsen system performance.  A planned queue capacity constraint which will throttle incoming Enqueues once the capacity is reached
            will help in maintaining this property.
            property.
            </para>
      <para>
            As the ordering of elements is not strictly guaranteed, assumptions about the ordering of any two values in the queue MUST NOT
            be made.  The best-effort first-in first-out ordering is provided for fairness; the time that an value spends in the queue should
            be related to the failure rate (failures may alter the queue's ordering) and the dequeue rate, but not the enqueue rate.
            </para>
      <para>
        <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> does not offer a Peek operation, however by combining <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> and <see cref="M:Microsoft.ServiceFabric.Data.ITransaction.Abort" />
            the same semantic can be achieved.  See <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> for additional details and an example.
            </para>
      <para>
            Values stored in this queue MUST NOT be mutated outside the context of an operation on the queue. It is
            highly recommended to make <typeparamref name="T" /> immutable in order to avoid accidental data corruption.
            </para>
      <para>
            Transaction is the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.
            So all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.
            <seealso cref="T:Microsoft.ServiceFabric.Data.ITransaction" /></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public long Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>
             Gets the number of values in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" />.
             </para>
        </summary>
        <value>The number of values in  the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" />.</value>
        <remarks>
          <para>
             This count represents the number of values currently visible to <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" />.  Uncommitted Enqueues will not
             increase the count, however uncommitted Dequeues will decrease the count.
             </para>
          <para>
             Note that this API does not take a transaction parameter.  Since the effects of <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> are not isolated
             from other transactions, the count also cannot be isolated from other transactions.  
             </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">The replica is currently not readable.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">The <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> was closed by the runtime.</exception>
        <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]></code></example>
        <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]></code></example>
        <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]></code></example>
        <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]></code></example>
        <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]></code></example>
        <example>
             This example shows how to monitor the queue's count infinitely, until the cancellation token is canceled.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 // Assumption: values are being enqueued/dequeued in another place (e.g. the communication listener).
                 var observer = Task.Run(
                     async () =>
                         {
                             while (true)
                             {
                                 cancellationToken.ThrowIfCancellationRequested();
            
                                 try
                                 {
                                     Console.WriteLine("Count: " + concurrentQueue.Count);
                                 }
                                 catch (FabricNotReadableException e)
                                 {
                                     // Retry until the queue is readable or a different exception is thrown.
                                     Console.WriteLine("Queue is not readable, retrying the observation: " + e);
                                 }
                                 catch (FabricObjectClosedException e)
                                 {
                                     // Gracefully exit as this is happening due to replica close.
                                     Console.WriteLine("Replica is closing, stopping observer: " + e);
                                     return;
                                 }
                                 
                                 await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                             }
                         },
                     cancellationToken);
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="EnqueueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task EnqueueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, T value, System.Threading.CancellationToken cancellationToken = null, Nullable&lt;TimeSpan&gt; timeout = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task EnqueueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !T value, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.Nullable&lt;System.TimeSpan&gt;" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="value">The value to add to the end of the queue. The value can be null for reference types.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. The default is null.  If null is passed, a default timeout will be used.</param>
        <summary>
          <para>
             Stage the enqueue of a value into the queue.
             </para>
        </summary>
        <returns>Task that represents the asynchronous enqueue operation.</returns>
        <remarks>
             A <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> operation cannot return any value for which its <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> has not yet been committed.
             This includes the transaction in which the value was enqueued; as a consequence, <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> does not support Read-Your-Writes.
             </remarks>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The replica is no longer in <cref name="ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">The replica is currently not readable.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">The <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> was closed by the runtime.</exception>
        <exception cref="T:System.TimeoutException">
             The operation was unable to be completed within the given timeout.  The transaction should be aborted and
             a new transaction should be created to retry.
             </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled via <paramref name="cancellationToken" />.</exception>
        <exception cref="T:System.InvalidOperationException">
             Thrown when a method call is invalid for the object's current state.
             Example, transaction used is already terminated: committed or aborted by the user.
             If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
             </exception>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <exception cref="T:System.Fabric.FabricTransientException">The replica saw a transient failure. Retry the operation on a new transaction</exception>
        <exception cref="T:System.Fabric.FabricException">The replica saw a non retriable failure other than the types defined above. Cleanup and rethrow the exception</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (TransactionFaultedException e)
                     {
                         // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                         // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                         Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
                     catch (FabricTransientException e)
                     {
                         // Retry until the queue is writable or a different exception is thrown.
                         Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (TransactionFaultedException e)
                     {
                         // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                         // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                         Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
                     catch (FabricTransientException e)
                     {
                         // Retry until the queue is writable or a different exception is thrown.
                         Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
        <example>
             This example shows how to use <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> to enqueue a value with retry.
             <code><![CDATA[
             protected override async Task RunAsync(CancellationToken cancellationToken)
             {
                 var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                 while (true)
                 {
                     cancellationToken.ThrowIfCancellationRequested();
             
                     try
                     {
                         using (var tx = this.StateManager.CreateTransaction())
                         {
                             await concurrentQueue.EnqueueAsync(tx, 12L, cancellationToken);
                             await tx.CommitAsync();
            
                             return;
                         }
                     }
                     catch (TransactionFaultedException e)
                     {
                         // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                         // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                         Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                     }
                     catch (FabricNotPrimaryException e)
                     {
                         // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                         return;
                     }
                     catch (FabricNotReadableException e)
                     {
                         // Retry until the queue is readable or a different exception is thrown.
                         Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                     }
                     catch (FabricObjectClosedException e)
                     {
                         // Gracefully exit RunAsync as this is happening due to replica close.
                         // If instead enqueue was being executed as part of a client request, the client would be signaled to re-resolve.
                         Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                         return;
                     }
                     catch (TimeoutException e)
                     {
                         Console.WriteLine("Encountered TimeoutException during EnqueueAsync, retrying the transaction: " + e);
                     }
                     catch (FabricTransientException e)
                     {
                         // Retry until the queue is writable or a different exception is thrown.
                         Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                     }
            
                     // Delay and retry.
                     await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                 }
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="TryDequeueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt; TryDequeueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, System.Threading.CancellationToken cancellationToken = null, Nullable&lt;TimeSpan&gt; timeout = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!T&gt;&gt; TryDequeueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="timeout" Type="System.Nullable&lt;System.TimeSpan&gt;" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <param name="timeout">The amount of time to wait for the operation to complete. The default is null.  If null is passed, a default timeout will be used.</param>
        <summary>
          <para>
            Tentatively dequeue a value from the queue. If the queue is empty, the dequeue operation will wait for an item to become available.
            </para>
        </summary>
        <returns>
            A task that represents the asynchronous dequeue operation. The task's result is a ConditionalValue of type T.
            If a value was dequeued within the given time, return a ConditionalValue with HasValue as false, else it returns a ConditionalValue with HasValue as true and the Value as the dequeued item of Type T
            </returns>
        <remarks>
          <para>
            While <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> can only return values for which the corresponding <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> was committed, <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> operations are not isolated
            from one another.  Once a transaction has dequeued a value, other transactions cannot dequeue it, but are not blocked from dequeuing other values.
            </para>
          <para>
            When a transaction or transactions including one or more <see cref="M:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Threading.CancellationToken,System.Nullable{System.TimeSpan})" /> operations aborts, the dequeued values will be added back at
            the head of the queue in an arbitrary order.  This will ensure that these values will be dequeued again soon, improving the fairness of the
            data structure, but without enforcing strict ordering (which would require reducing the allowed concurrency, as in <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1" />).
            </para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The replica is no longer in <cref name="ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">The replica is currently not readable.</exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">The <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableConcurrentQueue`1" /> was closed by the runtime.</exception>
        <exception cref="T:System.TimeoutException">
            The operation was unable to be completed within the given timeout.  The transaction should be aborted and
            a new transaction should be created to retry.
            </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null. Do not handle this exception.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled via <paramref name="cancellationToken" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <exception cref="T:System.Fabric.FabricTransientException">The replica saw a transient failure. Retry the operation on a new transaction</exception>
        <exception cref="T:System.Fabric.FabricException">The replica saw a non retriable failure other than the types defined above. Cleanup and rethrow the exception</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (TransactionFaultedException e)
                    {
                        // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                        // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                        Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    catch (FabricTransientException e)
                    {
                        // Retry until the queue is writable or a different exception is thrown.
                        Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                    }
            
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (TransactionFaultedException e)
                    {
                        // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                        // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                        Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    catch (FabricTransientException e)
                    {
                        // Retry until the queue is writable or a different exception is thrown.
                        Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                    }
            
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
        <example>
            This example shows how to dequeue and log infinitely with retry, until the cancellation token is canceled.  
            <code><![CDATA[
            protected override async Task RunAsync(CancellationToken cancellationToken)
            {
                var concurrentQueue = await this.StateManager.GetOrAddAsync<IReliableConcurrentQueue<long>>(new Uri("fabric:/concurrentQueue"));
            
                // Assumption: values are being enqueued by another source (e.g. the communication listener).
                while (true)
                {
                    cancellationToken.ThrowIfCancellationRequested();
            
                    try
                    {
                        using (var tx = this.StateManager.CreateTransaction())
                        {
                            var dequeueOutput = await concurrentQueue.TryDequeueAsync(tx, cancellationToken, TimeSpan.FromMilliseconds(100));
                            await tx.CommitAsync();
            
                            if (dequeueOutput.HasValue)
                            {
                                Console.WriteLine("Dequeue # " + dequeueOutput);
                            }
                            else
                            {
                                Console.WriteLine("Could not dequeue in the given time");
                            }
                        }
                    }
                    catch (TransactionFaultedException e)
                    {
                        // This indicates that the transaction was internally faulted by the system. One possible cause for this is that the transaction was long running
                        // and blocked a checkpoint. Increasing the "ReliableStateManagerReplicatorSettings.CheckpointThresholdInMB" will help reduce the chances of running into this exception
                        Console.WriteLine("Transaction was internally faulted, retrying the transaction: " + e);
                    }
                    catch (FabricNotPrimaryException e)
                    {
                        // Gracefully exit RunAsync as the new primary should have RunAsync invoked on it and continue work.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is not primary, exiting RunAsync: " + e);
                        return;
                    }
                    catch (FabricNotReadableException e)
                    {
                        // Retry until the queue is readable or a different exception is thrown.
                        Console.WriteLine("Queue is not readable, retrying the transaction: " + e);
                    }
                    catch (FabricObjectClosedException e)
                    {
                        // Gracefully exit RunAsync as this is happening due to replica close.
                        // If instead dequeue was being executed as part of a client request, the client would be signaled to re-resolve.
                        Console.WriteLine("Replica is closing, exiting RunAsync: " + e);
                        return;
                    }
                    catch (TimeoutException e)
                    {
                        Console.WriteLine("Encountered TimeoutException during DequeueAsync, retrying the transaction: " + e);
                    }
                    catch (FabricTransientException e)
                    {
                        // Retry until the queue is writable or a different exception is thrown.
                        Console.WriteLine("Queue is currently not writable, retrying the transaction: " + e);
                    }
            
                    // Delay and retry.
                    await Task.Delay(TimeSpan.FromMilliseconds(100), cancellationToken);
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>