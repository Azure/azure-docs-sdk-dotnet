<Type Name="IReliableDictionary&lt;TKey,TValue&gt;" FullName="Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public interface IReliableDictionary&lt;TKey,TValue&gt; : Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; where TKey : IComparable&lt;TKey&gt;, IEquatable&lt;TKey&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableDictionary`2&lt;(class System.IComparable`1&lt;!TKey&gt;, class System.IEquatable`1&lt;!TKey&gt;) TKey, TValue&gt; implements class Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <InterfaceName>System.IComparable&lt;TKey&gt;</InterfaceName>
        <InterfaceName>System.IEquatable&lt;TKey&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TKey">The type of the keys in the Reliable Dictionary.</typeparam>
    <typeparam name="TValue">The type of the values in the Reliable Dictionary.</typeparam>
    <summary>
      <para>Represents a Reliable Collection of key/value pairs that are persisted and replicated.</para>
    </summary>
    <remarks>
      <para>Keys or values stored in this dictionary MUST NOT be mutated outside the context of an operation on the 
            dictionary. It is highly recommended to make both <typeparamref name="TKey" /> and <typeparamref name="TValue" /> 
            immutable in order to avoid accidental data corruption.
            See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-work-with-reliable-collections">here</see> for common pitfalls.</para>
      <para>The transaction is the unit of concurrency. Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.
            When calling any asynchronous Reliable Collection method that takes an <see cref="T:Microsoft.ServiceFabric.Data.ITransaction" />, you must wait for completion of the returned Task before calling
            another method using the same transaction. See examples of transactions <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-work-with-reliable-collections">here</see>.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to be added.</param>
        <param name="value">The value to be added. The value can be null for reference types.</param>
        <summary>
            Adds the specified key/value pair to the Reliable Dictionary.
            </summary>
        <returns>A task that represents the asynchronous add operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">A value with the same key already exists in the Reliable Dictionary.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task AddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to be added.</param>
        <param name="value">The value to be added. The value can be null for reference types.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Adds the specified key/value pair to the Reliable Dictionary.
            </summary>
        <returns>A task that represents the asynchronous add operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">A value with the same key already exists in the Reliable Dictionary, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; AddOrUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; AddOrUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, class System.Func`2&lt;!TKey, !TValue&gt; addValueFactory, class System.Func`3&lt;!TKey, !TValue, !TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to be added or whose value should be updated.</param>
        <param name="addValueFactory">The function used to generate a value for an absent key.</param>
        <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
        <summary>
            Uses the specified functions to add a key/value pair to the Reliable Dictionary if the key does not already exist,
            or to update a key/value pair in the Reliable Dictionary if the key already exists.
            </summary>
        <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized, or <paramref name="addValueFactory" /> is null, or <paramref name="updateValueFactory" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; AddOrUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; AddOrUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue addValue, class System.Func`3&lt;!TKey, !TValue, !TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to be added or whose value should be updated.</param>
        <param name="addValue">The value to be added for an absent key. The value can be null for reference types.</param>
        <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair 
            in the Reliable Dictionary by using the specified function if the key already exists.
            </summary>
        <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized, or <paramref name="updateValueFactory" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; AddOrUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; AddOrUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, class System.Func`2&lt;!TKey, !TValue&gt; addValueFactory, class System.Func`3&lt;!TKey, !TValue, !TValue&gt; updateValueFactory, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to be added or whose value should be updated.</param>
        <param name="addValueFactory">The function used to generate a value for an absent key.</param>
        <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Uses the specified functions to add a key/value pair to the Reliable Dictionary if the key does not already exist,
            or to update a key/value pair in the Reliable Dictionary if the key already exists.
            </summary>
        <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized, or <paramref name="addValueFactory" /> is null, or <paramref name="updateValueFactory" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; AddOrUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; AddOrUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue addValue, class System.Func`3&lt;!TKey, !TValue, !TValue&gt; updateValueFactory, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to be added or whose value should be updated.</param>
        <param name="addValue">The value to be added for an absent key. The value can be null for reference types.</param>
        <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair 
            in the Reliable Dictionary by using the specified function if the key already exists.
            </summary>
        <returns>
            Task that represents the asynchronous add or update operation. The task result is the new value for the key. This will be
            either addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized, or <paramref name="updateValueFactory" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ClearAsync (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ClearAsync(valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Removes all keys and values from the Reliable Dictionary.
            </summary>
        <returns>Task that represents the asynchronous clear operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsKeyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ContainsKeyAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsKeyAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to locate in the Reliable Dictionary.</param>
        <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
        <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsKeyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ContainsKeyAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsKeyAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to locate in the Reliable Dictionary.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
        <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsKeyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ContainsKeyAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsKeyAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to locate in the Reliable Dictionary.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
        <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsKeyAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; ContainsKeyAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ContainsKeyAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key to locate in the Reliable Dictionary.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Determines whether the Reliable Dictionary contains the specified key.
            </summary>
        <returns>A task that represents the asynchronous operation. The task result indicates whether the key exists.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <summary>
            Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, valuetype Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="enumerationMode" Type="Microsoft.ServiceFabric.Data.Collections.EnumerationMode" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="enumerationMode">The enumeration mode to use. The default is Unordered. Ordered enumeration is ascending only. </param>
        <summary>
            Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEnumerableAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;&gt; CreateEnumerableAsync (Microsoft.ServiceFabric.Data.ITransaction txn, Func&lt;TKey,bool&gt; filter, Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.ServiceFabric.Data.IAsyncEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;&gt; CreateEnumerableAsync(class Microsoft.ServiceFabric.Data.ITransaction txn, class System.Func`2&lt;!TKey, bool&gt; filter, valuetype Microsoft.ServiceFabric.Data.Collections.EnumerationMode enumerationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.IAsyncEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="txn" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="filter" Type="System.Func&lt;TKey,System.Boolean&gt;" />
        <Parameter Name="enumerationMode" Type="Microsoft.ServiceFabric.Data.Collections.EnumerationMode" />
      </Parameters>
      <Docs>
        <param name="txn">The transaction to associate this operation with.</param>
        <param name="filter">Predicate that filters the key-value pairs to include in the enumeration based on the key.</param>
        <param name="enumerationMode">The enumeration mode to use. The default is Unordered. Ordered enumeration is ascending only.</param>
        <summary>
            Creates an asynchronous enumerator over the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" />.
            </summary>
        <returns>
          <para>A task that represents the asynchronous create enumerable operation. The task result is an enumerator for the Reliable Dictionary.</para>
        </returns>
        <remarks>
          <para>The returned enumerator is safe to use concurrently with reads and writes to the Reliable Dictionary.
            It represents a snapshot consistent view. Please note that <see cref="M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator" /> needs to be called on
            the returned IAsyncEnumerable in order to enumerate. Example usage can be
            seen <see href="https://github.com/Azure-Samples/service-fabric-dotnet-web-reference-app/blob/master/ReferenceApp/Inventory.Service/InventoryService.cs">here</see>.</para>
        </remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">
          <para>Indicates that the Reliable Dictionary is closed or deleted.</para>
        </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="DictionaryChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs&lt;TKey,TValue&gt;&gt; DictionaryChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2&lt;!TKey, !TValue&gt;&gt; DictionaryChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.DictionaryChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Occurs when the Reliable Dictionary changes.
            For example, addition, update or removal of an item.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; GetOrAddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; GetOrAddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, class System.Func`2&lt;!TKey, !TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to add.</param>
        <param name="valueFactory">The function used to generate a value for the key.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary by using the specified function, if the key does not already exist.
            </summary>
        <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be
            either the existing value for the key if the key is already in the Reliable Dictionary, or the new value for the key
            as returned by valueFactory if the key was not in the Reliable Dictionary.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized, or <paramref name="valueFactory" /> is null.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; GetOrAddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; GetOrAddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to add.</param>
        <param name="value">The value to be added, if the key does not already exist.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist.
            If the key exists no updates will be made to the value.
            </summary>
        <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be either the
            existing value for the key if the key is already in the Reliable Dictionary, or the new value if the key was not in the Reliable Dictionary.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; GetOrAddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Func&lt;TKey,TValue&gt; valueFactory, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; GetOrAddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, class System.Func`2&lt;!TKey, !TValue&gt; valueFactory, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to add.</param>
        <param name="valueFactory">The function used to generate a value for the key.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary by using the specified function, if the key does not already exist.
            </summary>
        <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be
            either the existing value for the key if the key is already in the Reliable Dictionary, or the new value for the key
            as returned by valueFactory if the key was not in the Reliable Dictionary.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized, or <paramref name="valueFactory" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="GetOrAddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TValue&gt; GetOrAddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TValue&gt; GetOrAddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to add.</param>
        <param name="value">The value to be added, if the key does not already exist.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist.
            </summary>
        <returns>
            A task that represents the asynchronous add operation. The task result is the value for the key. This will be either the
            existing value for the key if the key is already in the Reliable Dictionary, or the new value if the key was not in the Reliable Dictionary.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="RebuildNotificationAsyncCallback">
      <MemberSignature Language="C#" Value="public Func&lt;Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt;,Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs&lt;TKey,TValue&gt;,System.Threading.Tasks.Task&gt; RebuildNotificationAsyncCallback { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2&lt;!TKey, !TValue&gt;, class Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2&lt;!TKey, !TValue&gt;, class System.Threading.Tasks.Task&gt; RebuildNotificationAsyncCallback" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;Microsoft.ServiceFabric.Data.Collections.IReliableDictionary&lt;TKey,TValue&gt;,Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs&lt;TKey,TValue&gt;,System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A function that is called when the Reliable Dictionary is being rebuilt during copy, restore or recovery.
            </summary>
        <value>
            The asynchronous rebuild notification function. 
            Function takes in IReliableDictionary and NotifyDictionaryRebuildEventArgs token and returns a Task that represents the asynchronous processing of the rebuild notification.
            </value>
        <remarks>
          <see cref="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2" /> can only be used within this callback.
            Once the asynchronous callback completes, the <see cref="T:Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2" /> becomes invalid. 
            See <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-notifications">here</see> for more information. 
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key whose value should be updated.</param>
        <param name="value">The value that replaces the value of the element that has the specified <paramref name="key" />.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair
            in the Reliable Dictionary if the key already exists.
            </summary>
        <returns>A task that represents the asynchronous update operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> does not exist in the Reliable Dictionary.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key whose value should be updated.</param>
        <param name="value">The value that replaces the value of the element that has the specified <paramref name="key" />.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Adds a key/value pair to the Reliable Dictionary if the key does not already exist, or updates a key/value pair
            in the Reliable Dictionary if the key already exists.
            </summary>
        <returns>A task that represents the asynchronous update operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> does not exist in the Reliable Dictionary, or <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryAddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryAddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to add.</param>
        <param name="value">The value of the element to add. The value can be null for reference types.</param>
        <summary>
            Attempts to add the specified key and value to the Reliable Dictionary.
            </summary>
        <returns>A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryAddAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryAddAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue value, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryAddAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue value, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to add.</param>
        <param name="value">The value of the element to add. The value can be null for reference types.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Attempts to add the specified key and value to the Reliable Dictionary.
            </summary>
        <returns>A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt; TryGetValueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!TValue&gt;&gt; TryGetValueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the value to get.</param>
        <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt; TryGetValueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!TValue&gt;&gt; TryGetValueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the value to get.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt; TryGetValueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!TValue&gt;&gt; TryGetValueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the value to get.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetValueAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt; TryGetValueAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!TValue&gt;&gt; TryGetValueAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype Microsoft.ServiceFabric.Data.Collections.LockMode lockMode, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="lockMode" Type="Microsoft.ServiceFabric.Data.Collections.LockMode" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the value to get.</param>
        <param name="lockMode">Type of locking to use for this read operation.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Attempts to get the value associated with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            A task that represents the asynchronous read operation. The task result is a tuple indicating
            whether the key was found in the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotReadableException">
            Indicates that the IReliableDictionary cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.
            </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt; TryRemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!TValue&gt;&gt; TryRemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to remove.</param>
        <summary>
            Attempts to remove the value with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryRemoveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt; TryRemoveAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype Microsoft.ServiceFabric.Data.ConditionalValue`1&lt;!TValue&gt;&gt; TryRemoveAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.ServiceFabric.Data.ConditionalValue&lt;TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key of the element to remove.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Attempts to remove the value with the specified key from the Reliable Dictionary.
            </summary>
        <returns>
            Task that represents the asynchronous remove operation. The task result is a tuple indicating
            whether the key was removed from the Reliable Dictionary and if so, the value.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue newValue, !TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key whose value is compared with <paramref name="comparisonValue" /> and possibly replaced.</param>
        <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key" /> if the comparison results in equality.</param>
        <param name="comparisonValue">The value that is compared to the value of the element that has the specified <paramref name="key" />.</param>
        <summary>
            Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
            </summary>
        <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the default timeout.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
    <Member MemberName="TryUpdateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; TryUpdateAsync (Microsoft.ServiceFabric.Data.ITransaction tx, TKey key, TValue newValue, TValue comparisonValue, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; TryUpdateAsync(class Microsoft.ServiceFabric.Data.ITransaction tx, !TKey key, !TValue newValue, !TValue comparisonValue, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tx">Transaction to associate this operation with.</param>
        <param name="key">The key whose value is compared with <paramref name="comparisonValue" /> and possibly replaced.</param>
        <param name="newValue">The value that replaces the value of the element that has the specified <paramref name="key" /> if the comparison results in equality.</param>
        <param name="comparisonValue">The value that is compared to the value of the element that has the specified <paramref name="key" />.</param>
        <param name="timeout">The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default is None.</param>
        <summary>
            Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
            </summary>
        <returns>A task that represents the asynchronous update operation. The task result indicates whether the object was updated.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="tx" /> is null, or <paramref name="key" /> is null or cannot be serialized.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="timeout" /> is negative.</exception>
        <exception cref="T:System.TimeoutException">The operation failed to complete within the given timeout.</exception>
        <exception cref="T:System.OperationCanceledException">The operation was canceled.</exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">The exception that is thrown when the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2" /> is not in <see cref="F:System.Fabric.ReplicaRole.Primary" />.</exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricObjectClosedException">Indicates that the Reliable Dictionary is closed or deleted.</exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
  </Members>
</Type>