<Type Name="IReliableCollection&lt;T&gt;" FullName="Microsoft.ServiceFabric.Data.Collections.IReliableCollection&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IReliableCollection&lt;T&gt; : Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReliableCollection`1&lt;T&gt; implements class Microsoft.ServiceFabric.Data.IReliableState" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ServiceFabric.Data.IReliableState</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">The type of the elements in the collection.</typeparam>
    <summary>
      <para>Defines methods for manipulating Reliable Collections.</para>
    </summary>
    <remarks>
      <para>More information on Reliable Collections can be seen
            <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-reliable-services-reliable-collections">here</see>.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ClearAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ClearAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ClearAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Removes all state from the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1" />, including replicated and persisted state.</para>
        </summary>
        <returns>
          <para>A task that represents the asynchronous clear operation.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">
          <para>Thrown when attempting to perform this operation
            on a <cref name="IReliableCollection{T}" /> that is not in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role.</para>
        </exception>
        <exception cref="T:System.TimeoutException">
          <para>Indicates that this operation failed to complete within the given timeout.</para>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetCountAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;long&gt; GetCountAsync (Microsoft.ServiceFabric.Data.ITransaction tx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int64&gt; GetCountAsync(class Microsoft.ServiceFabric.Data.ITransaction tx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyName>Microsoft.ServiceFabric.Data.Interfaces</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="Microsoft.ServiceFabric.Data.ITransaction" />
      </Parameters>
      <Docs>
        <param name="tx">
            The transaction to associate this operation with. See examples of
            transactions <see href="https://docs.microsoft.com/azure/service-fabric/service-fabric-work-with-reliable-collections">here</see>.
            </param>
        <summary>
          <para>Gets the number of elements contained in the <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1" />.</para>
        </summary>
        <returns>
          <para>A task that represents the asynchronous operation, indicating the number of elements.</para>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Fabric.FabricNotReadableException">
          <para>Indicates that the IReliableCollection cannot serve reads at the moment.
            This exception can be thrown in all <see cref="T:System.Fabric.ReplicaRole" />s.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role is loss of <see cref="P:System.Fabric.IStatefulServicePartition.ReadStatus" />.
            One reason it may be thrown in the <see cref="F:System.Fabric.ReplicaRole.ActiveSecondary" /> role is that Reliable Collection's state is not yet consistent.</para>
        </exception>
        <exception cref="T:System.InvalidOperationException">
            Thrown when a method call is invalid for the object's current state.
            Example, transaction used is already terminated: committed or aborted by the user.
            If this exception is thrown, it is highly likely that there is a bug in the service code of the use of transactions.
            </exception>
        <exception cref="T:System.Fabric.FabricNotPrimaryException">
          <para>Thrown when attempting to perform this operation on a <see cref="T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1" /> 
            that is not in the <see cref="F:System.Fabric.ReplicaRole.Primary" /> role.
            In some instances, read operations, such as this one, can be performed from secondary replicas 
            depending on the implementation of the IReliableCollection used.</para>
        </exception>
        <exception cref="T:System.Fabric.TransactionFaultedException">The transaction has been internally faulted by the system. Retry the operation on a new transaction</exception>
      </Docs>
    </Member>
  </Members>
</Type>