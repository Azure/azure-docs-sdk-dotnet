### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service. Details of the response body schema are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: devBoxName
    description: The name of a Dev Box.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: userId
    description: The AAD object id of the user. If value is 'me', the identity is taken from the authentication context.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">devBoxName</code> or <code data-dev-comment-type="paramref">userId</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">devBoxName</code> or <code data-dev-comment-type="paramref">userId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync(System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync(System.String,System.String,Azure.RequestContext)
  name: GetDevBoxByUserAsync(String, String, RequestContext)
  fullName: Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync(String, String, RequestContext)
  nameWithType: DevBoxesClient.GetDevBoxByUserAsync(String, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> GetDevBoxByUserAsync (string devBoxName, string userId = "me", Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetDevBoxByUserAsync : string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.GetDevBoxByUserAsync : string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function GetDevBoxByUserAsync (devBoxName As String, Optional userId As String = "me", Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: Gets a Dev Box.
  remarks: >-
    <p>Below is the JSON schema for the response payload.</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">DevBox</code>: 


    ```

    {
      name: string, # Optional. Display name for the Dev Box
      projectName: string, # Optional. Name of the project this Dev Box belongs to
      poolName: string, # Required. The name of the Dev Box pool this machine belongs to.
      hibernateSupport: "Disabled" | "Enabled", # Optional. Indicates whether hibernate is enabled/disabled or unknown.
      provisioningState: string, # Optional. The current provisioning state of the Dev Box.
      actionState: string, # Optional. The current action state of the Dev Box. This is state is based on previous action performed by user.
      powerState: "Unknown" | "Deallocated" | "PoweredOff" | "Running" | "Hibernated", # Optional. The current power state of the Dev Box.
      uniqueId: string, # Optional. A unique identifier for the Dev Box. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
      errorDetails: {
        code: string, # Optional. The error code.
        message: string, # Optional. The error message.
      }, # Optional. Provisioning or action error details. Populated only for error states.
      location: string, # Optional. Azure region where this Dev Box is located. This will be the same region as the Virtual Network it is attached to.
      osType: "Windows", # Optional. The operating system type of this Dev Box.
      user: string, # Optional. The AAD object id of the user this Dev Box is assigned to.
      hardwareProfile: {
        skuName: string, # Optional. The name of the SKU
        vCPUs: number, # Optional. The number of vCPUs available for the Dev Box.
        memoryGB: number, # Optional. The amount of memory available for the Dev Box.
      }, # Optional. Information about the Dev Box's hardware resources
      storageProfile: {
        osDisk: {
          diskSizeGB: number, # Optional. The size of the OS Disk in gigabytes.
        }, # Optional. Settings for the operating system disk.
      }, # Optional. Storage settings for this Dev Box
      imageReference: {
        name: string, # Optional. The name of the image used.
        version: string, # Optional. The version of the image.
        operatingSystem: string, # Optional. The operating system of the image.
        osBuildNumber: string, # Optional. The operating system build number of the image.
        publishedDate: string (ISO 8601 Format), # Optional. The datetime that the backing image version was published.
      }, # Optional. Information about the image used for this Dev Box
      createdTime: string (ISO 8601 Format), # Optional. Creation time of this Dev Box
      localAdministrator: "Enabled" | "Disabled", # Optional. Indicates whether the owner of the Dev Box is a local administrator.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call GetDevBoxByUserAsync with required parameters and parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new DevBoxesClient(endpoint, "<projectName>", credential);


    Response response = await client.GetDevBoxByUserAsync("<devBoxName>");


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("poolName").ToString());

    ```

    This sample shows how to call GetDevBoxByUserAsync with all parameters, and how to parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new DevBoxesClient(endpoint, "<projectName>", credential);


    Response response = await client.GetDevBoxByUserAsync("<devBoxName>", <me>);


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("projectName").ToString());

    Console.WriteLine(result.GetProperty("poolName").ToString());

    Console.WriteLine(result.GetProperty("hibernateSupport").ToString());

    Console.WriteLine(result.GetProperty("provisioningState").ToString());

    Console.WriteLine(result.GetProperty("actionState").ToString());

    Console.WriteLine(result.GetProperty("powerState").ToString());

    Console.WriteLine(result.GetProperty("uniqueId").ToString());

    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("errorDetails").GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("location").ToString());

    Console.WriteLine(result.GetProperty("osType").ToString());

    Console.WriteLine(result.GetProperty("user").ToString());

    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("skuName").ToString());

    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("vCPUs").ToString());

    Console.WriteLine(result.GetProperty("hardwareProfile").GetProperty("memoryGB").ToString());

    Console.WriteLine(result.GetProperty("storageProfile").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());

    Console.WriteLine(result.GetProperty("imageReference").GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());

    Console.WriteLine(result.GetProperty("imageReference").GetProperty("operatingSystem").ToString());

    Console.WriteLine(result.GetProperty("imageReference").GetProperty("osBuildNumber").ToString());

    Console.WriteLine(result.GetProperty("imageReference").GetProperty("publishedDate").ToString());

    Console.WriteLine(result.GetProperty("createdTime").ToString());

    Console.WriteLine(result.GetProperty("localAdministrator").ToString());

    ```
  metadata: {}
uid: Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync*
commentId: Overload:Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync
namespace: Azure.Developer.DevCenter
name: GetDevBoxByUserAsync
fullName: Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync
nameWithType: DevBoxesClient.GetDevBoxByUserAsync
assembliesWithMoniker:
- value: Azure.Developer.DevCenter.dll
packagesWithMoniker:
- value: Azure.Developer.DevCenter v1.0.0-beta.2
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync
  api_location:
  - Azure.Developer.DevCenter.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Developer.DevCenter.DevBoxesClient.GetDevBoxByUserAsync
  - Azure::Developer::DevCenter::DevBoxesClient::GetDevBoxByUserAsync
  - GetDevBoxByUserAsync
  - DevBoxesClient.GetDevBoxByUserAsync
  - DevBoxesClient::GetDevBoxByUserAsync
  helpviewer_keywords:
  - DevBoxesClient.GetDevBoxByUserAsync method [.NET]
  - GetDevBoxByUserAsync method [.NET], class DevBoxesClient
  - DevBoxesClient.GetDevBoxByUserAsync(String, String, RequestContext) method [.NET]
  - GetDevBoxByUserAsync(String, String, RequestContext) method [.NET], class DevBoxesClient
  monikers:
  - azure-dotnet-preview
