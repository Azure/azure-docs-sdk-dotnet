### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: resultId
    description: ID of a batch detection result.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">resultId</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">resultId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(System.String,Azure.RequestContext)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(System.String,Azure.RequestContext)
  name: GetMultivariateBatchDetectionResult(String, RequestContext)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(String, RequestContext)
  nameWithType: AnomalyDetectorClient.GetMultivariateBatchDetectionResult(String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Response GetMultivariateBatchDetectionResult (string resultId, Azure.RequestContext context);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetMultivariateBatchDetectionResult : string * Azure.RequestContext -> Azure.Response

        override this.GetMultivariateBatchDetectionResult : string * Azure.RequestContext -> Azure.Response
  - lang: vb
    values:
    - value: Public Overridable Function GetMultivariateBatchDetectionResult (resultId As String, context As RequestContext) As Response
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Get Multivariate Anomaly Detection Result

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li><li>

    Please try the simpler <xref data-throw-if-not-resolved="true" uid="Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(System.String,System.Threading.CancellationToken)"></xref> convenience overload with strongly typed models first.

    </li></ul>
  remarks: >-
    <p>For asynchronous inference, get multivariate anomaly detection result based on resultId returned by the BatchDetectAnomaly api.</p><p>Below is the JSON schema for the response payload.</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">MultivariateDetectionResult</code>: 


    ```

    {
      resultId: string, # Required.
      summary: {
        status: "CREATED" | "RUNNING" | "READY" | "FAILED", # Required.
        errors: [ErrorResponse], # Optional.
        variableStates: [VariableState], # Optional.
        setupInfo: {
          dataSource: string, # Required.
          topContributorCount: number, # Required.
          startTime: string (date & time), # Required.
          endTime: string (date & time), # Required.
        }, # Required.
      }, # Required.
      results: [
        {
          timestamp: string (date & time), # Required.
          value: {
            isAnomaly: boolean, # Required.
            severity: number, # Required.
            score: number, # Required.
            interpretation: [AnomalyInterpretation], # Optional.
          }, # Optional.
          errors: [ErrorResponse], # Optional.
        }
      ], # Required.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call GetMultivariateBatchDetectionResult with required parameters and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    Response response = client.GetMultivariateBatchDetectionResult("<resultId>", new RequestContext());


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("resultId").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("variable").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.AnomalyDetector.MultivariateDetectionResult?alt=Azure.AI.AnomalyDetector.MultivariateDetectionResult&text=MultivariateDetectionResult" data-throw-if-not-resolved="True"/>&gt;
  parameters:
  - namesWithMoniker:
    - value: resultId
    description: ID of a batch detection result.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">resultId</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">resultId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(System.String,System.Threading.CancellationToken)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(System.String,System.Threading.CancellationToken)
  name: GetMultivariateBatchDetectionResult(String, CancellationToken)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult(String, CancellationToken)
  nameWithType: AnomalyDetectorClient.GetMultivariateBatchDetectionResult(String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Response<Azure.AI.AnomalyDetector.MultivariateDetectionResult> GetMultivariateBatchDetectionResult (string resultId, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetMultivariateBatchDetectionResult : string * System.Threading.CancellationToken -> Azure.Response<Azure.AI.AnomalyDetector.MultivariateDetectionResult>

        override this.GetMultivariateBatchDetectionResult : string * System.Threading.CancellationToken -> Azure.Response<Azure.AI.AnomalyDetector.MultivariateDetectionResult>
  - lang: vb
    values:
    - value: Public Overridable Function GetMultivariateBatchDetectionResult (resultId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of MultivariateDetectionResult)
  monikers:
  - azure-dotnet-preview
  summary: Get Multivariate Anomaly Detection Result.
  remarks: <p>For asynchronous inference, get a multivariate anomaly detection result based on the resultId value that the BatchDetectAnomaly API returns.</p>
  examples: >-
    This sample shows how to call GetMultivariateBatchDetectionResult with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var result = client.GetMultivariateBatchDetectionResult("<resultId>");

    ```
  metadata: {}
uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult*
commentId: Overload:Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult
namespace: Azure.AI.AnomalyDetector
name: GetMultivariateBatchDetectionResult
fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult
nameWithType: AnomalyDetectorClient.GetMultivariateBatchDetectionResult
assembliesWithMoniker:
- value: Azure.AI.AnomalyDetector.dll
packagesWithMoniker:
- value: Azure.AI.AnomalyDetector v3.0.0-preview.7
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult
  api_location:
  - Azure.AI.AnomalyDetector.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateBatchDetectionResult
  - Azure::AI::AnomalyDetector::AnomalyDetectorClient::GetMultivariateBatchDetectionResult
  - GetMultivariateBatchDetectionResult
  - AnomalyDetectorClient.GetMultivariateBatchDetectionResult
  - AnomalyDetectorClient::GetMultivariateBatchDetectionResult
  helpviewer_keywords:
  - AnomalyDetectorClient.GetMultivariateBatchDetectionResult method [.NET]
  - GetMultivariateBatchDetectionResult method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.GetMultivariateBatchDetectionResult(String, RequestContext) method [.NET]
  - GetMultivariateBatchDetectionResult(String, RequestContext) method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.GetMultivariateBatchDetectionResult(String, CancellationToken) method [.NET]
  - GetMultivariateBatchDetectionResult(String, CancellationToken) method [.NET], class AnomalyDetectorClient
  monikers:
  - azure-dotnet-preview
