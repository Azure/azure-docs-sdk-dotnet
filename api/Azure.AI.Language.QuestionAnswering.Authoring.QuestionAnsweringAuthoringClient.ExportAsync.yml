### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation`1"></xref> from the service that will contain a <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: format
    description: 'Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: assetKind
    description: 'Kind of the asset of the project. Allowed values: "qnas" | "synonyms".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)
  name: ExportAsync(WaitUntil, String, String, String, RequestContext)
  fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync(WaitUntil, String, String, String, RequestContext)
  nameWithType: QuestionAnsweringAuthoringClient.ExportAsync(WaitUntil, String, String, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Operation<BinaryData>> ExportAsync (Azure.WaitUntil waitUntil, string projectName, string format = default, string assetKind = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ExportAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>

        override this.ExportAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>
  - lang: vb
    values:
    - value: Public Overridable Function ExportAsync (waitUntil As WaitUntil, projectName As String, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))
  monikers:
  - azure-dotnet
  summary: Export project metadata and assets.
  remarks: >-
    <p>Below is the JSON schema for the response payload. Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/export</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">ExportJobState</code>: 


    ```

    {
                  createdDateTime: string (ISO 8601 Format), # Required.
                  expirationDateTime: string (ISO 8601 Format), # Optional.
                  jobId: string, # Required.
                  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
                  status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
                }
    ```

    </p>
  examples: >-
    This sample shows how to call ExportAsync with required parameters and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    var operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>");


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("createdDateTime").ToString());

    Console.WriteLine(result.GetProperty("jobId").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());

    Console.WriteLine(result.GetProperty("status").ToString());

    ```

    This sample shows how to call ExportAsync with all parameters, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    var operation = await client.ExportAsync(WaitUntil.Completed, "<projectName>", "<format>", "<assetKind>");


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("createdDateTime").ToString());

    Console.WriteLine(result.GetProperty("expirationDateTime").ToString());

    Console.WriteLine(result.GetProperty("jobId").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());

    Console.WriteLine(result.GetProperty("status").ToString());

    ```
  metadata: {}
uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync*
commentId: Overload:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync
namespace: Azure.AI.Language.QuestionAnswering.Authoring
name: ExportAsync
fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync
nameWithType: QuestionAnsweringAuthoringClient.ExportAsync
assembliesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering.dll
packagesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync
  api_location:
  - Azure.AI.Language.QuestionAnswering.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ExportAsync
  - Azure::AI::Language::QuestionAnswering::Authoring::QuestionAnsweringAuthoringClient::ExportAsync
  - ExportAsync
  - QuestionAnsweringAuthoringClient.ExportAsync
  - QuestionAnsweringAuthoringClient::ExportAsync
  helpviewer_keywords:
  - QuestionAnsweringAuthoringClient.ExportAsync method [.NET]
  - ExportAsync method [.NET], class QuestionAnsweringAuthoringClient
  - QuestionAnsweringAuthoringClient.ExportAsync(WaitUntil, String, String, String, RequestContext) method [.NET]
  - ExportAsync(WaitUntil, String, String, String, RequestContext) method [.NET], class QuestionAnsweringAuthoringClient
  monikers:
  - azure-dotnet
