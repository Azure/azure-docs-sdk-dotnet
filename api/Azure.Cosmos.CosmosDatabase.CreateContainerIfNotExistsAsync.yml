### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Cosmos.ContainerResponse?alt=Azure.Cosmos.ContainerResponse&text=ContainerResponse" data-throw-if-not-resolved="True"/>&gt;
    description: A <xref data-throw-if-not-resolved="true" uid="System.Threading.Tasks.Task"></xref> containing a <xref data-throw-if-not-resolved="true" uid="Azure.Response"></xref> which wraps a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.ContainerProperties"></xref> containing the read resource record.
  parameters:
  - namesWithMoniker:
    - value: containerProperties
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.ContainerProperties"></xref> object.
    type: <xref href="Azure.Cosmos.ContainerProperties?alt=Azure.Cosmos.ContainerProperties&text=ContainerProperties" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: throughput
    description: (Optional) The throughput provisioned for a container in measurement of Requests Units per second in the Azure Cosmos DB service.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: requestOptions
    description: (Optional) The options for the container request <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.RequestOptions"></xref>
    type: <xref href="Azure.Cosmos.RequestOptions?alt=Azure.Cosmos.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: (Optional) <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> representing request cancellation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: If either <code data-dev-comment-type="paramref">containerProperties</code> is not set.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).
    type: <xref href="System.AggregateException" data-throw-if-not-resolved="True"/>
  - description: >-
      This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
                   <table><thead><tr><th>StatusCode</th><th>Reason for exception</th></tr></thead><tbody><tr><td>400</td><td>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</td></tr><tr><td>403</td><td>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</td></tr><tr><td>409</td><td>Conflict - This means a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.ContainerProperties"></xref> with an id matching the id you supplied already existed.</td></tr></tbody></table>
    type: <xref href="Azure.Cosmos.CosmosException?alt=Azure.Cosmos.CosmosException&text=CosmosException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(Azure.Cosmos.ContainerProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  name: CreateContainerIfNotExistsAsync(ContainerProperties, Nullable<Int32>, RequestOptions, CancellationToken)
  fullName: Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(ContainerProperties, Nullable<Int32>, RequestOptions, CancellationToken)
  nameWithType: CosmosDatabase.CreateContainerIfNotExistsAsync(ContainerProperties, Nullable<Int32>, RequestOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public abstract System.Threading.Tasks.Task<Azure.Cosmos.ContainerResponse> CreateContainerIfNotExistsAsync (Azure.Cosmos.ContainerProperties containerProperties, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: 'abstract member CreateContainerIfNotExistsAsync : Azure.Cosmos.ContainerProperties * Nullable<int> * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Cosmos.ContainerResponse>'
  - lang: vb
    values:
    - value: Public MustOverride Function CreateContainerIfNotExistsAsync (containerProperties As ContainerProperties, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)
  monikers:
  - azure-dotnet-preview
  summary: >-
    <p>Check if a container exists, and if it doesn't, create it.
       Only the container id is used to verify if there is an existing container. Other container properties such as throughput are not validated and can be different then the passed properties.</p>
  remarks: <a href="https://docs.microsoft.com/azure/cosmos-db/request-units">https://docs.microsoft.com/azure/cosmos-db/request-units</a> for details on provision throughput.
  examples: >-
    ```csharp

    ContainerProperties containerProperties = new ContainerProperties()

    {
        Id = Guid.NewGuid().ToString(),
        PartitionKeyPath = "/pk",
        IndexingPolicy = new IndexingPolicy()
       {
            Automatic = false,
            IndexingMode = IndexingMode.Lazy,
       };
    };


    ContainerResponse response = await this.cosmosDatabase.CreateContainerIfNotExistsAsync(containerProperties);

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Cosmos.ContainerResponse?alt=Azure.Cosmos.ContainerResponse&text=ContainerResponse" data-throw-if-not-resolved="True"/>&gt;
    description: A <xref data-throw-if-not-resolved="true" uid="System.Threading.Tasks.Task"></xref> containing a <xref data-throw-if-not-resolved="true" uid="Azure.Response"></xref> which wraps a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.ContainerProperties"></xref> containing the read resource record.
  parameters:
  - namesWithMoniker:
    - value: id
    description: The cosmos container id
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: partitionKeyPath
    description: 'The path to the partition key. Example: /location'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: throughput
    description: (Optional) The throughput provisioned for a container in measurement of Request Units per second in the Azure Cosmos DB service.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: requestOptions
    description: (Optional) The options for the container request <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.RequestOptions"></xref>
    type: <xref href="Azure.Cosmos.RequestOptions?alt=Azure.Cosmos.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: (Optional) <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> representing request cancellation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: If <code data-dev-comment-type="paramref">id</code> is not set.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s).
    type: <xref href="System.AggregateException" data-throw-if-not-resolved="True"/>
  - description: >-
      This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a container are:
                   <table><thead><tr><th>StatusCode</th><th>Reason for exception</th></tr></thead><tbody><tr><td>400</td><td>BadRequest - This means something was wrong with the request supplied. It is likely that an id was not supplied for the new container.</td></tr><tr><td>403</td><td>Forbidden - This means you attempted to exceed your quota for containers. Contact support to have this quota increased.</td></tr><tr><td>409</td><td>Conflict - This means a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.ContainerProperties"></xref> with an id matching the id you supplied already existed.</td></tr></tbody></table>
    type: <xref href="Azure.Cosmos.CosmosException?alt=Azure.Cosmos.CosmosException&text=CosmosException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(System.String,System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(System.String,System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  name: CreateContainerIfNotExistsAsync(String, String, Nullable<Int32>, RequestOptions, CancellationToken)
  fullName: Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync(String, String, Nullable<Int32>, RequestOptions, CancellationToken)
  nameWithType: CosmosDatabase.CreateContainerIfNotExistsAsync(String, String, Nullable<Int32>, RequestOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public abstract System.Threading.Tasks.Task<Azure.Cosmos.ContainerResponse> CreateContainerIfNotExistsAsync (string id, string partitionKeyPath, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: 'abstract member CreateContainerIfNotExistsAsync : string * string * Nullable<int> * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Cosmos.ContainerResponse>'
  - lang: vb
    values:
    - value: Public MustOverride Function CreateContainerIfNotExistsAsync (id As String, partitionKeyPath As String, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ContainerResponse)
  monikers:
  - azure-dotnet-preview
  summary: >-
    Check if a container exists, and if it doesn't, create it.

    This will make a read operation, and if the container is not found it will do a create operation.
  remarks: <a href="https://docs.microsoft.com/azure/cosmos-db/request-units">https://docs.microsoft.com/azure/cosmos-db/request-units</a> for details on provision throughput.
  examples: >-
    ```csharp

    ContainerResponse response = await this.cosmosDatabase.CreateContainerIfNotExistsAsync(Guid.NewGuid().ToString(), "/pk");

    ```
  metadata: {}
uid: Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync*
commentId: Overload:Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync
namespace: Azure.Cosmos
name: CreateContainerIfNotExistsAsync
fullName: Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync
nameWithType: CosmosDatabase.CreateContainerIfNotExistsAsync
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.CosmosDatabase.CreateContainerIfNotExistsAsync
  - Azure::Cosmos::CosmosDatabase::CreateContainerIfNotExistsAsync
  - CreateContainerIfNotExistsAsync
  - CosmosDatabase.CreateContainerIfNotExistsAsync
  - CosmosDatabase::CreateContainerIfNotExistsAsync
  helpviewer_keywords:
  - CosmosDatabase.CreateContainerIfNotExistsAsync method [.NET]
  - CreateContainerIfNotExistsAsync method [.NET], class CosmosDatabase
  - CosmosDatabase.CreateContainerIfNotExistsAsync(ContainerProperties, Nullable<Int32>, RequestOptions, CancellationToken) method [.NET]
  - CreateContainerIfNotExistsAsync(ContainerProperties, Nullable<Int32>, RequestOptions, CancellationToken) method [.NET], class CosmosDatabase
  - CosmosDatabase.CreateContainerIfNotExistsAsync(String, String, Nullable<Int32>, RequestOptions, CancellationToken) method [.NET]
  - CreateContainerIfNotExistsAsync(String, String, Nullable<Int32>, RequestOptions, CancellationToken) method [.NET], class CosmosDatabase
  monikers:
  - azure-dotnet-preview
