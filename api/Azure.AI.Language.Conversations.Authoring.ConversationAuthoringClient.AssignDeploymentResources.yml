### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation"></xref> representing an asynchronous operation on the service.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  name: AssignDeploymentResources(WaitUntil, String, RequestContent, RequestContext)
  fullName: Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources(WaitUntil, String, RequestContent, RequestContext)
  nameWithType: ConversationAuthoringClient.AssignDeploymentResources(WaitUntil, String, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation AssignDeploymentResources (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member AssignDeploymentResources : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation

        override this.AssignDeploymentResources : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation
  - lang: vb
    values:
    - value: Public Overridable Function AssignDeploymentResources (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation
  monikers:
  - azure-dotnet-preview
  summary: 'Assign new Azure resources to a project to allow deploying new deployments to them. This API is available only via AAD authentication and not supported via subscription key authentication. For more details about AAD authentication, check here: https://learn.microsoft.com/en-us/azure/cognitive-services/authentication?tabs=powershell#authenticate-with-azure-active-directory.'
  remarks: >-
    <p>Below is the JSON schema for the request payload. Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/language/2022-10-01-preview/conversational-analysis-authoring/assign-deployment-resources</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">AssignDeploymentResourcesOptions</code>: 


    ```

    {
      resourcesMetadata: [
        {
          azureResourceId: string, # Required. Represents the Azure resource ID.
          customDomain: string, # Required. Represents the Azure resource custom domain.
          region: string, # Required. Represents the Azure resource region.
        }
      ], # Required. Represents the metadata for the resources to be assigned.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call AssignDeploymentResources with required parameters and request content.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ConversationAuthoringClient(endpoint, credential);


    var data = new {
        resourcesMetadata = new[] {
            new {
                azureResourceId = "<azureResourceId>",
                customDomain = "<customDomain>",
                region = "<region>",
            }
        },
    };


    var operation = client.AssignDeploymentResources(WaitUntil.Completed, "<projectName>", RequestContent.Create(data));


    var response = operation.WaitForCompletionResponse();

    Console.WriteLine(response.Status)

    ```
  metadata: {}
uid: Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources*
commentId: Overload:Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources
namespace: Azure.AI.Language.Conversations.Authoring
name: AssignDeploymentResources
fullName: Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources
nameWithType: ConversationAuthoringClient.AssignDeploymentResources
assembliesWithMoniker:
- value: Azure.AI.Language.Conversations.dll
packagesWithMoniker:
- value: Azure.AI.Language.Conversations v1.1.0-beta.2
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources
  api_location:
  - Azure.AI.Language.Conversations.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.Conversations.Authoring.ConversationAuthoringClient.AssignDeploymentResources
  - Azure::AI::Language::Conversations::Authoring::ConversationAuthoringClient::AssignDeploymentResources
  - AssignDeploymentResources
  - ConversationAuthoringClient.AssignDeploymentResources
  - ConversationAuthoringClient::AssignDeploymentResources
  helpviewer_keywords:
  - ConversationAuthoringClient.AssignDeploymentResources method [.NET]
  - AssignDeploymentResources method [.NET], class ConversationAuthoringClient
  - ConversationAuthoringClient.AssignDeploymentResources(WaitUntil, String, RequestContent, RequestContext) method [.NET]
  - AssignDeploymentResources(WaitUntil, String, RequestContent, RequestContext) method [.NET], class ConversationAuthoringClient
  monikers:
  - azure-dotnet-preview
