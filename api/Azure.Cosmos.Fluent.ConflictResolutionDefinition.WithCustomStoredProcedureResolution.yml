### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Cosmos.Fluent.ConflictResolutionDefinition?alt=Azure.Cosmos.Fluent.ConflictResolutionDefinition&text=ConflictResolutionDefinition" data-throw-if-not-resolved="True"/>
    description: An instance of the current <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.Fluent.UniqueKeyDefinition"></xref>.
  parameters:
  - namesWithMoniker:
    - value: conflictResolutionProcedure
    description: Sets the stored procedure's name to be used for conflict-resolution.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution(System.String)
  commentId: M:Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution(System.String)
  name: WithCustomStoredProcedureResolution(String)
  fullName: Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution(String)
  nameWithType: ConflictResolutionDefinition.WithCustomStoredProcedureResolution(String)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public Azure.Cosmos.Fluent.ConflictResolutionDefinition WithCustomStoredProcedureResolution (string conflictResolutionProcedure);
  - lang: fsharp
    values:
    - value: 'member this.WithCustomStoredProcedureResolution : string -> Azure.Cosmos.Fluent.ConflictResolutionDefinition'
  - lang: vb
    values:
    - value: Public Function WithCustomStoredProcedureResolution (conflictResolutionProcedure As String) As ConflictResolutionDefinition
  monikers:
  - azure-dotnet-preview
  summary: Defines the stored procedure to be used as custom conflict resolution mode <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.ConflictResolutionPolicy"></xref>.
  remarks: The stored procedure can be created later on, but needs to honor the name specified here.
  examples: >-
    This example below creates a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosContainer"></xref> with a Conflict Resolution policy that uses a stored procedure to resolve conflicts:


    ```csharp

    await databaseForConflicts.DefineContainer("myContainer", "/id")
        .WithConflictResolution()
            .WithCustomStoredProcedureResolution("myStoredProcedure")
            .Attach()
        .CreateAsync();
    </example>

    ```
  metadata: {}
uid: Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution*
commentId: Overload:Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution
namespace: Azure.Cosmos.Fluent
name: WithCustomStoredProcedureResolution
fullName: Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution
nameWithType: ConflictResolutionDefinition.WithCustomStoredProcedureResolution
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.Fluent.ConflictResolutionDefinition.WithCustomStoredProcedureResolution
  - Azure::Cosmos::Fluent::ConflictResolutionDefinition::WithCustomStoredProcedureResolution
  - WithCustomStoredProcedureResolution
  - ConflictResolutionDefinition.WithCustomStoredProcedureResolution
  - ConflictResolutionDefinition::WithCustomStoredProcedureResolution
  helpviewer_keywords:
  - ConflictResolutionDefinition.WithCustomStoredProcedureResolution method [.NET]
  - WithCustomStoredProcedureResolution method [.NET], class ConflictResolutionDefinition
  - ConflictResolutionDefinition.WithCustomStoredProcedureResolution(String) method [.NET]
  - WithCustomStoredProcedureResolution(String) method [.NET], class ConflictResolutionDefinition
  monikers:
  - azure-dotnet-preview
