### YamlMime:NetMember
type: method
members:
- parameters:
  - namesWithMoniker:
    - value: classifier
    description: The custom classifier.
    type: <xref href="Azure.Core.ResponseClassificationHandler?alt=Azure.Core.ResponseClassificationHandler&text=ResponseClassificationHandler" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      If this method is called after the <xref data-throw-if-not-resolved="true" uid="Azure.RequestContext"></xref> has been
                  used in a method call.
    type: <xref href="System.InvalidOperationException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.RequestContext.AddClassifier(Azure.Core.ResponseClassificationHandler)
  commentId: M:Azure.RequestContext.AddClassifier(Azure.Core.ResponseClassificationHandler)
  name: AddClassifier(ResponseClassificationHandler)
  fullName: Azure.RequestContext.AddClassifier(ResponseClassificationHandler)
  nameWithType: RequestContext.AddClassifier(ResponseClassificationHandler)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public void AddClassifier (Azure.Core.ResponseClassificationHandler classifier);
  - lang: fsharp
    values:
    - value: 'member this.AddClassifier : Azure.Core.ResponseClassificationHandler -> unit'
  - lang: vb
    values:
    - value: Public Sub AddClassifier (classifier As ResponseClassificationHandler)
  monikers:
  - azure-dotnet
  summary: >-
    Customizes the <xref data-throw-if-not-resolved="true" uid="Azure.Core.ResponseClassifier"></xref> for this operation.

    Adding a <xref data-throw-if-not-resolved="true" uid="Azure.Core.ResponseClassificationHandler"></xref> changes the classification

    behavior so that it first tries to classify a response via the handler, and if

    the handler doesn't have an opinion, it instead uses the default classifier.

    Handlers are applied in order so the most recently added takes precedence.

    This is useful for cases where you'd like to prevent specific response status codes from being treated as errors by

    logging and distributed tracing policies -- that is, if a response is not classified as an error, it will not appear as an error in

    logs or distributed traces.
  metadata: {}
- parameters:
  - namesWithMoniker:
    - value: statusCode
    description: The status code to customize classification for.
    type: <xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: isError
    description: Whether the passed-in status code should be classified as an error.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: statusCode is not between 100 and 599 (inclusive).
    type: <xref href="System.ArgumentOutOfRangeException" data-throw-if-not-resolved="True"/>
  - description: >-
      If this method is called after the <xref data-throw-if-not-resolved="true" uid="Azure.RequestContext"></xref> has been
                  used in a method call.
    type: <xref href="System.InvalidOperationException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.RequestContext.AddClassifier(System.Int32,System.Boolean)
  commentId: M:Azure.RequestContext.AddClassifier(System.Int32,System.Boolean)
  name: AddClassifier(Int32, Boolean)
  fullName: Azure.RequestContext.AddClassifier(Int32, Boolean)
  nameWithType: RequestContext.AddClassifier(Int32, Boolean)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public void AddClassifier (int statusCode, bool isError);
  - lang: fsharp
    values:
    - value: 'member this.AddClassifier : int * bool -> unit'
  - lang: vb
    values:
    - value: Public Sub AddClassifier (statusCode As Integer, isError As Boolean)
  monikers:
  - azure-dotnet
  summary: >-
    Customizes the <xref data-throw-if-not-resolved="true" uid="Azure.Core.ResponseClassifier"></xref> for this operation to change

    the default <xref data-throw-if-not-resolved="true" uid="Azure.Response"></xref> classification behavior so that it considers

    the passed-in status code to be an error or not, as specified.

    Status code classifiers are applied after all <xref data-throw-if-not-resolved="true" uid="Azure.Core.ResponseClassificationHandler"></xref> classifiers.

    This is useful for cases where you'd like to prevent specific response status codes from being treated as errors by

    logging and distributed tracing policies -- that is, if a response is not classified as an error, it will not appear as an error in

    logs or distributed traces.
  metadata: {}
uid: Azure.RequestContext.AddClassifier*
commentId: Overload:Azure.RequestContext.AddClassifier
namespace: Azure
name: AddClassifier
fullName: Azure.RequestContext.AddClassifier
nameWithType: RequestContext.AddClassifier
assembliesWithMoniker:
- value: Azure.Core.dll
packagesWithMoniker:
- value: Azure.Core v1.34.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.RequestContext.AddClassifier
  api_location:
  - Azure.Core.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.RequestContext.AddClassifier
  - Azure::RequestContext::AddClassifier
  - AddClassifier
  - RequestContext.AddClassifier
  - RequestContext::AddClassifier
  helpviewer_keywords:
  - RequestContext.AddClassifier method [.NET]
  - AddClassifier method [.NET], class RequestContext
  - RequestContext.AddClassifier(ResponseClassificationHandler) method [.NET]
  - AddClassifier(ResponseClassificationHandler) method [.NET], class RequestContext
  - RequestContext.AddClassifier(Int32, Boolean) method [.NET]
  - AddClassifier(Int32, Boolean) method [.NET], class RequestContext
  monikers:
  - azure-dotnet
