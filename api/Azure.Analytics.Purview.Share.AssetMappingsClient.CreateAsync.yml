### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation`1"></xref> from the service that will contain a <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: receivedShareName
    description: The name of the received share.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: assetMappingName
    description: The name of the asset mapping.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">receivedShareName</code>, <code data-dev-comment-type="paramref">assetMappingName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">receivedShareName</code> or <code data-dev-comment-type="paramref">assetMappingName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync(Azure.WaitUntil,System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  name: CreateAsync(WaitUntil, String, String, RequestContent, RequestContext)
  fullName: Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync(WaitUntil, String, String, RequestContent, RequestContext)
  nameWithType: AssetMappingsClient.CreateAsync(WaitUntil, String, String, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Operation<BinaryData>> CreateAsync (Azure.WaitUntil waitUntil, string receivedShareName, string assetMappingName, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>

        override this.CreateAsync : Azure.WaitUntil * string * string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>
  - lang: vb
    values:
    - value: Public Overridable Function CreateAsync (waitUntil As WaitUntil, receivedShareName As String, assetMappingName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))
  monikers:
  - azure-dotnet-preview
  summary: Maps a source asset in the sent share to a destination asset in the received share.
  remarks: >-
    <p>Create an asset mapping on a received share</p><p>Below is the JSON schema for the request and response payloads.</p><p>Request Body:</p><p>This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this. <details><summary>AdlsGen2AccountAssetMapping</summary>Schema for <code data-dev-comment-type="c">AdlsGen2AccountAssetMapping</code>: 


    ```

    {
                  kind: AdlsGen2Account, # Required. Types of asset mapping.
                  id: string, # Optional. The resource id of the resource.
                  name: string, # Optional. Name of the resource.
                  type: string, # Optional. Type of the resource.
                  properties: {
                    assetId: AdlsGen2AccountAssetMappingPropertiesAssetId, # Required. The id of the sender asset.
                    assetMappingStatus: "Ok" | "Broken", # Optional. State of asset mapping
                    containerName: string, # Required. Name of the container to received the shared paths.
                    folder: string, # Required. Folder under which the shared paths will be reflected.
                    location: string, # Optional. Location of the receiver storage account.
                    mountPath: string, # Optional. Optional mount path for the shared paths.
                    provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                    storageAccountResourceId: string, # Required. Resource id of the receiver storage account.
                  }, # Required. Properties of the adls gen2 storage account asset mapping.
                }
    ```

     </details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAssetMapping</summary>Schema for <code data-dev-comment-type="c">BlobAccountAssetMapping</code>: 


    ```

    {
                  kind: BlobAccount, # Required. Types of asset mapping.
                  id: string, # Optional. The resource id of the resource.
                  name: string, # Optional. Name of the resource.
                  type: string, # Optional. Type of the resource.
                  properties: {
                    assetId: BlobAccountAssetMappingPropertiesAssetId, # Required. The id of the sender asset.
                    assetMappingStatus: "Ok" | "Broken", # Optional. State of asset mapping
                    containerName: string, # Required. Name of the container to received the shared paths.
                    folder: string, # Required. Folder under which the shared paths will be reflected.
                    location: string, # Optional. Location of the receiver storage account.
                    mountPath: string, # Optional. Optional mount path for the shared paths.
                    provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                    storageAccountResourceId: string, # Required. Resource id of the receiver storage account.
                  }, # Required. Properties of the blob storage account asset mapping.
                }
    ```

     </details></details></p><p>Response Body:</p><p>This method takes one of the JSON objects below as a payload. Please select a JSON object to view the schema for this. <details><summary>AdlsGen2AccountAssetMapping</summary>Schema for <code data-dev-comment-type="c">AdlsGen2AccountAssetMapping</code>: 


    ```

    {
                  kind: AdlsGen2Account, # Required. Types of asset mapping.
                  id: string, # Optional. The resource id of the resource.
                  name: string, # Optional. Name of the resource.
                  type: string, # Optional. Type of the resource.
                  properties: {
                    assetId: AdlsGen2AccountAssetMappingPropertiesAssetId, # Required. The id of the sender asset.
                    assetMappingStatus: "Ok" | "Broken", # Optional. State of asset mapping
                    containerName: string, # Required. Name of the container to received the shared paths.
                    folder: string, # Required. Folder under which the shared paths will be reflected.
                    location: string, # Optional. Location of the receiver storage account.
                    mountPath: string, # Optional. Optional mount path for the shared paths.
                    provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                    storageAccountResourceId: string, # Required. Resource id of the receiver storage account.
                  }, # Required. Properties of the adls gen2 storage account asset mapping.
                }
    ```

     </details><details><summary>~+ 1 more JSON objects</summary><details><summary>BlobAccountAssetMapping</summary>Schema for <code data-dev-comment-type="c">BlobAccountAssetMapping</code>: 


    ```

    {
                  kind: BlobAccount, # Required. Types of asset mapping.
                  id: string, # Optional. The resource id of the resource.
                  name: string, # Optional. Name of the resource.
                  type: string, # Optional. Type of the resource.
                  properties: {
                    assetId: BlobAccountAssetMappingPropertiesAssetId, # Required. The id of the sender asset.
                    assetMappingStatus: "Ok" | "Broken", # Optional. State of asset mapping
                    containerName: string, # Required. Name of the container to received the shared paths.
                    folder: string, # Required. Folder under which the shared paths will be reflected.
                    location: string, # Optional. Location of the receiver storage account.
                    mountPath: string, # Optional. Optional mount path for the shared paths.
                    provisioningState: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed" | "SoftDeleting" | "SoftDeleted" | "SourceMoved" | "SourceDeleted" | "TargetMoved" | "TargetDeleted", # Optional. Provisioning status of the resource
                    storageAccountResourceId: string, # Required. Resource id of the receiver storage account.
                  }, # Required. Properties of the blob storage account asset mapping.
                }
    ```

     </details></details></p>
  examples: >-
    This sample shows how to call CreateAsync with required parameters and request content, and how to parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);


    var data = new {
        kind = "AdlsGen2Account",
        properties = new {
            assetId = "<73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a>",
            containerName = "<AdlsGen2AccountAssetMappingPropertiesContainerName>",
            folder = "<AdlsGen2AccountAssetMappingPropertiesFolder>",
            storageAccountResourceId = "<AdlsGen2AccountAssetMappingPropertiesStorageAccountResourceId>",
        },
    };


    var operation = await client.CreateAsync(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>", RequestContent.Create(data));


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.ToString());

    ```

    This sample shows how to call CreateAsync with all parameters and request content, and how to parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var client = new AssetMappingsClient("<https://my-service.azure.com>", credential);


    var data = new {
        kind = "AdlsGen2Account",
        properties = new {
            assetId = "<73f411fe-4f43-4b4b-9cbd-6828d8f4cf9a>",
            containerName = "<AdlsGen2AccountAssetMappingPropertiesContainerName>",
            folder = "<AdlsGen2AccountAssetMappingPropertiesFolder>",
            mountPath = "<AdlsGen2AccountAssetMappingPropertiesMountPath>",
            storageAccountResourceId = "<AdlsGen2AccountAssetMappingPropertiesStorageAccountResourceId>",
        },
    };


    var operation = await client.CreateAsync(WaitUntil.Completed, "<receivedShareName>", "<assetMappingName>", RequestContent.Create(data));


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("id").ToString());

    Console.WriteLine(result.GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("type").ToString());

    Console.WriteLine(result.GetProperty("kind").ToString());

    ```
  metadata: {}
uid: Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync*
commentId: Overload:Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync
namespace: Azure.Analytics.Purview.Share
name: CreateAsync
fullName: Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync
nameWithType: AssetMappingsClient.CreateAsync
assembliesWithMoniker:
- value: Azure.Analytics.Purview.Share.dll
packagesWithMoniker:
- value: Azure.Analytics.Purview.Share v1.0.3-beta.20
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync
  api_location:
  - Azure.Analytics.Purview.Share.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Analytics.Purview.Share.AssetMappingsClient.CreateAsync
  - Azure::Analytics::Purview::Share::AssetMappingsClient::CreateAsync
  - CreateAsync
  - AssetMappingsClient.CreateAsync
  - AssetMappingsClient::CreateAsync
  helpviewer_keywords:
  - AssetMappingsClient.CreateAsync method [.NET]
  - CreateAsync method [.NET], class AssetMappingsClient
  - AssetMappingsClient.CreateAsync(WaitUntil, String, String, RequestContent, RequestContext) method [.NET]
  - CreateAsync(WaitUntil, String, String, RequestContent, RequestContext) method [.NET], class AssetMappingsClient
  monikers:
  - azure-dotnet-preview
