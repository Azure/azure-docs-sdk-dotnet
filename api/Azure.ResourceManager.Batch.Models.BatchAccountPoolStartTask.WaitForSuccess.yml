### YamlMime:NetMember
type: property
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  type: property
  uid: Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
  commentId: P:Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
  name: WaitForSuccess
  fullName: Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
  nameWithType: BatchAccountPoolStartTask.WaitForSuccess
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public bool? WaitForSuccess { get; set; }
  - lang: fsharp
    values:
    - value: 'member this.WaitForSuccess : Nullable<bool> with get, set'
  - lang: vb
    values:
    - value: Public Property WaitForSuccess As Nullable(Of Boolean)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true.
  metadata: {}
uid: Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess*
commentId: Overload:Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
namespace: Azure.ResourceManager.Batch.Models
name: WaitForSuccess
fullName: Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
nameWithType: BatchAccountPoolStartTask.WaitForSuccess
assembliesWithMoniker:
- value: Azure.ResourceManager.Batch.dll
packagesWithMoniker:
- value: Azure.ResourceManager.Batch v1.2.0
  monikers:
  - azure-dotnet
- value: Azure.ResourceManager.Batch v1.2.0-beta.1
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
  - Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.get_WaitForSuccess
  - Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.set_WaitForSuccess
  api_location:
  - Azure.ResourceManager.Batch.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.ResourceManager.Batch.Models.BatchAccountPoolStartTask.WaitForSuccess
  - Azure::ResourceManager::Batch::Models::BatchAccountPoolStartTask::WaitForSuccess
  - WaitForSuccess
  - BatchAccountPoolStartTask.WaitForSuccess
  - BatchAccountPoolStartTask::WaitForSuccess
  helpviewer_keywords:
  - BatchAccountPoolStartTask.WaitForSuccess property [.NET]
  - WaitForSuccess property [.NET], class BatchAccountPoolStartTask
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
