### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.AnomalyDetector.MultivariateDetectionResult?alt=Azure.AI.AnomalyDetector.MultivariateDetectionResult&text=MultivariateDetectionResult" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: modelId
    description: Model identifier.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: options
    description: Request of multivariate anomaly detection.
    type: <xref href="Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions?alt=Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions&text=MultivariateBatchDetectionOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">modelId</code> or <code data-dev-comment-type="paramref">options</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">modelId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(System.String,Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions,System.Threading.CancellationToken)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(System.String,Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions,System.Threading.CancellationToken)
  name: DetectMultivariateBatchAnomalyAsync(String, MultivariateBatchDetectionOptions, CancellationToken)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(String, MultivariateBatchDetectionOptions, CancellationToken)
  nameWithType: AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(String, MultivariateBatchDetectionOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.MultivariateDetectionResult>> DetectMultivariateBatchAnomalyAsync (string modelId, Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions options, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member DetectMultivariateBatchAnomalyAsync : string * Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.MultivariateDetectionResult>>

        override this.DetectMultivariateBatchAnomalyAsync : string * Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.MultivariateDetectionResult>>
  - lang: vb
    values:
    - value: Public Overridable Function DetectMultivariateBatchAnomalyAsync (modelId As String, options As MultivariateBatchDetectionOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of MultivariateDetectionResult))
  monikers:
  - azure-dotnet-preview
  summary: Detect Multivariate Anomaly.
  remarks: <p>Submit a multivariate anomaly detection task with the modelId value of a trained model and inference data. The input schema should be the same with the training request. The request will finish asynchronously and return a resultId value to query the detection result. The request should be a source link to indicate an externally accessible Azure Storage URI that either points to an Azure Blob Storage folder or points to a CSV file in Azure Blob Storage.</p>
  examples: >-
    This sample shows how to call DetectMultivariateBatchAnomalyAsync with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var options = new MultivariateBatchDetectionOptions("<dataSource>", 1234, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow);

    var result = await client.DetectMultivariateBatchAnomalyAsync("<modelId>", options);

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: modelId
    description: Model identifier.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">modelId</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">modelId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)
  name: DetectMultivariateBatchAnomalyAsync(String, RequestContent, RequestContext)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(String, RequestContent, RequestContext)
  nameWithType: AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(String, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> DetectMultivariateBatchAnomalyAsync (string modelId, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member DetectMultivariateBatchAnomalyAsync : string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.DetectMultivariateBatchAnomalyAsync : string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function DetectMultivariateBatchAnomalyAsync (modelId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Detect Multivariate Anomaly

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li><li>

    Please try the simpler <xref data-throw-if-not-resolved="true" uid="Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(System.String,Azure.AI.AnomalyDetector.MultivariateBatchDetectionOptions,System.Threading.CancellationToken)"></xref> convenience overload with strongly typed models first.

    </li></ul>
  remarks: >-
    <p>Submit multivariate anomaly detection task with the modelId of trained model and inference data, the input schema should be the same with the training request. The request will complete asynchronously and return a resultId to query the detection result.The request should be a source link to indicate an externally accessible Azure storage Uri, either pointed to an Azure blob storage folder, or pointed to a CSV file in Azure blob storage.</p><p>Below is the JSON schema for the request and response payloads.</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">MultivariateBatchDetectionOptions</code>: 


    ```

    {
      dataSource: string, # Required.
      topContributorCount: number, # Required.
      startTime: string (date & time), # Required.
      endTime: string (date & time), # Required.
    }

    ```

    </p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">MultivariateDetectionResult</code>: 


    ```

    {
      resultId: string, # Required.
      summary: {
        status: "CREATED" | "RUNNING" | "READY" | "FAILED", # Required.
        errors: [ErrorResponse], # Optional.
        variableStates: [VariableState], # Optional.
        setupInfo: {
          dataSource: string, # Required.
          topContributorCount: number, # Required.
          startTime: string (date & time), # Required.
          endTime: string (date & time), # Required.
        }, # Required.
      }, # Required.
      results: [
        {
          timestamp: string (date & time), # Required.
          value: {
            isAnomaly: boolean, # Required.
            severity: number, # Required.
            score: number, # Required.
            interpretation: [AnomalyInterpretation], # Optional.
          }, # Optional.
          errors: [ErrorResponse], # Optional.
        }
      ], # Required.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call DetectMultivariateBatchAnomalyAsync with required parameters and request content and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var data = new {
        dataSource = "<dataSource>",
        topContributorCount = 1234,
        startTime = "2022-05-10T14:57:31.2311892-04:00",
        endTime = "2022-05-10T14:57:31.2311892-04:00",
    };


    Response response = await client.DetectMultivariateBatchAnomalyAsync("<modelId>", RequestContent.Create(data), new RequestContext());


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("resultId").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("status").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("errors")[0].GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("variable").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("dataSource").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("topContributorCount").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("startTime").ToString());

    Console.WriteLine(result.GetProperty("summary").GetProperty("setupInfo").GetProperty("endTime").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("timestamp").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("isAnomaly").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("score").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("variable").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("contributionScore").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").GetProperty("interpretation")[0].GetProperty("correlationChanges").GetProperty("changedVariables")[0].ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("results")[0].GetProperty("errors")[0].GetProperty("message").ToString());

    ```
  metadata: {}
uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync*
commentId: Overload:Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync
namespace: Azure.AI.AnomalyDetector
name: DetectMultivariateBatchAnomalyAsync
fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync
nameWithType: AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync
assembliesWithMoniker:
- value: Azure.AI.AnomalyDetector.dll
packagesWithMoniker:
- value: Azure.AI.AnomalyDetector v3.0.0-preview.7
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync
  api_location:
  - Azure.AI.AnomalyDetector.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync
  - Azure::AI::AnomalyDetector::AnomalyDetectorClient::DetectMultivariateBatchAnomalyAsync
  - DetectMultivariateBatchAnomalyAsync
  - AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync
  - AnomalyDetectorClient::DetectMultivariateBatchAnomalyAsync
  helpviewer_keywords:
  - AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync method [.NET]
  - DetectMultivariateBatchAnomalyAsync method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(String, MultivariateBatchDetectionOptions, CancellationToken) method [.NET]
  - DetectMultivariateBatchAnomalyAsync(String, MultivariateBatchDetectionOptions, CancellationToken) method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.DetectMultivariateBatchAnomalyAsync(String, RequestContent, RequestContext) method [.NET]
  - DetectMultivariateBatchAnomalyAsync(String, RequestContent, RequestContext) method [.NET], class AnomalyDetectorClient
  monikers:
  - azure-dotnet-preview
