### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Cosmos.Scripts.StoredProcedureProperties?alt=Azure.Cosmos.Scripts.StoredProcedureProperties&text=StoredProcedureProperties" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.Scripts.StoredProcedureProperties"></xref> that was created contained within a <xref data-throw-if-not-resolved="true" uid="System.Threading.Tasks.Task"></xref> object representing the service response for the asynchronous operation.
  parameters:
  - namesWithMoniker:
    - value: storedProcedureProperties
    description: The Stored Procedure to create
    type: <xref href="Azure.Cosmos.Scripts.StoredProcedureProperties?alt=Azure.Cosmos.Scripts.StoredProcedureProperties&text=StoredProcedureProperties" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: requestOptions
    description: (Optional) The options for the stored procedure request <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.RequestOptions"></xref>
    type: <xref href="Azure.Cosmos.RequestOptions?alt=Azure.Cosmos.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: (Optional) <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> representing request cancellation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: If <code data-dev-comment-type="paramref">storedProcedureProperties</code> is not set.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)
    type: <xref href="System.AggregateException" data-throw-if-not-resolved="True"/>
  - description: >-
      This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
                   <table><thead><tr><th>StatusCode</th><th>Reason for exception</th></tr></thead><tbody><tr><td>400</td><td>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</td></tr><tr><td>403</td><td>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</td></tr><tr><td>409</td><td>Conflict - This means a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.Scripts.StoredProcedureProperties"></xref> with an id matching the id you supplied already existed.</td></tr><tr><td>413</td><td>RequestEntityTooLarge - This means the body of the <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.Scripts.StoredProcedureProperties"></xref> you tried to create was too large.</td></tr></tbody></table>
    type: <xref href="Azure.Cosmos.CosmosException?alt=Azure.Cosmos.CosmosException&text=CosmosException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync(Azure.Cosmos.Scripts.StoredProcedureProperties,Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync(Azure.Cosmos.Scripts.StoredProcedureProperties,Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  name: CreateStoredProcedureAsync(StoredProcedureProperties, RequestOptions, CancellationToken)
  fullName: Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync(StoredProcedureProperties, RequestOptions, CancellationToken)
  nameWithType: CosmosScripts.CreateStoredProcedureAsync(StoredProcedureProperties, RequestOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public abstract System.Threading.Tasks.Task<Azure.Response<Azure.Cosmos.Scripts.StoredProcedureProperties>> CreateStoredProcedureAsync (Azure.Cosmos.Scripts.StoredProcedureProperties storedProcedureProperties, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: 'abstract member CreateStoredProcedureAsync : Azure.Cosmos.Scripts.StoredProcedureProperties * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Cosmos.Scripts.StoredProcedureProperties>>'
  - lang: vb
    values:
    - value: Public MustOverride Function CreateStoredProcedureAsync (storedProcedureProperties As StoredProcedureProperties, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of StoredProcedureProperties))
  monikers:
  - azure-dotnet-preview
  summary: Creates a stored procedure as an asynchronous operation in the Azure Cosmos DB service.
  examples: >2-
     This creates and executes a stored procedure that appends a string to the first item returned from the query.

    ```csharp

    string sprocBody = @"function simple(prefix)
       {
           var collection = getContext().getCollection();

           // Query documents and take 1st item.
           var isAccepted = collection.queryDocuments(
           collection.getSelfLink(),
           'SELECT * FROM root r',
           function(err, feed, options) {
               if (err)throw err;

               // Check the feed and if it's empty, set the body to 'no docs found',
               // Otherwise just take 1st element from the feed.
               if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
               else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
           });

           if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
       }";

    CosmosScripts scripts = this.container.Scripts;

    StoredProcedureProperties storedProcedure = new StoredProcedureProperties(id, sprocBody);

    Response<StoredProcedureProperties> storedProcedureResponse = await scripts.CreateStoredProcedureAsync(storedProcedure);


    // Execute the stored procedure

    CosmosItemResponse<string> sprocResponse = await scripts.ExecuteStoredProcedureAsync<string, string>(
                                  id, 
                                  "Item as a string: ", 
                                  new PartitionKey(testPartitionId));
    Console.WriteLine("sprocResponse.Resource");

    ```
  metadata: {}
uid: Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync*
commentId: Overload:Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync
namespace: Azure.Cosmos.Scripts
name: CreateStoredProcedureAsync
fullName: Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync
nameWithType: CosmosScripts.CreateStoredProcedureAsync
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.Scripts.CosmosScripts.CreateStoredProcedureAsync
  - Azure::Cosmos::Scripts::CosmosScripts::CreateStoredProcedureAsync
  - CreateStoredProcedureAsync
  - CosmosScripts.CreateStoredProcedureAsync
  - CosmosScripts::CreateStoredProcedureAsync
  helpviewer_keywords:
  - CosmosScripts.CreateStoredProcedureAsync method [.NET]
  - CreateStoredProcedureAsync method [.NET], class CosmosScripts
  - CosmosScripts.CreateStoredProcedureAsync(StoredProcedureProperties, RequestOptions, CancellationToken) method [.NET]
  - CreateStoredProcedureAsync(StoredProcedureProperties, RequestOptions, CancellationToken) method [.NET], class CosmosScripts
  monikers:
  - azure-dotnet-preview
