### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: repeatabilityRequestId
    description: If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration(Azure.Core.RequestContent,System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration(Azure.Core.RequestContent,System.String,Azure.RequestContext)
  name: ActivateTenantEmailRegistration(RequestContent, String, RequestContext)
  fullName: Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration(RequestContent, String, RequestContext)
  nameWithType: ReceivedSharesClient.ActivateTenantEmailRegistration(RequestContent, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Response ActivateTenantEmailRegistration (Azure.Core.RequestContent content, string repeatabilityRequestId = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ActivateTenantEmailRegistration : Azure.Core.RequestContent * string * Azure.RequestContext -> Azure.Response

        override this.ActivateTenantEmailRegistration : Azure.Core.RequestContent * string * Azure.RequestContext -> Azure.Response
  - lang: vb
    values:
    - value: Public Overridable Function ActivateTenantEmailRegistration (content As RequestContent, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Response
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Activates the tenant and email combination using the activation code received.

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li></ul>
  remarks: >-
    <p>Activates the email registration for current tenant</p><p>Below is the JSON schema for the request and response payloads.</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">TenantEmailRegistration</code>: 


    ```

    {
      properties: {
        activationCode: string, # Required. Activation code for the registration.
        activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
        email: string, # Optional. The email to register.
        registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
        state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
        tenantId: string, # Optional. The tenant id to register.
      }, # Optional. Tenant email registration property bag.
      id: string, # Optional. The unique id of the resource.
      type: string, # Optional. Type of the resource.
    }

    ```

    </p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">TenantEmailRegistration</code>: 


    ```

    {
      properties: {
        activationCode: string, # Required. Activation code for the registration.
        activationExpiration: string (ISO 8601 Format), # Optional. Date of the activation expiration. Represented in the standard date-time format as defined by [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339)
        email: string, # Optional. The email to register.
        registrationStatus: "ActivationPending" | "Activated" | "ActivationAttemptsExhausted", # Optional. Defines the supported types for registration.
        state: "Unknown" | "Succeeded" | "Creating" | "Deleting" | "Moving" | "Failed", # Optional. State of the resource
        tenantId: string, # Optional. The tenant id to register.
      }, # Optional. Tenant email registration property bag.
      id: string, # Optional. The unique id of the resource.
      type: string, # Optional. Type of the resource.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call ActivateTenantEmailRegistration with required parameters and parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ReceivedSharesClient(endpoint, credential);


    var data = new {};


    Response response = client.ActivateTenantEmailRegistration(RequestContent.Create(data));


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.ToString());

    ```

    This sample shows how to call ActivateTenantEmailRegistration with all parameters and request content, and how to parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ReceivedSharesClient(endpoint, credential);


    var data = new {
        properties = new {
            activationCode = "<activationCode>",
        },
    };


    Response response = client.ActivateTenantEmailRegistration(RequestContent.Create(data), "<repeatabilityRequestId>");


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("properties").GetProperty("activationCode").ToString());

    Console.WriteLine(result.GetProperty("properties").GetProperty("activationExpiration").ToString());

    Console.WriteLine(result.GetProperty("properties").GetProperty("email").ToString());

    Console.WriteLine(result.GetProperty("properties").GetProperty("registrationStatus").ToString());

    Console.WriteLine(result.GetProperty("properties").GetProperty("state").ToString());

    Console.WriteLine(result.GetProperty("properties").GetProperty("tenantId").ToString());

    Console.WriteLine(result.GetProperty("id").ToString());

    Console.WriteLine(result.GetProperty("type").ToString());

    ```
  metadata: {}
uid: Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration*
commentId: Overload:Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration
namespace: Azure.Analytics.Purview.Sharing
name: ActivateTenantEmailRegistration
fullName: Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration
nameWithType: ReceivedSharesClient.ActivateTenantEmailRegistration
assembliesWithMoniker:
- value: Azure.Analytics.Purview.Sharing.dll
packagesWithMoniker:
- value: Azure.Analytics.Purview.Sharing v1.0.0-beta.3
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration
  api_location:
  - Azure.Analytics.Purview.Sharing.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Analytics.Purview.Sharing.ReceivedSharesClient.ActivateTenantEmailRegistration
  - Azure::Analytics::Purview::Sharing::ReceivedSharesClient::ActivateTenantEmailRegistration
  - ActivateTenantEmailRegistration
  - ReceivedSharesClient.ActivateTenantEmailRegistration
  - ReceivedSharesClient::ActivateTenantEmailRegistration
  helpviewer_keywords:
  - ReceivedSharesClient.ActivateTenantEmailRegistration method [.NET]
  - ActivateTenantEmailRegistration method [.NET], class ReceivedSharesClient
  - ReceivedSharesClient.ActivateTenantEmailRegistration(RequestContent, String, RequestContext) method [.NET]
  - ActivateTenantEmailRegistration(RequestContent, String, RequestContext) method [.NET], class ReceivedSharesClient
  monikers:
  - azure-dotnet-preview
