### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.Core.RequestContent,Azure.RequestContext)
  name: AnalyzeImageAsync(RequestContent, RequestContext)
  fullName: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(RequestContent, RequestContext)
  nameWithType: ContentSafetyClient.AnalyzeImageAsync(RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> AnalyzeImageAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member AnalyzeImageAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.AnalyzeImageAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function AnalyzeImageAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Analyze Image

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li><li>

    Please try the simpler <xref data-throw-if-not-resolved="true" uid="Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)"></xref> convenience overload with strongly typed models first.

    </li></ul>
  examples: >-
    This sample shows how to call AnalyzeImageAsync with required request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ContentSafetyClient(endpoint, credential);


    var data = new {
        image = new {},
    };


    Response response = await client.AnalyzeImageAsync(RequestContent.Create(data));


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.ToString());

    ```

    This sample shows how to call AnalyzeImageAsync with all request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ContentSafetyClient(endpoint, credential);


    var data = new {
        image = new {
            content = new {},
            blobUrl = "http://localhost:3000",
        },
        categories = new[] {
            "Hate"
        },
    };


    Response response = await client.AnalyzeImageAsync(RequestContent.Create(data), new RequestContext());


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.ContentSafety.AnalyzeImageResult?alt=Azure.AI.ContentSafety.AnalyzeImageResult&text=AnalyzeImageResult" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: body
    description: The analysis request of the image.
    type: <xref href="Azure.AI.ContentSafety.AnalyzeImageOptions?alt=Azure.AI.ContentSafety.AnalyzeImageOptions&text=AnalyzeImageOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">body</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)
  commentId: M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(Azure.AI.ContentSafety.AnalyzeImageOptions,System.Threading.CancellationToken)
  name: AnalyzeImageAsync(AnalyzeImageOptions, CancellationToken)
  fullName: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync(AnalyzeImageOptions, CancellationToken)
  nameWithType: ContentSafetyClient.AnalyzeImageAsync(AnalyzeImageOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.AI.ContentSafety.AnalyzeImageResult>> AnalyzeImageAsync (Azure.AI.ContentSafety.AnalyzeImageOptions body, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member AnalyzeImageAsync : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.ContentSafety.AnalyzeImageResult>>

        override this.AnalyzeImageAsync : Azure.AI.ContentSafety.AnalyzeImageOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.ContentSafety.AnalyzeImageResult>>
  - lang: vb
    values:
    - value: Public Overridable Function AnalyzeImageAsync (body As AnalyzeImageOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeImageResult))
  monikers:
  - azure-dotnet-preview
  summary: Analyze Image.
  remarks: 'A sync API for harmful content analysis for image. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence.'
  examples: >-
    This sample shows how to call AnalyzeImageAsync with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ContentSafetyClient(endpoint, credential);


    var body = new AnalyzeImageOptions(new ImageData()

    {
        Content = BinaryData.FromString("<your binary data content>"),
        BlobUrl = new Uri("http://localhost:3000"),
    })

    {
        Categories = 
    {
            ImageCategory.Hate
        },
    };

    var result = await client.AnalyzeImageAsync(body);

    ```
  metadata: {}
uid: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync*
commentId: Overload:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync
namespace: Azure.AI.ContentSafety
name: AnalyzeImageAsync
fullName: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync
nameWithType: ContentSafetyClient.AnalyzeImageAsync
assembliesWithMoniker:
- value: Azure.AI.ContentSafety.dll
packagesWithMoniker:
- value: Azure.AI.ContentSafety v1.0.0-beta.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync
  api_location:
  - Azure.AI.ContentSafety.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeImageAsync
  - Azure::AI::ContentSafety::ContentSafetyClient::AnalyzeImageAsync
  - AnalyzeImageAsync
  - ContentSafetyClient.AnalyzeImageAsync
  - ContentSafetyClient::AnalyzeImageAsync
  helpviewer_keywords:
  - ContentSafetyClient.AnalyzeImageAsync method [.NET]
  - AnalyzeImageAsync method [.NET], class ContentSafetyClient
  - ContentSafetyClient.AnalyzeImageAsync(RequestContent, RequestContext) method [.NET]
  - AnalyzeImageAsync(RequestContent, RequestContext) method [.NET], class ContentSafetyClient
  - ContentSafetyClient.AnalyzeImageAsync(AnalyzeImageOptions, CancellationToken) method [.NET]
  - AnalyzeImageAsync(AnalyzeImageOptions, CancellationToken) method [.NET], class ContentSafetyClient
  monikers:
  - azure-dotnet-preview
