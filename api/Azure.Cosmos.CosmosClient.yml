### YamlMime:NetType
type: class
implementsWithMoniker:
- value: <xref href="System.IDisposable?alt=System.IDisposable&text=IDisposable" data-throw-if-not-resolved="True"/>
inheritancesWithMoniker:
- values:
  - <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>
constructors:
- uid: Azure.Cosmos.CosmosClient.#ctor
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.#ctor(System.String,Azure.Cosmos.CosmosClientOptions)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.#ctor(System.String,System.String,Azure.Cosmos.CosmosClientOptions)
  monikers:
  - azure-dotnet-preview
methods:
- uid: Azure.Cosmos.CosmosClient.CreateDatabaseAsync(System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync(System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.CreateDatabaseStreamAsync(Azure.Cosmos.DatabaseProperties,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.Dispose
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.Dispose(System.Boolean)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.GetContainer(System.String,System.String)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.GetDatabase(System.String)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.GetDatabaseQueryIterator``1(Azure.Cosmos.QueryDefinition,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.GetDatabaseQueryIterator``1(System.String,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.GetDatabaseQueryStreamIterator(Azure.Cosmos.QueryDefinition,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.GetDatabaseQueryStreamIterator(System.String,System.String,Azure.Cosmos.QueryRequestOptions,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.ReadAccountAsync
  monikers:
  - azure-dotnet-preview
properties:
- uid: Azure.Cosmos.CosmosClient.ClientOptions
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.CosmosClient.Endpoint
  monikers:
  - azure-dotnet-preview
uid: Azure.Cosmos.CosmosClient
commentId: T:Azure.Cosmos.CosmosClient
namespace: Azure.Cosmos
name: CosmosClient
fullName: Azure.Cosmos.CosmosClient
nameWithType: Azure.Cosmos.CosmosClient
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
syntaxWithMoniker:
- lang: csharp
  values:
  - value: 'public class CosmosClient : IDisposable'
- lang: fsharp
  values:
  - value: >-
      type CosmosClient = class
          interface IDisposable
- lang: vb
  values:
  - value: >-
      Public Class CosmosClient

      Implements IDisposable
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
summary: >-
  Provides a client-side logical representation of the Azure Cosmos DB account.

  This client can be used to configure and execute requests in the Azure Cosmos DB database service.


  CosmosClient is thread-safe. Its recommended to maintain a single instance of CosmosClient per lifetime 

  of the application which enables efficient connection management and performance. Please refer to 

  performance guide at <a href="https://docs.microsoft.com/azure/cosmos-db/performance-tips">https://docs.microsoft.com/azure/cosmos-db/performance-tips</a>.
remarks: <p><seealso cref="T:Azure.Cosmos.CosmosClientOptions"></seealso> <seealso cref="T:Azure.Cosmos.Fluent.CosmosClientBuilder"></seealso> <a href="https://docs.microsoft.com/azure/cosmos-db/performance-tips">https://docs.microsoft.com/azure/cosmos-db/performance-tips</a> <a href="https://docs.microsoft.com/azure/cosmos-db/troubleshoot-dot-net-sdk">https://docs.microsoft.com/azure/cosmos-db/troubleshoot-dot-net-sdk</a> <a href="https://docs.microsoft.com/azure/cosmos-db/distribute-data-globally">https://docs.microsoft.com/azure/cosmos-db/distribute-data-globally</a> <a href="https://docs.microsoft.com/azure/cosmos-db/partitioning-overview">https://docs.microsoft.com/azure/cosmos-db/partitioning-overview</a> <a href="https://docs.microsoft.com/azure/cosmos-db/request-units">https://docs.microsoft.com/azure/cosmos-db/request-units</a></p>
examples: >-
  This example create a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosClient"></xref>, <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosDatabase"></xref>, and a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosContainer"></xref>.

  The CosmosClient is created with the connection string and configured to use "East US 2" region.


  ```csharp

  using Azure.Cosmos;


  CosmosClient cosmosClient = new CosmosClient(
              "connection-string-from-portal", 
              new CosmosClientOptions()
              {
                  ApplicationRegion = Regions.EastUS2,
              });

  Database db = await client.CreateDatabaseAsync("database-id");

  Container container = await db.CreateContainerAsync("container-id");


  // Dispose cosmosClient at application exit

  ```


  This example create a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosClient"></xref>, <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosDatabase"></xref>, and a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosContainer"></xref>.

  The CosmosClient is created with the AccountEndpoint, AccountKey or ResourceToken and configured to use "East US 2" region.


  ```csharp

  using Azure.Cosmos;


  CosmosClient cosmosClient = new CosmosClient(
              "account-endpoint-from-portal", 
              "account-key-from-portal", 
              new CosmosClientOptions()
              {
                  ApplicationRegion = Regions.EastUS2,
              });

  Database db = await client.CreateDatabaseAsync("database-id");

  Container container = await db.CreateContainerAsync("container-id");


  // Dispose cosmosClient at application exit

  ```


  This example create a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosClient"></xref>, <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosDatabase"></xref>, and a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.CosmosContainer"></xref>.

  The CosmosClient is created through builder pattern <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.Fluent.CosmosClientBuilder"></xref>.


  ```csharp

  using Azure.Cosmos;

  using Azure.Cosmos.Fluent;


  CosmosClient cosmosClient = new CosmosClientBuilder("connection-string-from-portal")
      .WithApplicationRegion("East US 2")
      .Build();

  Database db = await client.CreateDatabaseAsync("database-id")

  Container container = await db.CreateContainerAsync("container-id");


  // Dispose cosmosClient at application exit

  ```
metadata:
  api_name:
  - Azure.Cosmos.CosmosClient
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.CosmosClient
  - Azure::Cosmos::CosmosClient
  - CosmosClient
  helpviewer_keywords:
  - Azure.Cosmos.CosmosClient class [.NET]
  monikers:
  - azure-dotnet-preview
