### YamlMime:NetMember
type: method
members:
- typeParameters:
  - description: A custom model type that implements <xref data-throw-if-not-resolved="true" uid="Azure.Data.Tables.ITableEntity"></xref> or an instance of <xref data-throw-if-not-resolved="true" uid="Azure.Data.Tables.TableEntity"></xref>.
    name: T
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.NullableResponse`1?alt=Azure.NullableResponse&text=NullableResponse" data-throw-if-not-resolved="True"/>&lt;T&gt;&gt;
      monikers:
      - azure-dotnet
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;T&gt;&gt;
      monikers:
      - azure-dotnet-preview
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.NullableResponse`1"></xref> whose <code data-dev-comment-type="c">HasValue</code> property will return <code data-dev-comment-type="c">true</code> if the entity existed, otherwise <code data-dev-comment-type="c">false</code>.
  parameters:
  - namesWithMoniker:
    - value: partitionKey
    description: The partitionKey that identifies the table entity.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: rowKey
    description: The rowKey that identifies the table entity.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: select
    description: Selects which set of entity properties to return in the result set. Pass <code data-dev-comment-type="c">null</code> to retreive all properties.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: cancellationToken
    description: A <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> controlling the request lifetime.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: Exception thrown if an unexpected error occurs.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">partitionKey</code> or <code data-dev-comment-type="paramref">rowKey</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Data.Tables.TableClient.GetEntityIfExistsAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  commentId: M:Azure.Data.Tables.TableClient.GetEntityIfExistsAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)
  name: GetEntityIfExistsAsync<T>(String, String, IEnumerable<String>, CancellationToken)
  fullName: Azure.Data.Tables.TableClient.GetEntityIfExistsAsync<T>(String, String, IEnumerable<String>, CancellationToken)
  nameWithType: TableClient.GetEntityIfExistsAsync<T>(String, String, IEnumerable<String>, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: 'public virtual System.Threading.Tasks.Task<Azure.NullableResponse<T>> GetEntityIfExistsAsync<T> (string partitionKey, string rowKey, System.Collections.Generic.IEnumerable<string> select = default, System.Threading.CancellationToken cancellationToken = default) where T : class, Azure.Data.Tables.ITableEntity;'
      monikers:
      - azure-dotnet
    - value: 'public virtual System.Threading.Tasks.Task<Azure.Response<T>> GetEntityIfExistsAsync<T> (string partitionKey, string rowKey, System.Collections.Generic.IEnumerable<string> select = default, System.Threading.CancellationToken cancellationToken = default) where T : class, Azure.Data.Tables.ITableEntity, new();'
      monikers:
      - azure-dotnet-preview
  - lang: fsharp
    values:
    - value: >-
        abstract member GetEntityIfExistsAsync : string * string * seq<string> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.NullableResponse<'T>> (requires 'T : null and 'T :> Azure.Data.Tables.ITableEntity)

        override this.GetEntityIfExistsAsync : string * string * seq<string> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.NullableResponse<'T>> (requires 'T : null and 'T :> Azure.Data.Tables.ITableEntity)
      monikers:
      - azure-dotnet
    - value: >-
        abstract member GetEntityIfExistsAsync : string * string * seq<string> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<'T>> (requires 'T : null and 'T :> Azure.Data.Tables.ITableEntity and 'T : (new : unit -> 'T))

        override this.GetEntityIfExistsAsync : string * string * seq<string> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<'T>> (requires 'T : null and 'T :> Azure.Data.Tables.ITableEntity and 'T : (new : unit -> 'T))
      monikers:
      - azure-dotnet-preview
  - lang: vb
    values:
    - value: Public Overridable Function GetEntityIfExistsAsync(Of T As {Class, ITableEntity}) (partitionKey As String, rowKey As String, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of NullableResponse(Of T))
      monikers:
      - azure-dotnet
    - value: Public Overridable Function GetEntityIfExistsAsync(Of T As {Class, ITableEntity, New}) (partitionKey As String, rowKey As String, Optional select As IEnumerable(Of String) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of T))
      monikers:
      - azure-dotnet-preview
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: Gets the specified table entity of type <code data-dev-comment-type="typeparamref">T</code>.
  metadata: {}
uid: Azure.Data.Tables.TableClient.GetEntityIfExistsAsync*
commentId: Overload:Azure.Data.Tables.TableClient.GetEntityIfExistsAsync
namespace: Azure.Data.Tables
name: GetEntityIfExistsAsync
fullName: Azure.Data.Tables.TableClient.GetEntityIfExistsAsync
nameWithType: TableClient.GetEntityIfExistsAsync
assembliesWithMoniker:
- value: Azure.Data.Tables.dll
packagesWithMoniker:
- value: Azure.Data.Tables v12.8.0
  monikers:
  - azure-dotnet
- value: Azure.Data.Tables v12.7.0-beta.1
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Data.Tables.TableClient.GetEntityIfExistsAsync
  api_location:
  - Azure.Data.Tables.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Data.Tables.TableClient.GetEntityIfExistsAsync
  - Azure::Data::Tables::TableClient::GetEntityIfExistsAsync
  - GetEntityIfExistsAsync
  - TableClient.GetEntityIfExistsAsync
  - TableClient::GetEntityIfExistsAsync
  - Azure.Data.Tables.TableClient.GetEntityIfExistsAsync``1
  - Azure::Data::Tables::TableClient::GetEntityIfExistsAsync``1
  - GetEntityIfExistsAsync``1
  - TableClient.GetEntityIfExistsAsync``1
  - TableClient::GetEntityIfExistsAsync``1
  helpviewer_keywords:
  - TableClient.GetEntityIfExistsAsync method [.NET]
  - GetEntityIfExistsAsync method [.NET], class TableClient
  - TableClient.GetEntityIfExistsAsync<T>(String, String, IEnumerable<String>, CancellationToken) method [.NET]
  - GetEntityIfExistsAsync<T>(String, String, IEnumerable<String>, CancellationToken) method [.NET], class TableClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
