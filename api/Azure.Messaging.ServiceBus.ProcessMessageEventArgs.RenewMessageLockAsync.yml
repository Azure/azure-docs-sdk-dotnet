### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>
  parameters:
  - namesWithMoniker:
    - value: message
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.ServiceBus.ServiceBusReceivedMessage"></xref> to renew the lock for.
    type: <xref href="Azure.Messaging.ServiceBus.ServiceBusReceivedMessage?alt=Azure.Messaging.ServiceBus.ServiceBusReceivedMessage&text=ServiceBusReceivedMessage" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: An optional <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> instance to signal the request to cancel the operation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      The lock for the message has expired or the message has already been completed.

      The <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.ServiceBus.ServiceBusException.Reason"></xref> will be set to <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.ServiceBus.ServiceBusFailureReason.MessageLockLost"></xref> in this case.
    type: <xref href="Azure.Messaging.ServiceBus.ServiceBusException?alt=Azure.Messaging.ServiceBus.ServiceBusException&text=ServiceBusException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)
  commentId: M:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync(Azure.Messaging.ServiceBus.ServiceBusReceivedMessage,System.Threading.CancellationToken)
  name: RenewMessageLockAsync(ServiceBusReceivedMessage, CancellationToken)
  fullName: Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync(ServiceBusReceivedMessage, CancellationToken)
  nameWithType: ProcessMessageEventArgs.RenewMessageLockAsync(ServiceBusReceivedMessage, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task RenewMessageLockAsync (Azure.Messaging.ServiceBus.ServiceBusReceivedMessage message, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member RenewMessageLockAsync : Azure.Messaging.ServiceBus.ServiceBusReceivedMessage * System.Threading.CancellationToken -> System.Threading.Tasks.Task

        override this.RenewMessageLockAsync : Azure.Messaging.ServiceBus.ServiceBusReceivedMessage * System.Threading.CancellationToken -> System.Threading.Tasks.Task
  - lang: vb
    values:
    - value: Public Overridable Function RenewMessageLockAsync (message As ServiceBusReceivedMessage, Optional cancellationToken As CancellationToken = Nothing) As Task
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: Renews the lock on the message. The lock will be renewed based on the setting specified on the queue.
  remarks: <p>When a message is received in <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.ServiceBus.ServiceBusReceiveMode.PeekLock"></xref> mode, the message is locked on the server for this receiver instance for a duration as specified during the Queue/Subscription creation (LockDuration). If processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, it resets the time the message is locked by the LockDuration set on the Entity.</p>
  metadata: {}
uid: Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync*
commentId: Overload:Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync
namespace: Azure.Messaging.ServiceBus
name: RenewMessageLockAsync
fullName: Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync
nameWithType: ProcessMessageEventArgs.RenewMessageLockAsync
assembliesWithMoniker:
- value: Azure.Messaging.ServiceBus.dll
packagesWithMoniker:
- value: Azure.Messaging.ServiceBus v7.15.0
  monikers:
  - azure-dotnet
- value: Azure.Messaging.ServiceBus v7.11.0-beta.1
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync
  api_location:
  - Azure.Messaging.ServiceBus.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Messaging.ServiceBus.ProcessMessageEventArgs.RenewMessageLockAsync
  - Azure::Messaging::ServiceBus::ProcessMessageEventArgs::RenewMessageLockAsync
  - RenewMessageLockAsync
  - ProcessMessageEventArgs.RenewMessageLockAsync
  - ProcessMessageEventArgs::RenewMessageLockAsync
  helpviewer_keywords:
  - ProcessMessageEventArgs.RenewMessageLockAsync method [.NET]
  - RenewMessageLockAsync method [.NET], class ProcessMessageEventArgs
  - ProcessMessageEventArgs.RenewMessageLockAsync(ServiceBusReceivedMessage, CancellationToken) method [.NET]
  - RenewMessageLockAsync(ServiceBusReceivedMessage, CancellationToken) method [.NET], class ProcessMessageEventArgs
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
