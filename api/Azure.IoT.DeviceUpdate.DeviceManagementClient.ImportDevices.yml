### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation"></xref> representing an asynchronous operation on the service.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)
  name: ImportDevices(WaitUntil, RequestContent, RequestContext)
  fullName: Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices(WaitUntil, RequestContent, RequestContext)
  nameWithType: DeviceManagementClient.ImportDevices(WaitUntil, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation ImportDevices (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ImportDevices : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation

        override this.ImportDevices : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation
  - lang: vb
    values:
    - value: Public Overridable Function ImportDevices (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: Import existing devices from IoT Hub. This is a long-running-operation; use Operation-Location response header value to check for operation status.
  examples: >-
    This sample shows how to call ImportDevices with required parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);


    var data = "Devices";


    var operation = client.ImportDevices(WaitUntil.Completed, RequestContent.Create(data));


    var response = operation.WaitForCompletionResponse();

    Console.WriteLine(response.Status)

    ```
  metadata: {}
uid: Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices*
commentId: Overload:Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices
namespace: Azure.IoT.DeviceUpdate
name: ImportDevices
fullName: Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices
nameWithType: DeviceManagementClient.ImportDevices
assembliesWithMoniker:
- value: Azure.IoT.DeviceUpdate.dll
packagesWithMoniker:
- value: Azure.IoT.DeviceUpdate v1.0.0
  monikers:
  - azure-dotnet
- value: Azure.IoT.DeviceUpdate v1.0.0-beta.4
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices
  api_location:
  - Azure.IoT.DeviceUpdate.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.IoT.DeviceUpdate.DeviceManagementClient.ImportDevices
  - Azure::IoT::DeviceUpdate::DeviceManagementClient::ImportDevices
  - ImportDevices
  - DeviceManagementClient.ImportDevices
  - DeviceManagementClient::ImportDevices
  helpviewer_keywords:
  - DeviceManagementClient.ImportDevices method [.NET]
  - ImportDevices method [.NET], class DeviceManagementClient
  - DeviceManagementClient.ImportDevices(WaitUntil, RequestContent, RequestContext) method [.NET]
  - ImportDevices(WaitUntil, RequestContent, RequestContext) method [.NET], class DeviceManagementClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
