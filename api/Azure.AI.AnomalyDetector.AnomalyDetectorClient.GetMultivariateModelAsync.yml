### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: modelId
    description: Model identifier.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">modelId</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">modelId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(System.String,Azure.RequestContext)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(System.String,Azure.RequestContext)
  name: GetMultivariateModelAsync(String, RequestContext)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(String, RequestContext)
  nameWithType: AnomalyDetectorClient.GetMultivariateModelAsync(String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> GetMultivariateModelAsync (string modelId, Azure.RequestContext context);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetMultivariateModelAsync : string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.GetMultivariateModelAsync : string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function GetMultivariateModelAsync (modelId As String, context As RequestContext) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Get Multivariate Model

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li><li>

    Please try the simpler <xref data-throw-if-not-resolved="true" uid="Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(System.String,System.Threading.CancellationToken)"></xref> convenience overload with strongly typed models first.

    </li></ul>
  remarks: >-
    <p>Get detailed information of multivariate model, including the training status and variables used in the model.</p><p>Below is the JSON schema for the response payload.</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">AnomalyDetectionModel</code>: 


    ```

    {
      modelId: string, # Required.
      createdTime: string (date & time), # Required.
      lastUpdatedTime: string (date & time), # Required.
      modelInfo: {
        dataSource: string, # Required.
        dataSchema: "OneTable" | "MultiTable", # Optional.
        startTime: string (date & time), # Required.
        endTime: string (date & time), # Required.
        displayName: string, # Optional.
        slidingWindow: number, # Optional.
        alignPolicy: {
          alignMode: "Inner" | "Outer", # Optional.
          fillNAMethod: "Previous" | "Subsequent" | "Linear" | "Zero" | "Fixed", # Optional.
          paddingValue: number, # Optional.
        }, # Optional.
        status: "CREATED" | "RUNNING" | "READY" | "FAILED", # Optional.
        errors: [
          {
            code: string, # Required.
            message: string, # Required.
          }
        ], # Optional.
        diagnosticsInfo: {
          modelState: {
            epochIds: [number], # Optional.
            trainLosses: [number], # Optional.
            validationLosses: [number], # Optional.
            latenciesInSeconds: [number], # Optional.
          }, # Optional.
          variableStates: [VariableState], # Optional.
        }, # Optional.
      }, # Optional.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call GetMultivariateModelAsync with required parameters and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    Response response = await client.GetMultivariateModelAsync("<modelId>", new RequestContext());


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("modelId").ToString());

    Console.WriteLine(result.GetProperty("createdTime").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.AnomalyDetector.AnomalyDetectionModel?alt=Azure.AI.AnomalyDetector.AnomalyDetectionModel&text=AnomalyDetectionModel" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: modelId
    description: Model identifier.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">modelId</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">modelId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(System.String,System.Threading.CancellationToken)
  name: GetMultivariateModelAsync(String, CancellationToken)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync(String, CancellationToken)
  nameWithType: AnomalyDetectorClient.GetMultivariateModelAsync(String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.AnomalyDetectionModel>> GetMultivariateModelAsync (string modelId, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetMultivariateModelAsync : string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.AnomalyDetectionModel>>

        override this.GetMultivariateModelAsync : string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.AnomalyDetectionModel>>
  - lang: vb
    values:
    - value: Public Overridable Function GetMultivariateModelAsync (modelId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnomalyDetectionModel))
  monikers:
  - azure-dotnet-preview
  summary: Get Multivariate Model.
  remarks: <p>Get detailed information about the multivariate model, including the training status and variables used in the model.</p>
  examples: >-
    This sample shows how to call GetMultivariateModelAsync with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var result = await client.GetMultivariateModelAsync("<modelId>");

    ```
  metadata: {}
uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync*
commentId: Overload:Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync
namespace: Azure.AI.AnomalyDetector
name: GetMultivariateModelAsync
fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync
nameWithType: AnomalyDetectorClient.GetMultivariateModelAsync
assembliesWithMoniker:
- value: Azure.AI.AnomalyDetector.dll
packagesWithMoniker:
- value: Azure.AI.AnomalyDetector v3.0.0-preview.7
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync
  api_location:
  - Azure.AI.AnomalyDetector.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.GetMultivariateModelAsync
  - Azure::AI::AnomalyDetector::AnomalyDetectorClient::GetMultivariateModelAsync
  - GetMultivariateModelAsync
  - AnomalyDetectorClient.GetMultivariateModelAsync
  - AnomalyDetectorClient::GetMultivariateModelAsync
  helpviewer_keywords:
  - AnomalyDetectorClient.GetMultivariateModelAsync method [.NET]
  - GetMultivariateModelAsync method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.GetMultivariateModelAsync(String, RequestContext) method [.NET]
  - GetMultivariateModelAsync(String, RequestContext) method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.GetMultivariateModelAsync(String, CancellationToken) method [.NET]
  - GetMultivariateModelAsync(String, CancellationToken) method [.NET], class AnomalyDetectorClient
  monikers:
  - azure-dotnet-preview
