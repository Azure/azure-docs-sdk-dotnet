### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation`1"></xref> from the service that will contain a <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: format
    description: 'Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: assetKind
    description: 'Kind of the asset of the project. Allowed values: "qnas" | "synonyms".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)
  name: ImportAsync(WaitUntil, String, RequestContent, String, String, RequestContext)
  fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync(WaitUntil, String, RequestContent, String, String, RequestContext)
  nameWithType: QuestionAnsweringAuthoringClient.ImportAsync(WaitUntil, String, RequestContent, String, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Operation<BinaryData>> ImportAsync (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, string format = default, string assetKind = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ImportAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>

        override this.ImportAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>
  - lang: vb
    values:
    - value: Public Overridable Function ImportAsync (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))
  monikers:
  - azure-dotnet
  summary: Import project assets.
  remarks: >-
    <p>Below is the JSON schema for the request and response payloads. Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/import</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">ImportJobOptions</code>: 


    ```

    {
                  metadata: {
                    description: string, # Optional. Description of the project.
                    language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
                    multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
                    settings: {
                      defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
                    }, # Optional. Configurable settings of the Project.
                  }, # Optional. Parameters needed to create the project.
                  assets: {
                    synonyms: [
                      {
                        alterations: [string], # Required. Collection of word alterations.
                      }
                    ], # Optional. Collection of synonyms.
                    qnas: [
                      {
                        id: number, # Optional. Unique ID for the QnA.
                        answer: string, # Optional. Answer text.
                        source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                        questions: [string], # Optional. List of questions associated with the answer.
                        metadata: Dictionary<string, string>, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                        dialog: {
                          isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                          prompts: [
                            {
                              displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                              qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                              qna: {
                                id: number, # Optional. Unique ID for the QnA.
                                answer: string, # Optional. Answer text.
                                source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                                questions: [string], # Optional. List of questions associated with the answer.
                                metadata: Dictionary<string, string>, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                                dialog: QnaDialog, # Optional. Context of a QnA.
                                activeLearningSuggestions: [
                                  {
                                    clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                                    suggestedQuestions: [
                                      {
                                        question: string, # Optional. Question suggested by the Active Learning feature.
                                        userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                                        autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                                      }
                                    ], # Optional. List of all suggested questions for the QnA.
                                  }
                                ], # Optional. List of Active Learning suggestions for the QnA.
                              }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                              displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                            }
                          ], # Optional. List of prompts associated with the answer.
                        }, # Optional. Context of a QnA.
                        activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
                      }
                    ], # Optional. List of QnA records to import.
                  }, # Optional. All assets for this project.
                  fileUri: string, # Optional. Import data File URI.
                }
    ```

    </p><p>Response Body:</p><p><details><summary>ExportJobState</summary>Schema for <code data-dev-comment-type="c">ExportJobState</code>: 


    ```

    {
                  createdDateTime: string (ISO 8601 Format), # Required.
                  expirationDateTime: string (ISO 8601 Format), # Optional.
                  jobId: string, # Required.
                  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
                  status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
                }
    ```

     </details></p>
  examples: >-
    This sample shows how to call ImportAsync with required parameters and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    var data = new {};


    var operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", RequestContent.Create(data));


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("createdDateTime").ToString());

    Console.WriteLine(result.GetProperty("jobId").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());

    Console.WriteLine(result.GetProperty("status").ToString());

    ```

    This sample shows how to call ImportAsync with all parameters and request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    var data = new {
        metadata = new {
            description = "<description>",
            language = "<language>",
            multilingualResource = true,
            settings = new {
                defaultAnswer = "<defaultAnswer>",
            },
        },
        assets = new {
            synonyms = new[] {
                new {
                    alterations = new[] {
                        "<String>"
                    },
                }
            },
            qnas = new[] {
                new {
                    id = 1234,
                    answer = "<answer>",
                    source = "<source>",
                    questions = new[] {
                        "<String>"
                    },
                    metadata = new {
                        key = "<String>",
                    },
                    dialog = new {
                        isContextOnly = true,
                        prompts = new[] {
                            new {
                                displayOrder = 1234,
                                qnaId = 1234,
                                qna = new {
                                    id = 1234,
                                    answer = "<answer>",
                                    source = "<source>",
                                    questions = new[] {
                                        "<String>"
                                    },
                                    metadata = new {
                                        key = "<String>",
                                    },
                                    activeLearningSuggestions = new[] {
                                        new {
                                            clusterHead = "<clusterHead>",
                                            suggestedQuestions = new[] {
                                                new {
                                                    question = "<question>",
                                                    userSuggestedCount = 1234,
                                                    autoSuggestedCount = 1234,
                                                }
                                            },
                                        }
                                    },
                                },
                                displayText = "<displayText>",
                            }
                        },
                    },
                    activeLearningSuggestions = new[] {
                        new {
                            clusterHead = "<clusterHead>",
                            suggestedQuestions = new[] {
                                new {
                                    question = "<question>",
                                    userSuggestedCount = 1234,
                                    autoSuggestedCount = 1234,
                                }
                            },
                        }
                    },
                }
            },
        },
        fileUri = "<fileUri>",
    };


    var operation = await client.ImportAsync(WaitUntil.Completed, "<projectName>", RequestContent.Create(data), "<format>", "<assetKind>");


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("createdDateTime").ToString());

    Console.WriteLine(result.GetProperty("expirationDateTime").ToString());

    Console.WriteLine(result.GetProperty("jobId").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());

    Console.WriteLine(result.GetProperty("status").ToString());

    ```
  metadata: {}
uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync*
commentId: Overload:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync
namespace: Azure.AI.Language.QuestionAnswering.Authoring
name: ImportAsync
fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync
nameWithType: QuestionAnsweringAuthoringClient.ImportAsync
assembliesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering.dll
packagesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync
  api_location:
  - Azure.AI.Language.QuestionAnswering.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.ImportAsync
  - Azure::AI::Language::QuestionAnswering::Authoring::QuestionAnsweringAuthoringClient::ImportAsync
  - ImportAsync
  - QuestionAnsweringAuthoringClient.ImportAsync
  - QuestionAnsweringAuthoringClient::ImportAsync
  helpviewer_keywords:
  - QuestionAnsweringAuthoringClient.ImportAsync method [.NET]
  - ImportAsync method [.NET], class QuestionAnsweringAuthoringClient
  - QuestionAnsweringAuthoringClient.ImportAsync(WaitUntil, String, RequestContent, String, String, RequestContext) method [.NET]
  - ImportAsync(WaitUntil, String, RequestContent, String, String, RequestContext) method [.NET], class QuestionAnsweringAuthoringClient
  monikers:
  - azure-dotnet
