### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Maps.Routing.Models.RouteMatrixResult?alt=Azure.Maps.Routing.Models.RouteMatrixResult&text=RouteMatrixResult" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: options
    description: The route direction options.
    type: <xref href="Azure.Maps.Routing.RouteMatrixOptions?alt=Azure.Maps.Routing.RouteMatrixOptions&text=RouteMatrixOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">options</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(Azure.Maps.Routing.RouteMatrixOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(Azure.Maps.Routing.RouteMatrixOptions,System.Threading.CancellationToken)
  name: GetImmediateRouteMatrixAsync(RouteMatrixOptions, CancellationToken)
  fullName: Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(RouteMatrixOptions, CancellationToken)
  nameWithType: MapsRoutingClient.GetImmediateRouteMatrixAsync(RouteMatrixOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.Maps.Routing.Models.RouteMatrixResult>> GetImmediateRouteMatrixAsync (Azure.Maps.Routing.RouteMatrixOptions options, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Maps.Routing.Models.RouteMatrixResult>>

        override this.GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Maps.Routing.Models.RouteMatrixResult>>
  - lang: vb
    values:
    - value: Public Overridable Function GetImmediateRouteMatrixAsync (options As RouteMatrixOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteMatrixResult))
  monikers:
  - azure-dotnet-preview
  summary: >-
    The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request.

    For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of

    a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.

    For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.

    The maximum size of a matrix for sync request is <code data-dev-comment-type="c">100</code> (the number of origins multiplied by the number of destinations).
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Maps.Routing.Models.RouteMatrixResult?alt=Azure.Maps.Routing.Models.RouteMatrixResult&text=RouteMatrixResult" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: routeMatrixQuery
    description: The route matrix to query.
    type: <xref href="Azure.Maps.Routing.RouteMatrixQuery?alt=Azure.Maps.Routing.RouteMatrixQuery&text=RouteMatrixQuery" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">routeMatrixQuery</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(Azure.Maps.Routing.RouteMatrixQuery,System.Threading.CancellationToken)
  commentId: M:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(Azure.Maps.Routing.RouteMatrixQuery,System.Threading.CancellationToken)
  name: GetImmediateRouteMatrixAsync(RouteMatrixQuery, CancellationToken)
  fullName: Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync(RouteMatrixQuery, CancellationToken)
  nameWithType: MapsRoutingClient.GetImmediateRouteMatrixAsync(RouteMatrixQuery, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.Maps.Routing.Models.RouteMatrixResult>> GetImmediateRouteMatrixAsync (Azure.Maps.Routing.RouteMatrixQuery routeMatrixQuery, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixQuery * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Maps.Routing.Models.RouteMatrixResult>>

        override this.GetImmediateRouteMatrixAsync : Azure.Maps.Routing.RouteMatrixQuery * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Maps.Routing.Models.RouteMatrixResult>>
  - lang: vb
    values:
    - value: Public Overridable Function GetImmediateRouteMatrixAsync (routeMatrixQuery As RouteMatrixQuery, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouteMatrixResult))
  monikers:
  - azure-dotnet-preview
  summary: >-
    The Matrix Routing service allows calculation of a matrix of route summaries for a set of routes defined by origin and destination locations by using an asynchronous (async) or synchronous (sync) request.

    For every given origin, the service calculates the cost of routing from that origin to every given destination. The set of origins and the set of destinations can be thought of as the column and row headers of a table and each cell in the table contains the costs of routing from the origin to the destination for that cell. As an example, let's say a food delivery company has 20 drivers and they need to find the closest driver to pick up the delivery from the restaurant. To solve this use case, they can call Matrix Route API.

    For each route, the travel times and distances are returned. You can use the computed costs to determine which detailed routes to calculate using the Route Directions API.

    The maximum size of a matrix for sync request is <code data-dev-comment-type="c">100</code> (the number of origins multiplied by the number of destinations).
  metadata: {}
uid: Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync*
commentId: Overload:Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync
namespace: Azure.Maps.Routing
name: GetImmediateRouteMatrixAsync
fullName: Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync
nameWithType: MapsRoutingClient.GetImmediateRouteMatrixAsync
assembliesWithMoniker:
- value: Azure.Maps.Routing.dll
packagesWithMoniker:
- value: Azure.Maps.Routing v1.0.0-beta.2
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync
  api_location:
  - Azure.Maps.Routing.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Maps.Routing.MapsRoutingClient.GetImmediateRouteMatrixAsync
  - Azure::Maps::Routing::MapsRoutingClient::GetImmediateRouteMatrixAsync
  - GetImmediateRouteMatrixAsync
  - MapsRoutingClient.GetImmediateRouteMatrixAsync
  - MapsRoutingClient::GetImmediateRouteMatrixAsync
  helpviewer_keywords:
  - MapsRoutingClient.GetImmediateRouteMatrixAsync method [.NET]
  - GetImmediateRouteMatrixAsync method [.NET], class MapsRoutingClient
  - MapsRoutingClient.GetImmediateRouteMatrixAsync(RouteMatrixOptions, CancellationToken) method [.NET]
  - GetImmediateRouteMatrixAsync(RouteMatrixOptions, CancellationToken) method [.NET], class MapsRoutingClient
  - MapsRoutingClient.GetImmediateRouteMatrixAsync(RouteMatrixQuery, CancellationToken) method [.NET]
  - GetImmediateRouteMatrixAsync(RouteMatrixQuery, CancellationToken) method [.NET], class MapsRoutingClient
  monikers:
  - azure-dotnet-preview
