### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Collections.Generic.IAsyncEnumerable`1?alt=System.Collections.Generic.IAsyncEnumerable&text=IAsyncEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.EventHubs.Consumer.PartitionEvent?alt=Azure.Messaging.EventHubs.Consumer.PartitionEvent&text=PartitionEvent" data-throw-if-not-resolved="True"/>&gt;
    description: An <xref data-throw-if-not-resolved="true" uid="System.Collections.Generic.IAsyncEnumerable`1"></xref> to be used for iterating over events in the partition.
  parameters:
  - namesWithMoniker:
    - value: cancellationToken
    description: An optional <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> instance to signal the request to cancel the operation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      Occurs when an <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient"></xref> is unable to read from the Event Hub due to another reader having asserted exclusive ownership. In

      this case, the <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventHubsException.FailureReason"></xref> will be set to <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected"></xref>.
    type: <xref href="Azure.Messaging.EventHubs.EventHubsException?alt=Azure.Messaging.EventHubs.EventHubsException&text=EventHubsException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)
  commentId: M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)
  name: ReadEventsAsync(CancellationToken)
  fullName: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(CancellationToken)
  nameWithType: EventHubConsumerClient.ReadEventsAsync(CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent> ReadEventsAsync (System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ReadEventsAsync : System.Threading.CancellationToken -> System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent>

        override this.ReadEventsAsync : System.Threading.CancellationToken -> System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent>
  - lang: vb
    values:
    - value: Public Overridable Function ReadEventsAsync (Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of PartitionEvent)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  seeAlso: >+
    - <xref:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions%2cSystem.Threading.CancellationToken)>

  summary: >-
    Reads events from all partitions of the event hub as an asynchronous enumerable, allowing events to be iterated as they

    become available on the partition, waiting as necessary should there be no events available.


    This enumerator may block for an indeterminate amount of time for an <code data-dev-comment-type="c">await</code> if events are not available on the partition, requiring

    cancellation via the <code data-dev-comment-type="paramref">cancellationToken</code> to be requested in order to return control.  It is recommended to set the

    <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime"></xref> for scenarios where a more deterministic maximum waiting period is desired.
  remarks: <p>This method is not recommended for production use; the <code data-dev-comment-type="c">EventProcessorClient</code> should be used for reading events from all partitions in a production scenario, as it offers a much more robust experience with higher throughput.</p><p>It is important to note that this method does not guarantee fairness amongst the partitions during iteration; each of the partitions compete to publish events to be read by the enumerator.  Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable bias for a given partition or subset of partitions.</p><p>Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to process, rather than competing for them.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Collections.Generic.IAsyncEnumerable`1?alt=System.Collections.Generic.IAsyncEnumerable&text=IAsyncEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.EventHubs.Consumer.PartitionEvent?alt=Azure.Messaging.EventHubs.Consumer.PartitionEvent&text=PartitionEvent" data-throw-if-not-resolved="True"/>&gt;
    description: An <xref data-throw-if-not-resolved="true" uid="System.Collections.Generic.IAsyncEnumerable`1"></xref> to be used for iterating over events in the partition.
  parameters:
  - namesWithMoniker:
    - value: readOptions
    description: The set of options to use for configuring read behavior; if not specified the defaults will be used.
    type: <xref href="Azure.Messaging.EventHubs.Consumer.ReadEventOptions?alt=Azure.Messaging.EventHubs.Consumer.ReadEventOptions&text=ReadEventOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: An optional <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> instance to signal the request to cancel the operation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      Occurs when an <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient"></xref> is unable to read from the Event Hub due to another reader having asserted exclusive ownership. In

      this case, the <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventHubsException.FailureReason"></xref> will be set to <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected"></xref>.
    type: <xref href="Azure.Messaging.EventHubs.EventHubsException?alt=Azure.Messaging.EventHubs.EventHubsException&text=EventHubsException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)
  name: ReadEventsAsync(ReadEventOptions, CancellationToken)
  fullName: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(ReadEventOptions, CancellationToken)
  nameWithType: EventHubConsumerClient.ReadEventsAsync(ReadEventOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent> ReadEventsAsync (Azure.Messaging.EventHubs.Consumer.ReadEventOptions readOptions, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ReadEventsAsync : Azure.Messaging.EventHubs.Consumer.ReadEventOptions * System.Threading.CancellationToken -> System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent>

        override this.ReadEventsAsync : Azure.Messaging.EventHubs.Consumer.ReadEventOptions * System.Threading.CancellationToken -> System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent>
  - lang: vb
    values:
    - value: Public Overridable Function ReadEventsAsync (readOptions As ReadEventOptions, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of PartitionEvent)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  seeAlso: >+
    - <xref:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)>

  summary: >-
    Reads events from all partitions of the event hub as an asynchronous enumerable, allowing events to be iterated as they

    become available on the partition, waiting as necessary should there be no events available.


    This enumerator may block for an indeterminate amount of time for an <code data-dev-comment-type="c">await</code> if events are not available on the partition, requiring

    cancellation via the <code data-dev-comment-type="paramref">cancellationToken</code> to be requested in order to return control.  It is recommended to set the

    <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime"></xref> for scenarios where a more deterministic maximum waiting period is desired.
  remarks: <p>This method is not recommended for production use; the <code data-dev-comment-type="c">EventProcessorClient</code> should be used for reading events from all partitions in a production scenario, as it offers a much more robust experience with higher throughput.</p><p>It is important to note that this method does not guarantee fairness amongst the partitions during iteration; each of the partitions compete to publish events to be read by the enumerator.  Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable bias for a given partition or subset of partitions.</p><p>Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to process, rather than competing for them.</p>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Collections.Generic.IAsyncEnumerable`1?alt=System.Collections.Generic.IAsyncEnumerable&text=IAsyncEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.EventHubs.Consumer.PartitionEvent?alt=Azure.Messaging.EventHubs.Consumer.PartitionEvent&text=PartitionEvent" data-throw-if-not-resolved="True"/>&gt;
    description: An <xref data-throw-if-not-resolved="true" uid="System.Collections.Generic.IAsyncEnumerable`1"></xref> to be used for iterating over events in the partition.
  parameters:
  - namesWithMoniker:
    - value: startReadingAtEarliestEvent
    description: <code data-dev-comment-type="c">true</code> to begin reading at the first events available in each partition; otherwise, reading will begin at the end of each partition seeing only new events as they are published.
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: readOptions
    description: The set of options to use for configuring read behavior; if not specified the defaults will be used.
    type: <xref href="Azure.Messaging.EventHubs.Consumer.ReadEventOptions?alt=Azure.Messaging.EventHubs.Consumer.ReadEventOptions&text=ReadEventOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: An optional <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> instance to signal the request to cancel the operation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: >-
      Occurs when an <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient"></xref> is unable to read from the Event Hub due to another reader having asserted exclusive ownership. In

      this case, the <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventHubsException.FailureReason"></xref> will be set to <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventHubsException.FailureReason.ConsumerDisconnected"></xref>.
    type: <xref href="Azure.Messaging.EventHubs.EventHubsException?alt=Azure.Messaging.EventHubs.EventHubsException&text=EventHubsException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Boolean,Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Boolean,Azure.Messaging.EventHubs.Consumer.ReadEventOptions,System.Threading.CancellationToken)
  name: ReadEventsAsync(Boolean, ReadEventOptions, CancellationToken)
  fullName: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Boolean, ReadEventOptions, CancellationToken)
  nameWithType: EventHubConsumerClient.ReadEventsAsync(Boolean, ReadEventOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent> ReadEventsAsync (bool startReadingAtEarliestEvent, Azure.Messaging.EventHubs.Consumer.ReadEventOptions readOptions = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ReadEventsAsync : bool * Azure.Messaging.EventHubs.Consumer.ReadEventOptions * System.Threading.CancellationToken -> System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent>

        override this.ReadEventsAsync : bool * Azure.Messaging.EventHubs.Consumer.ReadEventOptions * System.Threading.CancellationToken -> System.Collections.Generic.IAsyncEnumerable<Azure.Messaging.EventHubs.Consumer.PartitionEvent>
  - lang: vb
    values:
    - value: Public Overridable Function ReadEventsAsync (startReadingAtEarliestEvent As Boolean, Optional readOptions As ReadEventOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of PartitionEvent)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  seeAlso: >+
    - <xref:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(Azure.Messaging.EventHubs.Consumer.ReadEventOptions%2cSystem.Threading.CancellationToken)>

    - <xref:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync(System.Threading.CancellationToken)>

  summary: >-
    Reads events from all partitions of the event hub as an asynchronous enumerable, allowing events to be iterated as they

    become available on the partition, waiting as necessary should there be no events available.


    This enumerator may block for an indeterminate amount of time for an <code data-dev-comment-type="c">await</code> if events are not available on the partition, requiring

    cancellation via the <code data-dev-comment-type="paramref">cancellationToken</code> to be requested in order to return control.  It is recommended to set the

    <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.Consumer.ReadEventOptions.MaximumWaitTime"></xref> for scenarios where a more deterministic maximum waiting period is desired.
  remarks: <p>This method is not recommended for production use; the <code data-dev-comment-type="c">EventProcessorClient</code> should be used for reading events from all partitions in a production scenario, as it offers a much more robust experience with higher throughput.</p><p>It is important to note that this method does not guarantee fairness amongst the partitions during iteration; each of the partitions competes to publish events to be read by the enumerator.  Depending on service communication, there may be a clustering of events per partition and/or there may be a noticeable bias for a given partition or subset of partitions.</p><p>Each reader of events is presented with an independent iterator; if there are multiple readers, each receive their own copy of an event to process, rather than competing for them.</p>
  metadata: {}
uid: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync*
commentId: Overload:Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync
namespace: Azure.Messaging.EventHubs.Consumer
name: ReadEventsAsync
fullName: Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync
nameWithType: EventHubConsumerClient.ReadEventsAsync
assembliesWithMoniker:
- value: Azure.Messaging.EventHubs.dll
packagesWithMoniker:
- value: Azure.Messaging.EventHubs v5.9.2
  monikers:
  - azure-dotnet
- value: Azure.Messaging.EventHubs v5.7.0-beta.5
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync
  api_location:
  - Azure.Messaging.EventHubs.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Messaging.EventHubs.Consumer.EventHubConsumerClient.ReadEventsAsync
  - Azure::Messaging::EventHubs::Consumer::EventHubConsumerClient::ReadEventsAsync
  - ReadEventsAsync
  - EventHubConsumerClient.ReadEventsAsync
  - EventHubConsumerClient::ReadEventsAsync
  helpviewer_keywords:
  - EventHubConsumerClient.ReadEventsAsync method [.NET]
  - ReadEventsAsync method [.NET], class EventHubConsumerClient
  - EventHubConsumerClient.ReadEventsAsync(CancellationToken) method [.NET]
  - ReadEventsAsync(CancellationToken) method [.NET], class EventHubConsumerClient
  - EventHubConsumerClient.ReadEventsAsync(ReadEventOptions, CancellationToken) method [.NET]
  - ReadEventsAsync(ReadEventOptions, CancellationToken) method [.NET], class EventHubConsumerClient
  - EventHubConsumerClient.ReadEventsAsync(Boolean, ReadEventOptions, CancellationToken) method [.NET]
  - ReadEventsAsync(Boolean, ReadEventOptions, CancellationToken) method [.NET], class EventHubConsumerClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
