### YamlMime:NetType
type: class
implementsWithMoniker:
- value: <xref href="System.IEquatable`1?alt=System.IEquatable&text=IEquatable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Cosmos.Spatial.Polygon?alt=Azure.Cosmos.Spatial.Polygon&text=Polygon" data-throw-if-not-resolved="True"/>&gt;
inheritancesWithMoniker:
- values:
  - <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>
  - <xref href="Azure.Cosmos.Spatial.Geometry?alt=Azure.Cosmos.Spatial.Geometry&text=Geometry" data-throw-if-not-resolved="True"/>
constructors:
- uid: Azure.Cosmos.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Azure.Cosmos.Spatial.LinearRing},Azure.Cosmos.Spatial.GeometryParams)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Azure.Cosmos.Spatial.LinearRing})
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Polygon.#ctor(System.Collections.Generic.IList{Azure.Cosmos.Spatial.Position})
  monikers:
  - azure-dotnet-preview
methods:
- uid: Azure.Cosmos.Spatial.Geometry.Distance(Azure.Cosmos.Spatial.Geometry)
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Polygon.Equals(System.Object)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Polygon.Equals(Azure.Cosmos.Spatial.Polygon)
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Polygon.GetHashCode
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.Intersects(Azure.Cosmos.Spatial.Geometry)
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.IsValid
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.IsValidDetailed
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.Within(Azure.Cosmos.Spatial.Geometry)
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
properties:
- uid: Azure.Cosmos.Spatial.Geometry.AdditionalProperties
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.BoundingBox
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.Crs
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Polygon.Rings
  monikers:
  - azure-dotnet-preview
- uid: Azure.Cosmos.Spatial.Geometry.Type
  inheritedFrom: Azure.Cosmos.Spatial.Geometry
  monikers:
  - azure-dotnet-preview
uid: Azure.Cosmos.Spatial.Polygon
commentId: T:Azure.Cosmos.Spatial.Polygon
namespace: Azure.Cosmos.Spatial
name: Polygon
fullName: Azure.Cosmos.Spatial.Polygon
nameWithType: Azure.Cosmos.Spatial.Polygon
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
attributesWithMoniker:
- value: System.Runtime.Serialization.DataContractAttribute
- value: System.Text.Json.Serialization.JsonConverterAttribute
syntaxWithMoniker:
- lang: csharp
  values:
  - value: >-
      [System.Runtime.Serialization.DataContract]

      [System.Text.Json.Serialization.JsonConverter(typeof(Azure.Cosmos.TextJsonGeometryConverterFactory))]

      public sealed class Polygon : Azure.Cosmos.Spatial.Geometry, IEquatable<Azure.Cosmos.Spatial.Polygon>
- lang: fsharp
  values:
  - value: >-
      [<System.Runtime.Serialization.DataContract>]

      [<System.Text.Json.Serialization.JsonConverter(typeof(Azure.Cosmos.TextJsonGeometryConverterFactory))>]

      type Polygon = class
          inherit Geometry
          interface IEquatable<Polygon>
- lang: vb
  values:
  - value: >-
      Public NotInheritable Class Polygon

      Inherits Geometry

      Implements IEquatable(Of Polygon)
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
summary: >-
  <p>
        Polygon geometry class in the Azure Cosmos DB service.
  </p>

  <p>
        A polygon is represented by the set of "polygon rings". Each ring is closed line string.
        First ring defines external ring. All subsequent rings define "holes" in the external ring.
  </p>

  <p>
        Rings must be specified using Left Hand Rule: traversing the ring in the order of its points, should result
        in internal area of the polygon being to the left side.
  </p>
examples: >-
  This example shows how to define a polygon which covers small portion of the Earth:


  ```csharp

  var polygon = new Polygon(
          new[]
          {
              new Position(20.0, 20.0),
              new Position(30.0, 20.0),
              new Position(30.0, 30.0),
              new Position(20.0, 30.0)
              new Position(20.0, 20.0)
          });
  ```


  This example shows how to define a polygon which covers area more than one hemisphere:

  (Notice that only order of coordinates was reversed).


  ```csharp

  var polygon = new Polygon(
          new[]
          {
              new Position(20.0, 20.0),
              new Position(20.0, 30.0),
              new Position(30.0, 30.0),
              new Position(30.0, 20.0)
              new Position(20.0, 20.0)
          });
  ```
metadata:
  api_name:
  - Azure.Cosmos.Spatial.Polygon
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.Spatial.Polygon
  - Azure::Cosmos::Spatial::Polygon
  - Polygon
  helpviewer_keywords:
  - Azure.Cosmos.Spatial.Polygon class [.NET]
  monikers:
  - azure-dotnet-preview
