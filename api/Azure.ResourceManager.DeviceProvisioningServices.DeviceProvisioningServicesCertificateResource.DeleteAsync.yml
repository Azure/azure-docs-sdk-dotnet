### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.ResourceManager.ArmOperation?alt=Azure.ResourceManager.ArmOperation&text=ArmOperation" data-throw-if-not-resolved="True"/>&gt;
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: options
    description: A property bag which contains all the parameters of this method except the LRO qualifier and request context parameter.
    type: <xref href="Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions?alt=Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions&text=DeviceProvisioningServicesCertificateResourceDeleteOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">options</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync(Azure.WaitUntil,Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions,System.Threading.CancellationToken)
  commentId: M:Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync(Azure.WaitUntil,Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions,System.Threading.CancellationToken)
  name: DeleteAsync(WaitUntil, DeviceProvisioningServicesCertificateResourceDeleteOptions, CancellationToken)
  fullName: Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync(WaitUntil, DeviceProvisioningServicesCertificateResourceDeleteOptions, CancellationToken)
  nameWithType: DeviceProvisioningServicesCertificateResource.DeleteAsync(WaitUntil, DeviceProvisioningServicesCertificateResourceDeleteOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.ResourceManager.ArmOperation> DeleteAsync (Azure.WaitUntil waitUntil, Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions options, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member DeleteAsync : Azure.WaitUntil * Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.ResourceManager.ArmOperation>

        override this.DeleteAsync : Azure.WaitUntil * Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificateResourceDeleteOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.ResourceManager.ArmOperation>
  - lang: vb
    values:
    - value: Public Overridable Function DeleteAsync (waitUntil As WaitUntil, options As DeviceProvisioningServicesCertificateResourceDeleteOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: >-
    Deletes the specified certificate associated with the Provisioning Service

    <ul><li>Request Path/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}</li><li>Operation IdDpsCertificate_Delete</li></ul>
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.ResourceManager.ArmOperation?alt=Azure.ResourceManager.ArmOperation&text=ArmOperation" data-throw-if-not-resolved="True"/>&gt;
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: ifMatch
    description: ETag of the certificate.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: certificateCommonName
    description: This is optional, and it is the Common Name of the certificate.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: certificateRawBytes
    description: Raw data within the certificate.
    type: <xref href="System.Byte?alt=System.Byte&text=Byte" data-throw-if-not-resolved="True"/>[]
  - namesWithMoniker:
    - value: certificateIsVerified
    description: Indicates if certificate has been verified by owner of the private key.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: certificatePurpose
    description: A description that mentions the purpose of the certificate.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose?alt=Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose&text=DeviceProvisioningServicesCertificatePurpose" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: certificateCreatedOn
    description: Time the certificate is created.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTimeOffset?alt=System.DateTimeOffset&text=DateTimeOffset" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: certificateLastUpdatedOn
    description: Time the certificate is last updated.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.DateTimeOffset?alt=System.DateTimeOffset&text=DateTimeOffset" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: certificateHasPrivateKey
    description: Indicates if the certificate contains a private key.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: certificateNonce
    description: Random number generated to indicate Proof of Possession.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">ifMatch</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync(Azure.WaitUntil,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)
  commentId: M:Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync(Azure.WaitUntil,System.String,System.String,System.Byte[],System.Nullable{System.Boolean},System.Nullable{Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.Boolean},System.String,System.Threading.CancellationToken)
  name: >-
    DeleteAsync(WaitUntil, String, String, Byte[], Nullable<Boolean>,

     Nullable<DeviceProvisioningServicesCertificatePurpose>, Nullable<DateTimeOffset>,

     Nullable<DateTimeOffset>, Nullable<Boolean>, String, CancellationToken)
  fullName: Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync(WaitUntil, String, String, Byte[], Nullable<Boolean>, Nullable<DeviceProvisioningServicesCertificatePurpose>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<Boolean>, String, CancellationToken)
  nameWithType: DeviceProvisioningServicesCertificateResource.DeleteAsync(WaitUntil, String, String, Byte[], Nullable<Boolean>, Nullable<DeviceProvisioningServicesCertificatePurpose>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<Boolean>, String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.ResourceManager.ArmOperation> DeleteAsync (Azure.WaitUntil waitUntil, string ifMatch, string certificateCommonName = default, byte[] certificateRawBytes = default, bool? certificateIsVerified = default, Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose? certificatePurpose = default, DateTimeOffset? certificateCreatedOn = default, DateTimeOffset? certificateLastUpdatedOn = default, bool? certificateHasPrivateKey = default, string certificateNonce = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member DeleteAsync : Azure.WaitUntil * string * string * byte[] * Nullable<bool> * Nullable<Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose> * Nullable<DateTimeOffset> * Nullable<DateTimeOffset> * Nullable<bool> * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.ResourceManager.ArmOperation>

        override this.DeleteAsync : Azure.WaitUntil * string * string * byte[] * Nullable<bool> * Nullable<Azure.ResourceManager.DeviceProvisioningServices.Models.DeviceProvisioningServicesCertificatePurpose> * Nullable<DateTimeOffset> * Nullable<DateTimeOffset> * Nullable<bool> * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.ResourceManager.ArmOperation>
  - lang: vb
    values:
    - value: Public Overridable Function DeleteAsync (waitUntil As WaitUntil, ifMatch As String, Optional certificateCommonName As String = Nothing, Optional certificateRawBytes As Byte() = Nothing, Optional certificateIsVerified As Nullable(Of Boolean) = Nothing, Optional certificatePurpose As Nullable(Of DeviceProvisioningServicesCertificatePurpose) = Nothing, Optional certificateCreatedOn As Nullable(Of DateTimeOffset) = Nothing, Optional certificateLastUpdatedOn As Nullable(Of DateTimeOffset) = Nothing, Optional certificateHasPrivateKey As Nullable(Of Boolean) = Nothing, Optional certificateNonce As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of ArmOperation)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: >-
    Deletes the specified certificate associated with the Provisioning Service

    <ul><li>Request Path/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/provisioningServices/{provisioningServiceName}/certificates/{certificateName}</li><li>Operation IdDpsCertificate_Delete</li></ul>
  metadata: {}
uid: Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync*
commentId: Overload:Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync
namespace: Azure.ResourceManager.DeviceProvisioningServices
name: DeleteAsync
fullName: Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync
nameWithType: DeviceProvisioningServicesCertificateResource.DeleteAsync
assembliesWithMoniker:
- value: Azure.ResourceManager.DeviceProvisioningServices.dll
packagesWithMoniker:
- value: Azure.ResourceManager.DeviceProvisioningServices v1.1.0
  monikers:
  - azure-dotnet
- value: Azure.ResourceManager.DeviceProvisioningServices v1.2.0-beta.1
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync
  api_location:
  - Azure.ResourceManager.DeviceProvisioningServices.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.ResourceManager.DeviceProvisioningServices.DeviceProvisioningServicesCertificateResource.DeleteAsync
  - Azure::ResourceManager::DeviceProvisioningServices::DeviceProvisioningServicesCertificateResource::DeleteAsync
  - DeleteAsync
  - DeviceProvisioningServicesCertificateResource.DeleteAsync
  - DeviceProvisioningServicesCertificateResource::DeleteAsync
  helpviewer_keywords:
  - DeviceProvisioningServicesCertificateResource.DeleteAsync method [.NET]
  - DeleteAsync method [.NET], class DeviceProvisioningServicesCertificateResource
  - DeviceProvisioningServicesCertificateResource.DeleteAsync(WaitUntil, DeviceProvisioningServicesCertificateResourceDeleteOptions, CancellationToken) method [.NET]
  - DeleteAsync(WaitUntil, DeviceProvisioningServicesCertificateResourceDeleteOptions, CancellationToken) method [.NET], class DeviceProvisioningServicesCertificateResource
  - DeviceProvisioningServicesCertificateResource.DeleteAsync(WaitUntil, String, String, Byte[], Nullable<Boolean>, Nullable<DeviceProvisioningServicesCertificatePurpose>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<Boolean>, String, CancellationToken) method [.NET]
  - DeleteAsync(WaitUntil, String, String, Byte[], Nullable<Boolean>, Nullable<DeviceProvisioningServicesCertificatePurpose>, Nullable<DateTimeOffset>, Nullable<DateTimeOffset>, Nullable<Boolean>, String, CancellationToken) method [.NET], class DeviceProvisioningServicesCertificateResource
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
