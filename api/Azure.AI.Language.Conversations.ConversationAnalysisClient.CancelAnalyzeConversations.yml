### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation"></xref> representing an asynchronous operation on the service.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: jobId
    description: Job ID.
    type: <xref href="System.Guid?alt=System.Guid&text=Guid" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations(Azure.WaitUntil,System.Guid,Azure.RequestContext)
  commentId: M:Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations(Azure.WaitUntil,System.Guid,Azure.RequestContext)
  name: CancelAnalyzeConversations(WaitUntil, Guid, RequestContext)
  fullName: Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations(WaitUntil, Guid, RequestContext)
  nameWithType: ConversationAnalysisClient.CancelAnalyzeConversations(WaitUntil, Guid, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation CancelAnalyzeConversations (Azure.WaitUntil waitUntil, Guid jobId, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member CancelAnalyzeConversations : Azure.WaitUntil * Guid * Azure.RequestContext -> Azure.Operation

        override this.CancelAnalyzeConversations : Azure.WaitUntil * Guid * Azure.RequestContext -> Azure.Operation
  - lang: vb
    values:
    - value: Public Overridable Function CancelAnalyzeConversations (waitUntil As WaitUntil, jobId As Guid, Optional context As RequestContext = Nothing) As Operation
  monikers:
  - azure-dotnet
  summary: >-
    [Protocol Method] Cancel a long-running Text Analysis conversations job

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li></ul>
  remarks: '<p>Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/language/2023-04-01/analyze-conversation/cancel-job</p>'
  examples: >-
    This sample shows how to call CancelAnalyzeConversations with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ConversationAnalysisClient(endpoint, credential);


    var operation = client.CancelAnalyzeConversations(WaitUntil.Completed, Guid.NewGuid());


    Console.WriteLine(operation.GetRawResponse().Status);

    ```
  metadata: {}
uid: Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations*
commentId: Overload:Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations
namespace: Azure.AI.Language.Conversations
name: CancelAnalyzeConversations
fullName: Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations
nameWithType: ConversationAnalysisClient.CancelAnalyzeConversations
assembliesWithMoniker:
- value: Azure.AI.Language.Conversations.dll
packagesWithMoniker:
- value: Azure.AI.Language.Conversations v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations
  api_location:
  - Azure.AI.Language.Conversations.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.Conversations.ConversationAnalysisClient.CancelAnalyzeConversations
  - Azure::AI::Language::Conversations::ConversationAnalysisClient::CancelAnalyzeConversations
  - CancelAnalyzeConversations
  - ConversationAnalysisClient.CancelAnalyzeConversations
  - ConversationAnalysisClient::CancelAnalyzeConversations
  helpviewer_keywords:
  - ConversationAnalysisClient.CancelAnalyzeConversations method [.NET]
  - CancelAnalyzeConversations method [.NET], class ConversationAnalysisClient
  - ConversationAnalysisClient.CancelAnalyzeConversations(WaitUntil, Guid, RequestContext) method [.NET]
  - CancelAnalyzeConversations(WaitUntil, Guid, RequestContext) method [.NET], class ConversationAnalysisClient
  monikers:
  - azure-dotnet
