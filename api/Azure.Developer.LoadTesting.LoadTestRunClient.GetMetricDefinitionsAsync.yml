### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service. Details of the response body schema are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: testRunId
    description: Unique name for the load test run, must contain only lower-case alphabetic, numeric, underscore or hyphen characters.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: metricNamespace
    description: Metric namespace to query metric definitions for.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">testRunId</code> or <code data-dev-comment-type="paramref">metricNamespace</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">testRunId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync(System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync(System.String,System.String,Azure.RequestContext)
  name: GetMetricDefinitionsAsync(String, String, RequestContext)
  fullName: Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync(String, String, RequestContext)
  nameWithType: LoadTestRunClient.GetMetricDefinitionsAsync(String, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> GetMetricDefinitionsAsync (string testRunId, string metricNamespace, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetMetricDefinitionsAsync : string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.GetMetricDefinitionsAsync : string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function GetMetricDefinitionsAsync (testRunId As String, metricNamespace As String, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: List the metric definitions for a load test run.
  remarks: >-
    <p>Below is the JSON schema for the response payload.</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">MetricDefinitionCollection</code>: 


    ```

    {
      value: [
        {
          dimensions: [
            {
              description: string, # Optional. The description
              name: string, # Optional. The name
            }
          ], # Optional. List of dimensions
          description: string, # Optional. The metric description
          name: string, # Optional. The metric name
          namespace: string, # Optional. The namespace the metric belongs to.
          primaryAggregationType: "Average" | "Count" | "None" | "Total" | "Percentile90" | "Percentile95" | "Percentile99", # Optional. The primary aggregation type value defining how to use the values for display.
          supportedAggregationTypes: [string], # Optional. The collection of what all aggregation types are supported.
          unit: "NotSpecified" | "Percent" | "Count" | "Seconds" | "Milliseconds" | "Bytes" | "BytesPerSecond" | "CountPerSecond", # Optional. The unit of the metric.
          metricAvailabilities: [
            {
              timeGrain: "PT5S" | "PT10S" | "PT1M" | "PT5M" | "PT1H", # Optional. The time grain specifies the aggregation interval for the metric. Expressed as a duration 'PT1M', 'PT1H', etc.
            }
          ], # Optional. Metric availability specifies the time grain (aggregation interval or frequency).
        }
      ], # Required. the values for the metric definitions.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call GetMetricDefinitionsAsync with required parameters and parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new LoadTestRunClient(endpoint, credential);


    Response response = await client.GetMetricDefinitionsAsync("<testRunId>", "<metricNamespace>");


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("dimensions")[0].GetProperty("description").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("dimensions")[0].GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("description").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("namespace").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("primaryAggregationType").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("supportedAggregationTypes")[0].ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("unit").ToString());

    Console.WriteLine(result.GetProperty("value")[0].GetProperty("metricAvailabilities")[0].GetProperty("timeGrain").ToString());

    ```
  metadata: {}
uid: Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync*
commentId: Overload:Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync
namespace: Azure.Developer.LoadTesting
name: GetMetricDefinitionsAsync
fullName: Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync
nameWithType: LoadTestRunClient.GetMetricDefinitionsAsync
assembliesWithMoniker:
- value: Azure.Developer.LoadTesting.dll
packagesWithMoniker:
- value: Azure.Developer.LoadTesting v1.0.1
  monikers:
  - azure-dotnet
- value: Azure.Developer.LoadTesting v1.0.0-beta.2
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync
  api_location:
  - Azure.Developer.LoadTesting.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Developer.LoadTesting.LoadTestRunClient.GetMetricDefinitionsAsync
  - Azure::Developer::LoadTesting::LoadTestRunClient::GetMetricDefinitionsAsync
  - GetMetricDefinitionsAsync
  - LoadTestRunClient.GetMetricDefinitionsAsync
  - LoadTestRunClient::GetMetricDefinitionsAsync
  helpviewer_keywords:
  - LoadTestRunClient.GetMetricDefinitionsAsync method [.NET]
  - GetMetricDefinitionsAsync method [.NET], class LoadTestRunClient
  - LoadTestRunClient.GetMetricDefinitionsAsync(String, String, RequestContext) method [.NET]
  - GetMetricDefinitionsAsync(String, String, RequestContext) method [.NET], class LoadTestRunClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
