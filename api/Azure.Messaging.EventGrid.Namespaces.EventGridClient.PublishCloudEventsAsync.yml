### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.EventGrid.Namespaces.PublishResult?alt=Azure.Messaging.EventGrid.Namespaces.PublishResult&text=PublishResult" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: topicName
    description: Topic Name.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: events
    description: Array of Cloud Events being published.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.CloudEvent?alt=Azure.Messaging.CloudEvent&text=CloudEvent" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">topicName</code> or <code data-dev-comment-type="paramref">events</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">topicName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.CloudEvent},System.Threading.CancellationToken)
  commentId: M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(System.String,System.Collections.Generic.IEnumerable{Azure.Messaging.CloudEvent},System.Threading.CancellationToken)
  name: PublishCloudEventsAsync(String, IEnumerable<CloudEvent>, CancellationToken)
  fullName: Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(String, IEnumerable<CloudEvent>, CancellationToken)
  nameWithType: EventGridClient.PublishCloudEventsAsync(String, IEnumerable<CloudEvent>, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.Messaging.EventGrid.Namespaces.PublishResult>> PublishCloudEventsAsync (string topicName, System.Collections.Generic.IEnumerable<Azure.Messaging.CloudEvent> events, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member PublishCloudEventsAsync : string * seq<Azure.Messaging.CloudEvent> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Messaging.EventGrid.Namespaces.PublishResult>>

        override this.PublishCloudEventsAsync : string * seq<Azure.Messaging.CloudEvent> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Messaging.EventGrid.Namespaces.PublishResult>>
  - lang: vb
    values:
    - value: Public Overridable Function PublishCloudEventsAsync (topicName As String, events As IEnumerable(Of CloudEvent), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PublishResult))
  monikers:
  - azure-dotnet-preview
  summary: 'Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.'
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: topicName
    description: Topic Name.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">topicName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">topicName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)
  name: PublishCloudEventsAsync(String, RequestContent, RequestContext)
  fullName: Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync(String, RequestContent, RequestContext)
  nameWithType: EventGridClient.PublishCloudEventsAsync(String, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> PublishCloudEventsAsync (string topicName, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member PublishCloudEventsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.PublishCloudEventsAsync : string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function PublishCloudEventsAsync (topicName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status code with an empty JSON object in response. Otherwise, the server can return various error codes. For example, 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410: which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error. 

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li></ul>
  metadata: {}
uid: Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync*
commentId: Overload:Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync
namespace: Azure.Messaging.EventGrid.Namespaces
name: PublishCloudEventsAsync
fullName: Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync
nameWithType: EventGridClient.PublishCloudEventsAsync
assembliesWithMoniker:
- value: Azure.Messaging.EventGrid.dll
packagesWithMoniker:
- value: Azure.Messaging.EventGrid v4.18.0-beta.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync
  api_location:
  - Azure.Messaging.EventGrid.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Messaging.EventGrid.Namespaces.EventGridClient.PublishCloudEventsAsync
  - Azure::Messaging::EventGrid::Namespaces::EventGridClient::PublishCloudEventsAsync
  - PublishCloudEventsAsync
  - EventGridClient.PublishCloudEventsAsync
  - EventGridClient::PublishCloudEventsAsync
  helpviewer_keywords:
  - EventGridClient.PublishCloudEventsAsync method [.NET]
  - PublishCloudEventsAsync method [.NET], class EventGridClient
  - EventGridClient.PublishCloudEventsAsync(String, IEnumerable<CloudEvent>, CancellationToken) method [.NET]
  - PublishCloudEventsAsync(String, IEnumerable<CloudEvent>, CancellationToken) method [.NET], class EventGridClient
  - EventGridClient.PublishCloudEventsAsync(String, RequestContent, RequestContext) method [.NET]
  - PublishCloudEventsAsync(String, RequestContent, RequestContext) method [.NET], class EventGridClient
  monikers:
  - azure-dotnet-preview
