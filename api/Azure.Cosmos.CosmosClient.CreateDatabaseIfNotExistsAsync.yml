### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Cosmos.DatabaseResponse?alt=Azure.Cosmos.DatabaseResponse&text=DatabaseResponse" data-throw-if-not-resolved="True"/>&gt;
    description: A <xref data-throw-if-not-resolved="true" uid="System.Threading.Tasks.Task"></xref> containing a <xref data-throw-if-not-resolved="true" uid="Azure.Response"></xref> which wraps a <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.DatabaseProperties"></xref> containing the resource record.
  parameters:
  - namesWithMoniker:
    - value: id
    description: The database id.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: throughput
    description: (Optional) The throughput provisioned for a database in measurement of Request Units per second in the Azure Cosmos DB service.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: requestOptions
    description: (Optional) A set of additional options that can be set.
    type: <xref href="Azure.Cosmos.RequestOptions?alt=Azure.Cosmos.RequestOptions&text=RequestOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: (Optional) <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> representing request cancellation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync(System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync(System.String,System.Nullable{System.Int32},Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)
  name: CreateDatabaseIfNotExistsAsync(String, Nullable<Int32>, RequestOptions, CancellationToken)
  fullName: Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync(String, Nullable<Int32>, RequestOptions, CancellationToken)
  nameWithType: CosmosClient.CreateDatabaseIfNotExistsAsync(String, Nullable<Int32>, RequestOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Cosmos.DatabaseResponse> CreateDatabaseIfNotExistsAsync (string id, int? throughput = default, Azure.Cosmos.RequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member CreateDatabaseIfNotExistsAsync : string * Nullable<int> * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Cosmos.DatabaseResponse>

        override this.CreateDatabaseIfNotExistsAsync : string * Nullable<int> * Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Cosmos.DatabaseResponse>
  - lang: vb
    values:
    - value: Public Overridable Function CreateDatabaseIfNotExistsAsync (id As String, Optional throughput As Nullable(Of Integer) = Nothing, Optional requestOptions As RequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DatabaseResponse)
  monikers:
  - azure-dotnet-preview
  summary: >-
    <p>Check if a database exists, and if it doesn't, create it.
       Only the database id is used to verify if there is an existing database. Other database properties 
       such as throughput are not validated and can be different then the passed properties.</p>
    <p>A database manages users, permissions and a set of containers.
       Each Azure Cosmos DB Database Account is able to support multiple independent named databases,
       with the database being the logical container for data.</p>
    <p>Each Database consists of one or more containers, each of which in turn contain one or more
       documents. Since databases are an administrative resource, the Service Master Key will be
       required in order to access and successfully complete any action using the User APIs.</p>
  remarks: <a href="https://docs.microsoft.com/azure/cosmos-db/request-units">https://docs.microsoft.com/azure/cosmos-db/request-units</a> for details on provision throughput.
  metadata: {}
uid: Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync*
commentId: Overload:Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync
namespace: Azure.Cosmos
name: CreateDatabaseIfNotExistsAsync
fullName: Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync
nameWithType: CosmosClient.CreateDatabaseIfNotExistsAsync
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.CosmosClient.CreateDatabaseIfNotExistsAsync
  - Azure::Cosmos::CosmosClient::CreateDatabaseIfNotExistsAsync
  - CreateDatabaseIfNotExistsAsync
  - CosmosClient.CreateDatabaseIfNotExistsAsync
  - CosmosClient::CreateDatabaseIfNotExistsAsync
  helpviewer_keywords:
  - CosmosClient.CreateDatabaseIfNotExistsAsync method [.NET]
  - CreateDatabaseIfNotExistsAsync method [.NET], class CosmosClient
  - CosmosClient.CreateDatabaseIfNotExistsAsync(String, Nullable<Int32>, RequestOptions, CancellationToken) method [.NET]
  - CreateDatabaseIfNotExistsAsync(String, Nullable<Int32>, RequestOptions, CancellationToken) method [.NET], class CosmosClient
  monikers:
  - azure-dotnet-preview
