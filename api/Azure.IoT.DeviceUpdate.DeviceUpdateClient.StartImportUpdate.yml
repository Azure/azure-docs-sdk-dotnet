### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation"></xref> representing an asynchronous operation on the service.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)
  name: StartImportUpdate(WaitUntil, RequestContent, RequestContext)
  fullName: Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate(WaitUntil, RequestContent, RequestContext)
  nameWithType: DeviceUpdateClient.StartImportUpdate(WaitUntil, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation StartImportUpdate (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member StartImportUpdate : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation

        override this.StartImportUpdate : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation
  - lang: vb
    values:
    - value: Public Overridable Function StartImportUpdate (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation
  monikers:
  - azure-dotnet
  summary: Import new update version. This is a long-running-operation; use Operation-Location response header value to check for operation status.
  remarks: >-
    <p>Below is the JSON schema for the request payload.</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">ImportUpdateInputItem</code>: 


    ```

    {
                  importManifest: {
                    url: string, # Required. Azure Blob location from which the import manifest can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours.
                    sizeInBytes: number, # Required. File size in number of bytes.
                    hashes: Dictionary<string, string>, # Required. A JSON object containing the hash(es) of the file. At least SHA256 hash is required. This object can be thought of as a set of key-value pairs where the key is the hash algorithm, and the value is the hash of the file calculated using that algorithm.
                  }, # Required. Import manifest metadata like source URL, file size/hashes, etc.
                  friendlyName: string, # Optional. Friendly update name.
                  files: [
                    {
                      filename: string, # Required. Update file name as specified inside import manifest.
                      url: string, # Required. Azure Blob location from which the update file can be downloaded by Device Update for IoT Hub. This is typically a read-only SAS-protected blob URL with an expiration set to at least 4 hours.
                    }
                  ], # Optional. One or more update file properties like filename and source URL.
                }
    ```

    </p>
  examples: >-
    This sample shows how to call StartImportUpdate with required parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new DeviceUpdateClient(endpoint, "<instanceId>", credential);


    var data = new[] {
        new {
            importManifest = new {
                url = "<url>",
                sizeInBytes = 1234L,
                hashes = new {
                    key = "<String>",
                },
            },
            friendlyName = "<friendlyName>",
            files = new[] {
                new {
                    filename = "<filename>",
                    url = "<url>",
                }
            },
        }
    };


    var operation = client.StartImportUpdate(WaitUntil.Completed, RequestContent.Create(data));


    var response = operation.WaitForCompletionResponse();

    Console.WriteLine(response.Status)

    ```
  metadata: {}
uid: Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate*
commentId: Overload:Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate
namespace: Azure.IoT.DeviceUpdate
name: StartImportUpdate
fullName: Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate
nameWithType: DeviceUpdateClient.StartImportUpdate
assembliesWithMoniker:
- value: Azure.IoT.DeviceUpdate.dll
packagesWithMoniker:
- value: Azure.IoT.DeviceUpdate v1.0.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate
  api_location:
  - Azure.IoT.DeviceUpdate.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.IoT.DeviceUpdate.DeviceUpdateClient.StartImportUpdate
  - Azure::IoT::DeviceUpdate::DeviceUpdateClient::StartImportUpdate
  - StartImportUpdate
  - DeviceUpdateClient.StartImportUpdate
  - DeviceUpdateClient::StartImportUpdate
  helpviewer_keywords:
  - DeviceUpdateClient.StartImportUpdate method [.NET]
  - StartImportUpdate method [.NET], class DeviceUpdateClient
  - DeviceUpdateClient.StartImportUpdate(WaitUntil, RequestContent, RequestContext) method [.NET]
  - StartImportUpdate(WaitUntil, RequestContent, RequestContext) method [.NET], class DeviceUpdateClient
  monikers:
  - azure-dotnet
