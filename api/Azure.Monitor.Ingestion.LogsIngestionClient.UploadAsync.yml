### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: ruleId
    description: The immutable Id of the Data Collection Rule resource.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: streamName
    description: The streamDeclaration name as defined in the Data Collection Rule.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">ruleId</code>, <code data-dev-comment-type="paramref">streamName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">ruleId</code> or <code data-dev-comment-type="paramref">streamName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  name: UploadAsync(String, String, RequestContent, RequestContext)
  fullName: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(String, String, RequestContent, RequestContext)
  nameWithType: LogsIngestionClient.UploadAsync(String, String, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> UploadAsync (string ruleId, string streamName, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member UploadAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.UploadAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function UploadAsync (ruleId As String, streamName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: Ingestion API used to directly ingest data using Data Collection Rules.
  remarks: See error response code and error response message for more detail.
  examples: >-
    This sample shows how to call UploadAsync with required parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new LogsIngestionClient(endpoint, credential);


    var data = new[] {
        new {}
    };


    Response response = await client.UploadAsync("<ruleId>", "<streamName>", RequestContent.Create(data));

    Console.WriteLine(response.Status);

    ```

    This sample shows how to call UploadAsync with all parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new LogsIngestionClient(endpoint, credential);


    var data = new[] {
        new {}
    };


    Response response = await client.UploadAsync("<ruleId>", "<streamName>", RequestContent.Create(data), <gzip>);

    Console.WriteLine(response.Status);

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: ruleId
    description: The immutable Id of the Data Collection Rule resource.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: streamName
    description: The streamDeclaration name as defined in the Data Collection Rule.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: contentEncoding
    description: If content is already gzipped, put "gzip". Default behavior is to gzip all input.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">ruleId</code>, <code data-dev-comment-type="paramref">streamName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">ruleId</code> or <code data-dev-comment-type="paramref">streamName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)
  commentId: M:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(System.String,System.String,Azure.Core.RequestContent,System.String,Azure.RequestContext)
  name: UploadAsync(String, String, RequestContent, String, RequestContext)
  fullName: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync(String, String, RequestContent, String, RequestContext)
  nameWithType: LogsIngestionClient.UploadAsync(String, String, RequestContent, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> UploadAsync (string ruleId, string streamName, Azure.Core.RequestContent content, string contentEncoding = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member UploadAsync : string * string * Azure.Core.RequestContent * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.UploadAsync : string * string * Azure.Core.RequestContent * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function UploadAsync (ruleId As String, streamName As String, content As RequestContent, Optional contentEncoding As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet
  summary: Ingestion API used to directly ingest data using Data Collection Rules.
  remarks: See error response code and error response message for more detail.
  examples: >-
    This sample shows how to call UploadAsync with required parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new LogsIngestionClient(endpoint, credential);


    var data = new[] {
        new {}
    };


    Response response = await client.UploadAsync("<ruleId>", "<streamName>", RequestContent.Create(data));

    Console.WriteLine(response.Status);

    ```

    This sample shows how to call UploadAsync with all parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new LogsIngestionClient(endpoint, credential);


    var data = new[] {
        new {}
    };


    Response response = await client.UploadAsync("<ruleId>", "<streamName>", RequestContent.Create(data), "<contentEncoding>");

    Console.WriteLine(response.Status);

    ```
  metadata: {}
- typeParameters:
  - name: T
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: ruleId
    description: The immutable Id of the Data Collection Rule resource.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: streamName
    description: The streamDeclaration name as defined in the Data Collection Rule.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: logs
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;T&gt;
  - namesWithMoniker:
    - value: options
    description: The options model to configure the request to upload logs to Azure Monitor.
    type: <xref href="Azure.Monitor.Ingestion.LogsUploadOptions?alt=Azure.Monitor.Ingestion.LogsUploadOptions&text=LogsUploadOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">ruleId</code>, <code data-dev-comment-type="paramref">streamName</code> or <code data-dev-comment-type="paramref">logs</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">ruleId</code> or <code data-dev-comment-type="paramref">streamName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-Success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},Azure.Monitor.Ingestion.LogsUploadOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},Azure.Monitor.Ingestion.LogsUploadOptions,System.Threading.CancellationToken)
  name: UploadAsync<T>(String, String, IEnumerable<T>, LogsUploadOptions, CancellationToken)
  fullName: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync<T>(String, String, IEnumerable<T>, LogsUploadOptions, CancellationToken)
  nameWithType: LogsIngestionClient.UploadAsync<T>(String, String, IEnumerable<T>, LogsUploadOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> UploadAsync<T> (string ruleId, string streamName, System.Collections.Generic.IEnumerable<T> logs, Azure.Monitor.Ingestion.LogsUploadOptions options = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member UploadAsync : string * string * seq<'T> * Azure.Monitor.Ingestion.LogsUploadOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response>

        override this.UploadAsync : string * string * seq<'T> * Azure.Monitor.Ingestion.LogsUploadOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function UploadAsync(Of T) (ruleId As String, streamName As String, logs As IEnumerable(Of T), Optional options As LogsUploadOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet
  summary: Ingestion API used to directly ingest data using Data Collection Rules.
  remarks: See error response code and error response message for more detail.
  examples: >-
    This sample shows how to call Upload with required parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-account-name.azure.com>");

    var client = new LogsIngestionClient(endpoint, credential);


    var data = new[] {
        new {}
    };


    Response response = client.Upload("<ruleId>", "<streamName>", data);

    Console.WriteLine(response.Status);

    ```
  metadata: {}
- typeParameters:
  - name: T
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Monitor.Ingestion.UploadLogsResult?alt=Azure.Monitor.Ingestion.UploadLogsResult&text=UploadLogsResult" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: ruleId
    description: The immutable Id of the Data Collection Rule resource.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: streamName
    description: The streamDeclaration name as defined in the Data Collection Rule.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: logs
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;T&gt;
  - namesWithMoniker:
    - value: options
    description: The options model to configure the request to upload logs to Azure Monitor.
    type: <xref href="Azure.Monitor.Ingestion.UploadLogsOptions?alt=Azure.Monitor.Ingestion.UploadLogsOptions&text=UploadLogsOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">ruleId</code>, <code data-dev-comment-type="paramref">streamName</code> or <code data-dev-comment-type="paramref">logs</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">ruleId</code> or <code data-dev-comment-type="paramref">streamName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-Success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},Azure.Monitor.Ingestion.UploadLogsOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{``0},Azure.Monitor.Ingestion.UploadLogsOptions,System.Threading.CancellationToken)
  name: UploadAsync<T>(String, String, IEnumerable<T>, UploadLogsOptions, CancellationToken)
  fullName: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync<T>(String, String, IEnumerable<T>, UploadLogsOptions, CancellationToken)
  nameWithType: LogsIngestionClient.UploadAsync<T>(String, String, IEnumerable<T>, UploadLogsOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.Monitor.Ingestion.UploadLogsResult>> UploadAsync<T> (string ruleId, string streamName, System.Collections.Generic.IEnumerable<T> logs, Azure.Monitor.Ingestion.UploadLogsOptions options = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member UploadAsync : string * string * seq<'T> * Azure.Monitor.Ingestion.UploadLogsOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Monitor.Ingestion.UploadLogsResult>>

        override this.UploadAsync : string * string * seq<'T> * Azure.Monitor.Ingestion.UploadLogsOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.Monitor.Ingestion.UploadLogsResult>>
  - lang: vb
    values:
    - value: Public Overridable Function UploadAsync(Of T) (ruleId As String, streamName As String, logs As IEnumerable(Of T), Optional options As UploadLogsOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of UploadLogsResult))
  monikers:
  - azure-dotnet-preview
  summary: Ingestion API used to directly ingest data using Data Collection Rules.
  remarks: See error response code and error response message for more detail.
  examples: >-
    This sample shows how to call Upload with required parameters and request content.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-account-name.azure.com>");

    var client = new LogsIngestionClient(endpoint, credential);


    var data = new[] {
        new {}
    };


    Response response = client.Upload("<ruleId>", "<streamName>", data);

    Console.WriteLine(response.Status);

    ```
  metadata: {}
uid: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync*
commentId: Overload:Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync
namespace: Azure.Monitor.Ingestion
name: UploadAsync
fullName: Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync
nameWithType: LogsIngestionClient.UploadAsync
assembliesWithMoniker:
- value: Azure.Monitor.Ingestion.dll
packagesWithMoniker:
- value: Azure.Monitor.Ingestion v1.0.0-beta.4
  monikers:
  - azure-dotnet-preview
- value: Azure.Monitor.Ingestion v1.0.0
  monikers:
  - azure-dotnet
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
- azure-dotnet
metadata:
  api_name:
  - Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync
  api_location:
  - Azure.Monitor.Ingestion.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync
  - Azure::Monitor::Ingestion::LogsIngestionClient::UploadAsync
  - UploadAsync
  - LogsIngestionClient.UploadAsync
  - LogsIngestionClient::UploadAsync
  - Azure.Monitor.Ingestion.LogsIngestionClient.UploadAsync``1
  - Azure::Monitor::Ingestion::LogsIngestionClient::UploadAsync``1
  - UploadAsync``1
  - LogsIngestionClient.UploadAsync``1
  - LogsIngestionClient::UploadAsync``1
  helpviewer_keywords:
  - LogsIngestionClient.UploadAsync method [.NET]
  - UploadAsync method [.NET], class LogsIngestionClient
  - LogsIngestionClient.UploadAsync(String, String, RequestContent, RequestContext) method [.NET]
  - UploadAsync(String, String, RequestContent, RequestContext) method [.NET], class LogsIngestionClient
  - LogsIngestionClient.UploadAsync(String, String, RequestContent, String, RequestContext) method [.NET]
  - UploadAsync(String, String, RequestContent, String, RequestContext) method [.NET], class LogsIngestionClient
  - LogsIngestionClient.UploadAsync<T>(String, String, IEnumerable<T>, LogsUploadOptions, CancellationToken) method [.NET]
  - UploadAsync<T>(String, String, IEnumerable<T>, LogsUploadOptions, CancellationToken) method [.NET], class LogsIngestionClient
  - LogsIngestionClient.UploadAsync<T>(String, String, IEnumerable<T>, UploadLogsOptions, CancellationToken) method [.NET]
  - UploadAsync<T>(String, String, IEnumerable<T>, UploadLogsOptions, CancellationToken) method [.NET], class LogsIngestionClient
  monikers:
  - azure-dotnet-preview
  - azure-dotnet
