### YamlMime:NetMember
type: event
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Func`2?alt=System.Func&text=Func" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs?alt=Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs&text=ProcessErrorEventArgs" data-throw-if-not-resolved="True"/>,<xref href="System.Threading.Tasks.Task?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&gt;
  exceptions:
  - description: If an attempt is made to remove a handler that doesn't match the current handler registered.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: If an attempt is made to add a handler when one is currently registered.
    type: <xref href="System.NotSupportedException" data-throw-if-not-resolved="True"/>
  type: event
  uid: Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync
  commentId: E:Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync
  name: ProcessErrorAsync
  fullName: Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync
  nameWithType: EventProcessorClient.ProcessErrorAsync
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public event Func<Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs,System.Threading.Tasks.Task> ProcessErrorAsync;
  - lang: fsharp
    values:
    - value: 'member this.ProcessErrorAsync : Func<Azure.Messaging.EventHubs.Processor.ProcessErrorEventArgs, System.Threading.Tasks.Task> '
  - lang: vb
    values:
    - value: 'Public Custom Event ProcessErrorAsync As Func(Of ProcessErrorEventArgs, Task) '
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: >-
    Performs the tasks needed when an unexpected exception occurs within the operation of the event processor infrastructure.  Implementation is mandatory.


    This error handler is invoked when there is an exception observed within the <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventProcessorClient"></xref> itself; it is not invoked for exceptions in

    code that has been implemented to process events or other event handlers and extension points that execute developer code.  The <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventProcessorClient"></xref> will

    make every effort to recover from exceptions and continue processing.  Should an exception that cannot be recovered from be encountered, the processor will attempt to forfeit

    ownership of all partitions that it was processing so that work may be redistributed.


    The exceptions surfaced to this method may be fatal or non-fatal; because the processor may not be able to accurately predict whether an

    exception was fatal or whether its state was corrupted, this method has responsibility for making the determination as to whether processing

    should be terminated or restarted.  If desired, this can be done safely by calling <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventProcessorClient.StopProcessingAsync(System.Threading.CancellationToken)"></xref>  and/or <xref data-throw-if-not-resolved="true" uid="Azure.Messaging.EventHubs.EventProcessorClient.StartProcessingAsync(System.Threading.CancellationToken)"></xref>.


    It is recommended that, for production scenarios, the decision be made by considering observations made by this error handler, the method invoked

    when initializing processing for a partition, and the method invoked when processing for a partition is stopped.  Many developers will also include

    data from their monitoring platforms in this decision as well.


    As with event processing, should an exception occur in the code for the error handler, the event processor will allow it to bubble and will not attempt to handle

    it in any way.  Developers are strongly encouraged to take exception scenarios into account and guard against them using try/catch blocks and other means as appropriate.
  remarks: <p>This handler will be invoked concurrently and is not awaited by the processor, as each error is independent.  No time limit is imposed on an invocation of this handler; it is safe for implementations to perform long-running operations and retries as needed.</p>
  metadata: {}
namespace: Azure.Messaging.EventHubs
assembliesWithMoniker:
- value: Azure.Messaging.EventHubs.Processor.dll
packagesWithMoniker:
- value: Azure.Messaging.EventHubs.Processor v5.9.2
  monikers:
  - azure-dotnet
- value: Azure.Messaging.EventHubs.Processor v5.7.0-beta.5
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync
  - Azure.Messaging.EventHubs.EventProcessorClient.add_ProcessErrorAsync
  - Azure.Messaging.EventHubs.EventProcessorClient.remove_ProcessErrorAsync
  api_location:
  - Azure.Messaging.EventHubs.Processor.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Messaging.EventHubs.EventProcessorClient.ProcessErrorAsync
  - Azure::Messaging::EventHubs::EventProcessorClient::ProcessErrorAsync
  - ProcessErrorAsync
  - EventProcessorClient.ProcessErrorAsync
  - EventProcessorClient::ProcessErrorAsync
  helpviewer_keywords:
  - EventProcessorClient.ProcessErrorAsync event [.NET]
  - ProcessErrorAsync event [.NET], class EventProcessorClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
