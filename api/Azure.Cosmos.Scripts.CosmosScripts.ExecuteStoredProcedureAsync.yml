### YamlMime:NetMember
type: method
members:
- typeParameters:
  - description: The return type that is JSON serializable.
    name: TOutput
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1?alt=Azure.Cosmos.Scripts.StoredProcedureExecuteResponse&text=StoredProcedureExecuteResponse" data-throw-if-not-resolved="True"/>&lt;TOutput&gt;&gt;
    description: The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.
  parameters:
  - namesWithMoniker:
    - value: storedProcedureId
    description: The identifier of the Stored Procedure to execute.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: partitionKey
    description: The partition key for the item. <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.PartitionKey"></xref>
    type: <xref href="Azure.Cosmos.PartitionKey?alt=Azure.Cosmos.PartitionKey&text=PartitionKey" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: parameters
    description: (Optional) An array of dynamic objects representing the parameters for the stored procedure.
    type: <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>[]
  - namesWithMoniker:
    - value: requestOptions
    description: (Optional) The options for the stored procedure request <xref data-throw-if-not-resolved="true" uid="Azure.Cosmos.StoredProcedureRequestOptions"></xref>
    type: <xref href="Azure.Cosmos.StoredProcedureRequestOptions?alt=Azure.Cosmos.StoredProcedureRequestOptions&text=StoredProcedureRequestOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: (Optional) <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> representing request cancellation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: If <code data-dev-comment-type="paramref">storedProcedureId</code> or <code data-dev-comment-type="paramref">partitionKey</code>  are not set.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync``1(System.String,Azure.Cosmos.PartitionKey,System.Object[],Azure.Cosmos.StoredProcedureRequestOptions,System.Threading.CancellationToken)
  commentId: M:Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync``1(System.String,Azure.Cosmos.PartitionKey,System.Object[],Azure.Cosmos.StoredProcedureRequestOptions,System.Threading.CancellationToken)
  name: ExecuteStoredProcedureAsync<TOutput>(String, PartitionKey, Object[], StoredProcedureRequestOptions, CancellationToken)
  fullName: Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync<TOutput>(String, PartitionKey, Object[], StoredProcedureRequestOptions, CancellationToken)
  nameWithType: CosmosScripts.ExecuteStoredProcedureAsync<TOutput>(String, PartitionKey, Object[], StoredProcedureRequestOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public abstract System.Threading.Tasks.Task<Azure.Cosmos.Scripts.StoredProcedureExecuteResponse<TOutput>> ExecuteStoredProcedureAsync<TOutput> (string storedProcedureId, Azure.Cosmos.PartitionKey partitionKey, object[] parameters, Azure.Cosmos.StoredProcedureRequestOptions requestOptions = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: "abstract member ExecuteStoredProcedureAsync : string * Azure.Cosmos.PartitionKey * obj[] * Azure.Cosmos.StoredProcedureRequestOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Cosmos.Scripts.StoredProcedureExecuteResponse<'Output>>"
  - lang: vb
    values:
    - value: Public MustOverride Function ExecuteStoredProcedureAsync(Of TOutput) (storedProcedureId As String, partitionKey As PartitionKey, parameters As Object(), Optional requestOptions As StoredProcedureRequestOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of StoredProcedureExecuteResponse(Of TOutput))
  monikers:
  - azure-dotnet-preview
  summary: Executes a stored procedure against a container as an asynchronous operation in the Azure Cosmos service.
  examples: >2-
     This creates and executes a stored procedure that appends a string to the first item returned from the query.

    ```csharp

    string sprocBody = @"function simple(prefix, postfix)
       {
           var collection = getContext().getCollection();

           // Query documents and take 1st item.
           var isAccepted = collection.queryDocuments(
           collection.getSelfLink(),
           'SELECT * FROM root r',
           function(err, feed, options) {
               if (err)throw err;

               // Check the feed and if it's empty, set the body to 'no docs found',
               // Otherwise just take 1st element from the feed.
               if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
               else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]) + postfix);
           });

           if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
       }";

    CosmosScripts scripts = this.container.Scripts;

    string sprocId = "appendString";

    StoredProcedureResponse storedProcedureResponse = await scripts.CreateStoredProcedureAsync(
            sprocId,
            sprocBody);

    // Execute the stored procedure

    StoredProcedureExecuteResponse<string> sprocResponse = await scripts.ExecuteStoredProcedureAsync<string>(
                            sprocId,
                            new PartitionKey(testPartitionId),
                            new dynamic[] {"myPrefixString", "myPostfixString"});

    Console.WriteLine(sprocResponse.Resource);

    /// 

    ```
  metadata: {}
uid: Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync*
commentId: Overload:Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync
namespace: Azure.Cosmos.Scripts
name: ExecuteStoredProcedureAsync
fullName: Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync
nameWithType: CosmosScripts.ExecuteStoredProcedureAsync
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync
  - Azure::Cosmos::Scripts::CosmosScripts::ExecuteStoredProcedureAsync
  - ExecuteStoredProcedureAsync
  - CosmosScripts.ExecuteStoredProcedureAsync
  - CosmosScripts::ExecuteStoredProcedureAsync
  - Azure.Cosmos.Scripts.CosmosScripts.ExecuteStoredProcedureAsync``1
  - Azure::Cosmos::Scripts::CosmosScripts::ExecuteStoredProcedureAsync``1
  - ExecuteStoredProcedureAsync``1
  - CosmosScripts.ExecuteStoredProcedureAsync``1
  - CosmosScripts::ExecuteStoredProcedureAsync``1
  helpviewer_keywords:
  - CosmosScripts.ExecuteStoredProcedureAsync method [.NET]
  - ExecuteStoredProcedureAsync method [.NET], class CosmosScripts
  - CosmosScripts.ExecuteStoredProcedureAsync<TOutput>(String, PartitionKey, Object[], StoredProcedureRequestOptions, CancellationToken) method [.NET]
  - ExecuteStoredProcedureAsync<TOutput>(String, PartitionKey, Object[], StoredProcedureRequestOptions, CancellationToken) method [.NET], class CosmosScripts
  monikers:
  - azure-dotnet-preview
