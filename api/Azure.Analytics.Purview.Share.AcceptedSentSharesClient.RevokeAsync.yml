### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation`1"></xref> from the service that will contain a <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: sentShareName
    description: The name of the sent share.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: acceptedSentShareName
    description: The name of the accepted sent share.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: repeatabilityRequestId
    description: If specified, the client directs that the request is repeatable; that is, that the client can make the request multiple times with the same Repeatability-Request-Id and get back an appropriate response without the server executing the request multiple times. The value of the Repeatability-Request-Id is an opaque string representing a client-generated, globally unique for all time, identifier for the request. It is recommended to use version 4 (random) UUIDs.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">sentShareName</code> or <code data-dev-comment-type="paramref">acceptedSentShareName</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">sentShareName</code> or <code data-dev-comment-type="paramref">acceptedSentShareName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync(Azure.WaitUntil,System.String,System.String,System.String,Azure.RequestContext)
  name: RevokeAsync(WaitUntil, String, String, String, RequestContext)
  fullName: Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync(WaitUntil, String, String, String, RequestContext)
  nameWithType: AcceptedSentSharesClient.RevokeAsync(WaitUntil, String, String, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Operation<BinaryData>> RevokeAsync (Azure.WaitUntil waitUntil, string sentShareName, string acceptedSentShareName, string repeatabilityRequestId = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member RevokeAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>

        override this.RevokeAsync : Azure.WaitUntil * string * string * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>
  - lang: vb
    values:
    - value: Public Overridable Function RevokeAsync (waitUntil As WaitUntil, sentShareName As String, acceptedSentShareName As String, Optional repeatabilityRequestId As String = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))
  monikers:
  - azure-dotnet-preview
  summary: Revoke an accepted sent share's access.
  remarks: >-
    <p>Revoke an accepted sent share</p><p>Below is the JSON schema for the response payload.</p><p>Response Body:</p><p><details><summary>InPlaceAcceptedSentShare</summary>Schema for <code data-dev-comment-type="c">InPlaceAcceptedSentShare</code>: 


    ```

    {
                  shareKind: InPlace, # Required. Defines the supported types for share.
                  id: string, # Optional. The resource id of the resource.
                  name: string, # Optional. Name of the resource.
                  type: string, # Optional. Type of the resource.
                  properties: {
                    createdAt: string (ISO 8601 Format), # Optional. created at
                    expirationDate: string (ISO 8601 Format), # Optional. Expiration date of the received share in UTC format
                    receivedShareStatus: "Active" | "Reinstating" | "Revoked" | "Revoking" | "RevokeFailed" | "ReinstateFailed" | "SourceDeleted", # Optional. received share status
                    receiverEmail: string, # Optional. Email of the user/receiver who received the sent share invitation and created the received share
                    receiverName: string, # Optional. Name of the user/receiver who received the sent share invitation and created the received share
                    receiverTargetObjectId: string, # Optional. Receiver's target object id
                    receiverTenantName: string, # Optional. Tenant name of the user/receiver who received the sent share invitation and created the received share
                    senderEmail: string, # Optional. Email of the sender who created the sent share invitation
                    senderName: string, # Optional. Name of the sender who created the sent share invitation
                    senderTenantName: string, # Optional. Tenant name of the sender who created the sent share invitation
                    sharedAt: string (ISO 8601 Format), # Optional. Shared at
                  }, # Required. Properties of in place accepted sent share.
                }
    ```

     </details></p>
  examples: >-
    This sample shows how to call RevokeAsync with required parameters and parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);


    var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>");


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.ToString());

    ```

    This sample shows how to call RevokeAsync with all parameters, and how to parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var client = new AcceptedSentSharesClient("<https://my-service.azure.com>", credential);


    var operation = await client.RevokeAsync(WaitUntil.Completed, "<sentShareName>", "<acceptedSentShareName>", "<repeatabilityRequestId>");


    BinaryData data = await operation.WaitForCompletionAsync();

    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("id").ToString());

    Console.WriteLine(result.GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("type").ToString());

    Console.WriteLine(result.GetProperty("shareKind").ToString());

    ```
  metadata: {}
uid: Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync*
commentId: Overload:Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync
namespace: Azure.Analytics.Purview.Share
name: RevokeAsync
fullName: Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync
nameWithType: AcceptedSentSharesClient.RevokeAsync
assembliesWithMoniker:
- value: Azure.Analytics.Purview.Share.dll
packagesWithMoniker:
- value: Azure.Analytics.Purview.Share v1.0.3-beta.20
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync
  api_location:
  - Azure.Analytics.Purview.Share.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Analytics.Purview.Share.AcceptedSentSharesClient.RevokeAsync
  - Azure::Analytics::Purview::Share::AcceptedSentSharesClient::RevokeAsync
  - RevokeAsync
  - AcceptedSentSharesClient.RevokeAsync
  - AcceptedSentSharesClient::RevokeAsync
  helpviewer_keywords:
  - AcceptedSentSharesClient.RevokeAsync method [.NET]
  - RevokeAsync method [.NET], class AcceptedSentSharesClient
  - AcceptedSentSharesClient.RevokeAsync(WaitUntil, String, String, String, RequestContext) method [.NET]
  - RevokeAsync(WaitUntil, String, String, String, RequestContext) method [.NET], class AcceptedSentSharesClient
  monikers:
  - azure-dotnet-preview
