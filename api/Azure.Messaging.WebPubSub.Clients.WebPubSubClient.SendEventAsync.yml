### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Messaging.WebPubSub.Clients.WebPubSubResult?alt=Azure.Messaging.WebPubSub.Clients.WebPubSubResult&text=WebPubSubResult" data-throw-if-not-resolved="True"/>&gt;
    description: The ack for the operation
  parameters:
  - namesWithMoniker:
    - value: eventName
    description: The event name.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The data content.
    type: <xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: dataType
    description: The data type.
    type: <xref href="Azure.Messaging.WebPubSub.Clients.WebPubSubDataType?alt=Azure.Messaging.WebPubSub.Clients.WebPubSubDataType&text=WebPubSubDataType" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: ackId
    description: The ack-id for the operation. The message with the same ack-id is treated as the same message. Leave it omitted to generate by library.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.UInt64?alt=System.UInt64&text=UInt64" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: fireAndForget
    description: If set to true, the service won't return ack for this message. The return value will be Task of null
    type: <xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: An optional <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> instance to signal the request to cancel the operation.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync(System.String,System.BinaryData,Azure.Messaging.WebPubSub.Clients.WebPubSubDataType,System.Nullable{System.UInt64},System.Boolean,System.Threading.CancellationToken)
  commentId: M:Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync(System.String,System.BinaryData,Azure.Messaging.WebPubSub.Clients.WebPubSubDataType,System.Nullable{System.UInt64},System.Boolean,System.Threading.CancellationToken)
  name: SendEventAsync(String, BinaryData, WebPubSubDataType, Nullable<UInt64>, Boolean, CancellationToken)
  fullName: Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync(String, BinaryData, WebPubSubDataType, Nullable<UInt64>, Boolean, CancellationToken)
  nameWithType: WebPubSubClient.SendEventAsync(String, BinaryData, WebPubSubDataType, Nullable<UInt64>, Boolean, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Messaging.WebPubSub.Clients.WebPubSubResult> SendEventAsync (string eventName, BinaryData content, Azure.Messaging.WebPubSub.Clients.WebPubSubDataType dataType, ulong? ackId = default, bool fireAndForget = false, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member SendEventAsync : string * BinaryData * Azure.Messaging.WebPubSub.Clients.WebPubSubDataType * Nullable<uint64> * bool * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Messaging.WebPubSub.Clients.WebPubSubResult>

        override this.SendEventAsync : string * BinaryData * Azure.Messaging.WebPubSub.Clients.WebPubSubDataType * Nullable<uint64> * bool * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Messaging.WebPubSub.Clients.WebPubSubResult>
  - lang: vb
    values:
    - value: Public Overridable Function SendEventAsync (eventName As String, content As BinaryData, dataType As WebPubSubDataType, Optional ackId As Nullable(Of ULong) = Nothing, Optional fireAndForget As Boolean = false, Optional cancellationToken As CancellationToken = Nothing) As Task(Of WebPubSubResult)
  monikers:
  - azure-dotnet-preview
  summary: Send custom event and wait for the ack.
  metadata: {}
uid: Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync*
commentId: Overload:Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync
namespace: Azure.Messaging.WebPubSub.Clients
name: SendEventAsync
fullName: Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync
nameWithType: WebPubSubClient.SendEventAsync
assembliesWithMoniker:
- value: Azure.Messaging.WebPubSub.Client.dll
packagesWithMoniker:
- value: Azure.Messaging.WebPubSub.Client v1.0.0-beta.2
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync
  api_location:
  - Azure.Messaging.WebPubSub.Client.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Messaging.WebPubSub.Clients.WebPubSubClient.SendEventAsync
  - Azure::Messaging::WebPubSub::Clients::WebPubSubClient::SendEventAsync
  - SendEventAsync
  - WebPubSubClient.SendEventAsync
  - WebPubSubClient::SendEventAsync
  helpviewer_keywords:
  - WebPubSubClient.SendEventAsync method [.NET]
  - SendEventAsync method [.NET], class WebPubSubClient
  - WebPubSubClient.SendEventAsync(String, BinaryData, WebPubSubDataType, Nullable<UInt64>, Boolean, CancellationToken) method [.NET]
  - SendEventAsync(String, BinaryData, WebPubSubDataType, Nullable<UInt64>, Boolean, CancellationToken) method [.NET], class WebPubSubClient
  monikers:
  - azure-dotnet-preview
