### YamlMime:NetType
typeParameters:
- description: The type of the values.
  name: T
type: class
implementsWithMoniker:
- value: <xref href="System.Collections.Generic.IAsyncEnumerable`1?alt=System.Collections.Generic.IAsyncEnumerable&text=IAsyncEnumerable" data-throw-if-not-resolved="True"/>&lt;T&gt;
inheritancesWithMoniker:
- values:
  - <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>
constructors:
- uid: Azure.AsyncPageable`1.#ctor
  monikers:
  - azure-dotnet
- uid: Azure.AsyncPageable`1.#ctor(System.Threading.CancellationToken)
  monikers:
  - azure-dotnet
methods:
- uid: Azure.AsyncPageable`1.AsPages(System.String,System.Nullable{System.Int32})
  monikers:
  - azure-dotnet
- uid: Azure.AsyncPageable`1.FromPages(System.Collections.Generic.IEnumerable{Azure.Page{`0}})
  monikers:
  - azure-dotnet
- uid: Azure.AsyncPageable`1.GetAsyncEnumerator(System.Threading.CancellationToken)
  monikers:
  - azure-dotnet
properties:
- uid: Azure.AsyncPageable`1.CancellationToken
  monikers:
  - azure-dotnet
uid: Azure.AsyncPageable`1
commentId: T:Azure.AsyncPageable`1
namespace: Azure
name: AsyncPageable<T>
fullName: Azure.AsyncPageable<T>
nameWithType: Azure.AsyncPageable<T>
assembliesWithMoniker:
- value: Azure.Core.dll
packagesWithMoniker:
- value: Azure.Core v1.34.0
syntaxWithMoniker:
- lang: csharp
  values:
  - value: 'public abstract class AsyncPageable<T> : System.Collections.Generic.IAsyncEnumerable<T>'
- lang: fsharp
  values:
  - value: >-
      type AsyncPageable<'T> = class
          interface IAsyncEnumerable<'T>
- lang: vb
  values:
  - value: >-
      Public MustInherit Class AsyncPageable(Of T)

      Implements IAsyncEnumerable(Of T)
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
summary: >-
  A collection of values that may take multiple service requests to

  iterate over.
examples: >-
  Example of enumerating an AsyncPageable using the <code data-dev-comment-type="c"> async foreach </code> loop:


  ```csharp

  // call a service method, which returns AsyncPageable<T>

  AsyncPageable<SecretProperties> allSecretProperties = client.GetPropertiesOfSecretsAsync();


  await foreach (SecretProperties secretProperties in allSecretProperties)

  {
      Console.WriteLine(secretProperties.Name);
  }

  ```

  or using a while loop:


  ```csharp

  // call a service method, which returns AsyncPageable<T>

  AsyncPageable<SecretProperties> allSecretProperties = client.GetPropertiesOfSecretsAsync();


  IAsyncEnumerator<SecretProperties> enumerator = allSecretProperties.GetAsyncEnumerator();

  try

  {
      while (await enumerator.MoveNextAsync())
      {
          SecretProperties secretProperties = enumerator.Current;
          Console.WriteLine(secretProperties.Name);
      }
  }

  finally

  {
      await enumerator.DisposeAsync();
  }

  ```
metadata:
  api_name:
  - Azure.AsyncPageable`1
  api_location:
  - Azure.Core.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AsyncPageable`1
  - Azure::AsyncPageable`1
  - Azure.AsyncPageable
  - AsyncPageable`1
  helpviewer_keywords:
  - Azure.AsyncPageable<T> class [.NET]
  monikers:
  - azure-dotnet
