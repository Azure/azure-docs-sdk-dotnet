### YamlMime:NetType
type: class
inheritancesWithMoniker:
- values:
  - <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>
constructors:
- uid: Azure.Cosmos.UniqueKeyPolicy.#ctor
  monikers:
  - azure-dotnet-preview
properties:
- uid: Azure.Cosmos.UniqueKeyPolicy.UniqueKeys
  monikers:
  - azure-dotnet-preview
uid: Azure.Cosmos.UniqueKeyPolicy
commentId: T:Azure.Cosmos.UniqueKeyPolicy
namespace: Azure.Cosmos
name: UniqueKeyPolicy
fullName: Azure.Cosmos.UniqueKeyPolicy
nameWithType: Azure.Cosmos.UniqueKeyPolicy
assembliesWithMoniker:
- value: Azure.Cosmos.dll
packagesWithMoniker:
- value: Azure.Cosmos v4.0.0-preview3
attributesWithMoniker:
- value: System.Text.Json.Serialization.JsonConverterAttribute
syntaxWithMoniker:
- lang: csharp
  values:
  - value: >-
      [System.Text.Json.Serialization.JsonConverter(typeof(Azure.Cosmos.TextJsonUniqueKeyPolicyConverter))]

      public sealed class UniqueKeyPolicy
- lang: fsharp
  values:
  - value: >-
      [<System.Text.Json.Serialization.JsonConverter(typeof(Azure.Cosmos.TextJsonUniqueKeyPolicyConverter))>]

      type UniqueKeyPolicy = class
- lang: vb
  values:
  - value: Public NotInheritable Class UniqueKeyPolicy
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
summary: Represents the unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service.
examples: >-
  var collectionSpec = new DocumentCollection

  {
      Id = "Collection with unique keys",
      UniqueKeyPolicy = new UniqueKeyPolicy
      {
          UniqueKeys = new Collection&lt;UniqueKey&gt; {
              // pair &lt;/name/first, name/last&gt; is unique.
              new UniqueKey { Paths = new Collection&lt;string&gt; { "/name/first", "/name/last" } },
              // /address is unique.
              new UniqueKey { Paths = new Collection&lt;string&gt; { "/address" } },
          }
      }
  };

  DocumentCollection collection = await client.CreateDocumentCollectionAsync(databaseLink, collectionSpec });


  var doc = JObject.Parse("{\"name\": { \"first\": \"John\", \"last\": \"Smith\" }, \"alias\":\"johnsmith\" }");

  await client.CreateDocumentAsync(collection.SelfLink, doc);


  doc = JObject.Parse("{\"name\": { \"first\": \"James\", \"last\": \"Smith\" }, \"alias\":\"jamessmith\" }");

  await client.CreateDocumentAsync(collection.SelfLink, doc);


  try

  {
      // Error: first+last name is not unique.
      doc = JObject.Parse("{\"name\": { \"first\": \"John\", \"last\": \"Smith\" }, \"alias\":\"johnsmith1\" }");
      await client.CreateDocumentAsync(collection.SelfLink, doc);
      throw new Exception("CreateDocumentAsync should have thrown exception/conflict");
  }

  catch (DocumentClientException ex)

  {
      if (ex.StatusCode != System.Net.HttpStatusCode.Conflict) throw;
  }


  try

  {
      // Error: alias is not unique.
      doc = JObject.Parse("{\"name\": { \"first\": \"James Jr\", \"last\": \"Smith\" }, \"alias\":\"jamessmith\" }");
      await client.CreateDocumentAsync(collection.SelfLink, doc);
      throw new Exception("CreateDocumentAsync should have thrown exception/conflict");
  }

  catch (DocumentClientException ex)

  {
      if (ex.StatusCode != System.Net.HttpStatusCode.Conflict) throw;
  }
metadata:
  api_name:
  - Azure.Cosmos.UniqueKeyPolicy
  api_location:
  - Azure.Cosmos.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Cosmos.UniqueKeyPolicy
  - Azure::Cosmos::UniqueKeyPolicy
  - UniqueKeyPolicy
  helpviewer_keywords:
  - Azure.Cosmos.UniqueKeyPolicy class [.NET]
  monikers:
  - azure-dotnet-preview
