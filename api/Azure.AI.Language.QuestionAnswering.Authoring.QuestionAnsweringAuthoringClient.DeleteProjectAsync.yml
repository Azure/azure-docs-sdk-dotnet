### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Operation?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation"></xref> representing an asynchronous operation on the service.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync(Azure.WaitUntil,System.String,Azure.RequestContext)
  commentId: M:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync(Azure.WaitUntil,System.String,Azure.RequestContext)
  name: DeleteProjectAsync(WaitUntil, String, RequestContext)
  fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync(WaitUntil, String, RequestContext)
  nameWithType: QuestionAnsweringAuthoringClient.DeleteProjectAsync(WaitUntil, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Operation> DeleteProjectAsync (Azure.WaitUntil waitUntil, string projectName, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member DeleteProjectAsync : Azure.WaitUntil * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation>

        override this.DeleteProjectAsync : Azure.WaitUntil * string * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation>
  - lang: vb
    values:
    - value: Public Overridable Function DeleteProjectAsync (waitUntil As WaitUntil, projectName As String, Optional context As RequestContext = Nothing) As Task(Of Operation)
  monikers:
  - azure-dotnet
  summary: Delete the project.
  examples: >-
    This sample shows how to call DeleteProjectAsync with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    var operation = await client.DeleteProjectAsync(WaitUntil.Completed, "<projectName>");


    var response = await operation.WaitForCompletionResponseAsync();

    Console.WriteLine(response.Status)

    ```
  metadata: {}
uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync*
commentId: Overload:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync
namespace: Azure.AI.Language.QuestionAnswering.Authoring
name: DeleteProjectAsync
fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync
nameWithType: QuestionAnsweringAuthoringClient.DeleteProjectAsync
assembliesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering.dll
packagesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync
  api_location:
  - Azure.AI.Language.QuestionAnswering.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.DeleteProjectAsync
  - Azure::AI::Language::QuestionAnswering::Authoring::QuestionAnsweringAuthoringClient::DeleteProjectAsync
  - DeleteProjectAsync
  - QuestionAnsweringAuthoringClient.DeleteProjectAsync
  - QuestionAnsweringAuthoringClient::DeleteProjectAsync
  helpviewer_keywords:
  - QuestionAnsweringAuthoringClient.DeleteProjectAsync method [.NET]
  - DeleteProjectAsync method [.NET], class QuestionAnsweringAuthoringClient
  - QuestionAnsweringAuthoringClient.DeleteProjectAsync(WaitUntil, String, RequestContext) method [.NET]
  - DeleteProjectAsync(WaitUntil, String, RequestContext) method [.NET], class QuestionAnsweringAuthoringClient
  monikers:
  - azure-dotnet
