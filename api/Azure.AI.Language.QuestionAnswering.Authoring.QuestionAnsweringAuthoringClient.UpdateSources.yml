### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Pageable`1?alt=Azure.Pageable&text=Pageable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation`1"></xref> from the service that will contain a <xref data-throw-if-not-resolved="true" uid="Azure.Pageable`1"></xref> containing a list of <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> objects once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources(Azure.WaitUntil,System.String,Azure.Core.RequestContent,Azure.RequestContext)
  name: UpdateSources(WaitUntil, String, RequestContent, RequestContext)
  fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources(WaitUntil, String, RequestContent, RequestContext)
  nameWithType: QuestionAnsweringAuthoringClient.UpdateSources(WaitUntil, String, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation<Azure.Pageable<BinaryData>> UpdateSources (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member UpdateSources : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation<Azure.Pageable<BinaryData>>

        override this.UpdateSources : Azure.WaitUntil * string * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation<Azure.Pageable<BinaryData>>
  - lang: vb
    values:
    - value: Public Overridable Function UpdateSources (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of Pageable(Of BinaryData))
  monikers:
  - azure-dotnet
  summary: Updates the sources of a project.
  remarks: >-
    <p>Below is the JSON schema for the request payload and one item in the pageable response. Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/update-sources</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">UpdateSourceRecord</code>: 


    ```

    {
                  op: "add" | "delete" | "replace", # Required. Update operation type for assets.
                  value: {
                    displayName: string, # Optional. Friendly name of the Source.
                    source: string, # Optional. Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source.
                    sourceUri: string, # Required. URI location for the file or url.
                    sourceKind: "file" | "url", # Required. Supported source types.
                    contentStructureKind: "unstructured", # Optional. Content structure type for sources.
                  }, # Required. Update source record.
                }
    ```

    </p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">QnaSourcesMetadata</code>: 


    ```

    {
                  displayName: string, # Optional. Friendly name of the Source.
                  source: string, # Optional. Unique source identifier. Name of the file if it's a 'file' source; otherwise, the complete URL if it's a 'url' source.
                  sourceUri: string, # Required. URI location for the file or url.
                  sourceKind: "file" | "url", # Required. Supported source types.
                  contentStructureKind: "unstructured", # Optional. Content structure type for sources.
                }
    ```

    </p>
  examples: >-
    This sample shows how to call UpdateSources with required parameters and request content and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    var data = new[] {
        new {
            op = "add",
            value = new {
                displayName = "<displayName>",
                source = "<source>",
                sourceUri = "<sourceUri>",
                sourceKind = "file",
                contentStructureKind = "unstructured",
            },
        }
    };


    var operation = client.UpdateSources(WaitUntil.Completed, "<projectName>", RequestContent.Create(data));


    var response = operation.WaitForCompletion();

    foreach (var data in response.Value)

    {
        JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        Console.WriteLine(result.GetProperty("displayName").ToString());
        Console.WriteLine(result.GetProperty("source").ToString());
        Console.WriteLine(result.GetProperty("sourceUri").ToString());
        Console.WriteLine(result.GetProperty("sourceKind").ToString());
        Console.WriteLine(result.GetProperty("contentStructureKind").ToString());
    }

    ```
  metadata: {}
uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources*
commentId: Overload:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources
namespace: Azure.AI.Language.QuestionAnswering.Authoring
name: UpdateSources
fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources
nameWithType: QuestionAnsweringAuthoringClient.UpdateSources
assembliesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering.dll
packagesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources
  api_location:
  - Azure.AI.Language.QuestionAnswering.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.UpdateSources
  - Azure::AI::Language::QuestionAnswering::Authoring::QuestionAnsweringAuthoringClient::UpdateSources
  - UpdateSources
  - QuestionAnsweringAuthoringClient.UpdateSources
  - QuestionAnsweringAuthoringClient::UpdateSources
  helpviewer_keywords:
  - QuestionAnsweringAuthoringClient.UpdateSources method [.NET]
  - UpdateSources method [.NET], class QuestionAnsweringAuthoringClient
  - QuestionAnsweringAuthoringClient.UpdateSources(WaitUntil, String, RequestContent, RequestContext) method [.NET]
  - UpdateSources(WaitUntil, String, RequestContent, RequestContext) method [.NET], class QuestionAnsweringAuthoringClient
  monikers:
  - azure-dotnet
