### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation`1"></xref> from the service that will contain a <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request. Details of the request body schema are in the Remarks section below.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: format
    description: 'Knowledge base Import or Export format. Allowed values: "json" | "tsv" | "excel".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: assetKind
    description: 'Kind of the asset of the project. Allowed values: "qnas" | "synonyms".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)
  commentId: M:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.String,System.String,Azure.RequestContext)
  name: Import(WaitUntil, String, RequestContent, String, String, RequestContext)
  fullName: Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import(WaitUntil, String, RequestContent, String, String, RequestContext)
  nameWithType: QuestionAnsweringProjectsClient.Import(WaitUntil, String, RequestContent, String, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation<BinaryData> Import (Azure.WaitUntil waitUntil, string projectName, Azure.Core.RequestContent content, string format = default, string assetKind = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member Import : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -> Azure.Operation<BinaryData>

        override this.Import : Azure.WaitUntil * string * Azure.Core.RequestContent * string * string * Azure.RequestContext -> Azure.Operation<BinaryData>
  - lang: vb
    values:
    - value: Public Overridable Function Import (waitUntil As WaitUntil, projectName As String, content As RequestContent, Optional format As String = Nothing, Optional assetKind As String = Nothing, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)
  monikers:
  - azure-dotnet-preview
  summary: Import project assets.
  remarks: >-
    <p>Import project assets.</p><p>Below is the JSON schema for the request and response payloads.</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">ImportJobOptions</code>: 


    ```

    {
                  metadata: {
                    description: string, # Optional. Description of the project.
                    language: string, # Required. Language of the text records. This is BCP-47 representation of a language. For example, use "en" for English; "es" for Spanish etc. If not set, use "en" for English as default.
                    multilingualResource: boolean, # Optional. Set to true to enable creating knowledgebases in different languages for the same resource.
                    settings: {
                      defaultAnswer: string, # Optional. Default Answer response when no good match is found in the knowledge base.
                    }, # Optional. Configurable settings of the Project.
                  }, # Optional. Parameters needed to create the project.
                  assets: {
                    synonyms: [
                      {
                        alterations: [string], # Required. Collection of word alterations.
                      }
                    ], # Optional. Collection of synonyms.
                    qnas: [
                      {
                        sourceDisplayName: string, # Optional. Friendly name of the Source.
                        id: number, # Optional. Unique ID for the QnA.
                        answer: string, # Optional. Answer text.
                        source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                        questions: [string], # Optional. List of questions associated with the answer.
                        metadata: Dictionary<string, string>, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                        dialog: {
                          isContextOnly: boolean, # Optional. To mark if a prompt is relevant only with a previous question or not. If true, do not include this QnA as answer for queries without context; otherwise, ignores context and includes this QnA in answers.
                          prompts: [
                            {
                              displayOrder: number, # Optional. Index of the prompt. It is used for ordering of the prompts.
                              qnaId: number, # Optional. ID of the QnA corresponding to the prompt.
                              qna: {
                                id: number, # Optional. Unique ID for the QnA.
                                answer: string, # Optional. Answer text.
                                source: string, # Optional. Source from which QnA was indexed e.g. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs .
                                questions: [string], # Optional. List of questions associated with the answer.
                                metadata: Dictionary<string, string>, # Optional. Metadata associated with the answer, useful to categorize or filter question answers.
                                dialog: QnaDialog, # Optional. Context of a QnA.
                                activeLearningSuggestions: [
                                  {
                                    clusterHead: string, # Optional. Question chosen as the head of suggested questions cluster by Active Learning clustering algorithm.
                                    suggestedQuestions: [
                                      {
                                        question: string, # Optional. Question suggested by the Active Learning feature.
                                        userSuggestedCount: number, # Optional. The number of times the question was suggested explicitly by the user.
                                        autoSuggestedCount: number, # Optional. The number of times the question was suggested automatically by the Active Learning algorithm.
                                      }
                                    ], # Optional. List of all suggested questions for the QnA.
                                  }
                                ], # Optional. List of Active Learning suggestions for the QnA.
                              }, # Optional. QnA record. Either QnAId or QnA record needs to be present in a Prompt.
                              displayText: string, # Optional. Text displayed to represent a follow up question prompt.
                            }
                          ], # Optional. List of prompts associated with the answer.
                        }, # Optional. Context of a QnA.
                        activeLearningSuggestions: [SuggestedQuestionsCluster], # Optional. List of Active Learning suggestions for the QnA.
                        lastUpdatedDateTime: string (ISO 8601 Format), # Optional. Date-time when the QnA was last updated.
                      }
                    ], # Optional. List of QnA records to import.
                  }, # Optional. All assets for this project.
                  fileUri: string, # Optional. Import data File URI.
                }
    ```

    </p><p>Response Body:</p><p><details><summary>ExportJobState</summary>Schema for <code data-dev-comment-type="c">ExportJobState</code>: 


    ```

    {
                  resultUrl: string, # Required. URL to download the result of the Export Job.
                  createdDateTime: string (ISO 8601 Format), # Required.
                  expirationDateTime: string (ISO 8601 Format), # Optional.
                  jobId: string, # Required.
                  lastUpdatedDateTime: string (ISO 8601 Format), # Required.
                  status: "notStarted" | "running" | "succeeded" | "failed" | "cancelled" | "cancelling" | "partiallyCompleted", # Required. Job Status.
                  errors: [
                    {
                      code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable", # Required. One of a server-defined set of error codes.
                      message: string, # Required. A human-readable representation of the error.
                      target: string, # Optional. The target of the error.
                      details: [Error], # Optional. An array of details about specific errors that led to this reported error.
                      innererror: {
                        code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure", # Required. One of a server-defined set of error codes.
                        message: string, # Required. Error message.
                        details: Dictionary<string, string>, # Optional. Error details.
                        target: string, # Optional. Error target.
                        innererror: InnerErrorModel, # Optional. An object containing more specific information than the current object about the error.
                      }, # Optional. An object containing more specific information than the current object about the error.
                    }
                  ], # Optional.
                }
    ```

     </details></p>
  metadata: {}
uid: Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import*
commentId: Overload:Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import
namespace: Azure.AI.Language.QuestionAnswering.Projects
name: Import
fullName: Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import
nameWithType: QuestionAnsweringProjectsClient.Import
assembliesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering.dll
packagesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering v1.1.0-beta.2
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import
  api_location:
  - Azure.AI.Language.QuestionAnswering.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.QuestionAnswering.Projects.QuestionAnsweringProjectsClient.Import
  - Azure::AI::Language::QuestionAnswering::Projects::QuestionAnsweringProjectsClient::Import
  - Import
  - QuestionAnsweringProjectsClient.Import
  - QuestionAnsweringProjectsClient::Import
  helpviewer_keywords:
  - QuestionAnsweringProjectsClient.Import method [.NET]
  - Import method [.NET], class QuestionAnsweringProjectsClient
  - QuestionAnsweringProjectsClient.Import(WaitUntil, String, RequestContent, String, String, RequestContext) method [.NET]
  - Import(WaitUntil, String, RequestContent, String, String, RequestContext) method [.NET], class QuestionAnsweringProjectsClient
  monikers:
  - azure-dotnet-preview
