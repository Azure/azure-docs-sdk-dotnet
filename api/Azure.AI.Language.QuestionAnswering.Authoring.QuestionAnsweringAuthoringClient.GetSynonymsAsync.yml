### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.AsyncPageable`1?alt=Azure.AsyncPageable&text=AsyncPageable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.AsyncPageable`1"></xref> from the service containing a list of <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> objects. Details of the body schema for each item in the collection are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: projectName
    description: The name of the project to use.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">projectName</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">projectName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync(System.String,Azure.RequestContext)
  commentId: M:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync(System.String,Azure.RequestContext)
  name: GetSynonymsAsync(String, RequestContext)
  fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync(String, RequestContext)
  nameWithType: QuestionAnsweringAuthoringClient.GetSynonymsAsync(String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.AsyncPageable<BinaryData> GetSynonymsAsync (string projectName, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetSynonymsAsync : string * Azure.RequestContext -> Azure.AsyncPageable<BinaryData>

        override this.GetSynonymsAsync : string * Azure.RequestContext -> Azure.AsyncPageable<BinaryData>
  - lang: vb
    values:
    - value: Public Overridable Function GetSynonymsAsync (projectName As String, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)
  monikers:
  - azure-dotnet
  summary: Gets all the synonyms of a project.
  remarks: >-
    <p>Below is the JSON schema for one item in the pageable response. Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/cognitiveservices/questionanswering/question-answering-projects/get-synonyms</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">SynonymAsset</code>: 


    ```

    {
                  alterations: [string], # Required. Collection of word alterations.
                }
    ```

    </p>
  examples: >-
    This sample shows how to call GetSynonymsAsync with required parameters and parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new QuestionAnsweringAuthoringClient(endpoint, credential);


    await foreach (var data in client.GetSynonymsAsync("<projectName>"))

    {
        JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        Console.WriteLine(result.GetProperty("alterations")[0].ToString());
    }

    ```
  metadata: {}
uid: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync*
commentId: Overload:Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync
namespace: Azure.AI.Language.QuestionAnswering.Authoring
name: GetSynonymsAsync
fullName: Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync
nameWithType: QuestionAnsweringAuthoringClient.GetSynonymsAsync
assembliesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering.dll
packagesWithMoniker:
- value: Azure.AI.Language.QuestionAnswering v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync
  api_location:
  - Azure.AI.Language.QuestionAnswering.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.QuestionAnswering.Authoring.QuestionAnsweringAuthoringClient.GetSynonymsAsync
  - Azure::AI::Language::QuestionAnswering::Authoring::QuestionAnsweringAuthoringClient::GetSynonymsAsync
  - GetSynonymsAsync
  - QuestionAnsweringAuthoringClient.GetSynonymsAsync
  - QuestionAnsweringAuthoringClient::GetSynonymsAsync
  helpviewer_keywords:
  - QuestionAnsweringAuthoringClient.GetSynonymsAsync method [.NET]
  - GetSynonymsAsync method [.NET], class QuestionAnsweringAuthoringClient
  - QuestionAnsweringAuthoringClient.GetSynonymsAsync(String, RequestContext) method [.NET]
  - GetSynonymsAsync(String, RequestContext) method [.NET], class QuestionAnsweringAuthoringClient
  monikers:
  - azure-dotnet
