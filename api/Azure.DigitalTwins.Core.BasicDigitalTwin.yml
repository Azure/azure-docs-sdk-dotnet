### YamlMime:NetType
type: class
inheritancesWithMoniker:
- values:
  - <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>
constructors:
- uid: Azure.DigitalTwins.Core.BasicDigitalTwin.#ctor
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
properties:
- uid: Azure.DigitalTwins.Core.BasicDigitalTwin.Contents
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
- uid: Azure.DigitalTwins.Core.BasicDigitalTwin.ETag
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
- uid: Azure.DigitalTwins.Core.BasicDigitalTwin.Id
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
- uid: Azure.DigitalTwins.Core.BasicDigitalTwin.LastUpdatedOn
  monikers:
  - azure-dotnet
- uid: Azure.DigitalTwins.Core.BasicDigitalTwin.Metadata
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
uid: Azure.DigitalTwins.Core.BasicDigitalTwin
commentId: T:Azure.DigitalTwins.Core.BasicDigitalTwin
namespace: Azure.DigitalTwins.Core
name: BasicDigitalTwin
fullName: Azure.DigitalTwins.Core.BasicDigitalTwin
nameWithType: Azure.DigitalTwins.Core.BasicDigitalTwin
assembliesWithMoniker:
- value: Azure.DigitalTwins.Core.dll
packagesWithMoniker:
- value: Azure.DigitalTwins.Core v1.4.0
  monikers:
  - azure-dotnet
- value: Azure.DigitalTwins.Core v1.4.0-beta.1
  monikers:
  - azure-dotnet-preview
attributesWithMoniker:
- value: System.Text.Json.Serialization.JsonConverterAttribute
  monikers:
  - azure-dotnet
attributeMonikers:
- azure-dotnet
syntaxWithMoniker:
- lang: csharp
  values:
  - value: >-
      [System.Text.Json.Serialization.JsonConverter(typeof(Azure.DigitalTwins.Core.BasicDigitalTwinJsonConverter))]

      public class BasicDigitalTwin
    monikers:
    - azure-dotnet
  - value: public class BasicDigitalTwin
    monikers:
    - azure-dotnet-preview
- lang: fsharp
  values:
  - value: >-
      [<System.Text.Json.Serialization.JsonConverter(typeof(Azure.DigitalTwins.Core.BasicDigitalTwinJsonConverter))>]

      type BasicDigitalTwin = class
    monikers:
    - azure-dotnet
  - value: type BasicDigitalTwin = class
    monikers:
    - azure-dotnet-preview
- lang: vb
  values:
  - value: Public Class BasicDigitalTwin
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
summary: An optional, helper class for deserializing a digital twin.
remarks: <p>This helper class will only work with <xref data-throw-if-not-resolved="true" uid="System.Text.Json"></xref>. When used with the <xref data-throw-if-not-resolved="true" uid="Azure.Core.Serialization.ObjectSerializer"></xref>, parameter to <xref data-throw-if-not-resolved="true" uid="Azure.DigitalTwins.Core.DigitalTwinsClientOptions"></xref> it will only work with the default (<xref data-throw-if-not-resolved="true" uid="Azure.Core.Serialization.JsonObjectSerializer"></xref>).</p><p>For more samples, see <a href="https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/digitaltwins/Azure.DigitalTwins.Core/samples">our repo samples</a>.</p>
examples: >-
  Here's an example of  how to use the BasicDigitalTwin helper class to serialize and create a digital twin.



  ```csharp

  // Create digital twin with component payload using the BasicDigitalTwin serialization helper


  var basicTwin = new BasicDigitalTwin

  {
      Id = basicDtId,
      // model Id of digital twin
      Metadata =
      {
          ModelId = modelId,
          PropertyMetadata = new Dictionary<string, DigitalTwinPropertyMetadata>
          {
              {
                  "Prop2",
                  new DigitalTwinPropertyMetadata
                  {
                      // must always be serialized as ISO 8601
                      SourceTime = DateTimeOffset.UtcNow,
                  }
              }
          },
      },
      Contents =
      {
          // digital twin properties
          { "Prop1", "Value1" },
          { "Prop2", 987 },
          // component
          {
              "Component1",
              new BasicDigitalTwinComponent
              {
                  // writeable component metadata
                  Metadata =  new Dictionary<string, DigitalTwinPropertyMetadata>
                  {
                      {
                          "ComponentProp2",
                          new DigitalTwinPropertyMetadata
                          {
                              // must always be serialized as ISO 8601
                              SourceTime = DateTimeOffset.UtcNow,
                          }
                      }
                  },
                  // component properties
                  Contents =
                  {
                      { "ComponentProp1", "Component value 1" },
                      { "ComponentProp2", 123 },
                  },
              }
          },
      },
  };


  Response<BasicDigitalTwin> createDigitalTwinResponse = await client.CreateOrReplaceDigitalTwinAsync(basicDtId, basicTwin);

  Console.WriteLine($"Created digital twin '{createDigitalTwinResponse.Value.Id}'.");

  ```


  Here's an example of  how to use the BasicDigitalTwin helper class to get and deserialize a digital twin.



  ```csharp

  Response<BasicDigitalTwin> getBasicDtResponse = await client.GetDigitalTwinAsync<BasicDigitalTwin>(basicDtId);

  BasicDigitalTwin basicDt = getBasicDtResponse.Value;


  // Must cast Component1 as a JsonElement and get its raw text in order to deserialize it as a dictionary

  string component1RawText = ((JsonElement)basicDt.Contents["Component1"]).GetRawText();

  var component1 = JsonSerializer.Deserialize<BasicDigitalTwinComponent>(component1RawText);


  Console.WriteLine($"Retrieved and deserialized digital twin {basicDt.Id}:\n\t" +
      $"ETag: {basicDt.ETag}\n\t" +
      $"ModelId: {basicDt.Metadata.ModelId}\n\t" +
      $"LastUpdatedOn: {basicDt.LastUpdatedOn}\n\t" +
      $"Prop1: {basicDt.Contents["Prop1"]}, last updated on {basicDt.Metadata.PropertyMetadata["Prop1"].LastUpdatedOn}\n\t" +
      $"Prop2: {basicDt.Contents["Prop2"]}, last updated on {basicDt.Metadata.PropertyMetadata["Prop2"].LastUpdatedOn} and sourced at {basicDt.Metadata.PropertyMetadata["Prop2"].SourceTime}\n\t" +
      $"Component1.LastUpdatedOn: {component1.LastUpdatedOn}\n\t" +
      $"Component1.Prop1: {component1.Contents["ComponentProp1"]}, last updated on: {component1.Metadata["ComponentProp1"].LastUpdatedOn}\n\t" +
      $"Component1.Prop2: {component1.Contents["ComponentProp2"]}, last updated on: {component1.Metadata["ComponentProp2"].LastUpdatedOn} and sourced at: {component1.Metadata["ComponentProp2"].SourceTime}");
  ```
metadata:
  api_name:
  - Azure.DigitalTwins.Core.BasicDigitalTwin
  api_location:
  - Azure.DigitalTwins.Core.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.DigitalTwins.Core.BasicDigitalTwin
  - Azure::DigitalTwins::Core::BasicDigitalTwin
  - BasicDigitalTwin
  helpviewer_keywords:
  - Azure.DigitalTwins.Core.BasicDigitalTwin class [.NET]
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
