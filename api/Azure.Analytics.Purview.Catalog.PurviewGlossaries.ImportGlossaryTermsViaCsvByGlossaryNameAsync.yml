### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: glossaryName
    description: The name of the glossary.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: includeTermHierarchy
    description: Whether include term hierarchy.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors on the request on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">glossaryName</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">glossaryName</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(Azure.WaitUntil,System.String,Azure.Core.RequestContent,System.Nullable{System.Boolean},Azure.RequestContext)
  name: ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil, String, RequestContent, Nullable<Boolean>, RequestContext)
  fullName: Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil, String, RequestContent, Nullable<Boolean>, RequestContext)
  nameWithType: PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil, String, RequestContent, Nullable<Boolean>, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Operation<BinaryData>> ImportGlossaryTermsViaCsvByGlossaryNameAsync (Azure.WaitUntil waitUntil, string glossaryName, Azure.Core.RequestContent content, bool? includeTermHierarchy = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member ImportGlossaryTermsViaCsvByGlossaryNameAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable<bool> * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>

        override this.ImportGlossaryTermsViaCsvByGlossaryNameAsync : Azure.WaitUntil * string * Azure.Core.RequestContent * Nullable<bool> * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Operation<BinaryData>>
  - lang: vb
    values:
    - value: Public Overridable Function ImportGlossaryTermsViaCsvByGlossaryNameAsync (waitUntil As WaitUntil, glossaryName As String, content As RequestContent, Optional includeTermHierarchy As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))
  monikers:
  - azure-dotnet-preview
  summary: Import Glossary Terms from local csv file by glossaryName.
  remarks: >-
    <p>Schema for <code data-dev-comment-type="c">Response Body</code>: 


    ```

    {
                  id: string,
                  status: "NotStarted" | "Succeeded" | "Failed" | "Running",
                  createTime: string,
                  lastUpdateTime: string,
                  properties: {
                    importedTerms: string,
                    totalTermsDetected: string
                  },
                  error: {
                    errorCode: number,
                    errorMessage: string
                  }
                }
    ```

     Schema for <code data-dev-comment-type="c">Response Error</code>: 


    ```

    {
                  requestId: string,
                  errorCode: string,
                  errorMessage: string
                }
    ```

    </p>
  metadata: {}
uid: Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync*
commentId: Overload:Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync
namespace: Azure.Analytics.Purview.Catalog
name: ImportGlossaryTermsViaCsvByGlossaryNameAsync
fullName: Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync
nameWithType: PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync
assembliesWithMoniker:
- value: Azure.Analytics.Purview.Catalog.dll
packagesWithMoniker:
- value: Azure.Analytics.Purview.Catalog v1.0.0-beta.4
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync
  api_location:
  - Azure.Analytics.Purview.Catalog.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Analytics.Purview.Catalog.PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync
  - Azure::Analytics::Purview::Catalog::PurviewGlossaries::ImportGlossaryTermsViaCsvByGlossaryNameAsync
  - ImportGlossaryTermsViaCsvByGlossaryNameAsync
  - PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync
  - PurviewGlossaries::ImportGlossaryTermsViaCsvByGlossaryNameAsync
  helpviewer_keywords:
  - PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync method [.NET]
  - ImportGlossaryTermsViaCsvByGlossaryNameAsync method [.NET], class PurviewGlossaries
  - PurviewGlossaries.ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil, String, RequestContent, Nullable<Boolean>, RequestContext) method [.NET]
  - ImportGlossaryTermsViaCsvByGlossaryNameAsync(WaitUntil, String, RequestContent, Nullable<Boolean>, RequestContext) method [.NET], class PurviewGlossaries
  monikers:
  - azure-dotnet-preview
