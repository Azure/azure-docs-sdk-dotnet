### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.AsyncPageable`1?alt=Azure.AsyncPageable&text=AsyncPageable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.AsyncPageable`1"></xref> from the service containing a list of <xref data-throw-if-not-resolved="true" uid="System.BinaryData"></xref> objects. Details of the body schema for each item in the collection are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: viewMode
    description: To filter user's sent, received or history workflow tasks.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: workflowIds
    description: Filter items by workflow id list.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: timeWindow
    description: 'Time window of filtering items. Allowed values: "1d" | "7d" | "30d" | "90d".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: maxpagesize
    description: The maximum page size to get the items at one time.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Int32?alt=System.Int32&text=Int32" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: orderby
    description: 'The key word which used to sort the results. Allowed values: "status desc" | "status asc" | "requestor desc" | "requestor asc" | "startTime desc" | "startTime asc" | "createdTime desc" | "createdTime asc".'
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: taskTypes
    description: Filter items by workflow task type.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: taskStatuses
    description: Filter workflow tasks by status.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: workflowNameKeyword
    description: The key word which could used to filter workflow item with related workflow.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)
  commentId: M:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,Azure.RequestContext)
  name: GetWorkflowTasksAsync(String, IEnumerable<String>, String, Nullable<Int32>, String, IEnumerable<String>, IEnumerable<String>, String, RequestContext)
  fullName: Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync(String, IEnumerable<String>, String, Nullable<Int32>, String, IEnumerable<String>, IEnumerable<String>, String, RequestContext)
  nameWithType: PurviewWorkflowServiceClient.GetWorkflowTasksAsync(String, IEnumerable<String>, String, Nullable<Int32>, String, IEnumerable<String>, IEnumerable<String>, String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.AsyncPageable<BinaryData> GetWorkflowTasksAsync (string viewMode = default, System.Collections.Generic.IEnumerable<string> workflowIds = default, string timeWindow = default, int? maxpagesize = default, string orderby = default, System.Collections.Generic.IEnumerable<string> taskTypes = default, System.Collections.Generic.IEnumerable<string> taskStatuses = default, string workflowNameKeyword = default, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetWorkflowTasksAsync : string * seq<string> * string * Nullable<int> * string * seq<string> * seq<string> * string * Azure.RequestContext -> Azure.AsyncPageable<BinaryData>

        override this.GetWorkflowTasksAsync : string * seq<string> * string * Nullable<int> * string * seq<string> * seq<string> * string * Azure.RequestContext -> Azure.AsyncPageable<BinaryData>
  - lang: vb
    values:
    - value: Public Overridable Function GetWorkflowTasksAsync (Optional viewMode As String = Nothing, Optional workflowIds As IEnumerable(Of String) = Nothing, Optional timeWindow As String = Nothing, Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional orderby As String = Nothing, Optional taskTypes As IEnumerable(Of String) = Nothing, Optional taskStatuses As IEnumerable(Of String) = Nothing, Optional workflowNameKeyword As String = Nothing, Optional context As RequestContext = Nothing) As AsyncPageable(Of BinaryData)
  monikers:
  - azure-dotnet-preview
  summary: Get all workflow tasks.
  remarks: >-
    <p>Below is the JSON schema for one item in the pageable response.</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">TasksListValue</code>: 


    ```

    {
      type: "Approval" | "SimpleTask" | "approval" | "simpleTask", # Required. The workflow task type.
      id: Guid, # Required. The workflow task id.
      title: string, # Optional. The workflow task title.
      workflowRunId: Guid, # Required. The workflow run id.
      workflowId: Guid, # Required. The workflow id.
      requestor: Guid, # Required. The person who submitted the user request.
      createdTime: string (ISO 8601 Format), # Required. The created time.
      lastUpdateTime: string (ISO 8601 Format), # Required. The last update time.
      payload: {
        type: "CreateTerm" | "UpdateTerm" | "DeleteTerm" | "ImportTerms" | "UpdateAsset" | "GrantDataAccess", # Required. The task payload type.
        targetValue: string, # Required. The target value of entity which user want to involve workflow to update.
        payload: AnyObject, # Optional. The payload of the task.
      }, # Required. Info and material that helps assignees to take action.
      reminderInfo: {
        lastRemindTime: string (ISO 8601 Format), # Optional. The last update time.
        nextRemindTime: string (ISO 8601 Format), # Required. The next remind time.
        reminderSettings: AnyObject, # Required. The reminder settings.
      }, # Optional. Info of task reminder.
      expiryInfo: {
        lastExpiryNotificationTime: string (ISO 8601 Format), # Optional. The last expiry notification time.
        nextExpiryNotificationTime: string (ISO 8601 Format), # Required. The next expiry notification time.
        expiryTime: string (ISO 8601 Format), # Required. The expiry time.
        expirySettings: {
          expireAfter: AnyObject, # Required. The time of expiry.
          notifyOnExpiration: [Guid], # Optional.
        }, # Required.
      }, # Optional. Info of task expiry.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call GetWorkflowTasksAsync and parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new PurviewWorkflowServiceClient(endpoint, credential);


    await foreach (var data in client.GetWorkflowTasksAsync())

    {
        JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("workflowRunId").ToString());
        Console.WriteLine(result.GetProperty("workflowId").ToString());
        Console.WriteLine(result.GetProperty("requestor").ToString());
        Console.WriteLine(result.GetProperty("createdTime").ToString());
        Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
    }

    ```

    This sample shows how to call GetWorkflowTasksAsync with all parameters, and how to parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new PurviewWorkflowServiceClient(endpoint, credential);


    await foreach (var data in client.GetWorkflowTasksAsync("<viewMode>", new String[]{"<workflowIds>"}, "<timeWindow>", 1234, "<orderby>", new String[]{"<taskTypes>"}, new String[]{"<taskStatuses>"}, "<workflowNameKeyword>"))

    {
        JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        Console.WriteLine(result.GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("id").ToString());
        Console.WriteLine(result.GetProperty("title").ToString());
        Console.WriteLine(result.GetProperty("workflowRunId").ToString());
        Console.WriteLine(result.GetProperty("workflowId").ToString());
        Console.WriteLine(result.GetProperty("requestor").ToString());
        Console.WriteLine(result.GetProperty("createdTime").ToString());
        Console.WriteLine(result.GetProperty("lastUpdateTime").ToString());
        Console.WriteLine(result.GetProperty("payload").GetProperty("type").ToString());
        Console.WriteLine(result.GetProperty("payload").GetProperty("targetValue").ToString());
        Console.WriteLine(result.GetProperty("payload").GetProperty("payload").ToString());
        Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("lastRemindTime").ToString());
        Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("nextRemindTime").ToString());
        Console.WriteLine(result.GetProperty("reminderInfo").GetProperty("reminderSettings").ToString());
        Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("lastExpiryNotificationTime").ToString());
        Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("nextExpiryNotificationTime").ToString());
        Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expiryTime").ToString());
        Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("expireAfter").ToString());
        Console.WriteLine(result.GetProperty("expiryInfo").GetProperty("expirySettings").GetProperty("notifyOnExpiration")[0].ToString());
    }

    ```
  metadata: {}
uid: Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync*
commentId: Overload:Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync
namespace: Azure.Analytics.Purview.Workflows
name: GetWorkflowTasksAsync
fullName: Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync
nameWithType: PurviewWorkflowServiceClient.GetWorkflowTasksAsync
assembliesWithMoniker:
- value: Azure.Analytics.Purview.Workflows.dll
packagesWithMoniker:
- value: Azure.Analytics.Purview.Workflows v1.0.0-beta.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync
  api_location:
  - Azure.Analytics.Purview.Workflows.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Analytics.Purview.Workflows.PurviewWorkflowServiceClient.GetWorkflowTasksAsync
  - Azure::Analytics::Purview::Workflows::PurviewWorkflowServiceClient::GetWorkflowTasksAsync
  - GetWorkflowTasksAsync
  - PurviewWorkflowServiceClient.GetWorkflowTasksAsync
  - PurviewWorkflowServiceClient::GetWorkflowTasksAsync
  helpviewer_keywords:
  - PurviewWorkflowServiceClient.GetWorkflowTasksAsync method [.NET]
  - GetWorkflowTasksAsync method [.NET], class PurviewWorkflowServiceClient
  - PurviewWorkflowServiceClient.GetWorkflowTasksAsync(String, IEnumerable<String>, String, Nullable<Int32>, String, IEnumerable<String>, IEnumerable<String>, String, RequestContext) method [.NET]
  - GetWorkflowTasksAsync(String, IEnumerable<String>, String, Nullable<Int32>, String, IEnumerable<String>, IEnumerable<String>, String, RequestContext) method [.NET], class PurviewWorkflowServiceClient
  monikers:
  - azure-dotnet-preview
