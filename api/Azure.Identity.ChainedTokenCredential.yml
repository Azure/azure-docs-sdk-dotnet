### YamlMime:NetType
type: class
inheritancesWithMoniker:
- values:
  - <xref href="System.Object?alt=System.Object&text=Object" data-throw-if-not-resolved="True"/>
  - <xref href="Azure.Core.TokenCredential?alt=Azure.Core.TokenCredential&text=TokenCredential" data-throw-if-not-resolved="True"/>
constructors:
- uid: Azure.Identity.ChainedTokenCredential.#ctor(Azure.Core.TokenCredential[])
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
methods:
- uid: Azure.Identity.ChainedTokenCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
- uid: Azure.Identity.ChainedTokenCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
uid: Azure.Identity.ChainedTokenCredential
commentId: T:Azure.Identity.ChainedTokenCredential
namespace: Azure.Identity
name: ChainedTokenCredential
fullName: Azure.Identity.ChainedTokenCredential
nameWithType: Azure.Identity.ChainedTokenCredential
assembliesWithMoniker:
- value: Azure.Identity.dll
packagesWithMoniker:
- value: Azure.Identity v1.9.0
  monikers:
  - azure-dotnet
- value: Azure.Identity v1.10.0-beta.1
  monikers:
  - azure-dotnet-preview
syntaxWithMoniker:
- lang: csharp
  values:
  - value: 'public class ChainedTokenCredential : Azure.Core.TokenCredential'
- lang: fsharp
  values:
  - value: >-
      type ChainedTokenCredential = class
          inherit TokenCredential
- lang: vb
  values:
  - value: >-
      Public Class ChainedTokenCredential

      Inherits TokenCredential
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
summary: >-
  Provides a <xref data-throw-if-not-resolved="true" uid="Azure.Core.TokenCredential"></xref> implementation which chains multiple <xref data-throw-if-not-resolved="true" uid="Azure.Core.TokenCredential"></xref> implementations to be tried in order

  until one of the getToken methods returns a non-default <xref data-throw-if-not-resolved="true" uid="Azure.Core.AccessToken"></xref>.
examples: >-
  <p>
         The ChainedTokenCredential class provides the ability to link together multiple credential instances to be tried sequentially when authenticating.
         The following example demonstrates creating a credential which will attempt to authenticate using managed identity, and fall back to Azure CLI for authentication
         if a managed identity is unavailable in the current environment.
  </p>


  ```csharp

  // Authenticate using managed identity if it is available; otherwise use the Azure CLI to authenticate.


  var credential = new ChainedTokenCredential(new ManagedIdentityCredential(), new AzureCliCredential());


  var eventHubProducerClient = new EventHubProducerClient("myeventhub.eventhubs.windows.net", "myhubpath", credential);

  ```
metadata:
  api_name:
  - Azure.Identity.ChainedTokenCredential
  api_location:
  - Azure.Identity.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Identity.ChainedTokenCredential
  - Azure::Identity::ChainedTokenCredential
  - ChainedTokenCredential
  helpviewer_keywords:
  - Azure.Identity.ChainedTokenCredential class [.NET]
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
