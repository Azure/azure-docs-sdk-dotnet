### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Monitor.Query.Models.LogsBatchQueryResultCollection?alt=Azure.Monitor.Query.Models.LogsBatchQueryResultCollection&text=LogsBatchQueryResultCollection" data-throw-if-not-resolved="True"/>&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Monitor.Query.Models.LogsBatchQueryResultCollection"></xref> containing the query identifier that has to be passed into <xref data-throw-if-not-resolved="true" uid="Azure.Monitor.Query.Models.LogsBatchQueryResultCollection.GetResult(System.String)"></xref> to get the result.
  parameters:
  - namesWithMoniker:
    - value: batch
    description: The batch of queries to send.
    type: <xref href="Azure.Monitor.Query.LogsBatchQuery?alt=Azure.Monitor.Query.LogsBatchQuery&text=LogsBatchQuery" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The <xref data-throw-if-not-resolved="true" uid="System.Threading.CancellationToken"></xref> to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Monitor.Query.LogsQueryClient.QueryBatch(Azure.Monitor.Query.LogsBatchQuery,System.Threading.CancellationToken)
  commentId: M:Azure.Monitor.Query.LogsQueryClient.QueryBatch(Azure.Monitor.Query.LogsBatchQuery,System.Threading.CancellationToken)
  name: QueryBatch(LogsBatchQuery, CancellationToken)
  fullName: Azure.Monitor.Query.LogsQueryClient.QueryBatch(LogsBatchQuery, CancellationToken)
  nameWithType: LogsQueryClient.QueryBatch(LogsBatchQuery, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Response<Azure.Monitor.Query.Models.LogsBatchQueryResultCollection> QueryBatch (Azure.Monitor.Query.LogsBatchQuery batch, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member QueryBatch : Azure.Monitor.Query.LogsBatchQuery * System.Threading.CancellationToken -> Azure.Response<Azure.Monitor.Query.Models.LogsBatchQueryResultCollection>

        override this.QueryBatch : Azure.Monitor.Query.LogsBatchQuery * System.Threading.CancellationToken -> Azure.Response<Azure.Monitor.Query.Models.LogsBatchQueryResultCollection>
  - lang: vb
    values:
    - value: Public Overridable Function QueryBatch (batch As LogsBatchQuery, Optional cancellationToken As CancellationToken = Nothing) As Response(Of LogsBatchQueryResultCollection)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: >-
    Submits the batch query. Use the <xref data-throw-if-not-resolved="true" uid="Azure.Monitor.Query.LogsBatchQuery"></xref> to compose a batch query.

    <example snippet="Snippet:BatchQuery">


    ```csharp

    string workspaceId = "<workspace_id>";


    var client = new LogsQueryClient(new DefaultAzureCredential());


    // Query TOP 10 resource groups by event count

    // And total event count

    var batch = new LogsBatchQuery();


    string countQueryId = batch.AddWorkspaceQuery(
        workspaceId,
        "AzureActivity | count",
        new QueryTimeRange(TimeSpan.FromDays(1)));
    string topQueryId = batch.AddWorkspaceQuery(
        workspaceId,
        "AzureActivity | summarize Count = count() by ResourceGroup | top 10 by Count",
        new QueryTimeRange(TimeSpan.FromDays(1)));

    Response<LogsBatchQueryResultCollection> response = await client.QueryBatchAsync(batch);


    var count = response.Value.GetResult<int>(countQueryId).Single();

    var topEntries = response.Value.GetResult<MyLogEntryModel>(topQueryId);


    Console.WriteLine($"AzureActivity has total {count} events");

    foreach (var logEntryModel in topEntries)

    {
        Console.WriteLine($"{logEntryModel.ResourceGroup} had {logEntryModel.Count} events");
    }

    ```

    </example>
  metadata: {}
uid: Azure.Monitor.Query.LogsQueryClient.QueryBatch*
commentId: Overload:Azure.Monitor.Query.LogsQueryClient.QueryBatch
namespace: Azure.Monitor.Query
name: QueryBatch
fullName: Azure.Monitor.Query.LogsQueryClient.QueryBatch
nameWithType: LogsQueryClient.QueryBatch
assembliesWithMoniker:
- value: Azure.Monitor.Query.dll
packagesWithMoniker:
- value: Azure.Monitor.Query v1.2.0
  monikers:
  - azure-dotnet
- value: Azure.Monitor.Query v1.2.0-beta.1
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Monitor.Query.LogsQueryClient.QueryBatch
  api_location:
  - Azure.Monitor.Query.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Monitor.Query.LogsQueryClient.QueryBatch
  - Azure::Monitor::Query::LogsQueryClient::QueryBatch
  - QueryBatch
  - LogsQueryClient.QueryBatch
  - LogsQueryClient::QueryBatch
  helpviewer_keywords:
  - LogsQueryClient.QueryBatch method [.NET]
  - QueryBatch method [.NET], class LogsQueryClient
  - LogsQueryClient.QueryBatch(LogsBatchQuery, CancellationToken) method [.NET]
  - QueryBatch(LogsBatchQuery, CancellationToken) method [.NET], class LogsQueryClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
