### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Operation`1?alt=Azure.Operation&text=Operation" data-throw-if-not-resolved="True"/>&lt;<xref href="System.BinaryData?alt=System.BinaryData&text=BinaryData" data-throw-if-not-resolved="True"/>&gt;
    description: The <xref data-throw-if-not-resolved="true" uid="Azure.Operation"></xref> representing an asynchronous operation on the service.
  parameters:
  - namesWithMoniker:
    - value: waitUntil
    description: <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref> if the method should wait to return until the long-running operation has completed on the service; <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation. For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)
  name: AnalyzeConversations(WaitUntil, RequestContent, RequestContext)
  fullName: Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations(WaitUntil, RequestContent, RequestContext)
  nameWithType: ConversationAnalysisClient.AnalyzeConversations(WaitUntil, RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Operation<BinaryData> AnalyzeConversations (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member AnalyzeConversations : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation<BinaryData>

        override this.AnalyzeConversations : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -> Azure.Operation<BinaryData>
  - lang: vb
    values:
    - value: Public Overridable Function AnalyzeConversations (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)
  monikers:
  - azure-dotnet
  summary: >-
    [Protocol Method] Submit analysis job for conversations

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li></ul>
  remarks: '<p>Additional information can be found in the service REST API documentation: https://learn.microsoft.com/rest/api/language/2023-04-01/analyze-conversation/submit-job</p>'
  examples: >-
    This sample shows how to call AnalyzeConversations with required parameters and request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ConversationAnalysisClient(endpoint, credential);


    var data = new {
        analysisInput = new {
            conversations = new[] {
                new {
                    conversationItems = new[] {
                        new {
                            text = "<text>",
                            id = "<id>",
                            participantId = "<participantId>",
                        }
                    },
                    id = "<id>",
                    language = "<language>",
                    modality = "text",
                }
            },
        },
        tasks = new[] {
            new {
                kind = "ConversationalSummarizationTask",
            }
        },
    };


    var operation = client.AnalyzeConversations(WaitUntil.Completed, RequestContent.Create(data));


    BinaryData responseData = operation.Value;

    JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("createdDateTime").ToString());

    Console.WriteLine(result.GetProperty("jobId").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());

    Console.WriteLine(result.GetProperty("status").ToString());

    ```

    This sample shows how to call AnalyzeConversations with all parameters and request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ConversationAnalysisClient(endpoint, credential);


    var data = new {
        displayName = "<displayName>",
        analysisInput = new {
            conversations = new[] {
                new {
                    conversationItems = new[] {
                        new {
                            text = "<text>",
                            id = "<id>",
                            participantId = "<participantId>",
                            language = "<language>",
                            modality = "transcript",
                            role = "agent",
                        }
                    },
                    id = "<id>",
                    language = "<language>",
                    modality = "text",
                    domain = "finance",
                }
            },
        },
        tasks = new[] {
            new {
                parameters = new {
                    summaryAspects = new[] {
                        "issue"
                    },
                    modelVersion = "<modelVersion>",
                    loggingOptOut = true,
                },
                kind = "ConversationalSummarizationTask",
                taskName = "<taskName>",
            }
        },
    };


    var operation = client.AnalyzeConversations(WaitUntil.Completed, RequestContent.Create(data));


    BinaryData responseData = operation.Value;

    JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;

    Console.WriteLine(result.GetProperty("displayName").ToString());

    Console.WriteLine(result.GetProperty("createdDateTime").ToString());

    Console.WriteLine(result.GetProperty("expirationDateTime").ToString());

    Console.WriteLine(result.GetProperty("jobId").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedDateTime").ToString());

    Console.WriteLine(result.GetProperty("status").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("target").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("target").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("details")[0].GetProperty("innererror").GetProperty("target").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("details").GetProperty("<test>").ToString());

    Console.WriteLine(result.GetProperty("errors")[0].GetProperty("innererror").GetProperty("target").ToString());

    Console.WriteLine(result.GetProperty("nextLink").ToString());

    ```
  metadata: {}
uid: Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations*
commentId: Overload:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations
namespace: Azure.AI.Language.Conversations
name: AnalyzeConversations
fullName: Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations
nameWithType: ConversationAnalysisClient.AnalyzeConversations
assembliesWithMoniker:
- value: Azure.AI.Language.Conversations.dll
packagesWithMoniker:
- value: Azure.AI.Language.Conversations v1.1.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations
  api_location:
  - Azure.AI.Language.Conversations.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversations
  - Azure::AI::Language::Conversations::ConversationAnalysisClient::AnalyzeConversations
  - AnalyzeConversations
  - ConversationAnalysisClient.AnalyzeConversations
  - ConversationAnalysisClient::AnalyzeConversations
  helpviewer_keywords:
  - ConversationAnalysisClient.AnalyzeConversations method [.NET]
  - AnalyzeConversations method [.NET], class ConversationAnalysisClient
  - ConversationAnalysisClient.AnalyzeConversations(WaitUntil, RequestContent, RequestContext) method [.NET]
  - AnalyzeConversations(WaitUntil, RequestContent, RequestContext) method [.NET], class ConversationAnalysisClient
  monikers:
  - azure-dotnet
