### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Communication.Email.EmailSendOperation?alt=Azure.Communication.Email.EmailSendOperation&text=EmailSendOperation" data-throw-if-not-resolved="True"/>&gt;
  parameters:
  - namesWithMoniker:
    - value: wait
    description: >-
      <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref>
        if the method should wait to return until the long-running operation has completed on the service;
      <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation.
        For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: message
    description: Message payload for sending an email.
    type: <xref href="Azure.Communication.Email.EmailMessage?alt=Azure.Communication.Email.EmailMessage&text=EmailMessage" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,Azure.Communication.Email.EmailMessage,System.Threading.CancellationToken)
  commentId: M:Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,Azure.Communication.Email.EmailMessage,System.Threading.CancellationToken)
  name: SendAsync(WaitUntil, EmailMessage, CancellationToken)
  fullName: Azure.Communication.Email.EmailClient.SendAsync(WaitUntil, EmailMessage, CancellationToken)
  nameWithType: EmailClient.SendAsync(WaitUntil, EmailMessage, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation> SendAsync (Azure.WaitUntil wait, Azure.Communication.Email.EmailMessage message, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member SendAsync : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation>

        override this.SendAsync : Azure.WaitUntil * Azure.Communication.Email.EmailMessage * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation>
  - lang: vb
    values:
    - value: Public Overridable Function SendAsync (wait As WaitUntil, message As EmailMessage, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: Queues an email message to be sent to one or more recipients.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Communication.Email.EmailSendOperation?alt=Azure.Communication.Email.EmailSendOperation&text=EmailSendOperation" data-throw-if-not-resolved="True"/>&gt;
  parameters:
  - namesWithMoniker:
    - value: wait
    description: >-
      <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Completed"></xref>
        if the method should wait to return until the long-running operation has completed on the service;
      <xref data-throw-if-not-resolved="true" uid="Azure.WaitUntil.Started"></xref> if it should return after starting the operation.
        For more information on long-running operations, please see <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</a>.
    type: <xref href="Azure.WaitUntil?alt=Azure.WaitUntil&text=WaitUntil" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: senderAddress
      monikers:
      - azure-dotnet
    - value: from
      monikers:
      - azure-dotnet-preview
    description: From address of the email.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: recipientAddress
      monikers:
      - azure-dotnet
    - value: to
      monikers:
      - azure-dotnet-preview
    description: Email address of the TO recipient.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: subject
    description: Subject for the email.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: htmlContent
    description: Email body in HTML format.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: plainTextContent
    description: Email body in plain text format.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Azure.Communication.Email.EmailClient.SendAsync(Azure.WaitUntil,System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)
  name: SendAsync(WaitUntil, String, String, String, String, String, CancellationToken)
  fullName: Azure.Communication.Email.EmailClient.SendAsync(WaitUntil, String, String, String, String, String, CancellationToken)
  nameWithType: EmailClient.SendAsync(WaitUntil, String, String, String, String, String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation> SendAsync (Azure.WaitUntil wait, string senderAddress, string recipientAddress, string subject, string htmlContent, string plainTextContent = default, System.Threading.CancellationToken cancellationToken = default);
      monikers:
      - azure-dotnet
    - value: public virtual System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation> SendAsync (Azure.WaitUntil wait, string from, string to, string subject, string htmlContent, string plainTextContent = default, System.Threading.CancellationToken cancellationToken = default);
      monikers:
      - azure-dotnet-preview
  - lang: fsharp
    values:
    - value: >-
        abstract member SendAsync : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation>

        override this.SendAsync : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation>
      monikers:
      - azure-dotnet
    - value: >-
        abstract member SendAsync : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation>

        override this.SendAsync : Azure.WaitUntil * string * string * string * string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.Email.EmailSendOperation>
      monikers:
      - azure-dotnet-preview
  - lang: vb
    values:
    - value: Public Overridable Function SendAsync (wait As WaitUntil, senderAddress As String, recipientAddress As String, subject As String, htmlContent As String, Optional plainTextContent As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)
      monikers:
      - azure-dotnet
    - value: Public Overridable Function SendAsync (wait As WaitUntil, from As String, to As String, subject As String, htmlContent As String, Optional plainTextContent As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of EmailSendOperation)
      monikers:
      - azure-dotnet-preview
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: Queues an email message to be sent to a single recipient.
  metadata: {}
uid: Azure.Communication.Email.EmailClient.SendAsync*
commentId: Overload:Azure.Communication.Email.EmailClient.SendAsync
namespace: Azure.Communication.Email
name: SendAsync
fullName: Azure.Communication.Email.EmailClient.SendAsync
nameWithType: EmailClient.SendAsync
assembliesWithMoniker:
- value: Azure.Communication.Email.dll
packagesWithMoniker:
- value: Azure.Communication.Email v1.0.0
  monikers:
  - azure-dotnet
- value: Azure.Communication.Email v1.0.0-beta.4
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Communication.Email.EmailClient.SendAsync
  api_location:
  - Azure.Communication.Email.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Communication.Email.EmailClient.SendAsync
  - Azure::Communication::Email::EmailClient::SendAsync
  - SendAsync
  - EmailClient.SendAsync
  - EmailClient::SendAsync
  helpviewer_keywords:
  - EmailClient.SendAsync method [.NET]
  - SendAsync method [.NET], class EmailClient
  - EmailClient.SendAsync(WaitUntil, EmailMessage, CancellationToken) method [.NET]
  - SendAsync(WaitUntil, EmailMessage, CancellationToken) method [.NET], class EmailClient
  - EmailClient.SendAsync(WaitUntil, String, String, String, String, String, CancellationToken) method [.NET]
  - SendAsync(WaitUntil, String, String, String, String, String, CancellationToken) method [.NET], class EmailClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
