### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>
    description: The response returned from the service. Details of the response body schema are in the Remarks section below.
  parameters:
  - namesWithMoniker:
    - value: deviceClassId
    description: Device class identifier.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">deviceClassId</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: <code data-dev-comment-type="paramref">deviceClassId</code> is an empty string, and was expected to be non-empty.
    type: <xref href="System.ArgumentException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass(System.String,Azure.RequestContext)
  commentId: M:Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass(System.String,Azure.RequestContext)
  name: GetDeviceClass(String, RequestContext)
  fullName: Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass(String, RequestContext)
  nameWithType: DeviceManagementClient.GetDeviceClass(String, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual Azure.Response GetDeviceClass (string deviceClassId, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member GetDeviceClass : string * Azure.RequestContext -> Azure.Response

        override this.GetDeviceClass : string * Azure.RequestContext -> Azure.Response
  - lang: vb
    values:
    - value: Public Overridable Function GetDeviceClass (deviceClassId As String, Optional context As RequestContext = Nothing) As Response
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
  summary: Gets the properties of a device class.
  remarks: >-
    <p>Below is the JSON schema for the response payload.</p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">DeviceClass</code>: 


    ```

    {
                  deviceClassId: string, # Required. The device class identifier. This is generated from the model Id and the compat properties reported by the device update agent in the Device Update PnP interface in IoT Hub. It is a hex-encoded SHA1 hash.
                  friendlyName: string, # Optional. The device class friendly name. This can be updated by callers after the device class has been automatically created.
                  deviceClassProperties: {
                    contractModel: {
                      id: string, # Required. The Device Update agent contract model Id of the device class. This is also used to calculate the device class Id.
                      name: string, # Required. The Device Update agent contract model name of the device class. Intended to be a more readable form of the contract model Id.
                    }, # Optional. The Device Update agent contract model.
                    compatProperties: Dictionary<string, string>, # Required. The compat properties of the device class. This object can be thought of as a set of key-value pairs where the key is the name of the compatibility property and the value is the value of the compatibility property. There will always be at least 1 compat property
                  }, # Required. The device class properties that are used to calculate the device class Id
                  bestCompatibleUpdate: {
                    updateId: {
                      provider: string, # Required. Update provider.
                      name: string, # Required. Update name.
                      version: string, # Required. Update version.
                    }, # Required. Update identifier.
                    description: string, # Optional. Update description.
                    friendlyName: string, # Optional. Friendly update name.
                  }, # Optional. Update that is the highest version compatible with this device class.
                }
    ```

    </p>
  examples: >-
    This sample shows how to call GetDeviceClass with required parameters and parse the result.


    ```

    var credential = new DefaultAzureCredential();

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new DeviceManagementClient(endpoint, "<instanceId>", credential);


    Response response = client.GetDeviceClass("<deviceClassId>");


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("deviceClassId").ToString());

    Console.WriteLine(result.GetProperty("friendlyName").ToString());

    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("id").ToString());

    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("contractModel").GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("deviceClassProperties").GetProperty("compatProperties").GetProperty("<test>").ToString());

    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("provider").ToString());

    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("name").ToString());

    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("updateId").GetProperty("version").ToString());

    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("description").ToString());

    Console.WriteLine(result.GetProperty("bestCompatibleUpdate").GetProperty("friendlyName").ToString());

    ```
  metadata: {}
uid: Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass*
commentId: Overload:Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass
namespace: Azure.IoT.DeviceUpdate
name: GetDeviceClass
fullName: Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass
nameWithType: DeviceManagementClient.GetDeviceClass
assembliesWithMoniker:
- value: Azure.IoT.DeviceUpdate.dll
packagesWithMoniker:
- value: Azure.IoT.DeviceUpdate v1.0.0
  monikers:
  - azure-dotnet
- value: Azure.IoT.DeviceUpdate v1.0.0-beta.4
  monikers:
  - azure-dotnet-preview
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass
  api_location:
  - Azure.IoT.DeviceUpdate.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.IoT.DeviceUpdate.DeviceManagementClient.GetDeviceClass
  - Azure::IoT::DeviceUpdate::DeviceManagementClient::GetDeviceClass
  - GetDeviceClass
  - DeviceManagementClient.GetDeviceClass
  - DeviceManagementClient::GetDeviceClass
  helpviewer_keywords:
  - DeviceManagementClient.GetDeviceClass method [.NET]
  - GetDeviceClass method [.NET], class DeviceManagementClient
  - DeviceManagementClient.GetDeviceClass(String, RequestContext) method [.NET]
  - GetDeviceClass(String, RequestContext) method [.NET], class DeviceManagementClient
  monikers:
  - azure-dotnet
  - azure-dotnet-preview
