### YamlMime:NetMember
type: property
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Double?alt=System.Double&text=Double" data-throw-if-not-resolved="True"/>&gt;
  type: property
  uid: Azure.Maps.Routing.RouteRangeOptions.Query
  commentId: P:Azure.Maps.Routing.RouteRangeOptions.Query
  name: Query
  fullName: Azure.Maps.Routing.RouteRangeOptions.Query
  nameWithType: RouteRangeOptions.Query
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public System.Collections.Generic.IEnumerable<double> Query { get; }
  - lang: fsharp
    values:
    - value: 'member this.Query : seq<double>'
  - lang: vb
    values:
    - value: Public ReadOnly Property Query As IEnumerable(Of Double)
  monikers:
  - azure-dotnet-preview
  summary: The Coordinate from which the range calculation should start.
  metadata: {}
uid: Azure.Maps.Routing.RouteRangeOptions.Query*
commentId: Overload:Azure.Maps.Routing.RouteRangeOptions.Query
namespace: Azure.Maps.Routing
name: Query
fullName: Azure.Maps.Routing.RouteRangeOptions.Query
nameWithType: RouteRangeOptions.Query
assembliesWithMoniker:
- value: Azure.Maps.Routing.dll
packagesWithMoniker:
- value: Azure.Maps.Routing v1.0.0-beta.2
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.Maps.Routing.RouteRangeOptions.Query
  - Azure.Maps.Routing.RouteRangeOptions.get_Query
  api_location:
  - Azure.Maps.Routing.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Maps.Routing.RouteRangeOptions.Query
  - Azure::Maps::Routing::RouteRangeOptions::Query
  - Query
  - RouteRangeOptions.Query
  - RouteRangeOptions::Query
  helpviewer_keywords:
  - RouteRangeOptions.Query property [.NET]
  - Query property [.NET], class RouteRangeOptions
  monikers:
  - azure-dotnet-preview
