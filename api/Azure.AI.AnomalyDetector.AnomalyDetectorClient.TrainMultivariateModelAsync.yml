### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.AnomalyDetector.AnomalyDetectionModel?alt=Azure.AI.AnomalyDetector.AnomalyDetectionModel&text=AnomalyDetectionModel" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: modelInfo
    description: Model information.
    type: <xref href="Azure.AI.AnomalyDetector.ModelInfo?alt=Azure.AI.AnomalyDetector.ModelInfo&text=ModelInfo" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">modelInfo</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(Azure.AI.AnomalyDetector.ModelInfo,System.Threading.CancellationToken)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(Azure.AI.AnomalyDetector.ModelInfo,System.Threading.CancellationToken)
  name: TrainMultivariateModelAsync(ModelInfo, CancellationToken)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(ModelInfo, CancellationToken)
  nameWithType: AnomalyDetectorClient.TrainMultivariateModelAsync(ModelInfo, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.AnomalyDetectionModel>> TrainMultivariateModelAsync (Azure.AI.AnomalyDetector.ModelInfo modelInfo, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member TrainMultivariateModelAsync : Azure.AI.AnomalyDetector.ModelInfo * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.AnomalyDetectionModel>>

        override this.TrainMultivariateModelAsync : Azure.AI.AnomalyDetector.ModelInfo * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.AnomalyDetector.AnomalyDetectionModel>>
  - lang: vb
    values:
    - value: Public Overridable Function TrainMultivariateModelAsync (modelInfo As ModelInfo, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnomalyDetectionModel))
  monikers:
  - azure-dotnet-preview
  summary: Train a Multivariate Anomaly Detection Model.
  remarks: <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate an Azure Blob Storage URI that's accessible to the service. There are two types of data input. The Blob Storage URI can point to an Azure Blob Storage folder that contains multiple CSV files, where each CSV file has two columns, time stamp and variable. Or the Blob Storage URI can point to a single blob that contains a CSV file that has all the variables and a time stamp column.</p>
  examples: >-
    This sample shows how to call TrainMultivariateModelAsync with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var modelInfo = new ModelInfo("<dataSource>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow)

    {
        DataSchema = DataSchema.OneTable,
        DisplayName = "<DisplayName>",
        SlidingWindow = 1234,
        AlignPolicy = new AlignPolicy()
    {
            AlignMode = AlignMode.Inner,
            FillNAMethod = FillNAMethod.Previous,
            PaddingValue = 3.14f,
        },
    };

    var result = await client.TrainMultivariateModelAsync(modelInfo);

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(Azure.Core.RequestContent,Azure.RequestContext)
  name: TrainMultivariateModelAsync(RequestContent, RequestContext)
  fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(RequestContent, RequestContext)
  nameWithType: AnomalyDetectorClient.TrainMultivariateModelAsync(RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> TrainMultivariateModelAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member TrainMultivariateModelAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.TrainMultivariateModelAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function TrainMultivariateModelAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Train a Multivariate Anomaly Detection Model

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li><li>

    Please try the simpler <xref data-throw-if-not-resolved="true" uid="Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync(Azure.AI.AnomalyDetector.ModelInfo,System.Threading.CancellationToken)"></xref> convenience overload with strongly typed models first.

    </li></ul>
  remarks: >-
    <p>Create and train a multivariate anomaly detection model. The request must include a source parameter to indicate an externally accessible Azure blob storage URI.There are two types of data input: An URI pointed to an Azure blob storage folder which contains multiple CSV files, and each CSV file contains two columns, timestamp and variable. Another type of input is an URI pointed to a CSV file in Azure blob storage, which contains all the variables and a timestamp column.</p><p>Below is the JSON schema for the request and response payloads.</p><p>Request Body:</p><p>Schema for <code data-dev-comment-type="c">ModelInfo</code>: 


    ```

    {
      dataSource: string, # Required.
      dataSchema: "OneTable" | "MultiTable", # Optional.
      startTime: string (date & time), # Required.
      endTime: string (date & time), # Required.
      displayName: string, # Optional.
      slidingWindow: number, # Optional.
      alignPolicy: {
        alignMode: "Inner" | "Outer", # Optional.
        fillNAMethod: "Previous" | "Subsequent" | "Linear" | "Zero" | "Fixed", # Optional.
        paddingValue: number, # Optional.
      }, # Optional.
      status: "CREATED" | "RUNNING" | "READY" | "FAILED", # Optional.
      errors: [
        {
          code: string, # Required.
          message: string, # Required.
        }
      ], # Optional.
      diagnosticsInfo: {
        modelState: {
          epochIds: [number], # Optional.
          trainLosses: [number], # Optional.
          validationLosses: [number], # Optional.
          latenciesInSeconds: [number], # Optional.
        }, # Optional.
        variableStates: [VariableState], # Optional.
      }, # Optional.
    }

    ```

    </p><p>Response Body:</p><p>Schema for <code data-dev-comment-type="c">AnomalyDetectionModel</code>: 


    ```

    {
      modelId: string, # Required.
      createdTime: string (date & time), # Required.
      lastUpdatedTime: string (date & time), # Required.
      modelInfo: {
        dataSource: string, # Required.
        dataSchema: "OneTable" | "MultiTable", # Optional.
        startTime: string (date & time), # Required.
        endTime: string (date & time), # Required.
        displayName: string, # Optional.
        slidingWindow: number, # Optional.
        alignPolicy: {
          alignMode: "Inner" | "Outer", # Optional.
          fillNAMethod: "Previous" | "Subsequent" | "Linear" | "Zero" | "Fixed", # Optional.
          paddingValue: number, # Optional.
        }, # Optional.
        status: "CREATED" | "RUNNING" | "READY" | "FAILED", # Optional.
        errors: [
          {
            code: string, # Required.
            message: string, # Required.
          }
        ], # Optional.
        diagnosticsInfo: {
          modelState: {
            epochIds: [number], # Optional.
            trainLosses: [number], # Optional.
            validationLosses: [number], # Optional.
            latenciesInSeconds: [number], # Optional.
          }, # Optional.
          variableStates: [VariableState], # Optional.
        }, # Optional.
      }, # Optional.
    }

    ```

    </p>
  examples: >-
    This sample shows how to call TrainMultivariateModelAsync with required request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var data = new {
        dataSource = "<dataSource>",
        startTime = "2022-05-10T14:57:31.2311892-04:00",
        endTime = "2022-05-10T14:57:31.2311892-04:00",
    };


    Response response = await client.TrainMultivariateModelAsync(RequestContent.Create(data));


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("modelId").ToString());

    Console.WriteLine(result.GetProperty("createdTime").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());

    ```

    This sample shows how to call TrainMultivariateModelAsync with all request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new AnomalyDetectorClient(endpoint, credential);


    var data = new {
        dataSource = "<dataSource>",
        dataSchema = "OneTable",
        startTime = "2022-05-10T14:57:31.2311892-04:00",
        endTime = "2022-05-10T14:57:31.2311892-04:00",
        displayName = "<displayName>",
        slidingWindow = 1234,
        alignPolicy = new {
            alignMode = "Inner",
            fillNAMethod = "Previous",
            paddingValue = 123.45f,
        },
    };


    Response response = await client.TrainMultivariateModelAsync(RequestContent.Create(data), new RequestContext());


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("modelId").ToString());

    Console.WriteLine(result.GetProperty("createdTime").ToString());

    Console.WriteLine(result.GetProperty("lastUpdatedTime").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSource").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("dataSchema").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("startTime").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("endTime").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("displayName").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("slidingWindow").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("alignMode").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("fillNAMethod").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("alignPolicy").GetProperty("paddingValue").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("status").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("code").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("errors")[0].GetProperty("message").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("epochIds")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("trainLosses")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("validationLosses")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("modelState").GetProperty("latenciesInSeconds")[0].ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("variable").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("filledNARatio").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("effectiveCount").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("firstTimestamp").ToString());

    Console.WriteLine(result.GetProperty("modelInfo").GetProperty("diagnosticsInfo").GetProperty("variableStates")[0].GetProperty("lastTimestamp").ToString());

    ```
  metadata: {}
uid: Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync*
commentId: Overload:Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync
namespace: Azure.AI.AnomalyDetector
name: TrainMultivariateModelAsync
fullName: Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync
nameWithType: AnomalyDetectorClient.TrainMultivariateModelAsync
assembliesWithMoniker:
- value: Azure.AI.AnomalyDetector.dll
packagesWithMoniker:
- value: Azure.AI.AnomalyDetector v3.0.0-preview.7
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync
  api_location:
  - Azure.AI.AnomalyDetector.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.AnomalyDetector.AnomalyDetectorClient.TrainMultivariateModelAsync
  - Azure::AI::AnomalyDetector::AnomalyDetectorClient::TrainMultivariateModelAsync
  - TrainMultivariateModelAsync
  - AnomalyDetectorClient.TrainMultivariateModelAsync
  - AnomalyDetectorClient::TrainMultivariateModelAsync
  helpviewer_keywords:
  - AnomalyDetectorClient.TrainMultivariateModelAsync method [.NET]
  - TrainMultivariateModelAsync method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.TrainMultivariateModelAsync(ModelInfo, CancellationToken) method [.NET]
  - TrainMultivariateModelAsync(ModelInfo, CancellationToken) method [.NET], class AnomalyDetectorClient
  - AnomalyDetectorClient.TrainMultivariateModelAsync(RequestContent, RequestContext) method [.NET]
  - TrainMultivariateModelAsync(RequestContent, RequestContext) method [.NET], class AnomalyDetectorClient
  monikers:
  - azure-dotnet-preview
