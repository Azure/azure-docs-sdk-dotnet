### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Collections.Generic.IReadOnlyList`1?alt=System.Collections.Generic.IReadOnlyList&text=IReadOnlyList" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.Translation.Text.TranslatedTextItem?alt=Azure.AI.Translation.Text.TranslatedTextItem&text=TranslatedTextItem" data-throw-if-not-resolved="True"/>&gt;&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: targetLanguage
    description: >-
      Specifies the language of the output text. The target language must be one of the supported languages included

      in the translation scope. For example, use to=de to translate to German.

      It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.

      For example, use to=de&amp;to=it to translate to German and Italian.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: content
    description: Array of the text to be translated.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: sourceLanguage
    description: >-
      Specifies the language of the input text. Find which languages are available to translate from by

      looking up supported languages using the translation scope. If the from parameter isn't specified,

      automatic language detection is applied to determine the source language.


      You must use the from parameter rather than autodetection when using the dynamic dictionary feature.

      Note: the dynamic dictionary feature is case-sensitive.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">targetLanguage</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)
  commentId: M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)
  name: TranslateAsync(String, IEnumerable<String>, String, CancellationToken)
  fullName: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(String, IEnumerable<String>, String, CancellationToken)
  nameWithType: TextTranslationClient.TranslateAsync(String, IEnumerable<String>, String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>> TranslateAsync (string targetLanguage, System.Collections.Generic.IEnumerable<string> content, string sourceLanguage = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member TranslateAsync : string * seq<string> * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>>

        override this.TranslateAsync : string * seq<string> * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>>
  - lang: vb
    values:
    - value: Public Overridable Function TranslateAsync (targetLanguage As String, content As IEnumerable(Of String), Optional sourceLanguage As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))
  monikers:
  - azure-dotnet-preview
  summary: Translate Text.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Collections.Generic.IReadOnlyList`1?alt=System.Collections.Generic.IReadOnlyList&text=IReadOnlyList" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.Translation.Text.TranslatedTextItem?alt=Azure.AI.Translation.Text.TranslatedTextItem&text=TranslatedTextItem" data-throw-if-not-resolved="True"/>&gt;&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: targetLanguage
    description: >-
      Specifies the language of the output text. The target language must be one of the supported languages included

      in the translation scope. For example, use to=de to translate to German.

      It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.

      For example, use to=de&amp;to=it to translate to German and Italian.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: text
    description: Text to be translated.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: sourceLanguage
    description: >-
      Specifies the language of the input text. Find which languages are available to translate from by

      looking up supported languages using the translation scope. If the from parameter isn't specified,

      automatic language detection is applied to determine the source language.


      You must use the from parameter rather than autodetection when using the dynamic dictionary feature.

      Note: the dynamic dictionary feature is case-sensitive.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">targetLanguage</code> or <code data-dev-comment-type="paramref">text</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  name: TranslateAsync(String, String, String, CancellationToken)
  fullName: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(String, String, String, CancellationToken)
  nameWithType: TextTranslationClient.TranslateAsync(String, String, String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>> TranslateAsync (string targetLanguage, string text, string sourceLanguage = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member TranslateAsync : string * string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>>

        override this.TranslateAsync : string * string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>>
  - lang: vb
    values:
    - value: Public Overridable Function TranslateAsync (targetLanguage As String, text As String, Optional sourceLanguage As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))
  monikers:
  - azure-dotnet-preview
  summary: Translate Text.
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Collections.Generic.IReadOnlyList`1?alt=System.Collections.Generic.IReadOnlyList&text=IReadOnlyList" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.Translation.Text.TranslatedTextItem?alt=Azure.AI.Translation.Text.TranslatedTextItem&text=TranslatedTextItem" data-throw-if-not-resolved="True"/>&gt;&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: targetLanguages
    description: >-
      Specifies the language of the output text. The target language must be one of the supported languages included

      in the translation scope. For example, use to=de to translate to German.

      It's possible to translate to multiple languages simultaneously by repeating the parameter in the query string.

      For example, use to=de&amp;to=it to translate to German and Italian.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: content
    description: Array of the text to be translated.
    type: <xref href="System.Collections.Generic.IEnumerable`1?alt=System.Collections.Generic.IEnumerable&text=IEnumerable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: clientTraceId
    description: A client-generated GUID to uniquely identify the request.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: sourceLanguage
    description: >-
      Specifies the language of the input text. Find which languages are available to translate from by

      looking up supported languages using the translation scope. If the from parameter isn't specified,

      automatic language detection is applied to determine the source language.


      You must use the from parameter rather than autodetection when using the dynamic dictionary feature.

      Note: the dynamic dictionary feature is case-sensitive.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: textType
    description: >-
      Defines whether the text being translated is plain text or HTML text. Any HTML needs to be a well-formed,

      complete element. Possible values are: plain (default) or html.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.Translation.Text.TextType?alt=Azure.AI.Translation.Text.TextType&text=TextType" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: category
    description: >-
      A string specifying the category (domain) of the translation. This parameter is used to get translations

      from a customized system built with Custom Translator. Add the Category ID from your Custom Translator

      project details to this parameter to use your deployed customized system. Default value is: general.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: profanityAction
    description: >-
      Specifies how profanities should be treated in translations.

      Possible values are: NoAction (default), Marked or Deleted.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.Translation.Text.ProfanityAction?alt=Azure.AI.Translation.Text.ProfanityAction&text=ProfanityAction" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: profanityMarker
    description: >-
      Specifies how profanities should be marked in translations.

      Possible values are: Asterisk (default) or Tag.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.Translation.Text.ProfanityMarker?alt=Azure.AI.Translation.Text.ProfanityMarker&text=ProfanityMarker" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: includeAlignment
    description: >-
      Specifies whether to include alignment projection from source text to translated text.

      Possible values are: true or false (default).
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: includeSentenceLength
    description: >-
      Specifies whether to include sentence boundaries for the input text and the translated text.

      Possible values are: true or false (default).
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: suggestedFrom
    description: >-
      Specifies a fallback language if the language of the input text can't be identified.

      Language autodetection is applied when the from parameter is omitted. If detection fails,

      the suggestedFrom language will be assumed.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: fromScript
    description: Specifies the script of the input text.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: toScript
    description: Specifies the script of the translated text.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: allowFallback
    description: >-
      Specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.

      Possible values are: true (default) or false.


      allowFallback=false specifies that the translation should only use systems trained for the category specified

      by the request. If a translation for language X to language Y requires chaining through a pivot language E,

      then all the systems in the chain (X → E and E → Y) will need to be custom and have the same category.

      If no system is found with the specific category, the request will return a 400 status code. allowFallback=true

      specifies that the service is allowed to fall back to a general system when a custom system doesn't exist.
    type: <xref href="System.Nullable`1?alt=System.Nullable&text=Nullable" data-throw-if-not-resolved="True"/>&lt;<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">targetLanguages</code> or <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{Azure.AI.Translation.Text.TextType},System.String,System.Nullable{Azure.AI.Translation.Text.ProfanityAction},System.Nullable{Azure.AI.Translation.Text.ProfanityMarker},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  commentId: M:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Nullable{Azure.AI.Translation.Text.TextType},System.String,System.Nullable{Azure.AI.Translation.Text.ProfanityAction},System.Nullable{Azure.AI.Translation.Text.ProfanityMarker},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)
  name: >-
    TranslateAsync(IEnumerable<String>, IEnumerable<String>, String,

     String, Nullable<TextType>, String, Nullable<ProfanityAction>,

     Nullable<ProfanityMarker>, Nullable<Boolean>, Nullable<Boolean>,

     String, String, String, Nullable<Boolean>, CancellationToken)
  fullName: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync(IEnumerable<String>, IEnumerable<String>, String, String, Nullable<TextType>, String, Nullable<ProfanityAction>, Nullable<ProfanityMarker>, Nullable<Boolean>, Nullable<Boolean>, String, String, String, Nullable<Boolean>, CancellationToken)
  nameWithType: TextTranslationClient.TranslateAsync(IEnumerable<String>, IEnumerable<String>, String, String, Nullable<TextType>, String, Nullable<ProfanityAction>, Nullable<ProfanityMarker>, Nullable<Boolean>, Nullable<Boolean>, String, String, String, Nullable<Boolean>, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>> TranslateAsync (System.Collections.Generic.IEnumerable<string> targetLanguages, System.Collections.Generic.IEnumerable<string> content, string clientTraceId = default, string sourceLanguage = default, Azure.AI.Translation.Text.TextType? textType = default, string category = default, Azure.AI.Translation.Text.ProfanityAction? profanityAction = default, Azure.AI.Translation.Text.ProfanityMarker? profanityMarker = default, bool? includeAlignment = default, bool? includeSentenceLength = default, string suggestedFrom = default, string fromScript = default, string toScript = default, bool? allowFallback = default, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member TranslateAsync : seq<string> * seq<string> * string * string * Nullable<Azure.AI.Translation.Text.TextType> * string * Nullable<Azure.AI.Translation.Text.ProfanityAction> * Nullable<Azure.AI.Translation.Text.ProfanityMarker> * Nullable<bool> * Nullable<bool> * string * string * string * Nullable<bool> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>>

        override this.TranslateAsync : seq<string> * seq<string> * string * string * Nullable<Azure.AI.Translation.Text.TextType> * string * Nullable<Azure.AI.Translation.Text.ProfanityAction> * Nullable<Azure.AI.Translation.Text.ProfanityMarker> * Nullable<bool> * Nullable<bool> * string * string * string * Nullable<bool> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<System.Collections.Generic.IReadOnlyList<Azure.AI.Translation.Text.TranslatedTextItem>>>
  - lang: vb
    values:
    - value: Public Overridable Function TranslateAsync (targetLanguages As IEnumerable(Of String), content As IEnumerable(Of String), Optional clientTraceId As String = Nothing, Optional sourceLanguage As String = Nothing, Optional textType As Nullable(Of TextType) = Nothing, Optional category As String = Nothing, Optional profanityAction As Nullable(Of ProfanityAction) = Nothing, Optional profanityMarker As Nullable(Of ProfanityMarker) = Nothing, Optional includeAlignment As Nullable(Of Boolean) = Nothing, Optional includeSentenceLength As Nullable(Of Boolean) = Nothing, Optional suggestedFrom As String = Nothing, Optional fromScript As String = Nothing, Optional toScript As String = Nothing, Optional allowFallback As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of IReadOnlyList(Of TranslatedTextItem)))
  monikers:
  - azure-dotnet-preview
  summary: Translate Text.
  metadata: {}
uid: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync*
commentId: Overload:Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync
namespace: Azure.AI.Translation.Text
name: TranslateAsync
fullName: Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync
nameWithType: TextTranslationClient.TranslateAsync
assembliesWithMoniker:
- value: Azure.AI.Translation.Text.dll
packagesWithMoniker:
- value: Azure.AI.Translation.Text v1.0.0-beta.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync
  api_location:
  - Azure.AI.Translation.Text.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.Translation.Text.TextTranslationClient.TranslateAsync
  - Azure::AI::Translation::Text::TextTranslationClient::TranslateAsync
  - TranslateAsync
  - TextTranslationClient.TranslateAsync
  - TextTranslationClient::TranslateAsync
  helpviewer_keywords:
  - TextTranslationClient.TranslateAsync method [.NET]
  - TranslateAsync method [.NET], class TextTranslationClient
  - TextTranslationClient.TranslateAsync(String, IEnumerable<String>, String, CancellationToken) method [.NET]
  - TranslateAsync(String, IEnumerable<String>, String, CancellationToken) method [.NET], class TextTranslationClient
  - TextTranslationClient.TranslateAsync(String, String, String, CancellationToken) method [.NET]
  - TranslateAsync(String, String, String, CancellationToken) method [.NET], class TextTranslationClient
  - TextTranslationClient.TranslateAsync(IEnumerable<String>, IEnumerable<String>, String, String, Nullable<TextType>, String, Nullable<ProfanityAction>, Nullable<ProfanityMarker>, Nullable<Boolean>, Nullable<Boolean>, String, String, String, Nullable<Boolean>, CancellationToken) method [.NET]
  - TranslateAsync(IEnumerable<String>, IEnumerable<String>, String, String, Nullable<TextType>, String, Nullable<ProfanityAction>, Nullable<ProfanityMarker>, Nullable<Boolean>, Nullable<Boolean>, String, String, String, Nullable<Boolean>, CancellationToken) method [.NET], class TextTranslationClient
  monikers:
  - azure-dotnet-preview
