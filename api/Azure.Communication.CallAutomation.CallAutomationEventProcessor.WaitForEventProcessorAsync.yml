### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Communication.CallAutomation.CallAutomationEventBase?alt=Azure.Communication.CallAutomation.CallAutomationEventBase&text=CallAutomationEventBase" data-throw-if-not-resolved="True"/>&gt;
    description: Returns <xref data-throw-if-not-resolved="true" uid="Azure.Communication.CallAutomation.CallAutomationEventBase"></xref> once matching event arrives.
  parameters:
  - namesWithMoniker:
    - value: predicate
    description: Predicate for waiting on event.
    type: <xref href="System.Func`2?alt=System.Func&text=Func" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Communication.CallAutomation.CallAutomationEventBase?alt=Azure.Communication.CallAutomation.CallAutomationEventBase&text=CallAutomationEventBase" data-throw-if-not-resolved="True"/>,<xref href="System.Boolean?alt=System.Boolean&text=Boolean" data-throw-if-not-resolved="True"/>&gt;
  - namesWithMoniker:
    - value: cancellationToken
    description: Cancellation Token can be used to set timeout or cancel this WaitForEventProcessor.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync(System.Func{Azure.Communication.CallAutomation.CallAutomationEventBase,System.Boolean},System.Threading.CancellationToken)
  commentId: M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync(System.Func{Azure.Communication.CallAutomation.CallAutomationEventBase,System.Boolean},System.Threading.CancellationToken)
  name: WaitForEventProcessorAsync(Func<CallAutomationEventBase,Boolean>, CancellationToken)
  fullName: Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync(Func<CallAutomationEventBase,Boolean>, CancellationToken)
  nameWithType: CallAutomationEventProcessor.WaitForEventProcessorAsync(Func<CallAutomationEventBase,Boolean>, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public System.Threading.Tasks.Task<Azure.Communication.CallAutomation.CallAutomationEventBase> WaitForEventProcessorAsync (Func<Azure.Communication.CallAutomation.CallAutomationEventBase,bool> predicate, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: 'member this.WaitForEventProcessorAsync : Func<Azure.Communication.CallAutomation.CallAutomationEventBase, bool> * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Communication.CallAutomation.CallAutomationEventBase>'
  - lang: vb
    values:
    - value: Public Function WaitForEventProcessorAsync (predicate As Func(Of CallAutomationEventBase, Boolean), Optional cancellationToken As CancellationToken = Nothing) As Task(Of CallAutomationEventBase)
  monikers:
  - azure-dotnet
  summary: Wait for matching incoming event. Returns the <xref data-throw-if-not-resolved="true" uid="Azure.Communication.CallAutomation.CallAutomationEventBase"></xref> once it arrives in ProcessEvent method.
  metadata: {}
- typeParameters:
  - description: Matching event type.
    name: TEvent
  returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;TEvent&gt;
    description: Returns the event once matching event arrives.
  parameters:
  - namesWithMoniker:
    - value: connectionId
    description: CallConnectionId of the call.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: operationContext
    description: OperationContext of the method.
    type: <xref href="System.String?alt=System.String&text=String" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: Cancellation Token can be used to set timeout or cancel this WaitForEventProcessor.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync``1(System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync``1(System.String,System.String,System.Threading.CancellationToken)
  name: WaitForEventProcessorAsync<TEvent>(String, String, CancellationToken)
  fullName: Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync<TEvent>(String, String, CancellationToken)
  nameWithType: CallAutomationEventProcessor.WaitForEventProcessorAsync<TEvent>(String, String, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: 'public System.Threading.Tasks.Task<TEvent> WaitForEventProcessorAsync<TEvent> (string connectionId = default, string operationContext = default, System.Threading.CancellationToken cancellationToken = default) where TEvent : Azure.Communication.CallAutomation.CallAutomationEventBase;'
  - lang: fsharp
    values:
    - value: "member this.WaitForEventProcessorAsync : string * string * System.Threading.CancellationToken -> System.Threading.Tasks.Task<'Event (requires 'Event :> Azure.Communication.CallAutomation.CallAutomationEventBase)> (requires 'Event :> Azure.Communication.CallAutomation.CallAutomationEventBase)"
  - lang: vb
    values:
    - value: Public Function WaitForEventProcessorAsync(Of TEvent As CallAutomationEventBase) (Optional connectionId As String = Nothing, Optional operationContext As String = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TEvent)
  monikers:
  - azure-dotnet
  summary: Wait for matching incoming event. Returns the <xref data-throw-if-not-resolved="true" uid="Azure.Communication.CallAutomation.CallAutomationEventBase"></xref> once it arrives in ProcessEvent method.
  metadata: {}
uid: Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync*
commentId: Overload:Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync
namespace: Azure.Communication.CallAutomation
name: WaitForEventProcessorAsync
fullName: Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync
nameWithType: CallAutomationEventProcessor.WaitForEventProcessorAsync
assembliesWithMoniker:
- value: Azure.Communication.CallAutomation.dll
packagesWithMoniker:
- value: Azure.Communication.CallAutomation v1.0.0
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet
metadata:
  api_name:
  - Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync
  api_location:
  - Azure.Communication.CallAutomation.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync
  - Azure::Communication::CallAutomation::CallAutomationEventProcessor::WaitForEventProcessorAsync
  - WaitForEventProcessorAsync
  - CallAutomationEventProcessor.WaitForEventProcessorAsync
  - CallAutomationEventProcessor::WaitForEventProcessorAsync
  - Azure.Communication.CallAutomation.CallAutomationEventProcessor.WaitForEventProcessorAsync``1
  - Azure::Communication::CallAutomation::CallAutomationEventProcessor::WaitForEventProcessorAsync``1
  - WaitForEventProcessorAsync``1
  - CallAutomationEventProcessor.WaitForEventProcessorAsync``1
  - CallAutomationEventProcessor::WaitForEventProcessorAsync``1
  helpviewer_keywords:
  - CallAutomationEventProcessor.WaitForEventProcessorAsync method [.NET]
  - WaitForEventProcessorAsync method [.NET], class CallAutomationEventProcessor
  - CallAutomationEventProcessor.WaitForEventProcessorAsync(Func<CallAutomationEventBase,Boolean>, CancellationToken) method [.NET]
  - WaitForEventProcessorAsync(Func<CallAutomationEventBase,Boolean>, CancellationToken) method [.NET], class CallAutomationEventProcessor
  - CallAutomationEventProcessor.WaitForEventProcessorAsync<TEvent>(String, String, CancellationToken) method [.NET]
  - WaitForEventProcessorAsync<TEvent>(String, String, CancellationToken) method [.NET], class CallAutomationEventProcessor
  monikers:
  - azure-dotnet
