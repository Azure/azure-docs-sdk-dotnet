### YamlMime:NetMember
type: method
members:
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response`1?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.AI.ContentSafety.AnalyzeTextResult?alt=Azure.AI.ContentSafety.AnalyzeTextResult&text=AnalyzeTextResult" data-throw-if-not-resolved="True"/>&gt;&gt;
  parameters:
  - namesWithMoniker:
    - value: body
    description: The request of text analysis.
    type: <xref href="Azure.AI.ContentSafety.AnalyzeTextOptions?alt=Azure.AI.ContentSafety.AnalyzeTextOptions&text=AnalyzeTextOptions" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: cancellationToken
    description: The cancellation token to use.
    type: <xref href="System.Threading.CancellationToken?alt=System.Threading.CancellationToken&text=CancellationToken" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">body</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)
  commentId: M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)
  name: AnalyzeTextAsync(AnalyzeTextOptions, CancellationToken)
  fullName: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(AnalyzeTextOptions, CancellationToken)
  nameWithType: ContentSafetyClient.AnalyzeTextAsync(AnalyzeTextOptions, CancellationToken)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response<Azure.AI.ContentSafety.AnalyzeTextResult>> AnalyzeTextAsync (Azure.AI.ContentSafety.AnalyzeTextOptions body, System.Threading.CancellationToken cancellationToken = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member AnalyzeTextAsync : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.ContentSafety.AnalyzeTextResult>>

        override this.AnalyzeTextAsync : Azure.AI.ContentSafety.AnalyzeTextOptions * System.Threading.CancellationToken -> System.Threading.Tasks.Task<Azure.Response<Azure.AI.ContentSafety.AnalyzeTextResult>>
  - lang: vb
    values:
    - value: Public Overridable Function AnalyzeTextAsync (body As AnalyzeTextOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeTextResult))
  monikers:
  - azure-dotnet-preview
  summary: Analyze Text.
  remarks: 'A sync API for harmful content analysis for text. Currently, we support four categories: Hate, SelfHarm, Sexual, Violence.'
  examples: >-
    This sample shows how to call AnalyzeTextAsync with required parameters.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ContentSafetyClient(endpoint, credential);


    var body = new AnalyzeTextOptions("<text>")

    {
        Categories = 
    {
            TextCategory.Hate
        },
        BlocklistNames = 
    {
            "<null>"
        },
        BreakByBlocklists = true,
    };

    var result = await client.AnalyzeTextAsync(body);

    ```
  metadata: {}
- returnsWithMoniker:
    type:
    - value: <xref href="System.Threading.Tasks.Task`1?alt=System.Threading.Tasks.Task&text=Task" data-throw-if-not-resolved="True"/>&lt;<xref href="Azure.Response?alt=Azure.Response&text=Response" data-throw-if-not-resolved="True"/>&gt;
    description: The response returned from the service.
  parameters:
  - namesWithMoniker:
    - value: content
    description: The content to send as the body of the request.
    type: <xref href="Azure.Core.RequestContent?alt=Azure.Core.RequestContent&text=RequestContent" data-throw-if-not-resolved="True"/>
  - namesWithMoniker:
    - value: context
    description: The request context, which can override default behaviors of the client pipeline on a per-call basis.
    type: <xref href="Azure.RequestContext?alt=Azure.RequestContext&text=RequestContext" data-throw-if-not-resolved="True"/>
  exceptions:
  - description: <code data-dev-comment-type="paramref">content</code> is null.
    type: <xref href="System.ArgumentNullException" data-throw-if-not-resolved="True"/>
  - description: Service returned a non-success status code.
    type: <xref href="Azure.RequestFailedException?alt=Azure.RequestFailedException&text=RequestFailedException" data-throw-if-not-resolved="True"/>
  type: method
  uid: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.Core.RequestContent,Azure.RequestContext)
  commentId: M:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.Core.RequestContent,Azure.RequestContext)
  name: AnalyzeTextAsync(RequestContent, RequestContext)
  fullName: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(RequestContent, RequestContext)
  nameWithType: ContentSafetyClient.AnalyzeTextAsync(RequestContent, RequestContext)
  syntaxWithMoniker:
  - lang: csharp
    values:
    - value: public virtual System.Threading.Tasks.Task<Azure.Response> AnalyzeTextAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);
  - lang: fsharp
    values:
    - value: >-
        abstract member AnalyzeTextAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>

        override this.AnalyzeTextAsync : Azure.Core.RequestContent * Azure.RequestContext -> System.Threading.Tasks.Task<Azure.Response>
  - lang: vb
    values:
    - value: Public Overridable Function AnalyzeTextAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)
  monikers:
  - azure-dotnet-preview
  summary: >-
    [Protocol Method] Analyze Text

    <ul><li>

    This <a href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</a> allows explicit creation of the request and processing of the response for advanced scenarios.

    </li><li>

    Please try the simpler <xref data-throw-if-not-resolved="true" uid="Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync(Azure.AI.ContentSafety.AnalyzeTextOptions,System.Threading.CancellationToken)"></xref> convenience overload with strongly typed models first.

    </li></ul>
  examples: >-
    This sample shows how to call AnalyzeTextAsync with required request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ContentSafetyClient(endpoint, credential);


    var data = new {
        text = "<text>",
    };


    Response response = await client.AnalyzeTextAsync(RequestContent.Create(data));


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.ToString());

    ```

    This sample shows how to call AnalyzeTextAsync with all request content, and how to parse the result.


    ```

    var credential = new AzureKeyCredential("<key>");

    var endpoint = new Uri("<https://my-service.azure.com>");

    var client = new ContentSafetyClient(endpoint, credential);


    var data = new {
        text = "<text>",
        categories = new[] {
            "Hate"
        },
        blocklistNames = new[] {
            "<String>"
        },
        breakByBlocklists = true,
    };


    Response response = await client.AnalyzeTextAsync(RequestContent.Create(data), new RequestContext());


    JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;

    Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blocklistName").ToString());

    Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemId").ToString());

    Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("blockItemText").ToString());

    Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("offset").ToString());

    Console.WriteLine(result.GetProperty("blocklistsMatchResults")[0].GetProperty("length").ToString());

    Console.WriteLine(result.GetProperty("hateResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("hateResult").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("selfHarmResult").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("sexualResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("sexualResult").GetProperty("severity").ToString());

    Console.WriteLine(result.GetProperty("violenceResult").GetProperty("category").ToString());

    Console.WriteLine(result.GetProperty("violenceResult").GetProperty("severity").ToString());

    ```
  metadata: {}
uid: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync*
commentId: Overload:Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync
namespace: Azure.AI.ContentSafety
name: AnalyzeTextAsync
fullName: Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync
nameWithType: ContentSafetyClient.AnalyzeTextAsync
assembliesWithMoniker:
- value: Azure.AI.ContentSafety.dll
packagesWithMoniker:
- value: Azure.AI.ContentSafety v1.0.0-beta.1
devLangs:
- csharp
- vb
- fsharp
monikers:
- azure-dotnet-preview
metadata:
  api_name:
  - Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync
  api_location:
  - Azure.AI.ContentSafety.dll
  topic_type:
  - apiref
  api_type:
  - Assembly
  f1_keywords:
  - Azure.AI.ContentSafety.ContentSafetyClient.AnalyzeTextAsync
  - Azure::AI::ContentSafety::ContentSafetyClient::AnalyzeTextAsync
  - AnalyzeTextAsync
  - ContentSafetyClient.AnalyzeTextAsync
  - ContentSafetyClient::AnalyzeTextAsync
  helpviewer_keywords:
  - ContentSafetyClient.AnalyzeTextAsync method [.NET]
  - AnalyzeTextAsync method [.NET], class ContentSafetyClient
  - ContentSafetyClient.AnalyzeTextAsync(AnalyzeTextOptions, CancellationToken) method [.NET]
  - AnalyzeTextAsync(AnalyzeTextOptions, CancellationToken) method [.NET], class ContentSafetyClient
  - ContentSafetyClient.AnalyzeTextAsync(RequestContent, RequestContext) method [.NET]
  - AnalyzeTextAsync(RequestContent, RequestContext) method [.NET], class ContentSafetyClient
  monikers:
  - azure-dotnet-preview
